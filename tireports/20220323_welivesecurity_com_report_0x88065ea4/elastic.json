[
    {
        "report": {
            "id": "report_0x88065ea4",
            "date": "20220324",
            "title": "Mustang Pandas Hodur: Old tricks, new Korplug variant",
            "url": "https://www.welivesecurity.com/2022/03/23/mustang-panda-hodur-old-tricks-new-korplug-variant"
        },
        "chapter": {
            "id": "chapter_0x9ba93658",
            "title": "Mustang Pandas Hodur: Old tricks, new Korplug variant",
            "text": "Share\nESET researchers have discovered Hodur, a previously undocumented Korplug variant spread by Mustang Panda, that uses phishing lures referencing current events in Europe, including the invasion of Ukraine\nESET researchers discovered a still-ongoing campaign using a previously undocumented Korplug variant, which they named Hodur due to its resemblance to the THOR variant previously documented by Unit 42 in 2020. In Norse mythology, Hodur is Thors blind half-brother, who is tricked by Loki into killing their half-brother Baldr.\nKey findings in this blogpost:\nAs of March 2022, this campaign is still ongoing and goes back to at least August 2021.\nKnown victims include research entities, internet service providers, and European diplomatic missions.\nThe compromise chain includes decoy documents that are frequently updated and relate to events in Europe.\nThe campaign uses a custom loader to execute a new Korplug variant.\nEvery stage of the deployment process utilizes anti-analysis techniques and control-flow obfuscation, which sets it apart from other campaigns.\nESET researchers provide an in-depth analysis of the capabilities and commands of this new variant.\nVictims of this campaign are likely lured with phishing documents abusing the latest events in Europe such as Russias invasion of Ukraine. This resulted in more than three million residents fleeing the war to neighboring countries, leading to an unprecedented crisis on Ukraines borders. One of the filenames related to this campaign is Situation at the EU borders with Ukraine.exe.\nOther phishing lures mention updated COVID-19 travel restrictions, an approved regional aid map for Greece, and a Regulation of the European Parliament and of the Council. The last one is a real document available on the European Councils website. This shows that the APT group behind this campaign is following current affairs and is able to successfully and swiftly react to them.\nFigure 1. Countries affected by Mustang Panda in this campaign"
        }
    },
    {
        "report": {
            "id": "report_0x88065ea4",
            "date": "20220324",
            "title": "Mustang Pandas Hodur: Old tricks, new Korplug variant",
            "url": "https://www.welivesecurity.com/2022/03/23/mustang-panda-hodur-old-tricks-new-korplug-variant"
        },
        "chapter": {
            "id": "chapter_0x9ac0b0da",
            "title": "Affected countries:",
            "text": "Mongolia\nVietnam\nMyanmar\nGreece\nRussia\nCyprus\nSouth Sudan\nSouth Africa"
        }
    },
    {
        "report": {
            "id": "report_0x88065ea4",
            "date": "20220324",
            "title": "Mustang Pandas Hodur: Old tricks, new Korplug variant",
            "url": "https://www.welivesecurity.com/2022/03/23/mustang-panda-hodur-old-tricks-new-korplug-variant"
        },
        "chapter": {
            "id": "chapter_0x9ed110cc",
            "title": "Affected verticals:",
            "text": "Diplomatic missions\nResearch entities\nInternet service providers (ISP)"
        }
    },
    {
        "report": {
            "id": "report_0x88065ea4",
            "date": "20220324",
            "title": "Mustang Pandas Hodur: Old tricks, new Korplug variant",
            "url": "https://www.welivesecurity.com/2022/03/23/mustang-panda-hodur-old-tricks-new-korplug-variant"
        },
        "chapter": {
            "id": "chapter_0x6cc5e6ea",
            "title": "Analysis",
            "text": "Based on code similarities and the many commonalities in Tactics, Techniques, and Procedures (TTPs), ESET researchers attribute this campaign with high confidence to Mustang Panda (also known as TA416, RedDelta, or PKPLUG). It is a cyberespionage group mainly targeting governmental entities and NGOs. Its victims are mostly, but not exclusively, located in East and Southeast Asia with a focus on Mongolia. The group is also known for its campaign targeting the Vatican in 2020.\nWhile we havent been able to identify the verticals of all victims, this campaign seems to have the same targeting objectives as other Mustang Panda campaigns. Following the APTs typical victimology, most victims are located in East and Southeast Asia, along with some in European and African countries. According to ESET telemetry, the vast majority of targets are located in Mongolia and Vietnam, followed by Myanmar, with only a few in the other affected countries.\nMustang Pandas campaigns frequently use custom loaders for shared malware including Cobalt Strike, Poison Ivy, and Korplug (also known as PlugX). The group has also been known to create its own Korplug variants. Compared to other campaigns using Korplug, every stage of the deployment process utilizes anti-analysis techniques and control-flow obfuscation.\nThis blogpost contains a detailed analysis of this previously unseen Korplug variant used in this campaign. This activity is part of the same campaign recently covered by Proofpoint, but we provide additional historical and targeting information."
        }
    },
    {
        "report": {
            "id": "report_0x88065ea4",
            "date": "20220324",
            "title": "Mustang Pandas Hodur: Old tricks, new Korplug variant",
            "url": "https://www.welivesecurity.com/2022/03/23/mustang-panda-hodur-old-tricks-new-korplug-variant"
        },
        "chapter": {
            "id": "chapter_0xef83199c",
            "title": "Toolset",
            "text": "Mustang Panda is known for its elaborate custom loaders and Korplug variants, and the samples used in this campaign showcase this perfectly.\nCompromise chains seen in this campaign follow the typical Korplug pattern: a legitimate, validly signed, executable vulnerable to DLL search-order hijacking, a malicious DLL, and an encrypted Korplug file are deployed on the target machine. The executable is abused to load the module, which then decrypts and executes the Korplug RAT. In some cases, a downloader is used first to deploy these files along with a decoy document. This process is illustrated in Figure 2.\nFigure 2. Overview of the deployment process for the Hodur Korplug variant.\nWhat sets this campaign apart is the heavy use of control-flow obfuscation and anti-analysis techniques at every stage of the deployment process. The following sections describe the behavior of each stage and take a deeper look at the defense evasion techniques used in each of them."
        }
    },
    {
        "report": {
            "id": "report_0x88065ea4",
            "date": "20220324",
            "title": "Mustang Pandas Hodur: Old tricks, new Korplug variant",
            "url": "https://www.welivesecurity.com/2022/03/23/mustang-panda-hodur-old-tricks-new-korplug-variant"
        },
        "chapter": {
            "id": "chapter_0x5fd6abf5",
            "title": "Initial access",
            "text": "We havent been able to observe the initial deployment vector, but our analysis points to phishing and watering hole attacks as likely vectors. In instances where we saw a downloader, the filenames used suggest a document with an interesting subject for the target. Such examples include:\nCOVID-19 travel restrictions EU reviews list of third countries.exe\nState_aid__Commission_approves_2022-2027_regional_aid_map_for_Greece.exe\nREGULATION OF THE EUROPEAN PARLIAMENT AND OF THE COUNCIL.exe\nSituation at the EU borders with Ukraine.exe\nTo further the illusion, these binaries download and open a document that has the same name but with a .doc or .pdf extension. The contents of these decoys accurately reflect the filename. As shown in Figure 3, at least one of them is a publicly accessible legitimate document from the European Parliament.\nFigure 3. First page of the decoy document for the REGULATION OF THE EUROPEAN PARLIAMENT AND OF THE COUNCIL.exe downloader. Its a real document available on the European Councils website."
        }
    },
    {
        "report": {
            "id": "report_0x88065ea4",
            "date": "20220324",
            "title": "Mustang Pandas Hodur: Old tricks, new Korplug variant",
            "url": "https://www.welivesecurity.com/2022/03/23/mustang-panda-hodur-old-tricks-new-korplug-variant"
        },
        "chapter": {
            "id": "chapter_0x19bae734",
            "title": "Downloader",
            "text": "Although its complexity has increased over the course of the campaign, the downloader is fairly straightforward. This increase in complexity comes from additional anti-analysis techniques, which we cover later in this section.\nIt first downloads four files over HTTPS: a decoy document, a legitimate executable, a malicious module and an encrypted Korplug file. The combination of those last three components to execute a payload via DLL side-loading is sometimes referred to as a trident and is a technique commonly used by Mustang Panda, and with Korplug loaders in general. Both the server addresses and file paths are hardcoded in the downloader executable. Once everything is downloaded, and the decoy document opened to distract the victim, the downloader uses the following command line to launch the legitimate executable:\ncmd /c ping 8.8.8.8 -n 70&&%temp%\\<legitimate executable>\nThis ping command both checks internet connectivity and introduces a delay (through the -n 70 option) before executing the downloaded, legitimate executable.\nThe downloader uses multiple anti-analysis techniques, many of which are also used in the loader and final payload. Additional obfuscation has been added to new versions over the course of the campaign without otherwise changing their goal.\nIn early versions of the downloader, junk code and opaque predicates were used to hinder analysis, as shown in Figure 4, but the server and filenames are plainly visible in cleartext.\nFigure 4. Control flow obfuscation in early versions of the downloader\nIn later versions, the files on the server are RC4 encrypted, using the base 10 string representation of the file size as the key, and then hex-encoded. This process is illustrated in the Python snippet below. The opposite operations are performed client-side by the downloader to recover the plaintext files. This is likely done to bypass network-level protections.\nfrom Crypto.cipher import ARC4\nkey = %d % len(plaintext)\nrc4 = ARC4.new(key)\ncipher_content = rc4.encrypt(plaintext).hex().upper()\nThese versions replace the use of cleartext strings with encrypted stack strings. They are still hardcoded in the file, but the obfuscation surrounding them, and the use of different keys, makes it hard to decrypt them statically in an automated manner. This same technique is used heavily in the subsequent stages. Encrypted stack strings are also used to obfuscate calls to Windows API functions.\nFirst, the name of the target function is decrypted and passed to a function. This function obtains a pointer to the InMemoryOrderModuleList field of the PEB (Process Environment Block). It then iterates over the loaded modules, passing each handle to GetProcAddress along with the function name until the target function is successfully resolved. Part of this process can be seen in Figure 5.\nFigure 5. Obfuscation of Windows API calls in the downloader. The screenshot shows a call to WriteFile, but the same pattern is used for all API functions."
        }
    },
    {
        "report": {
            "id": "report_0x88065ea4",
            "date": "20220324",
            "title": "Mustang Pandas Hodur: Old tricks, new Korplug variant",
            "url": "https://www.welivesecurity.com/2022/03/23/mustang-panda-hodur-old-tricks-new-korplug-variant"
        },
        "chapter": {
            "id": "chapter_0xeb1559f1",
            "title": "Loader",
            "text": "As is common with Korplug, the loader is a DLL that exploits a side-loading vulnerability in a legitimate, signed executable. We have observed many different applications being abused in this campaign, for instance a vulnerable SmadAV executable previously seen by Qurium in a campaign attributed to Mustang Panda that targeted Myanmar.\nThe loader exports multiple functions. The exact list varies depending on the abused application, but in all cases, only one of them does anything of consequence. In all of the loaders we observed, this is the exported function with the highest load address. All the other exports, and the librarys entry point, either return immediately or execute some do-nothing junk code. Many of these exports have names that consist of random lowercase letters and point to the same address as shown in Table 1.\nTable 1. Functions exported by a Hodur loader. The createSystemFontsUsingEDL export is the one that loads the final malware stage in this version.\nThe loader function obtains the directory from which the DLL is running using GetModuleFileNameA and tries to open the encrypted Korplug file it contains. That filename is hardcoded in the loader. It reads the files contents into a locally allocated buffer and decrypts it. The loader makes this buffer executable using VirtualProtect before calling into it at offset 0x00.\nWindows API function calls are obfuscated with a different technique than that used in the downloader. Unlike the loader, which contains the names of its functions (as shown in Table 1 above), only the 64-bit hashes of the Windows API function calls are present in the binary. To resolve those functions, the loader traverses the export lists of all loaded libraries via the InMemoryOrderModuleList of the PEB. Each exports name is hashed, then compared to the expected value. The FNV-1a hash algorithm, recently brought back into the mainstream by the Sunburst backdoor, has previously been used by Mustang Panda, in Korplug loaders documented by XORHEX, to resolve GetProcAddress and LoadLibraryA, although it was not identified by name in that analysis. In this version, however, it is used for all API functions.",
            "table": "Name;Ordinal;Function RVA\nCreatePotPlayerExW;1;0x00007894\nRunPotPlayer;2;0x000166A5\ncreateSystemFontsUsingEDL;3;0x00016779\ngGegcerhwyvxtkrtyawvugo;4;0x00007894\nliucigvyworf;5;0x00007639\nojohjinbgdfqtcwxojeusoneslciyxtiyjuieaugadjpd;6;0x000077CA\nsoeevhiywsypipesxfhgxboleahfwvlqcqp;7;0x00007894\nsrkeqffanuhiuwahbmatdurggpffhbkcpukyxgxmosn;8;0x00007894\nthggvmrv;9;0x00007701\n"
        }
    },
    {
        "report": {
            "id": "report_0x88065ea4",
            "date": "20220324",
            "title": "Mustang Pandas Hodur: Old tricks, new Korplug variant",
            "url": "https://www.welivesecurity.com/2022/03/23/mustang-panda-hodur-old-tricks-new-korplug-variant"
        },
        "chapter": {
            "id": "chapter_0xdbfd3aef",
            "title": "Korplug backdoor",
            "text": "Korplug (also known as PlugX) is a RAT used by multiple APT groups. In spite of it being so widely used, or perhaps because of it, few reports extensively describe its commands and the data it exfiltrates. Its functionality is not constant between variants, but there does seem to exist a significant overlap in the list of commands between the version we analyzed and other sources such as the Avira report from January 2020 and the plugxdecoder project on GitHub.\nAs previously mentioned, the variant used in this campaign bears many similarities to the THOR variant, which is why we have named it Hodur. The similarities include the use of the Software\\CLASSES\\ms-pu registry key, the same format for C&C servers in the configuration, and use of the Static window class.\nAs expected for Korplug payloads, this stage is only ever decrypted in memory by the loader. Only the encrypted version is written to disk in a file with a .dat extension.\nUnless stated otherwise, all hardcoded strings discussed in this section are stored as encrypted stack strings.\nIn this module, Windows API functions are obfuscated through a combination of the methods used in previous stages. LoadLibraryA and GetProcAddress are resolved via the FNV-1a hashing technique and stack strings are decrypted and passed to them to obtain the target function."
        }
    },
    {
        "report": {
            "id": "report_0x88065ea4",
            "date": "20220324",
            "title": "Mustang Pandas Hodur: Old tricks, new Korplug variant",
            "url": "https://www.welivesecurity.com/2022/03/23/mustang-panda-hodur-old-tricks-new-korplug-variant"
        },
        "chapter": {
            "id": "chapter_0x4b6e41fc",
            "title": "Loading",
            "text": "Once decrypted, the payload is a valid DLL that exports a single function. In almost all observed samples from this campaign, this function is named StartProtect. However, launching it directly via this export or its entry point will not execute the main payload and the loading process is quite intricate.\nAs explained in the previous section, the file is decrypted in memory as a continuous blob by the loader and the execution starts at offset 0x00. The PE header contains shellcode, shown in Figure 6, that calls a specific offset that corresponds to the modules single export.\nFigure 6. Shellcode in the PE header that calls the exported function\nThis function parses the PE blob in memory and manually maps it as a library into a newly allocated buffer. This includes mapping the various sections, resolving imports and, finally, using DLL_PROCESS_ATTACH to call the DLL entry point. Once again, opaque predicates and junk code are used to obfuscate the purpose of this function.\nThe entry point of the properly loaded library is then called with the non-standard value of 0x04 for the fdwReason parameter (only values from 0x00 to 0x03 are currently defined). This special value is required to get it to execute its main payload. This simple check prevents the RAT from being trivially executed directly with a generic tool like rundll32.exe.\nThe backdoor first decrypts its configuration using the string 123456789 as a repeating XOR key. Once decrypted, the configuration block starts with ########. The layout of the configuration varies slightly between samples, but they all contain at least the following fields:\nInstallation directory name. Also used as the name of the registry key created for persistence. This value roughly corresponds to the name of the abused application with three random letters appended (e.g., FontEDLZeP or AdobePhotosGQp)\nMutex name\nA value that is either a version or ID string\nList of C&C servers. Each entry includes IP address, port number, and a number indicating the protocol to use with that C&C\nThe backdoor then checks the path from which it is running using GetModuleFileNameW. If this matches %userprofile%\\<installation directory> or %allusersprofile%\\<installation directory>, the RAT functionality will be executed. Otherwise, it will go through the installation process."
        }
    },
    {
        "report": {
            "id": "report_0x88065ea4",
            "date": "20220324",
            "title": "Mustang Pandas Hodur: Old tricks, new Korplug variant",
            "url": "https://www.welivesecurity.com/2022/03/23/mustang-panda-hodur-old-tricks-new-korplug-variant"
        },
        "chapter": {
            "id": "chapter_0x2e359891",
            "title": "Installation",
            "text": "To install itself, the malware creates the aforementioned directory under %allusersprofile%. Using SetFileAttributesW, it is then marked as hidden and system. The vulnerable executable, loader module, and encrypted Korplug files are copied to the new directory.\nNext, persistence is established. Earlier samples achieved this by creating a scheduled task to be run at boot via schtasks.exe. Newer samples add a registry entry to Software\\Microsoft\\Windows\\CurrentVersion\\Run, trying the HKLM hive first, then HKCU. This entry has the same name as the installation directory with its value set to the newly copied executables path.\nOnce persistence has been set up, the malware launches the executable from its new location and exits."
        }
    },
    {
        "report": {
            "id": "report_0x88065ea4",
            "date": "20220324",
            "title": "Mustang Pandas Hodur: Old tricks, new Korplug variant",
            "url": "https://www.welivesecurity.com/2022/03/23/mustang-panda-hodur-old-tricks-new-korplug-variant"
        },
        "chapter": {
            "id": "chapter_0x2f4fb0f3",
            "title": "RAT",
            "text": "The RAT functionality of the Hodur variant used in this campaign mostly lines up with other Korplug variants, with some additional commands and characteristics. As we have previously stated, though, detailed analyses of Korplug commands are few and far between, so we aim to provide such an analysis in the hopes of aiding future analysts.\nWhen in this mode, the backdoor iterates through the list of C&C servers in its configuration until it reaches the end or receives an Uninstall command. For each of those servers, it processes commands until it receives a Stop command or encounters an error.\nHodurs initial handshake can be done over HTTPS or TCP. This is determined by a value in the configuration for that particular C&C server. Subsequent communication is always done over TCP using a custom protocol that we describe in this section, along with the commands that can be issued. Hodur uses sockets from the Windows Sockets API (Winsock) that support overlapped I/O.\nFollowing the initial handshake, Hodurs communications involve TCP messages that consist of a header, with the structure described in Table 2, followed by a message body that is usually compressed using LZNT1 and always encrypted with RC4. Messages whose Command number header field have the 0x10000000 bit set (those that contain file contents for the ReadFile and WriteFile commands, described in Table 3) have encrypted but not compressed message bodies. All encrypted message bodies use the hardcoded key sV!e@T#L$PH% with a four-byte random nonce (the value at offset 0x00 in the header) appended to it.\nTable 2. Header format used for communication between the C&C and the backdoor\nHodurs C&C message headers are transmitted in the clear, followed by variably sized (the value at offset 0x08 of the header) message bodies. The format of the message body varies per command, but once decrypted and decompressed, values of variable length (like strings) are always at a message bodys end and their offset in the body is stored as an integer in the corresponding message field.\nLike the version described by Avira, Hodur has two groups of commands 0x1001 and 0x1002 each with its own handler. The C&C server can set which group to listen for by sending the corresponding ID as the command number when a client is not already in one of the two modes. It will continue to listen for the same group until it receives the Stop command, or an error occurs (including receiving a message with an invalid Command number in its header).\nThe first group, 0x1001, contains commands for managing the execution of the backdoor and doing initial reconnaissance on a newly compromised host. As these commands take no arguments, messages sent by the C&C server consist only of the headers. Table 3 contains a list of these commands. The GetSystemInfo command is described in more detail below. Note that no command names are present in the RAT; they were either taken from previous analyses or provided by us.\nTable 3. Commands in group 0x1001\nThe GetSystemInfo command collects extensive information about the system, as detailed in Table 4. If it doesnt already exist, the Software\\CLASSES\\ms-pu\\CLSID registry key is set to the current timestamp, trying HKLM first then HKCU. The value of this key is then sent in the response.\nTable 4. Response body format for the GetSystemInfo response\nThe 0x1002 group contains commands that provide RAT functionality, as detailed in Table 5. Some of these take parameters provided in the commands message body. The FindFiles command is described in more detail below. Again, note that no command names are present in the RAT; they were either taken from previous analyses or provided by us.\nTable 5. Commands in group 0x1002",
            "table": "ID;Name;Description;Data in C&C request;Data in client response\n0x1002;Ping;Sent by the client when it starts listening for commands from this group.;;None\n0x3000;ListDrives;List all mapped drives (A: to Z:) and their properties. All 26 entries are sent back in one message body. Drives that aren\u2019t present have all fields set to 0x00.;None;\u00b7 Drive type \u00b7 Total size \u00b7 Space available to user \u00b7 Free space \u00b7 Volume name (offset) \u00b7 File system name (offset)\n0x3001;ListDirectory;List the contents of the specified directory. The client sends one response message per entry.;Directory path;\u00b7 Is a directory? \u00b7 File attributes \u00b7 File size \u00b7 Creation time \u00b7 Last write time \u00b7 Filename (offset) \u00b7 8.3 filename (offset)\n0x3002;ListDirectory;Sent by the client when it has finished executing the ListDirectory command.;;None\n0x3004;ReadFile;Read a file in chunks of 0x4000 bytes.;\u00b7 Creation time \u00b7 Last access time \u00b7 Last write time \u00b7 Has offset \u00b7 Offset in file \u00b7 File size \u00b7 File path;\n0x10003005;ReadFile;Chunk of read file data.;;Read data\n0x10003006;ReadFile;Sent by the client when it has finished executing the ReadFile command.;;None\n0x3007;WriteFile;Write to a file and restore previous timestamp. Creates parent directories if they don\u2019t exist.;\u00b7 Creation time \u00b7 Last access time \u00b7 Last write time \u00b7 Has offset \u00b7 Offset in file \u00b7 File path (offset);None\n0x10003008;WriteFile;Sent by the server with data to write to the file.;Data to write;\n0x10003009;WriteFile;Sent by the server when the WriteFile operation is complete.;None;\n0x300A;CreateDirectory;Create a directory.;Directory path;None\n0x300B;CanReadFile;Try to open a file with read permissions.;File path;None\n0x300C;DesktopExecute;Execute a command on a hidden desktop.;Command line to execute;PROCESS_INFORMATION structure for the created process.\n0x300D;FileOperation;Perform a file operation using SHFileOperation.;\u00b7 wFunc \u00b7 fFlags \u00b7 pFrom (offset) \u00b7 pTo (offset);None\n0x300E;GetEnvValue;Get the value of an environment variable.;Environment variable;Environment variable value.\n0x300F;CreateProgramDataDir;Creates the directory %SYSTEM%\\ProgramData, optionally with a subdirectory.;Subdirectory relative path (optional);None\n0x3102;FindFiles;Recursively search a directory for files matching a given pattern.;\u00b7 Starting directory \u00b7 Search pattern;See response body format in Table 6.\n0x7002;RemoteShell;Start an interactive remote cmd.exe session.;None;None\n0x7003;RemoteShell;Result of the last command run.;;Command output\n"
        }
    },
    {
        "report": {
            "id": "report_0x88065ea4",
            "date": "20220324",
            "title": "Mustang Pandas Hodur: Old tricks, new Korplug variant",
            "url": "https://www.welivesecurity.com/2022/03/23/mustang-panda-hodur-old-tricks-new-korplug-variant"
        },
        "chapter": {
            "id": "chapter_0xe350bd81",
            "title": "FindFiles command",
            "text": "Starting from the provided directory, this command searches for files whose names match the given pattern. This pattern supports the same wildcard characters as the Windows FindFirstFile API. For each matching file, the client sends a response message with its body in the format described in Table 6.\nTable 6. Format of the response body for the FindFiles command\nOne response message with an empty body is sent once the search is completed.",
            "table": "Offset;Value;Offset.1;Value.1\n0x00;File attributes;0x24;Folder path (offset)\n0x04;File size in bytes;0x26;Filename (offset)\n0x0C;Creation time;0x28;8.3 filename (offset)\n0x1C;Last write time;;\n"
        }
    },
    {
        "report": {
            "id": "report_0x88065ea4",
            "date": "20220324",
            "title": "Mustang Pandas Hodur: Old tricks, new Korplug variant",
            "url": "https://www.welivesecurity.com/2022/03/23/mustang-panda-hodur-old-tricks-new-korplug-variant"
        },
        "chapter": {
            "id": "chapter_0xfcb64d60",
            "title": "Conclusion",
            "text": "The decoys used in this campaign show once more how quickly Mustang Panda is able to react to world events. For example, an EU regulation on COVID-19 was used as a decoy only two weeks after it came out, and documents about the war in Ukraine started being used in the days following the beginning of the launch of the invasion. This group also demonstrates an ability to iteratively improve its tools, including its signature use of trident downloaders to deploy Korplug.\nFor any inquiries about our research published on WeLiveSecurity, please contact us at\nthreatintel@eset.com\n.\nESET Research now also offers private APT intelligence reports and data feeds. For any inquiries about this service, visit the ESET Threat Intelligence page."
        }
    },
    {
        "report": {
            "id": "report_0x88065ea4",
            "date": "20220324",
            "title": "Mustang Pandas Hodur: Old tricks, new Korplug variant",
            "url": "https://www.welivesecurity.com/2022/03/23/mustang-panda-hodur-old-tricks-new-korplug-variant"
        },
        "chapter": {
            "id": "chapter_0x2abc48d1",
            "title": "IoCs",
            "text": "",
            "table": "SHA-1;Filename;ESET detection name;Description\n69AB6B9906F8DCE03B43BEBB7A07189A69DC507B;coreclr.dll;Win32/Agent.ADMW;Korplug loader.\n10AE4784D0FFBC9CD5FD85B150830AEA3334A1DE;;Win32/Korplug.TC;Decrypted Korplug (dumped from memory).\n69AB6B9906F8DCE03B43BEBB7A07189A69DC507B;coreclr.dll;Win32/Agent.ADMW;Korplug loader.\n4EBFC035179CD72D323F0AB357537C094A276E6D;PowerDVD18.exe;Win32/Delf.UTN;Korplug loader.\nFDBB16B8BA7724659BAB5B2E1385CFD476F10607;;Win32/Korplug.TB;Decrypted Korplug (dumped from memory).\n7E059258CF963B95BDE479D1C374A4C300624986;;Win32/Korplug.TC;Decrypted Korplug (dumped from memory).\n7992729769760ECAB37F2AA32DE4E61E77828547;SHELLSEL.ocx;Win32/Agent.ADMW;Korplug loader.\nF05E89D031D051159778A79D81685B62AFF4E3F9;SymHp.exe;Win32/Delf.UTN;Korplug loader.\nAB01E099872A094DC779890171A11764DE8B4360;BoomerangLib.dll;Win32/Korplug.TH;Korplug loader.\nCDB15B1ED97985D944F883AF05483990E02A49F7;PotPlayer.dll;Win32/Agent.ADYO;Korplug loader.\n908F55D21CCC2E14D4FF65A7A38E26593A0D9A70;SmadHook32.dll;Win32/Agent.ADMW;Korplug loader.\n477A1CE31353E8C26A8F4E02C1D378295B302C9E;;Win32/Agent.ADMW;Korplug loader.\n52288C2CDB5926ECC970B2166943C9D4453F5E92;SmadHook32c.dll;Win32/Agent.ADMW;Korplug loader.\nCBD875EE456C84F9E87EC392750D69A75FB6B23A;SHELLSEL.ocx;Win32/Agent.ADMW;Korplug loader.\n2CF4BAFE062D38FAF4772A7D1067B80339C2CE82;Adobe_Caps.dll;Win32/Agent.ADMW;Korplug loader.\n97C92ADD7145CF9386ABD5527A8BCD6FABF9A148;DocConvDll.dll;Win32/Agent.ADYO;Korplug loader.\n39863CECA1B0F54F5C063B3015B776CDB05971F3;;Win32/Korplug.TD;Decrypted Korplug (dumped from memory).\n0D5348B5C9A66C743615E819AEF152FB5B0DAB97;FontEDL.exe;clean;Vulnerable legitimate Font File Generator executable.\nC8F5825499315EAF4B5046FF79AC9553E71AD1C0;Silverlight.Configuration.exe;clean;Vulnerable legitimate Microsoft Silverlight Configuration Utility executable.\nD4FFE4A4F2BD2C19FF26139800C18339087E39CD;PowerDVDLP.exe;clean;Vulnerable legitimate PowerDVD executable.\n65898ACA030DCEFDA7C970D3A311E8EA7FFC844A;Symantec.exe;clean;Vulnerable legitimate Symantec AntiVirus executable.\n7DDB61872830F4A0E6BF96FAF665337D01F164FC;Adobe Stock Photos CS3.exe;clean;Vulnerable legitimate Adobe Stock Photos executable.\nC13D0D669365DFAFF9C472E615A611E058EBF596;COVID-19 travel restrictions EU reviews list of third countries.exe;Win32/Agent_AGen.NJ;Downloader.\n062473912692F7A3FAB8485101D4FCF6D704ED23;REGULATION OF THE EUROPEAN PARLIAMENT AND OF THE COUNCIL.exe;Win32/TrojanDownloader.Agent.GDL;Downloader.\n2B5D6BB5188895DA4928DD310C7C897F51AAA050;log.dll;Win32/Agent.ACYW;Korplug loader.\n511DA645A7282FB84FF18C33398E67D7661FD663;2.exe;Win32/Agent.ADPL;Korplug loader.\n59002E1A58065D7248CD9D7DD62C3F865813EEE6;log.dll;Win32/Agent.ADXE;Korplug loader.\nF67C553678B7857D1BBC488040EA90E6C52946B3;KINGSTON.exe;Win32/Agent.ADXZ;Korplug Loader.\n58B6B5FD3F2BFD182622F547A93222A4AFDF4E76;PotPlayer.exe;clean;Vulnerable legitimate executable.\n"
        }
    },
    {
        "report": {
            "id": "report_0x88065ea4",
            "date": "20220324",
            "title": "Mustang Pandas Hodur: Old tricks, new Korplug variant",
            "url": "https://www.welivesecurity.com/2022/03/23/mustang-panda-hodur-old-tricks-new-korplug-variant"
        },
        "chapter": {
            "id": "chapter_0xe4a1e0bb",
            "title": "Network",
            "text": "",
            "table": "Domain;IP;First seen;Notes\n;103.56.53[.]120;2021\u201106\u201115;Korplug C&C\n;154.204.27[.]181;2020\u201110\u201105;Korplug C&C.\n;43.254.218[.]42;2021\u201102\u201109;Download server.\n;45.131.179[.]179;2020\u201110\u201105;Korplug C&C.\n;176.113.69[.]91;2021-04-19;Korplug C&C.\nupespr[.]com;45.154.14[.]235;2022-01-17;Download server.\nurmsec[.]com;156.226.173[.]23;2022\u201102\u201123;Download server.\n;101.36.125[.]203;2021-06-01;Korplug C&C.\n;185.207.153[.]208;2022\u201102\u201103;Download server.\n;154.204.27[.]130;2021-12-14;Korplug C&C.\n;92.118.188[.]78;2022-01-27;Korplug C&C.\nzyber-i[.]com;107.178.71[.]211;2022-03-01;Download server.\nlocvnpt[.]com;103.79.120[.]66;2021-05-21;Download server. This domain was previously used in a 2020 campaign  documented by Recorded Future  .\n"
        }
    },
    {
        "report": {
            "id": "report_0x88065ea4",
            "date": "20220324",
            "title": "Mustang Pandas Hodur: Old tricks, new Korplug variant",
            "url": "https://www.welivesecurity.com/2022/03/23/mustang-panda-hodur-old-tricks-new-korplug-variant"
        },
        "chapter": {
            "id": "chapter_0xece9527c",
            "title": "MITRE ATT&CK techniques",
            "text": "This table was built using version 10 of the MITRE ATT&CK framework.\nAlexandre Ct Cyr\n23 Mar 2022 - 09:00AM",
            "table": "Tactic;ID;Name;Description\nResource Development;T1583.001;Acquire Infrastructure: Domains;Mustang Panda has registered domains for use as download servers.\nResource Development;T1583.003;Acquire Infrastructure: Virtual Private Server;Some download servers used by Mustang Panda appear to be on shared hosting.\nResource Development;T1583.004;Acquire Infrastructure: Server;Mustang Panda uses servers that appear to be exclusive to the group.\nResource Development;T1587.001;Develop Capabilities: Malware;Mustang Panda has developed custom loader and Korplug versions.\nResource Development;T1588.006;Obtain Capabilities: Vulnerabilities;Multiple DLL hijacking vulnerabilities are used in the deployment process.\nResource Development;T1608.001;Stage Capabilities: Upload Malware;Malicious payloads are hosted on the download servers.\nExecution;T1059.003;Command and Scripting Interpreter: Windows Command Shell;Windows command shell is used to execute commands sent by the C&C server.\nExecution;T1106;Native API;Mustang Panda uses CreateProcess and ShellExecute for execution.\nExecution;T1129;Shared Modules;Mustang Panda uses LoadLibrary to load additional DLLs at runtime. The loader and RAT are DLLs.\nExecution;T1204.002;User Execution: Malicious File;Mustang Panda relies on the user executing the initial downloader.\nExecution;T1574.002;Hijack Execution Flow: DLL Side-Loading;The downloader obtains and launches a vulnerable application so it loads and executes the malicious DLL that contains the second stage.\nPersistence;T1547.001;Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder;Korplug can persist via registry Run keys.\nPersistence;T1053.005;Scheduled Task/Job: Scheduled Task;Korplug can persist by creating a scheduled task that runs on startup.\nDefense Evasion;T1140;Deobfuscate/Decode Files or Information;The Korplug file is encrypted and only decrypted at runtime, and its configuration data is encrypted with XOR.\nDefense Evasion;T1564.001;Hide Artifacts: Hidden Files and Directories;Directories created during the installation process are set as hidden system directories.\nDefense Evasion;T1564.003;Hide Artifacts: Hidden Window;Korplug can run commands on a hidden desktop. Multiple hidden windows are used during the deployment process.\nDefense Evasion;T1070;Indicator Removal on Host;Korplug\u2019s uninstall command deletes registry keys that store data and provide persistence.\nDefense Evasion;T1070.004;Indicator Removal on Host: File Deletion;Korplug can remove itself and all created directories.\nDefense Evasion;T1070.006;Indicator Removal on Host: Timestomp;When writing to a file, Korplug sets the file\u2019s timestamps to their previous values.\nDefense Evasion;T1036.004;Masquerading: Masquerade Task or Service;Scheduled tasks created for persistence use legitimate-looking names.\nDefense Evasion;T1036.005;Masquerading: Match Legitimate Name or Location;File and directory names match expected values for the legitimate app that is abused by the loader.\nDefense Evasion;T1112;Modify Registry;Korplug can create, modify, and remove registry keys.\nDefense Evasion;T1027;Obfuscated Files or Information;Some downloaded files are encrypted and stored as hexadecimal strings.\nDefense Evasion;T1027.005;Obfuscated Files or Information: Indicator Removal from Tools;Imports are hidden by dynamic resolution of API function names.\nDefense Evasion;T1055.001;Process Injection: Dynamic-link Library Injection;Some versions of the Korplug loader inject the Korplug DLL into a newly launched process.\nDefense Evasion;T1620;Reflective Code Loading;Korplug parses and loads itself into memory.\nDiscovery;T1083;File and Directory Discovery;Korplug can list files and directories along with their attributes and content.\nDiscovery;T1082;System Information Discovery;Korplug collects extensive information about the system including uptime, Windows version, CPU clock rate, amount of RAM and display resolution.\nDiscovery;T1614;System Location Discovery;Korplug retrieves the system locale using GetSystemDefaultLCID.\nDiscovery;T1016;System Network Configuration Discovery;Korplug collects the system hostname and IP addresses.\nDiscovery;T1016.001;System Network Configuration Discovery: Internet Connection Discovery;The downloader pings Google\u2019s DNS server to check internet connectivity.\nDiscovery;T1033;System Owner/User Discovery;Korplug obtains the current user\u2019s username.\nDiscovery;T1124;System Time Discovery;Korplug uses GetSystemTime to retrieve the current system time.\nCollection;T1005;Data from Local System;Korplug collects extensive data about the system it\u2019s running on.\nCollection;T1025;Data from Removable Media;Korplug can collect metadata and content from all mapped drives.\nCollection;T1039;Data from Network Shared Drive;Korplug can collect metadata and content from all mapped drives.\nCommand and Control;T1071.001;Application Layer Protocol: Web Protocols;Korplug can make the initial handshake over HTTPS.\nCommand and Control;T1095;Non-Application Layer Protocol;C&C communication is done over a custom TCP-based protocol.\nCommand and Control;T1573.001;Encrypted Channel: Symmetric Cryptography;C&C communication is encrypted using RC4.\nCommand and Control;T1008;Fallback Channels;The Korplug configuration contains fallback C&C servers.\nCommand and Control;T1105;Ingress Tool Transfer;Korplug can download additional files from the C&C server.\nCommand and Control;T1571;Non-Standard Port;When Hodur performs its initial handshake over HTTPS, it uses the same port (specified in the configuration) as for the rest of the communication.\nCommand and Control;T1132.001;Data Encoding: Standard Encoding;Korplug compresses transferred data using LZNT1.\nExfiltration;T1041;Exfiltration Over C2 Channel;Data exfiltration is done via the same custom protocol used to send and receive commands.\n"
        }
    }
]