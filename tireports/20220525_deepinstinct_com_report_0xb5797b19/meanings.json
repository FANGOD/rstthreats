{
    "title": "Blame the Messenger: 3 Types of Dropper Malware in Microsoft Office & How to Detect Them",
    "url": "https://www.deepinstinct.com/blog/types-of-dropper-malware-in-microsoft-office",
    "threats": {
        "Threat": [
            {
                "token": {
                    "id": "<THREAT_0x8bd5383c>",
                    "type": "Threat",
                    "value": "emotet"
                },
                "references": {
                    "sentences": [
                        "028a5447d36c7445e3b24757d5cb37bafa54c5dfa7c3393fa69dd26e278442a4 Emotet (excessive comments method) Office dropper",
                        "0042404ac9cbe7c082b9c0ae130e956ab7989cfa72a3f3b0c7f2226e23a6c6cb Emotet (Excel cells method) Office dropper",
                        "ed7c68c3c103beaa7e5f30a3b70a52bb5428ce1498b7f64feda74342f93e16fe Emotet (excessive comments method) VBA code",
                        "After base64 decoding the PowerShell script, I discovered how Emotet downloads their DLL payload and from where.",
                        "As can be seen below, the variable MJXdfshDrfGZses4 contains a list of URLs which the script goes over using a for loop. Each time the for loop runs, it tries to download the Emotet DLL into \"c:\\programdata\\bneuihlows.dll\" using Invoke-WebRequest. Then, it checks if the downloaded files length is greater than 47436 bytes. If so, it means that the DLL was downloaded successfully, and the loop breaks.",
                        "The PowerShell code used to retrieve the Emotet payload",
                        "40a1e0aa0e580e2a15bbfd70ba4b89d3dd549bdc7bc075a223f12db0ddd2195d Emotet (Excel cells method) VBA code",
                        "Figure 2: An Emotet dropper's VBA code, the actual commands are highlighted in yellow. Note: a few long comments were redacted, since each of them is just a compilation of random words and none of them contribute to the understanding of the codes functionality.",
                        "This provided greater insight into the scripts functionality; the Wscript.shell string suggests Wscript will be used to execute additional commands, while \"c:\\programdata\\ughldskbhn.bat\" and \"c:\\programdata\\yhjlswle.vbs\" imply that Emotet uses these Batch and VBS files in this infection flow.",
                        "Sometimes, simple obfuscation techniques can be sufficient to avoid detection, especially if the infection flow involves multiple stages and files written in different scripting languages, as demonstrated below in the analysis of an Emotet dropper from the malware familys recent resurrection.",
                        "We have seen recent Emotet VBA droppers containing long comments composed of random words. As we see in the figure below, the executed command and the variable containing it were not obfuscated, just floating in a sea of long random comments.",
                        "The Emotet dropper's VBA output. Note: some parts of the code were redacted, since they are irrelevant to this blog, moreover, some of them are never executed.",
                        "This blog will review a variety of VBA droppers that employ different bypass techniques, including an analysis of an evasion method used in the recent Emotet wave. We will also introduce a Python script I wrote to increase the likelihood of detecting these threats."
                    ],
                    "titles": [
                        "A Command in a Comments Stack Emotets Use of Random Sentences",
                        "Less Complicated, More Files",
                        "Indicators of Compromise (IoCs)",
                        "Blame the Messenger: 3 Types of Dropper Malware in Microsoft Office & How to Detect Them"
                    ]
                },
                "links": [
                    {
                        "src": {
                            "id": "<SHA256_0xb91ab046>",
                            "type": "Hash",
                            "hash_type": "SHA256",
                            "value": "0042404ac9cbe7c082b9c0ae130e956ab7989cfa72a3f3b0c7f2226e23a6c6cb"
                        },
                        "relation": "use_threat",
                        "dst": {
                            "id": "<THREAT_0x8bd5383c>",
                            "type": "Threat",
                            "value": "emotet"
                        }
                    },
                    {
                        "src": {
                            "id": "<SHA256_0x6c1b6363>",
                            "type": "Hash",
                            "hash_type": "SHA256",
                            "value": "028a5447d36c7445e3b24757d5cb37bafa54c5dfa7c3393fa69dd26e278442a4"
                        },
                        "relation": "use_threat",
                        "dst": {
                            "id": "<THREAT_0x8bd5383c>",
                            "type": "Threat",
                            "value": "emotet"
                        }
                    },
                    {
                        "src": {
                            "id": "<THREAT_0x8bd5383c>",
                            "type": "Threat",
                            "value": "emotet"
                        },
                        "relation": "has_category",
                        "dst": {
                            "id": "<CATEGORY_0x49c0dad0>",
                            "type": "Category",
                            "value": "dropper"
                        }
                    },
                    {
                        "src": {
                            "id": "<CATEGORY_0xf1a480bb>",
                            "type": "Category",
                            "value": "malware"
                        },
                        "relation": "has_category",
                        "dst": {
                            "id": "<THREAT_0x8bd5383c>",
                            "type": "Threat",
                            "value": "emotet"
                        }
                    },
                    {
                        "src": {
                            "id": "<SHA256_0x38c4e697>",
                            "type": "Hash",
                            "hash_type": "SHA256",
                            "value": "ed7c68c3c103beaa7e5f30a3b70a52bb5428ce1498b7f64feda74342f93e16fe"
                        },
                        "relation": "use_threat",
                        "dst": {
                            "id": "<THREAT_0x8bd5383c>",
                            "type": "Threat",
                            "value": "emotet"
                        }
                    },
                    {
                        "src": {
                            "id": "<SHA256_0x3e0b2966>",
                            "type": "Hash",
                            "hash_type": "SHA256",
                            "value": "40a1e0aa0e580e2a15bbfd70ba4b89d3dd549bdc7bc075a223f12db0ddd2195d"
                        },
                        "relation": "use_threat",
                        "dst": {
                            "id": "<THREAT_0x8bd5383c>",
                            "type": "Threat",
                            "value": "emotet"
                        }
                    },
                    {
                        "src": {
                            "id": "<CATEGORY_0x49c0dad0>",
                            "type": "Category",
                            "value": "dropper"
                        },
                        "relation": "has_category",
                        "dst": {
                            "id": "<THREAT_0x8bd5383c>",
                            "type": "Threat",
                            "value": "emotet"
                        }
                    },
                    {
                        "src": {
                            "id": "<THREAT_0x8bd5383c>",
                            "type": "Threat",
                            "value": "emotet"
                        },
                        "relation": "has_category",
                        "dst": {
                            "id": "<CATEGORY_0xf1a480bb>",
                            "type": "Category",
                            "value": "malware"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<THREAT_0xd2dc1e4>",
                    "type": "Threat",
                    "value": "aggaa_campaign"
                },
                "references": {
                    "sentences": [
                        "Aggah, a threat actor group that has been active since 2019, has delivered many payloads, mostly RevengeRAT, to numerous victims. This group is particularly adept at working with Microsoft Office documents and employs various methods in their VBA scripts to make them stealthier. One of these methods, which appears to be used to evade AI-based cyber tools, is the use of comments containing the string MsgBox.",
                        "cb9a5f0ad26cbb7b9f510b80df97f0045d7232d31cfde3cbce095d1c88c90e89 Aggah VBA code",
                        "An Aggah dropper's VBA code"
                    ],
                    "titles": [
                        "You Got Malware Aggahs Use of MsgBox Comments",
                        "Indicators of Compromise (IoCs)"
                    ]
                },
                "links": [
                    {
                        "src": {
                            "id": "<THREAT_0xd2dc1e4>",
                            "type": "Threat",
                            "value": "aggaa_campaign"
                        },
                        "relation": "has_category",
                        "dst": {
                            "id": "<CATEGORY_0xf1a480bb>",
                            "type": "Category",
                            "value": "malware"
                        }
                    },
                    {
                        "src": {
                            "id": "<THREAT_0xd2dc1e4>",
                            "type": "Threat",
                            "value": "aggaa_campaign"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<THREAT_0xadae4e0a>",
                            "type": "Threat",
                            "value": "revenge_rat"
                        }
                    },
                    {
                        "src": {
                            "id": "<SHA256_0xaa18e373>",
                            "type": "Hash",
                            "hash_type": "SHA256",
                            "value": "cb9a5f0ad26cbb7b9f510b80df97f0045d7232d31cfde3cbce095d1c88c90e89"
                        },
                        "relation": "use_threat",
                        "dst": {
                            "id": "<THREAT_0xd2dc1e4>",
                            "type": "Threat",
                            "value": "aggaa_campaign"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<THREAT_0xadae4e0a>",
                    "type": "Threat",
                    "value": "revenge_rat"
                },
                "references": {
                    "sentences": [
                        "Aggah, a threat actor group that has been active since 2019, has delivered many payloads, mostly RevengeRAT, to numerous victims. This group is particularly adept at working with Microsoft Office documents and employs various methods in their VBA scripts to make them stealthier. One of these methods, which appears to be used to evade AI-based cyber tools, is the use of comments containing the string MsgBox."
                    ],
                    "titles": [
                        "You Got Malware Aggahs Use of MsgBox Comments"
                    ]
                },
                "links": [
                    {
                        "src": {
                            "id": "<THREAT_0xd2dc1e4>",
                            "type": "Threat",
                            "value": "aggaa_campaign"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<THREAT_0xadae4e0a>",
                            "type": "Threat",
                            "value": "revenge_rat"
                        }
                    },
                    {
                        "src": {
                            "id": "<THREAT_0xadae4e0a>",
                            "type": "Threat",
                            "value": "revenge_rat"
                        },
                        "relation": "has_category",
                        "dst": {
                            "id": "<CATEGORY_0xf1a480bb>",
                            "type": "Category",
                            "value": "malware"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<THREAT_0xdf2a3942>",
                    "type": "Threat",
                    "value": "dridex"
                },
                "references": {
                    "sentences": [
                        "4f5ecf2c3073edd549e8ea2b1e65d8c478f3390567cffa3c909d328a3969ddd8 Dridex VBA code",
                        "The Dridex droppers VBA output. Note: some parts of the code were redacted, since they are irrelevant to this blog.",
                        "Just as before, base64 decoding and decompression are required in order to retrieve the code of the next stage. However, this time Dridex employs something we have not seen in previous stages aliases.",
                        "9caed14e7f7d3e4706db2e74dc870abff571cce715f83ef91c563627822af6ad Dridex Office dropper",
                        "One of the most interesting droppers we have recently observed was crafted by the notorious threat group Dridex. In the following example, Dridex employs several sophisticated methods aimed at increasing its likelihood of success delivering a payload successfully and without detection."
                    ],
                    "titles": [
                        "Indicators of Compromise (IoCs)",
                        "Homegrown Obfuscation Dridexs Usage of Self-Created Functions"
                    ]
                },
                "links": [
                    {
                        "src": {
                            "id": "<CATEGORY_0x49c0dad0>",
                            "type": "Category",
                            "value": "dropper"
                        },
                        "relation": "has_category",
                        "dst": {
                            "id": "<THREAT_0xdf2a3942>",
                            "type": "Threat",
                            "value": "dridex"
                        }
                    },
                    {
                        "src": {
                            "id": "<SHA256_0x6411c68>",
                            "type": "Hash",
                            "hash_type": "SHA256",
                            "value": "9caed14e7f7d3e4706db2e74dc870abff571cce715f83ef91c563627822af6ad"
                        },
                        "relation": "use_threat",
                        "dst": {
                            "id": "<THREAT_0xdf2a3942>",
                            "type": "Threat",
                            "value": "dridex"
                        }
                    },
                    {
                        "src": {
                            "id": "<URL_0x58bd24a3>",
                            "type": "Url",
                            "value": "https://geronaga.com/gero?myhyphenlackinguid"
                        },
                        "relation": "use_threat",
                        "dst": {
                            "id": "<THREAT_0xdf2a3942>",
                            "type": "Threat",
                            "value": "dridex"
                        }
                    },
                    {
                        "src": {
                            "id": "<SHA256_0x4e73e131>",
                            "type": "Hash",
                            "hash_type": "SHA256",
                            "value": "4f5ecf2c3073edd549e8ea2b1e65d8c478f3390567cffa3c909d328a3969ddd8"
                        },
                        "relation": "use_threat",
                        "dst": {
                            "id": "<THREAT_0xdf2a3942>",
                            "type": "Threat",
                            "value": "dridex"
                        }
                    }
                ]
            }
        ]
    },
    "ttps": {},
    "meanings": {
        "Category": [
            {
                "token": {
                    "id": "<CATEGORY_0x49c0dad0>",
                    "type": "Category",
                    "value": "dropper"
                },
                "references": {
                    "sentences": [
                        "028a5447d36c7445e3b24757d5cb37bafa54c5dfa7c3393fa69dd26e278442a4 Emotet (excessive comments method) Office dropper",
                        "0042404ac9cbe7c082b9c0ae130e956ab7989cfa72a3f3b0c7f2226e23a6c6cb Emotet (Excel cells method) Office dropper",
                        "Basically, the VBA dropper only creates the VBS and BAT files, writes content into each of them, and then the VBS script takes center stage.",
                        "An Aggah dropper's VBA code",
                        "For a more expanded analysis of this dropper, you can read this excellent blog.",
                        "Figure 2: An Emotet dropper's VBA code, the actual commands are highlighted in yellow. Note: a few long comments were redacted, since each of them is just a compilation of random words and none of them contribute to the understanding of the codes functionality.",
                        "Sometimes, simple obfuscation techniques can be sufficient to avoid detection, especially if the infection flow involves multiple stages and files written in different scripting languages, as demonstrated below in the analysis of an Emotet dropper from the malware familys recent resurrection.",
                        "The Emotet dropper's VBA output. Note: some parts of the code were redacted, since they are irrelevant to this blog, moreover, some of them are never executed.",
                        "With the information from the above decoded strings in hand, I could determine that the next stage in the infection flow is the VBS script, which the VBA dropper executes using wscript. Since there were no direct calls to the BAT script in the VBA code, I could assume that, if used, it would be executed from the VBS script.",
                        "9caed14e7f7d3e4706db2e74dc870abff571cce715f83ef91c563627822af6ad Dridex Office dropper",
                        "And after some cleanup, we can finally get a semi-clear picture of what the dropper tries to do:"
                    ],
                    "titles": [
                        "You Got Malware Aggahs Use of MsgBox Comments",
                        "Blame the Messenger: 3 Types of Dropper Malware in Microsoft Office & How to Detect Them",
                        "Indicators of Compromise (IoCs)",
                        "A Command in a Comments Stack Emotets Use of Random Sentences",
                        "Less Complicated, More Files",
                        "Homegrown Obfuscation Dridexs Usage of Self-Created Functions"
                    ]
                },
                "links": [
                    {
                        "src": {
                            "id": "<CATEGORY_0x49c0dad0>",
                            "type": "Category",
                            "value": "dropper"
                        },
                        "relation": "has_category",
                        "dst": {
                            "id": "<THREAT_0xdf2a3942>",
                            "type": "Threat",
                            "value": "dridex"
                        }
                    },
                    {
                        "src": {
                            "id": "<SHA256_0xb91ab046>",
                            "type": "Hash",
                            "hash_type": "SHA256",
                            "value": "0042404ac9cbe7c082b9c0ae130e956ab7989cfa72a3f3b0c7f2226e23a6c6cb"
                        },
                        "relation": "has_category",
                        "dst": {
                            "id": "<CATEGORY_0x49c0dad0>",
                            "type": "Category",
                            "value": "dropper"
                        }
                    },
                    {
                        "src": {
                            "id": "<THREAT_0x8bd5383c>",
                            "type": "Threat",
                            "value": "emotet"
                        },
                        "relation": "has_category",
                        "dst": {
                            "id": "<CATEGORY_0x49c0dad0>",
                            "type": "Category",
                            "value": "dropper"
                        }
                    },
                    {
                        "src": {
                            "id": "<SHA256_0x6c1b6363>",
                            "type": "Hash",
                            "hash_type": "SHA256",
                            "value": "028a5447d36c7445e3b24757d5cb37bafa54c5dfa7c3393fa69dd26e278442a4"
                        },
                        "relation": "has_category",
                        "dst": {
                            "id": "<CATEGORY_0x49c0dad0>",
                            "type": "Category",
                            "value": "dropper"
                        }
                    },
                    {
                        "src": {
                            "id": "<SHA256_0x6411c68>",
                            "type": "Hash",
                            "hash_type": "SHA256",
                            "value": "9caed14e7f7d3e4706db2e74dc870abff571cce715f83ef91c563627822af6ad"
                        },
                        "relation": "has_category",
                        "dst": {
                            "id": "<CATEGORY_0x49c0dad0>",
                            "type": "Category",
                            "value": "dropper"
                        }
                    },
                    {
                        "src": {
                            "id": "<CATEGORY_0x49c0dad0>",
                            "type": "Category",
                            "value": "dropper"
                        },
                        "relation": "has_category",
                        "dst": {
                            "id": "<THREAT_0x8bd5383c>",
                            "type": "Threat",
                            "value": "emotet"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<CATEGORY_0xf1a480bb>",
                    "type": "Category",
                    "value": "malware"
                },
                "references": {
                    "sentences": [
                        "Deep Instincts agent uses deep learning to prevent malicious droppers, ensuring they cant execute in your environment. The Deep Instinct Prevention Platform stops known, unknown, and zero-day threats with the highest accuracy and lowest false-positive rate in the industry. We stop attacks before they happen, identifying malicious files in <20ms, before execution.",
                        "Using these excessive comments might fool both analysts and AI solutions (the former might miss the malicious MSHTA execution when looking at the code, and the latter might give more consideration to the benign features, aka the excessive comments, than to the malicious ones).",
                        "Sometimes, simple obfuscation techniques can be sufficient to avoid detection, especially if the infection flow involves multiple stages and files written in different scripting languages, as demonstrated below in the analysis of an Emotet dropper from the malware familys recent resurrection.",
                        "Obfuscated droppers are more difficult to detect they contain intentionally broken strings that evade static signatures, store malicious content in Excel cells, and use excessive comments in the hope of hiding their malicious content. But difficult does not mean impossible. Some patterns can still be signed statically, other behaviors can be detected dynamically, and if you want to take the bulldozer approach, you can just forbid all script executions (or at least most of them).",
                        "As we see in the above analysis, storing the actual commands in Excel cells instead of in the VBA code itself can be a good way to avoid detection because when a static analysis mechanism goes over the VBA code, it cannot determine whether the executed content is malicious or not. Since Excel cells have benign uses in VBA code as well, a security product may deem them as benign, to avoid a false positive.",
                        "As you can see, the VBA function Cells is used in this script to extract contents of specified Excel cells and use them in the VBA script. Without knowing what these cells contain, it is difficult to determine whether the file is malicious or not, especially since none of the commands seems damning enough."
                    ],
                    "titles": [
                        "You Got Malware Aggahs Use of MsgBox Comments",
                        "Blame the Messenger: 3 Types of Dropper Malware in Microsoft Office & How to Detect Them",
                        "Conclusion",
                        "Prevention, Detection, and Everything in Between",
                        "A Command in a Comments Stack Emotets Use of Random Sentences",
                        "Less Complicated, More Files",
                        "Interesting Cells and Where to Find Them"
                    ]
                },
                "links": [
                    {
                        "src": {
                            "id": "<THREAT_0xd2dc1e4>",
                            "type": "Threat",
                            "value": "aggaa_campaign"
                        },
                        "relation": "has_category",
                        "dst": {
                            "id": "<CATEGORY_0xf1a480bb>",
                            "type": "Category",
                            "value": "malware"
                        }
                    },
                    {
                        "src": {
                            "id": "<THREAT_0x8bd5383c>",
                            "type": "Threat",
                            "value": "emotet"
                        },
                        "relation": "has_category",
                        "dst": {
                            "id": "<CATEGORY_0xf1a480bb>",
                            "type": "Category",
                            "value": "malware"
                        }
                    },
                    {
                        "src": {
                            "id": "<THREAT_0xadae4e0a>",
                            "type": "Threat",
                            "value": "revenge_rat"
                        },
                        "relation": "has_category",
                        "dst": {
                            "id": "<CATEGORY_0xf1a480bb>",
                            "type": "Category",
                            "value": "malware"
                        }
                    },
                    {
                        "src": {
                            "id": "<CATEGORY_0xf1a480bb>",
                            "type": "Category",
                            "value": "malware"
                        },
                        "relation": "has_category",
                        "dst": {
                            "id": "<THREAT_0x8bd5383c>",
                            "type": "Threat",
                            "value": "emotet"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<CATEGORY_0xb68aa214>",
                    "type": "Category",
                    "value": "rat"
                },
                "references": {
                    "sentences": [
                        "Deep Instincts agent uses deep learning to prevent malicious droppers, ensuring they cant execute in your environment. The Deep Instinct Prevention Platform stops known, unknown, and zero-day threats with the highest accuracy and lowest false-positive rate in the industry. We stop attacks before they happen, identifying malicious files in <20ms, before execution."
                    ],
                    "titles": [
                        "Conclusion"
                    ]
                }
            }
        ]
    },
    "iocs": {
        "Url": [
            {
                "token": {
                    "id": "<URL_0x58bd24a3>",
                    "type": "Url",
                    "value": "https://geronaga.com/gero?myhyphenlackinguid"
                },
                "references": {
                    "sentences": [
                        "After going over the above code (and adding a few notes for myself along the way, which I left in the snippet), I finally reached a verdict regarding the droppers true intention: it retrieves the users ID, removes the hyphens it contains, and assembles a URL that looks like this https://geronaga[.]com/gero?myHyphenLackingUID. It then downloads a file to the users temp directory, decodes and decrypts it, executes the files content using regsvr32 and then, finally, deletes this content to avoid leaving any traces."
                    ],
                    "titles": [
                        "Homegrown Obfuscation Dridexs Usage of Self-Created Functions"
                    ]
                },
                "links": [
                    {
                        "src": {
                            "id": "<URL_0x58bd24a3>",
                            "type": "Url",
                            "value": "https://geronaga.com/gero?myhyphenlackinguid"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0x9552d7a>",
                            "type": "UnknownWord",
                            "value": "verdict"
                        }
                    },
                    {
                        "src": {
                            "id": "<URL_0x58bd24a3>",
                            "type": "Url",
                            "value": "https://geronaga.com/gero?myhyphenlackinguid"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0xb6b65911>",
                            "type": "UnknownWord",
                            "value": "myself"
                        }
                    },
                    {
                        "src": {
                            "id": "<URL_0x58bd24a3>",
                            "type": "Url",
                            "value": "https://geronaga.com/gero?myhyphenlackinguid"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0x1075644>",
                            "type": "UnknownWord",
                            "value": "assembles"
                        }
                    },
                    {
                        "src": {
                            "id": "<URL_0x58bd24a3>",
                            "type": "Url",
                            "value": "https://geronaga.com/gero?myhyphenlackinguid"
                        },
                        "relation": "use_threat",
                        "dst": {
                            "id": "<THREAT_0xdf2a3942>",
                            "type": "Threat",
                            "value": "dridex"
                        }
                    }
                ]
            }
        ],
        "Path": [
            {
                "token": {
                    "id": "<PATH_0x3ff8f456>",
                    "type": "Path",
                    "value": "c:\\programdata\\yhjlswle.vbss"
                },
                "references": {
                    "sentences": [
                        "c:\\programdata\\yhjlswle.vbss original content"
                    ],
                    "titles": [
                        "Less Complicated, More Files"
                    ]
                }
            }
        ],
        "File": [
            {
                "token": {
                    "id": "<FILE_0xc07602c0>",
                    "type": "File",
                    "value": "x08neuihlows.dll"
                },
                "references": {
                    "sentences": [
                        "Basically, the script executes the previously created Batch file and then tries to execute c\\:programdata\\x08neuihlows.dll, while providing it with the value hjyldksfkw3 using rundll32. Since this is the first mention of x08neuihlows.dll and the VBS file executes the Batch script before running the DLL, it is fair to assume that the BAT script is in charge of dropping the executable in the right location."
                    ],
                    "titles": [
                        "Less Complicated, More Files"
                    ]
                },
                "links": [
                    {
                        "src": {
                            "id": "<FILE_0xc07602c0>",
                            "type": "File",
                            "value": "x08neuihlows.dll"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0xef201813>",
                            "type": "UnknownWord",
                            "value": "fair"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<FILE_0xa4432ed6>",
                    "type": "File",
                    "value": "sharedstrings.xml"
                },
                "references": {
                    "sentences": [
                        "To match the strings to the right cells, we need a cell to string mapping this is where xl/worksheets/sheetName.xml comes into the picture. In OOXML Excel files, data containing cells will be mapped in an XML file, which will be found in the following path- xl/worksheets/sheetName.xml, for example, the cells of sheet1 will be mapped in xl/worksheets/sheet1.xml. Each one of these cells mapping files contains a tag called SheetData, which contains a row tag for each row in the sheet that contains data. Each row entry contains c (cell) entries. Cells that contain strings have their t (type) values set to s and their v (value) tags contain an integer that is the index of the si object whose string the cell contains in sharedStrings.xml. Cells that contain other types of data, such as integers and floats, have it contained in their v tags.",
                        "The first file, sharedStrings.xml, contains all the strings in the Excel file. The class SharedStringItem (ssi) represents string items (si) and each si element contains a text (t). The file contains unique strings, each representing the full content of one or more Excel cells.",
                        "A SharedStrings.xml example",
                        "During my research, which focused on OOXML files, I found two files, which Excel creates by default, that could help achieve this goal: sharedStrings.xml and xl/worksheets/sheetName.xml."
                    ],
                    "titles": [
                        "Interesting Cells and Where to Find Them"
                    ]
                },
                "links": [
                    {
                        "src": {
                            "id": "<FILE_0xa4432ed6>",
                            "type": "File",
                            "value": "sharedstrings.xml"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0xe492ed6f>",
                            "type": "UnknownWord",
                            "value": "worksheets"
                        }
                    },
                    {
                        "src": {
                            "id": "<FILE_0xa4432ed6>",
                            "type": "File",
                            "value": "sharedstrings.xml"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0xf5638614>",
                            "type": "UnknownWord",
                            "value": "sheetname"
                        }
                    },
                    {
                        "src": {
                            "id": "<FILE_0xa4432ed6>",
                            "type": "File",
                            "value": "sharedstrings.xml"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0xd7b62fb6>",
                            "type": "UnknownWord",
                            "value": "ooxml"
                        }
                    }
                ]
            }
        ],
        "Hash": [
            {
                "token": {
                    "id": "<SHA256_0xb91ab046>",
                    "type": "Hash",
                    "hash_type": "SHA256",
                    "value": "0042404ac9cbe7c082b9c0ae130e956ab7989cfa72a3f3b0c7f2226e23a6c6cb"
                },
                "references": {
                    "sentences": [
                        "0042404ac9cbe7c082b9c0ae130e956ab7989cfa72a3f3b0c7f2226e23a6c6cb Emotet (Excel cells method) Office dropper"
                    ],
                    "titles": [
                        "Indicators of Compromise (IoCs)"
                    ]
                },
                "links": [
                    {
                        "src": {
                            "id": "<SHA256_0xb91ab046>",
                            "type": "Hash",
                            "hash_type": "SHA256",
                            "value": "0042404ac9cbe7c082b9c0ae130e956ab7989cfa72a3f3b0c7f2226e23a6c6cb"
                        },
                        "relation": "use_threat",
                        "dst": {
                            "id": "<THREAT_0x8bd5383c>",
                            "type": "Threat",
                            "value": "emotet"
                        }
                    },
                    {
                        "src": {
                            "id": "<SHA256_0xb91ab046>",
                            "type": "Hash",
                            "hash_type": "SHA256",
                            "value": "0042404ac9cbe7c082b9c0ae130e956ab7989cfa72a3f3b0c7f2226e23a6c6cb"
                        },
                        "relation": "has_category",
                        "dst": {
                            "id": "<CATEGORY_0x49c0dad0>",
                            "type": "Category",
                            "value": "dropper"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<SHA256_0x3e0b2966>",
                    "type": "Hash",
                    "hash_type": "SHA256",
                    "value": "40a1e0aa0e580e2a15bbfd70ba4b89d3dd549bdc7bc075a223f12db0ddd2195d"
                },
                "references": {
                    "sentences": [
                        "40a1e0aa0e580e2a15bbfd70ba4b89d3dd549bdc7bc075a223f12db0ddd2195d Emotet (Excel cells method) VBA code"
                    ],
                    "titles": [
                        "Indicators of Compromise (IoCs)"
                    ]
                },
                "links": [
                    {
                        "src": {
                            "id": "<SHA256_0x3e0b2966>",
                            "type": "Hash",
                            "hash_type": "SHA256",
                            "value": "40a1e0aa0e580e2a15bbfd70ba4b89d3dd549bdc7bc075a223f12db0ddd2195d"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0xad87df08>",
                            "type": "UnknownWord",
                            "value": "vba"
                        }
                    },
                    {
                        "src": {
                            "id": "<SHA256_0x3e0b2966>",
                            "type": "Hash",
                            "hash_type": "SHA256",
                            "value": "40a1e0aa0e580e2a15bbfd70ba4b89d3dd549bdc7bc075a223f12db0ddd2195d"
                        },
                        "relation": "use_threat",
                        "dst": {
                            "id": "<THREAT_0x8bd5383c>",
                            "type": "Threat",
                            "value": "emotet"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<SHA256_0x38c4e697>",
                    "type": "Hash",
                    "hash_type": "SHA256",
                    "value": "ed7c68c3c103beaa7e5f30a3b70a52bb5428ce1498b7f64feda74342f93e16fe"
                },
                "references": {
                    "sentences": [
                        "ed7c68c3c103beaa7e5f30a3b70a52bb5428ce1498b7f64feda74342f93e16fe Emotet (excessive comments method) VBA code"
                    ],
                    "titles": [
                        "Indicators of Compromise (IoCs)"
                    ]
                },
                "links": [
                    {
                        "src": {
                            "id": "<SHA256_0x38c4e697>",
                            "type": "Hash",
                            "hash_type": "SHA256",
                            "value": "ed7c68c3c103beaa7e5f30a3b70a52bb5428ce1498b7f64feda74342f93e16fe"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0xad87df08>",
                            "type": "UnknownWord",
                            "value": "vba"
                        }
                    },
                    {
                        "src": {
                            "id": "<SHA256_0x38c4e697>",
                            "type": "Hash",
                            "hash_type": "SHA256",
                            "value": "ed7c68c3c103beaa7e5f30a3b70a52bb5428ce1498b7f64feda74342f93e16fe"
                        },
                        "relation": "use_threat",
                        "dst": {
                            "id": "<THREAT_0x8bd5383c>",
                            "type": "Threat",
                            "value": "emotet"
                        }
                    },
                    {
                        "src": {
                            "id": "<SHA256_0x38c4e697>",
                            "type": "Hash",
                            "hash_type": "SHA256",
                            "value": "ed7c68c3c103beaa7e5f30a3b70a52bb5428ce1498b7f64feda74342f93e16fe"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0x9c7447ce>",
                            "type": "UnknownWord",
                            "value": "excessive"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<SHA256_0x6c1b6363>",
                    "type": "Hash",
                    "hash_type": "SHA256",
                    "value": "028a5447d36c7445e3b24757d5cb37bafa54c5dfa7c3393fa69dd26e278442a4"
                },
                "references": {
                    "sentences": [
                        "028a5447d36c7445e3b24757d5cb37bafa54c5dfa7c3393fa69dd26e278442a4 Emotet (excessive comments method) Office dropper"
                    ],
                    "titles": [
                        "Indicators of Compromise (IoCs)"
                    ]
                },
                "links": [
                    {
                        "src": {
                            "id": "<SHA256_0x6c1b6363>",
                            "type": "Hash",
                            "hash_type": "SHA256",
                            "value": "028a5447d36c7445e3b24757d5cb37bafa54c5dfa7c3393fa69dd26e278442a4"
                        },
                        "relation": "use_threat",
                        "dst": {
                            "id": "<THREAT_0x8bd5383c>",
                            "type": "Threat",
                            "value": "emotet"
                        }
                    },
                    {
                        "src": {
                            "id": "<SHA256_0x6c1b6363>",
                            "type": "Hash",
                            "hash_type": "SHA256",
                            "value": "028a5447d36c7445e3b24757d5cb37bafa54c5dfa7c3393fa69dd26e278442a4"
                        },
                        "relation": "has_category",
                        "dst": {
                            "id": "<CATEGORY_0x49c0dad0>",
                            "type": "Category",
                            "value": "dropper"
                        }
                    },
                    {
                        "src": {
                            "id": "<SHA256_0x6c1b6363>",
                            "type": "Hash",
                            "hash_type": "SHA256",
                            "value": "028a5447d36c7445e3b24757d5cb37bafa54c5dfa7c3393fa69dd26e278442a4"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0x9c7447ce>",
                            "type": "UnknownWord",
                            "value": "excessive"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<SHA256_0x6411c68>",
                    "type": "Hash",
                    "hash_type": "SHA256",
                    "value": "9caed14e7f7d3e4706db2e74dc870abff571cce715f83ef91c563627822af6ad"
                },
                "references": {
                    "sentences": [
                        "9caed14e7f7d3e4706db2e74dc870abff571cce715f83ef91c563627822af6ad Dridex Office dropper"
                    ],
                    "titles": [
                        "Indicators of Compromise (IoCs)"
                    ]
                },
                "links": [
                    {
                        "src": {
                            "id": "<SHA256_0x6411c68>",
                            "type": "Hash",
                            "hash_type": "SHA256",
                            "value": "9caed14e7f7d3e4706db2e74dc870abff571cce715f83ef91c563627822af6ad"
                        },
                        "relation": "use_threat",
                        "dst": {
                            "id": "<THREAT_0xdf2a3942>",
                            "type": "Threat",
                            "value": "dridex"
                        }
                    },
                    {
                        "src": {
                            "id": "<SHA256_0x6411c68>",
                            "type": "Hash",
                            "hash_type": "SHA256",
                            "value": "9caed14e7f7d3e4706db2e74dc870abff571cce715f83ef91c563627822af6ad"
                        },
                        "relation": "has_category",
                        "dst": {
                            "id": "<CATEGORY_0x49c0dad0>",
                            "type": "Category",
                            "value": "dropper"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<SHA256_0x4e73e131>",
                    "type": "Hash",
                    "hash_type": "SHA256",
                    "value": "4f5ecf2c3073edd549e8ea2b1e65d8c478f3390567cffa3c909d328a3969ddd8"
                },
                "references": {
                    "sentences": [
                        "4f5ecf2c3073edd549e8ea2b1e65d8c478f3390567cffa3c909d328a3969ddd8 Dridex VBA code"
                    ],
                    "titles": [
                        "Indicators of Compromise (IoCs)"
                    ]
                },
                "links": [
                    {
                        "src": {
                            "id": "<SHA256_0x4e73e131>",
                            "type": "Hash",
                            "hash_type": "SHA256",
                            "value": "4f5ecf2c3073edd549e8ea2b1e65d8c478f3390567cffa3c909d328a3969ddd8"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0xad87df08>",
                            "type": "UnknownWord",
                            "value": "vba"
                        }
                    },
                    {
                        "src": {
                            "id": "<SHA256_0x4e73e131>",
                            "type": "Hash",
                            "hash_type": "SHA256",
                            "value": "4f5ecf2c3073edd549e8ea2b1e65d8c478f3390567cffa3c909d328a3969ddd8"
                        },
                        "relation": "use_threat",
                        "dst": {
                            "id": "<THREAT_0xdf2a3942>",
                            "type": "Threat",
                            "value": "dridex"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<SHA256_0xaa18e373>",
                    "type": "Hash",
                    "hash_type": "SHA256",
                    "value": "cb9a5f0ad26cbb7b9f510b80df97f0045d7232d31cfde3cbce095d1c88c90e89"
                },
                "references": {
                    "sentences": [
                        "cb9a5f0ad26cbb7b9f510b80df97f0045d7232d31cfde3cbce095d1c88c90e89 Aggah VBA code"
                    ],
                    "titles": [
                        "Indicators of Compromise (IoCs)"
                    ]
                },
                "links": [
                    {
                        "src": {
                            "id": "<SHA256_0xaa18e373>",
                            "type": "Hash",
                            "hash_type": "SHA256",
                            "value": "cb9a5f0ad26cbb7b9f510b80df97f0045d7232d31cfde3cbce095d1c88c90e89"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0xad87df08>",
                            "type": "UnknownWord",
                            "value": "vba"
                        }
                    },
                    {
                        "src": {
                            "id": "<SHA256_0xaa18e373>",
                            "type": "Hash",
                            "hash_type": "SHA256",
                            "value": "cb9a5f0ad26cbb7b9f510b80df97f0045d7232d31cfde3cbce095d1c88c90e89"
                        },
                        "relation": "use_threat",
                        "dst": {
                            "id": "<THREAT_0xd2dc1e4>",
                            "type": "Threat",
                            "value": "aggaa_campaign"
                        }
                    }
                ]
            }
        ]
    },
    "unknownwords": {
        "UnknownWord": [
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xb1ea7b51>",
                    "type": "UnknownWord",
                    "value": "blame"
                },
                "references": {
                    "sentences": [],
                    "titles": [
                        "Blame the Messenger: 3 Types of Dropper Malware in Microsoft Office & How to Detect Them"
                    ]
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xa573c9c0>",
                    "type": "UnknownWord",
                    "value": "bar"
                },
                "references": {
                    "sentences": [
                        "May 24, 2022 | Bar Block"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x42002b05>",
                    "type": "UnknownWord",
                    "value": "perpetual"
                },
                "references": {
                    "sentences": [
                        "Microsoft Office droppers have been a favorite of threat actors for years, continuously finding and exploiting them. Cybersecurity vendors take note and block these entry routes. Its a perpetual cat and mouse game and, unfortunately, bad actors typically have the upper hand at least for a short time. And as AI-based solutions have matured and gained market share these tools have also been targeted for evasion."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x43215109>",
                    "type": "UnknownWord",
                    "value": "cat"
                },
                "references": {
                    "sentences": [
                        "Microsoft Office droppers have been a favorite of threat actors for years, continuously finding and exploiting them. Cybersecurity vendors take note and block these entry routes. Its a perpetual cat and mouse game and, unfortunately, bad actors typically have the upper hand at least for a short time. And as AI-based solutions have matured and gained market share these tools have also been targeted for evasion."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xe374c3ad>",
                    "type": "UnknownWord",
                    "value": "mouse"
                },
                "references": {
                    "sentences": [
                        "Microsoft Office droppers have been a favorite of threat actors for years, continuously finding and exploiting them. Cybersecurity vendors take note and block these entry routes. Its a perpetual cat and mouse game and, unfortunately, bad actors typically have the upper hand at least for a short time. And as AI-based solutions have matured and gained market share these tools have also been targeted for evasion."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x5c83648d>",
                    "type": "UnknownWord",
                    "value": "ai-based"
                },
                "references": {
                    "sentences": [
                        "Microsoft Office droppers have been a favorite of threat actors for years, continuously finding and exploiting them. Cybersecurity vendors take note and block these entry routes. Its a perpetual cat and mouse game and, unfortunately, bad actors typically have the upper hand at least for a short time. And as AI-based solutions have matured and gained market share these tools have also been targeted for evasion.",
                        "Aggah, a threat actor group that has been active since 2019, has delivered many payloads, mostly RevengeRAT, to numerous victims. This group is particularly adept at working with Microsoft Office documents and employs various methods in their VBA scripts to make them stealthier. One of these methods, which appears to be used to evade AI-based cyber tools, is the use of comments containing the string MsgBox."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x1f5503ca>",
                    "type": "UnknownWord",
                    "value": "matured"
                },
                "references": {
                    "sentences": [
                        "Microsoft Office droppers have been a favorite of threat actors for years, continuously finding and exploiting them. Cybersecurity vendors take note and block these entry routes. Its a perpetual cat and mouse game and, unfortunately, bad actors typically have the upper hand at least for a short time. And as AI-based solutions have matured and gained market share these tools have also been targeted for evasion."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x857a0595>",
                    "type": "UnknownWord",
                    "value": "wrote"
                },
                "references": {
                    "sentences": [
                        "This blog will review a variety of VBA droppers that employ different bypass techniques, including an analysis of an evasion method used in the recent Emotet wave. We will also introduce a Python script I wrote to increase the likelihood of detecting these threats."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xdc6054c2>",
                    "type": "UnknownWord",
                    "value": "aggahs"
                },
                "references": {
                    "sentences": [],
                    "titles": [
                        "You Got Malware Aggahs Use of MsgBox Comments"
                    ]
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xf4fad264>",
                    "type": "UnknownWord",
                    "value": "msgbox"
                },
                "references": {
                    "sentences": [
                        "Aggah, a threat actor group that has been active since 2019, has delivered many payloads, mostly RevengeRAT, to numerous victims. This group is particularly adept at working with Microsoft Office documents and employs various methods in their VBA scripts to make them stealthier. One of these methods, which appears to be used to evade AI-based cyber tools, is the use of comments containing the string MsgBox.",
                        "MsgBox is a function used in VBA to prompt message boxes, which appear in many Visual Basic scripts and is usually benign. Having this string in the comments of a VBA code increases the likelihood that it will be classified as benign by an AI module. If the code is short and the lengthy MsgBox comments comprise a substantial part of it, this will further increase the chances that it will be classified as benign."
                    ],
                    "titles": [
                        "You Got Malware Aggahs Use of MsgBox Comments"
                    ]
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xb62dc418>",
                    "type": "UnknownWord",
                    "value": "stealthier"
                },
                "references": {
                    "sentences": [
                        "Aggah, a threat actor group that has been active since 2019, has delivered many payloads, mostly RevengeRAT, to numerous victims. This group is particularly adept at working with Microsoft Office documents and employs various methods in their VBA scripts to make them stealthier. One of these methods, which appears to be used to evade AI-based cyber tools, is the use of comments containing the string MsgBox."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xd0d24dc2>",
                    "type": "UnknownWord",
                    "value": "visual"
                },
                "references": {
                    "sentences": [
                        "MsgBox is a function used in VBA to prompt message boxes, which appear in many Visual Basic scripts and is usually benign. Having this string in the comments of a VBA code increases the likelihood that it will be classified as benign by an AI module. If the code is short and the lengthy MsgBox comments comprise a substantial part of it, this will further increase the chances that it will be classified as benign."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x754c7d23>",
                    "type": "UnknownWord",
                    "value": "lengthy"
                },
                "references": {
                    "sentences": [
                        "The strings highlighted in green in the above snippet are replaced in the lengthy strings extracted from the Excel cells by an empty string using the VBA Replace function. Padding parts of the actual commands with these strings decreases the chances of them being flagged during a static analysis. After the VBA Replace command is run, the following is received:",
                        "MsgBox is a function used in VBA to prompt message boxes, which appear in many Visual Basic scripts and is usually benign. Having this string in the comments of a VBA code increases the likelihood that it will be classified as benign by an AI module. If the code is short and the lengthy MsgBox comments comprise a substantial part of it, this will further increase the chances that it will be classified as benign."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xdbf097e7>",
                    "type": "UnknownWord",
                    "value": "comprise"
                },
                "references": {
                    "sentences": [
                        "MsgBox is a function used in VBA to prompt message boxes, which appear in many Visual Basic scripts and is usually benign. Having this string in the comments of a VBA code increases the likelihood that it will be classified as benign by an AI module. If the code is short and the lengthy MsgBox comments comprise a substantial part of it, this will further increase the chances that it will be classified as benign."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xd9e5af76>",
                    "type": "UnknownWord",
                    "value": "substantial"
                },
                "references": {
                    "sentences": [
                        "MsgBox is a function used in VBA to prompt message boxes, which appear in many Visual Basic scripts and is usually benign. Having this string in the comments of a VBA code increases the likelihood that it will be classified as benign by an AI module. If the code is short and the lengthy MsgBox comments comprise a substantial part of it, this will further increase the chances that it will be classified as benign."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x1525fafe>",
                    "type": "UnknownWord",
                    "value": "stack"
                },
                "references": {
                    "sentences": [],
                    "titles": [
                        "A Command in a Comments Stack Emotets Use of Random Sentences"
                    ]
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xead222f2>",
                    "type": "UnknownWord",
                    "value": "sentences"
                },
                "references": {
                    "sentences": [],
                    "titles": [
                        "A Command in a Comments Stack Emotets Use of Random Sentences"
                    ]
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xa42f013e>",
                    "type": "UnknownWord",
                    "value": "floating"
                },
                "references": {
                    "sentences": [
                        "We have seen recent Emotet VBA droppers containing long comments composed of random words. As we see in the figure below, the executed command and the variable containing it were not obfuscated, just floating in a sea of long random comments."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xb8304cdf>",
                    "type": "UnknownWord",
                    "value": "sea"
                },
                "references": {
                    "sentences": [
                        "We have seen recent Emotet VBA droppers containing long comments composed of random words. As we see in the figure below, the executed command and the variable containing it were not obfuscated, just floating in a sea of long random comments."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x9c7447ce>",
                    "type": "UnknownWord",
                    "value": "excessive"
                },
                "references": {
                    "sentences": [
                        "028a5447d36c7445e3b24757d5cb37bafa54c5dfa7c3393fa69dd26e278442a4 Emotet (excessive comments method) Office dropper",
                        "Obfuscated droppers are more difficult to detect they contain intentionally broken strings that evade static signatures, store malicious content in Excel cells, and use excessive comments in the hope of hiding their malicious content. But difficult does not mean impossible. Some patterns can still be signed statically, other behaviors can be detected dynamically, and if you want to take the bulldozer approach, you can just forbid all script executions (or at least most of them).",
                        "Using these excessive comments might fool both analysts and AI solutions (the former might miss the malicious MSHTA execution when looking at the code, and the latter might give more consideration to the benign features, aka the excessive comments, than to the malicious ones).",
                        "ed7c68c3c103beaa7e5f30a3b70a52bb5428ce1498b7f64feda74342f93e16fe Emotet (excessive comments method) VBA code"
                    ],
                    "titles": []
                },
                "links": [
                    {
                        "src": {
                            "id": "<SHA256_0x6c1b6363>",
                            "type": "Hash",
                            "hash_type": "SHA256",
                            "value": "028a5447d36c7445e3b24757d5cb37bafa54c5dfa7c3393fa69dd26e278442a4"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0x9c7447ce>",
                            "type": "UnknownWord",
                            "value": "excessive"
                        }
                    },
                    {
                        "src": {
                            "id": "<SHA256_0x38c4e697>",
                            "type": "Hash",
                            "hash_type": "SHA256",
                            "value": "ed7c68c3c103beaa7e5f30a3b70a52bb5428ce1498b7f64feda74342f93e16fe"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0x9c7447ce>",
                            "type": "UnknownWord",
                            "value": "excessive"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xe9eddaff>",
                    "type": "UnknownWord",
                    "value": "miss"
                },
                "references": {
                    "sentences": [
                        "Using these excessive comments might fool both analysts and AI solutions (the former might miss the malicious MSHTA execution when looking at the code, and the latter might give more consideration to the benign features, aka the excessive comments, than to the malicious ones)."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xd0d6061>",
                    "type": "UnknownWord",
                    "value": "consideration"
                },
                "references": {
                    "sentences": [
                        "Using these excessive comments might fool both analysts and AI solutions (the former might miss the malicious MSHTA execution when looking at the code, and the latter might give more consideration to the benign features, aka the excessive comments, than to the malicious ones)."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xcf845f09>",
                    "type": "UnknownWord",
                    "value": "homegrown"
                },
                "references": {
                    "sentences": [],
                    "titles": [
                        "Homegrown Obfuscation Dridexs Usage of Self-Created Functions"
                    ]
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x79c8b329>",
                    "type": "UnknownWord",
                    "value": "self-created"
                },
                "references": {
                    "sentences": [],
                    "titles": [
                        "Homegrown Obfuscation Dridexs Usage of Self-Created Functions"
                    ]
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x9e6afd05>",
                    "type": "UnknownWord",
                    "value": "slow"
                },
                "references": {
                    "sentences": [
                        "As we see below, the script retrieves strings stored in Excel cells and runs them through the slow function, which returns a de-obfuscated version of its input. The first string is collected from the B101 cell and is translated into WScript.Shell, the second is assembled by activating VBAs Transpose and Join commands on the cells range K111:K118."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x8e498f26>",
                    "type": "UnknownWord",
                    "value": "de-obfuscated"
                },
                "references": {
                    "sentences": [
                        "As we see below, the script retrieves strings stored in Excel cells and runs them through the slow function, which returns a de-obfuscated version of its input. The first string is collected from the B101 cell and is translated into WScript.Shell, the second is assembled by activating VBAs Transpose and Join commands on the cells range K111:K118."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x2da2fb7e>",
                    "type": "UnknownWord",
                    "value": "k111 k118"
                },
                "references": {
                    "sentences": [
                        "As we see below, the script retrieves strings stored in Excel cells and runs them through the slow function, which returns a de-obfuscated version of its input. The first string is collected from the B101 cell and is translated into WScript.Shell, the second is assembled by activating VBAs Transpose and Join commands on the cells range K111:K118."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xd3f1e9bf>",
                    "type": "UnknownWord",
                    "value": "b101"
                },
                "references": {
                    "sentences": [
                        "As we see below, the script retrieves strings stored in Excel cells and runs them through the slow function, which returns a de-obfuscated version of its input. The first string is collected from the B101 cell and is translated into WScript.Shell, the second is assembled by activating VBAs Transpose and Join commands on the cells range K111:K118."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x1f7c2d2e>",
                    "type": "UnknownWord",
                    "value": "assembled"
                },
                "references": {
                    "sentences": [
                        "As we see below, the script retrieves strings stored in Excel cells and runs them through the slow function, which returns a de-obfuscated version of its input. The first string is collected from the B101 cell and is translated into WScript.Shell, the second is assembled by activating VBAs Transpose and Join commands on the cells range K111:K118."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x76ee4587>",
                    "type": "UnknownWord",
                    "value": "transpose"
                },
                "references": {
                    "sentences": [
                        "The script is still in the works and currently handles only the cells, transpose, and replace functions. In addition, it only works on OOXML files and expects to get the VBA code as an input (I used oledump to extract it from examined Office files). There is still much work to do and cases to address, such as use of variables in function calls, e.g.: cells($i, $j) and of OLE files.",
                        "As we see below, the script retrieves strings stored in Excel cells and runs them through the slow function, which returns a de-obfuscated version of its input. The first string is collected from the B101 cell and is translated into WScript.Shell, the second is assembled by activating VBAs Transpose and Join commands on the cells range K111:K118."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xad87df08>",
                    "type": "UnknownWord",
                    "value": "vba"
                },
                "references": {
                    "sentences": [
                        "ed7c68c3c103beaa7e5f30a3b70a52bb5428ce1498b7f64feda74342f93e16fe Emotet (excessive comments method) VBA code",
                        "40a1e0aa0e580e2a15bbfd70ba4b89d3dd549bdc7bc075a223f12db0ddd2195d Emotet (Excel cells method) VBA code",
                        "4f5ecf2c3073edd549e8ea2b1e65d8c478f3390567cffa3c909d328a3969ddd8 Dridex VBA code",
                        "The Dridex droppers VBA output. Note: some parts of the code were redacted, since they are irrelevant to this blog.",
                        "cb9a5f0ad26cbb7b9f510b80df97f0045d7232d31cfde3cbce095d1c88c90e89 Aggah VBA code"
                    ],
                    "titles": []
                },
                "links": [
                    {
                        "src": {
                            "id": "<SHA256_0x4e73e131>",
                            "type": "Hash",
                            "hash_type": "SHA256",
                            "value": "4f5ecf2c3073edd549e8ea2b1e65d8c478f3390567cffa3c909d328a3969ddd8"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0xad87df08>",
                            "type": "UnknownWord",
                            "value": "vba"
                        }
                    },
                    {
                        "src": {
                            "id": "<SHA256_0x38c4e697>",
                            "type": "Hash",
                            "hash_type": "SHA256",
                            "value": "ed7c68c3c103beaa7e5f30a3b70a52bb5428ce1498b7f64feda74342f93e16fe"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0xad87df08>",
                            "type": "UnknownWord",
                            "value": "vba"
                        }
                    },
                    {
                        "src": {
                            "id": "<SHA256_0x3e0b2966>",
                            "type": "Hash",
                            "hash_type": "SHA256",
                            "value": "40a1e0aa0e580e2a15bbfd70ba4b89d3dd549bdc7bc075a223f12db0ddd2195d"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0xad87df08>",
                            "type": "UnknownWord",
                            "value": "vba"
                        }
                    },
                    {
                        "src": {
                            "id": "<SHA256_0xaa18e373>",
                            "type": "Hash",
                            "hash_type": "SHA256",
                            "value": "cb9a5f0ad26cbb7b9f510b80df97f0045d7232d31cfde3cbce095d1c88c90e89"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0xad87df08>",
                            "type": "UnknownWord",
                            "value": "vba"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xa155aadf>",
                    "type": "UnknownWord",
                    "value": "irrelevant"
                },
                "references": {
                    "sentences": [
                        "The Emotet dropper's VBA output. Note: some parts of the code were redacted, since they are irrelevant to this blog, moreover, some of them are never executed.",
                        "The Dridex droppers VBA output. Note: some parts of the code were redacted, since they are irrelevant to this blog."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x7a6a4e4>",
                    "type": "UnknownWord",
                    "value": "de-obfuscate"
                },
                "references": {
                    "sentences": [
                        "To de-obfuscate this part, I replaced every ${PJ} and ${GAB} mentioned in comma and quotation mark, respectively. I also replaced the indexed placeholders with the appropriate strings and removed unnecessary characters, such as backticks."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x23f537e5>",
                    "type": "UnknownWord",
                    "value": "gab"
                },
                "references": {
                    "sentences": [
                        "To de-obfuscate this part, I replaced every ${PJ} and ${GAB} mentioned in comma and quotation mark, respectively. I also replaced the indexed placeholders with the appropriate strings and removed unnecessary characters, such as backticks."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x92e16214>",
                    "type": "UnknownWord",
                    "value": "comma"
                },
                "references": {
                    "sentences": [
                        "To de-obfuscate this part, I replaced every ${PJ} and ${GAB} mentioned in comma and quotation mark, respectively. I also replaced the indexed placeholders with the appropriate strings and removed unnecessary characters, such as backticks."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xccbe53f9>",
                    "type": "UnknownWord",
                    "value": "quotation"
                },
                "references": {
                    "sentences": [
                        "To de-obfuscate this part, I replaced every ${PJ} and ${GAB} mentioned in comma and quotation mark, respectively. I also replaced the indexed placeholders with the appropriate strings and removed unnecessary characters, such as backticks."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x9742accc>",
                    "type": "UnknownWord",
                    "value": "indexed"
                },
                "references": {
                    "sentences": [
                        "To de-obfuscate this part, I replaced every ${PJ} and ${GAB} mentioned in comma and quotation mark, respectively. I also replaced the indexed placeholders with the appropriate strings and removed unnecessary characters, such as backticks."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x9971e043>",
                    "type": "UnknownWord",
                    "value": "placeholders"
                },
                "references": {
                    "sentences": [
                        "To de-obfuscate this part, I replaced every ${PJ} and ${GAB} mentioned in comma and quotation mark, respectively. I also replaced the indexed placeholders with the appropriate strings and removed unnecessary characters, such as backticks."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x65682d7c>",
                    "type": "UnknownWord",
                    "value": "backticks"
                },
                "references": {
                    "sentences": [
                        "To de-obfuscate this part, I replaced every ${PJ} and ${GAB} mentioned in comma and quotation mark, respectively. I also replaced the indexed placeholders with the appropriate strings and removed unnecessary characters, such as backticks."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x8234ba24>",
                    "type": "UnknownWord",
                    "value": "obviously"
                },
                "references": {
                    "sentences": [
                        "This is obviously obfuscated as well the main executed string is base64 encoded and deflate compressed. Of note, the attackers went the extra mile and tried to hide their use of the iex command (short for Invoke-Expression) by retrieving the characters i and e from the value of the environment variable pshome, which contains the path to the PowerShell directory, as can be seen in the highlighted section above."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x6455a6dd>",
                    "type": "UnknownWord",
                    "value": "deflate"
                },
                "references": {
                    "sentences": [
                        "This is obviously obfuscated as well the main executed string is base64 encoded and deflate compressed. Of note, the attackers went the extra mile and tried to hide their use of the iex command (short for Invoke-Expression) by retrieving the characters i and e from the value of the environment variable pshome, which contains the path to the PowerShell directory, as can be seen in the highlighted section above."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xeceedc11>",
                    "type": "UnknownWord",
                    "value": "extra"
                },
                "references": {
                    "sentences": [
                        "This is obviously obfuscated as well the main executed string is base64 encoded and deflate compressed. Of note, the attackers went the extra mile and tried to hide their use of the iex command (short for Invoke-Expression) by retrieving the characters i and e from the value of the environment variable pshome, which contains the path to the PowerShell directory, as can be seen in the highlighted section above."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x72ea1a3e>",
                    "type": "UnknownWord",
                    "value": "mile"
                },
                "references": {
                    "sentences": [
                        "This is obviously obfuscated as well the main executed string is base64 encoded and deflate compressed. Of note, the attackers went the extra mile and tried to hide their use of the iex command (short for Invoke-Expression) by retrieving the characters i and e from the value of the environment variable pshome, which contains the path to the PowerShell directory, as can be seen in the highlighted section above."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xfe9a8121>",
                    "type": "UnknownWord",
                    "value": "iex"
                },
                "references": {
                    "sentences": [
                        "In the above snippet, nal (New-Alias) and sal (Set-Alias) are used to set cf and ox as aliases for New-Object and iex, respectively.",
                        "This is obviously obfuscated as well the main executed string is base64 encoded and deflate compressed. Of note, the attackers went the extra mile and tried to hide their use of the iex command (short for Invoke-Expression) by retrieving the characters i and e from the value of the environment variable pshome, which contains the path to the PowerShell directory, as can be seen in the highlighted section above."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x661f813d>",
                    "type": "UnknownWord",
                    "value": "invoke-expression"
                },
                "references": {
                    "sentences": [
                        "This is obviously obfuscated as well the main executed string is base64 encoded and deflate compressed. Of note, the attackers went the extra mile and tried to hide their use of the iex command (short for Invoke-Expression) by retrieving the characters i and e from the value of the environment variable pshome, which contains the path to the PowerShell directory, as can be seen in the highlighted section above."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x16c7e2ad>",
                    "type": "UnknownWord",
                    "value": "pshome"
                },
                "references": {
                    "sentences": [
                        "This is obviously obfuscated as well the main executed string is base64 encoded and deflate compressed. Of note, the attackers went the extra mile and tried to hide their use of the iex command (short for Invoke-Expression) by retrieving the characters i and e from the value of the environment variable pshome, which contains the path to the PowerShell directory, as can be seen in the highlighted section above."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xdc79bf48>",
                    "type": "UnknownWord",
                    "value": "reassembling"
                },
                "references": {
                    "sentences": [
                        "After reassembling the strings and removing unnecessary characters, the following is received:"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xb8f6bb15>",
                    "type": "UnknownWord",
                    "value": "nal"
                },
                "references": {
                    "sentences": [
                        "In the above snippet, nal (New-Alias) and sal (Set-Alias) are used to set cf and ox as aliases for New-Object and iex, respectively."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x60781c60>",
                    "type": "UnknownWord",
                    "value": "new-alias"
                },
                "references": {
                    "sentences": [
                        "In the above snippet, nal (New-Alias) and sal (Set-Alias) are used to set cf and ox as aliases for New-Object and iex, respectively."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x76bf9c06>",
                    "type": "UnknownWord",
                    "value": "sal"
                },
                "references": {
                    "sentences": [
                        "In the above snippet, nal (New-Alias) and sal (Set-Alias) are used to set cf and ox as aliases for New-Object and iex, respectively."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x8dd014b4>",
                    "type": "UnknownWord",
                    "value": "set-alias"
                },
                "references": {
                    "sentences": [
                        "In the above snippet, nal (New-Alias) and sal (Set-Alias) are used to set cf and ox as aliases for New-Object and iex, respectively."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xd38eba87>",
                    "type": "UnknownWord",
                    "value": "new-object"
                },
                "references": {
                    "sentences": [
                        "In the above snippet, nal (New-Alias) and sal (Set-Alias) are used to set cf and ox as aliases for New-Object and iex, respectively."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x604f0e9d>",
                    "type": "UnknownWord",
                    "value": "yi ab"
                },
                "references": {
                    "sentences": [
                        ".(yi)(${aB}) returns another call to the yi function, which in turn provides the following output:"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x48d2cbb5>",
                    "type": "UnknownWord",
                    "value": "cleanup"
                },
                "references": {
                    "sentences": [
                        "And after some cleanup, we can finally get a semi-clear picture of what the dropper tries to do:"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x3a011136>",
                    "type": "UnknownWord",
                    "value": "semi-clear"
                },
                "references": {
                    "sentences": [
                        "And after some cleanup, we can finally get a semi-clear picture of what the dropper tries to do:"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xb6b65911>",
                    "type": "UnknownWord",
                    "value": "myself"
                },
                "references": {
                    "sentences": [
                        "After going over the above code (and adding a few notes for myself along the way, which I left in the snippet), I finally reached a verdict regarding the droppers true intention: it retrieves the users ID, removes the hyphens it contains, and assembles a URL that looks like this https://geronaga[.]com/gero?myHyphenLackingUID. It then downloads a file to the users temp directory, decodes and decrypts it, executes the files content using regsvr32 and then, finally, deletes this content to avoid leaving any traces."
                    ],
                    "titles": []
                },
                "links": [
                    {
                        "src": {
                            "id": "<URL_0x58bd24a3>",
                            "type": "Url",
                            "value": "https://geronaga.com/gero?myhyphenlackinguid"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0xb6b65911>",
                            "type": "UnknownWord",
                            "value": "myself"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x9552d7a>",
                    "type": "UnknownWord",
                    "value": "verdict"
                },
                "references": {
                    "sentences": [
                        "After going over the above code (and adding a few notes for myself along the way, which I left in the snippet), I finally reached a verdict regarding the droppers true intention: it retrieves the users ID, removes the hyphens it contains, and assembles a URL that looks like this https://geronaga[.]com/gero?myHyphenLackingUID. It then downloads a file to the users temp directory, decodes and decrypts it, executes the files content using regsvr32 and then, finally, deletes this content to avoid leaving any traces."
                    ],
                    "titles": []
                },
                "links": [
                    {
                        "src": {
                            "id": "<URL_0x58bd24a3>",
                            "type": "Url",
                            "value": "https://geronaga.com/gero?myhyphenlackinguid"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0x9552d7a>",
                            "type": "UnknownWord",
                            "value": "verdict"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x1075644>",
                    "type": "UnknownWord",
                    "value": "assembles"
                },
                "references": {
                    "sentences": [
                        "After going over the above code (and adding a few notes for myself along the way, which I left in the snippet), I finally reached a verdict regarding the droppers true intention: it retrieves the users ID, removes the hyphens it contains, and assembles a URL that looks like this https://geronaga[.]com/gero?myHyphenLackingUID. It then downloads a file to the users temp directory, decodes and decrypts it, executes the files content using regsvr32 and then, finally, deletes this content to avoid leaving any traces."
                    ],
                    "titles": []
                },
                "links": [
                    {
                        "src": {
                            "id": "<URL_0x58bd24a3>",
                            "type": "Url",
                            "value": "https://geronaga.com/gero?myhyphenlackinguid"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0x1075644>",
                            "type": "UnknownWord",
                            "value": "assembles"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xb0d4eb9b>",
                    "type": "UnknownWord",
                    "value": "excellent"
                },
                "references": {
                    "sentences": [
                        "For a more expanded analysis of this dropper, you can read this excellent blog."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x6fff4d08>",
                    "type": "UnknownWord",
                    "value": "resurrection"
                },
                "references": {
                    "sentences": [
                        "Sometimes, simple obfuscation techniques can be sufficient to avoid detection, especially if the infection flow involves multiple stages and files written in different scripting languages, as demonstrated below in the analysis of an Emotet dropper from the malware familys recent resurrection."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x6fb66cd2>",
                    "type": "UnknownWord",
                    "value": "damning"
                },
                "references": {
                    "sentences": [
                        "As you can see, the VBA function Cells is used in this script to extract contents of specified Excel cells and use them in the VBA script. Without knowing what these cells contain, it is difficult to determine whether the file is malicious or not, especially since none of the commands seems damning enough."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xee1ff795>",
                    "type": "UnknownWord",
                    "value": "clearer"
                },
                "references": {
                    "sentences": [
                        "To get a clearer picture, I replaced all the cells highlighted functions in the above code snippet with the matching string values, highlighted in yellow in the below code snippet."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x1d254168>",
                    "type": "UnknownWord",
                    "value": "wscript"
                },
                "references": {
                    "sentences": [
                        "With the information from the above decoded strings in hand, I could determine that the next stage in the infection flow is the VBS script, which the VBA dropper executes using wscript. Since there were no direct calls to the BAT script in the VBA code, I could assume that, if used, it would be executed from the VBS script.",
                        "This provided greater insight into the scripts functionality; the Wscript.shell string suggests Wscript will be used to execute additional commands, while \"c:\\programdata\\ughldskbhn.bat\" and \"c:\\programdata\\yhjlswle.vbs\" imply that Emotet uses these Batch and VBS files in this infection flow."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x5fb7a47f>",
                    "type": "UnknownWord",
                    "value": "ughldskbhn"
                },
                "references": {
                    "sentences": [
                        "This provided greater insight into the scripts functionality; the Wscript.shell string suggests Wscript will be used to execute additional commands, while \"c:\\programdata\\ughldskbhn.bat\" and \"c:\\programdata\\yhjlswle.vbs\" imply that Emotet uses these Batch and VBS files in this infection flow."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x4f7a7806>",
                    "type": "UnknownWord",
                    "value": "yhjlswle"
                },
                "references": {
                    "sentences": [
                        "This provided greater insight into the scripts functionality; the Wscript.shell string suggests Wscript will be used to execute additional commands, while \"c:\\programdata\\ughldskbhn.bat\" and \"c:\\programdata\\yhjlswle.vbs\" imply that Emotet uses these Batch and VBS files in this infection flow."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xeaf04568>",
                    "type": "UnknownWord",
                    "value": "imply"
                },
                "references": {
                    "sentences": [
                        "This provided greater insight into the scripts functionality; the Wscript.shell string suggests Wscript will be used to execute additional commands, while \"c:\\programdata\\ughldskbhn.bat\" and \"c:\\programdata\\yhjlswle.vbs\" imply that Emotet uses these Batch and VBS files in this infection flow."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x4deb0658>",
                    "type": "UnknownWord",
                    "value": "green"
                },
                "references": {
                    "sentences": [
                        "The strings highlighted in green in the above snippet are replaced in the lengthy strings extracted from the Excel cells by an empty string using the VBA Replace function. Padding parts of the actual commands with these strings decreases the chances of them being flagged during a static analysis. After the VBA Replace command is run, the following is received:"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x1b63d207>",
                    "type": "UnknownWord",
                    "value": "padding"
                },
                "references": {
                    "sentences": [
                        "The strings highlighted in green in the above snippet are replaced in the lengthy strings extracted from the Excel cells by an empty string using the VBA Replace function. Padding parts of the actual commands with these strings decreases the chances of them being flagged during a static analysis. After the VBA Replace command is run, the following is received:"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xac24e88f>",
                    "type": "UnknownWord",
                    "value": "separating"
                },
                "references": {
                    "sentences": [
                        "As can be seen above, the VBS script contains several commands, all concatenated using colons. After separating the commands into different lines and activating the replace functions, I received the following:"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xb549fc87>",
                    "type": "UnknownWord",
                    "value": "x08neuihlows"
                },
                "references": {
                    "sentences": [
                        "Basically, the script executes the previously created Batch file and then tries to execute c\\:programdata\\x08neuihlows.dll, while providing it with the value hjyldksfkw3 using rundll32. Since this is the first mention of x08neuihlows.dll and the VBS file executes the Batch script before running the DLL, it is fair to assume that the BAT script is in charge of dropping the executable in the right location."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xc5da1347>",
                    "type": "UnknownWord",
                    "value": "hjyldksfkw3"
                },
                "references": {
                    "sentences": [
                        "Basically, the script executes the previously created Batch file and then tries to execute c\\:programdata\\x08neuihlows.dll, while providing it with the value hjyldksfkw3 using rundll32. Since this is the first mention of x08neuihlows.dll and the VBS file executes the Batch script before running the DLL, it is fair to assume that the BAT script is in charge of dropping the executable in the right location."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xef201813>",
                    "type": "UnknownWord",
                    "value": "fair"
                },
                "references": {
                    "sentences": [
                        "Basically, the script executes the previously created Batch file and then tries to execute c\\:programdata\\x08neuihlows.dll, while providing it with the value hjyldksfkw3 using rundll32. Since this is the first mention of x08neuihlows.dll and the VBS file executes the Batch script before running the DLL, it is fair to assume that the BAT script is in charge of dropping the executable in the right location."
                    ],
                    "titles": []
                },
                "links": [
                    {
                        "src": {
                            "id": "<FILE_0xc07602c0>",
                            "type": "File",
                            "value": "x08neuihlows.dll"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0xef201813>",
                            "type": "UnknownWord",
                            "value": "fair"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xb59234aa>",
                    "type": "UnknownWord",
                    "value": "ampersands"
                },
                "references": {
                    "sentences": [
                        "Just like the VBS file uses colons to concatenate commands, the BAT script uses ampersands to do the same:"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x26d55f4f>",
                    "type": "UnknownWord",
                    "value": "translates"
                },
                "references": {
                    "sentences": [
                        "Which translates into the following:"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x77e77daf>",
                    "type": "UnknownWord",
                    "value": "mjxdfshdrfgzses4"
                },
                "references": {
                    "sentences": [
                        "As can be seen below, the variable MJXdfshDrfGZses4 contains a list of URLs which the script goes over using a for loop. Each time the for loop runs, it tries to download the Emotet DLL into \"c:\\programdata\\bneuihlows.dll\" using Invoke-WebRequest. Then, it checks if the downloaded files length is greater than 47436 bytes. If so, it means that the DLL was downloaded successfully, and the loop breaks."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xe6c15c26>",
                    "type": "UnknownWord",
                    "value": "bneuihlows"
                },
                "references": {
                    "sentences": [
                        "As can be seen below, the variable MJXdfshDrfGZses4 contains a list of URLs which the script goes over using a for loop. Each time the for loop runs, it tries to download the Emotet DLL into \"c:\\programdata\\bneuihlows.dll\" using Invoke-WebRequest. Then, it checks if the downloaded files length is greater than 47436 bytes. If so, it means that the DLL was downloaded successfully, and the loop breaks."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xeaba6949>",
                    "type": "UnknownWord",
                    "value": "invoke-webrequest"
                },
                "references": {
                    "sentences": [
                        "As can be seen below, the variable MJXdfshDrfGZses4 contains a list of URLs which the script goes over using a for loop. Each time the for loop runs, it tries to download the Emotet DLL into \"c:\\programdata\\bneuihlows.dll\" using Invoke-WebRequest. Then, it checks if the downloaded files length is greater than 47436 bytes. If so, it means that the DLL was downloaded successfully, and the loop breaks."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xa07a6dd0>",
                    "type": "UnknownWord",
                    "value": "deem"
                },
                "references": {
                    "sentences": [
                        "As we see in the above analysis, storing the actual commands in Excel cells instead of in the VBA code itself can be a good way to avoid detection because when a static analysis mechanism goes over the VBA code, it cannot determine whether the executed content is malicious or not. Since Excel cells have benign uses in VBA code as well, a security product may deem them as benign, to avoid a false positive."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xd7b62fb6>",
                    "type": "UnknownWord",
                    "value": "ooxml"
                },
                "references": {
                    "sentences": [
                        "To match the strings to the right cells, we need a cell to string mapping this is where xl/worksheets/sheetName.xml comes into the picture. In OOXML Excel files, data containing cells will be mapped in an XML file, which will be found in the following path- xl/worksheets/sheetName.xml, for example, the cells of sheet1 will be mapped in xl/worksheets/sheet1.xml. Each one of these cells mapping files contains a tag called SheetData, which contains a row tag for each row in the sheet that contains data. Each row entry contains c (cell) entries. Cells that contain strings have their t (type) values set to s and their v (value) tags contain an integer that is the index of the si object whose string the cell contains in sharedStrings.xml. Cells that contain other types of data, such as integers and floats, have it contained in their v tags.",
                        "The script is still in the works and currently handles only the cells, transpose, and replace functions. In addition, it only works on OOXML files and expects to get the VBA code as an input (I used oledump to extract it from examined Office files). There is still much work to do and cases to address, such as use of variables in function calls, e.g.: cells($i, $j) and of OLE files.",
                        "During my research, which focused on OOXML files, I found two files, which Excel creates by default, that could help achieve this goal: sharedStrings.xml and xl/worksheets/sheetName.xml."
                    ],
                    "titles": []
                },
                "links": [
                    {
                        "src": {
                            "id": "<FILE_0xa4432ed6>",
                            "type": "File",
                            "value": "sharedstrings.xml"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0xd7b62fb6>",
                            "type": "UnknownWord",
                            "value": "ooxml"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xe492ed6f>",
                    "type": "UnknownWord",
                    "value": "worksheets"
                },
                "references": {
                    "sentences": [
                        "To match the strings to the right cells, we need a cell to string mapping this is where xl/worksheets/sheetName.xml comes into the picture. In OOXML Excel files, data containing cells will be mapped in an XML file, which will be found in the following path- xl/worksheets/sheetName.xml, for example, the cells of sheet1 will be mapped in xl/worksheets/sheet1.xml. Each one of these cells mapping files contains a tag called SheetData, which contains a row tag for each row in the sheet that contains data. Each row entry contains c (cell) entries. Cells that contain strings have their t (type) values set to s and their v (value) tags contain an integer that is the index of the si object whose string the cell contains in sharedStrings.xml. Cells that contain other types of data, such as integers and floats, have it contained in their v tags.",
                        "An example of an xl/worksheets/sheetName.xml file",
                        "During my research, which focused on OOXML files, I found two files, which Excel creates by default, that could help achieve this goal: sharedStrings.xml and xl/worksheets/sheetName.xml."
                    ],
                    "titles": []
                },
                "links": [
                    {
                        "src": {
                            "id": "<FILE_0xa4432ed6>",
                            "type": "File",
                            "value": "sharedstrings.xml"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0xe492ed6f>",
                            "type": "UnknownWord",
                            "value": "worksheets"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xf5638614>",
                    "type": "UnknownWord",
                    "value": "sheetname"
                },
                "references": {
                    "sentences": [
                        "To match the strings to the right cells, we need a cell to string mapping this is where xl/worksheets/sheetName.xml comes into the picture. In OOXML Excel files, data containing cells will be mapped in an XML file, which will be found in the following path- xl/worksheets/sheetName.xml, for example, the cells of sheet1 will be mapped in xl/worksheets/sheet1.xml. Each one of these cells mapping files contains a tag called SheetData, which contains a row tag for each row in the sheet that contains data. Each row entry contains c (cell) entries. Cells that contain strings have their t (type) values set to s and their v (value) tags contain an integer that is the index of the si object whose string the cell contains in sharedStrings.xml. Cells that contain other types of data, such as integers and floats, have it contained in their v tags.",
                        "An example of an xl/worksheets/sheetName.xml file",
                        "During my research, which focused on OOXML files, I found two files, which Excel creates by default, that could help achieve this goal: sharedStrings.xml and xl/worksheets/sheetName.xml."
                    ],
                    "titles": []
                },
                "links": [
                    {
                        "src": {
                            "id": "<FILE_0xa4432ed6>",
                            "type": "File",
                            "value": "sharedstrings.xml"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0xf5638614>",
                            "type": "UnknownWord",
                            "value": "sheetname"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xdeb6d952>",
                    "type": "UnknownWord",
                    "value": "sharedstringitem"
                },
                "references": {
                    "sentences": [
                        "The first file, sharedStrings.xml, contains all the strings in the Excel file. The class SharedStringItem (ssi) represents string items (si) and each si element contains a text (t). The file contains unique strings, each representing the full content of one or more Excel cells."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x9c975daf>",
                    "type": "UnknownWord",
                    "value": "ssi"
                },
                "references": {
                    "sentences": [
                        "The first file, sharedStrings.xml, contains all the strings in the Excel file. The class SharedStringItem (ssi) represents string items (si) and each si element contains a text (t). The file contains unique strings, each representing the full content of one or more Excel cells."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xf35638a1>",
                    "type": "UnknownWord",
                    "value": "representing"
                },
                "references": {
                    "sentences": [
                        "The first file, sharedStrings.xml, contains all the strings in the Excel file. The class SharedStringItem (ssi) represents string items (si) and each si element contains a text (t). The file contains unique strings, each representing the full content of one or more Excel cells."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xbd647504>",
                    "type": "UnknownWord",
                    "value": "path-"
                },
                "references": {
                    "sentences": [
                        "To match the strings to the right cells, we need a cell to string mapping this is where xl/worksheets/sheetName.xml comes into the picture. In OOXML Excel files, data containing cells will be mapped in an XML file, which will be found in the following path- xl/worksheets/sheetName.xml, for example, the cells of sheet1 will be mapped in xl/worksheets/sheet1.xml. Each one of these cells mapping files contains a tag called SheetData, which contains a row tag for each row in the sheet that contains data. Each row entry contains c (cell) entries. Cells that contain strings have their t (type) values set to s and their v (value) tags contain an integer that is the index of the si object whose string the cell contains in sharedStrings.xml. Cells that contain other types of data, such as integers and floats, have it contained in their v tags."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x3345267c>",
                    "type": "UnknownWord",
                    "value": "sheet1"
                },
                "references": {
                    "sentences": [
                        "To match the strings to the right cells, we need a cell to string mapping this is where xl/worksheets/sheetName.xml comes into the picture. In OOXML Excel files, data containing cells will be mapped in an XML file, which will be found in the following path- xl/worksheets/sheetName.xml, for example, the cells of sheet1 will be mapped in xl/worksheets/sheet1.xml. Each one of these cells mapping files contains a tag called SheetData, which contains a row tag for each row in the sheet that contains data. Each row entry contains c (cell) entries. Cells that contain strings have their t (type) values set to s and their v (value) tags contain an integer that is the index of the si object whose string the cell contains in sharedStrings.xml. Cells that contain other types of data, such as integers and floats, have it contained in their v tags."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xac45ab46>",
                    "type": "UnknownWord",
                    "value": "sheetdata"
                },
                "references": {
                    "sentences": [
                        "To match the strings to the right cells, we need a cell to string mapping this is where xl/worksheets/sheetName.xml comes into the picture. In OOXML Excel files, data containing cells will be mapped in an XML file, which will be found in the following path- xl/worksheets/sheetName.xml, for example, the cells of sheet1 will be mapped in xl/worksheets/sheet1.xml. Each one of these cells mapping files contains a tag called SheetData, which contains a row tag for each row in the sheet that contains data. Each row entry contains c (cell) entries. Cells that contain strings have their t (type) values set to s and their v (value) tags contain an integer that is the index of the si object whose string the cell contains in sharedStrings.xml. Cells that contain other types of data, such as integers and floats, have it contained in their v tags."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xeb1b9c86>",
                    "type": "UnknownWord",
                    "value": "row"
                },
                "references": {
                    "sentences": [
                        "To match the strings to the right cells, we need a cell to string mapping this is where xl/worksheets/sheetName.xml comes into the picture. In OOXML Excel files, data containing cells will be mapped in an XML file, which will be found in the following path- xl/worksheets/sheetName.xml, for example, the cells of sheet1 will be mapped in xl/worksheets/sheet1.xml. Each one of these cells mapping files contains a tag called SheetData, which contains a row tag for each row in the sheet that contains data. Each row entry contains c (cell) entries. Cells that contain strings have their t (type) values set to s and their v (value) tags contain an integer that is the index of the si object whose string the cell contains in sharedStrings.xml. Cells that contain other types of data, such as integers and floats, have it contained in their v tags."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x64add0e7>",
                    "type": "UnknownWord",
                    "value": "floats"
                },
                "references": {
                    "sentences": [
                        "To match the strings to the right cells, we need a cell to string mapping this is where xl/worksheets/sheetName.xml comes into the picture. In OOXML Excel files, data containing cells will be mapped in an XML file, which will be found in the following path- xl/worksheets/sheetName.xml, for example, the cells of sheet1 will be mapped in xl/worksheets/sheet1.xml. Each one of these cells mapping files contains a tag called SheetData, which contains a row tag for each row in the sheet that contains data. Each row entry contains c (cell) entries. Cells that contain strings have their t (type) values set to s and their v (value) tags contain an integer that is the index of the si object whose string the cell contains in sharedStrings.xml. Cells that contain other types of data, such as integers and floats, have it contained in their v tags."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xcec70af5>",
                    "type": "UnknownWord",
                    "value": "mimicked"
                },
                "references": {
                    "sentences": [
                        "By writing a script that extracts that data, matches cells to their appropriate values, and replaces cell function calls with these values, I could make the script less obfuscated and increase the likelihood of it being flagged by a static analysis mechanism. I also addressed the VBA replace functions issue and mimicked its functionality in my code."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x67be5e78>",
                    "type": "UnknownWord",
                    "value": "oledump"
                },
                "references": {
                    "sentences": [
                        "The script is still in the works and currently handles only the cells, transpose, and replace functions. In addition, it only works on OOXML files and expects to get the VBA code as an input (I used oledump to extract it from examined Office files). There is still much work to do and cases to address, such as use of variables in function calls, e.g.: cells($i, $j) and of OLE files."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xabbb196c>",
                    "type": "UnknownWord",
                    "value": "intentionally"
                },
                "references": {
                    "sentences": [
                        "Obfuscated droppers are more difficult to detect they contain intentionally broken strings that evade static signatures, store malicious content in Excel cells, and use excessive comments in the hope of hiding their malicious content. But difficult does not mean impossible. Some patterns can still be signed statically, other behaviors can be detected dynamically, and if you want to take the bulldozer approach, you can just forbid all script executions (or at least most of them)."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x5bf7cf43>",
                    "type": "UnknownWord",
                    "value": "bulldozer"
                },
                "references": {
                    "sentences": [
                        "Obfuscated droppers are more difficult to detect they contain intentionally broken strings that evade static signatures, store malicious content in Excel cells, and use excessive comments in the hope of hiding their malicious content. But difficult does not mean impossible. Some patterns can still be signed statically, other behaviors can be detected dynamically, and if you want to take the bulldozer approach, you can just forbid all script executions (or at least most of them)."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x95c5d404>",
                    "type": "UnknownWord",
                    "value": "forbid"
                },
                "references": {
                    "sentences": [
                        "Obfuscated droppers are more difficult to detect they contain intentionally broken strings that evade static signatures, store malicious content in Excel cells, and use excessive comments in the hope of hiding their malicious content. But difficult does not mean impossible. Some patterns can still be signed statically, other behaviors can be detected dynamically, and if you want to take the bulldozer approach, you can just forbid all script executions (or at least most of them)."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xb96bea29>",
                    "type": "UnknownWord",
                    "value": "instincts"
                },
                "references": {
                    "sentences": [
                        "Deep Instincts agent uses deep learning to prevent malicious droppers, ensuring they cant execute in your environment. The Deep Instinct Prevention Platform stops known, unknown, and zero-day threats with the highest accuracy and lowest false-positive rate in the industry. We stop attacks before they happen, identifying malicious files in <20ms, before execution."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x188db0f9>",
                    "type": "UnknownWord",
                    "value": "instinct"
                },
                "references": {
                    "sentences": [
                        "Deep Instincts agent uses deep learning to prevent malicious droppers, ensuring they cant execute in your environment. The Deep Instinct Prevention Platform stops known, unknown, and zero-day threats with the highest accuracy and lowest false-positive rate in the industry. We stop attacks before they happen, identifying malicious files in <20ms, before execution."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x14bb4af3>",
                    "type": "UnknownWord",
                    "value": "accuracy"
                },
                "references": {
                    "sentences": [
                        "Deep Instincts agent uses deep learning to prevent malicious droppers, ensuring they cant execute in your environment. The Deep Instinct Prevention Platform stops known, unknown, and zero-day threats with the highest accuracy and lowest false-positive rate in the industry. We stop attacks before they happen, identifying malicious files in <20ms, before execution."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x2b3ee193>",
                    "type": "UnknownWord",
                    "value": "lowest"
                },
                "references": {
                    "sentences": [
                        "Deep Instincts agent uses deep learning to prevent malicious droppers, ensuring they cant execute in your environment. The Deep Instinct Prevention Platform stops known, unknown, and zero-day threats with the highest accuracy and lowest false-positive rate in the industry. We stop attacks before they happen, identifying malicious files in <20ms, before execution."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x1adc0883>",
                    "type": "UnknownWord",
                    "value": "false-positive"
                },
                "references": {
                    "sentences": [
                        "Deep Instincts agent uses deep learning to prevent malicious droppers, ensuring they cant execute in your environment. The Deep Instinct Prevention Platform stops known, unknown, and zero-day threats with the highest accuracy and lowest false-positive rate in the industry. We stop attacks before they happen, identifying malicious files in <20ms, before execution."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x6bd88aec>",
                    "type": "UnknownWord",
                    "value": "<20ms"
                },
                "references": {
                    "sentences": [
                        "Deep Instincts agent uses deep learning to prevent malicious droppers, ensuring they cant execute in your environment. The Deep Instinct Prevention Platform stops known, unknown, and zero-day threats with the highest accuracy and lowest false-positive rate in the industry. We stop attacks before they happen, identifying malicious files in <20ms, before execution."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x7ef8320e>",
                    "type": "UnknownWord",
                    "value": "youd"
                },
                "references": {
                    "sentences": [
                        "If youd like to see the platform in action for yourself, wed be honored to show you what true prevention looks like. Please request a demo."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xb0aabfbc>",
                    "type": "UnknownWord",
                    "value": "wed"
                },
                "references": {
                    "sentences": [
                        "If youd like to see the platform in action for yourself, wed be honored to show you what true prevention looks like. Please request a demo."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x526bca9>",
                    "type": "UnknownWord",
                    "value": "honored"
                },
                "references": {
                    "sentences": [
                        "If youd like to see the platform in action for yourself, wed be honored to show you what true prevention looks like. Please request a demo."
                    ],
                    "titles": []
                }
            }
        ]
    },
    "other_links": [],
    "info": {
        "potential_threats": {
            "<UNKNOWNWORD_0x5c83648d>": {
                "token": {
                    "id": "<UNKNOWNWORD_0x5c83648d>",
                    "type": "UnknownWord",
                    "value": "ai-based"
                },
                "references": {
                    "sentences": [
                        "Microsoft Office droppers have been a favorite of threat actors for years, continuously finding and exploiting them. Cybersecurity vendors take note and block these entry routes. Its a perpetual cat and mouse game and, unfortunately, bad actors typically have the upper hand at least for a short time. And as AI-based solutions have matured and gained market share these tools have also been targeted for evasion.",
                        "Aggah, a threat actor group that has been active since 2019, has delivered many payloads, mostly RevengeRAT, to numerous victims. This group is particularly adept at working with Microsoft Office documents and employs various methods in their VBA scripts to make them stealthier. One of these methods, which appears to be used to evade AI-based cyber tools, is the use of comments containing the string MsgBox."
                    ],
                    "titles": []
                }
            },
            "<UNKNOWNWORD_0xd0d24dc2>": {
                "token": {
                    "id": "<UNKNOWNWORD_0xd0d24dc2>",
                    "type": "UnknownWord",
                    "value": "visual"
                },
                "references": {
                    "sentences": [
                        "MsgBox is a function used in VBA to prompt message boxes, which appear in many Visual Basic scripts and is usually benign. Having this string in the comments of a VBA code increases the likelihood that it will be classified as benign by an AI module. If the code is short and the lengthy MsgBox comments comprise a substantial part of it, this will further increase the chances that it will be classified as benign."
                    ],
                    "titles": []
                }
            },
            "<UNKNOWNWORD_0x76ee4587>": {
                "token": {
                    "id": "<UNKNOWNWORD_0x76ee4587>",
                    "type": "UnknownWord",
                    "value": "transpose"
                },
                "references": {
                    "sentences": [
                        "The script is still in the works and currently handles only the cells, transpose, and replace functions. In addition, it only works on OOXML files and expects to get the VBA code as an input (I used oledump to extract it from examined Office files). There is still much work to do and cases to address, such as use of variables in function calls, e.g.: cells($i, $j) and of OLE files.",
                        "As we see below, the script retrieves strings stored in Excel cells and runs them through the slow function, which returns a de-obfuscated version of its input. The first string is collected from the B101 cell and is translated into WScript.Shell, the second is assembled by activating VBAs Transpose and Join commands on the cells range K111:K118."
                    ],
                    "titles": []
                }
            },
            "<UNKNOWNWORD_0x661f813d>": {
                "token": {
                    "id": "<UNKNOWNWORD_0x661f813d>",
                    "type": "UnknownWord",
                    "value": "invoke-expression"
                },
                "references": {
                    "sentences": [
                        "This is obviously obfuscated as well the main executed string is base64 encoded and deflate compressed. Of note, the attackers went the extra mile and tried to hide their use of the iex command (short for Invoke-Expression) by retrieving the characters i and e from the value of the environment variable pshome, which contains the path to the PowerShell directory, as can be seen in the highlighted section above."
                    ],
                    "titles": []
                }
            },
            "<UNKNOWNWORD_0x60781c60>": {
                "token": {
                    "id": "<UNKNOWNWORD_0x60781c60>",
                    "type": "UnknownWord",
                    "value": "new-alias"
                },
                "references": {
                    "sentences": [
                        "In the above snippet, nal (New-Alias) and sal (Set-Alias) are used to set cf and ox as aliases for New-Object and iex, respectively."
                    ],
                    "titles": []
                }
            },
            "<UNKNOWNWORD_0x8dd014b4>": {
                "token": {
                    "id": "<UNKNOWNWORD_0x8dd014b4>",
                    "type": "UnknownWord",
                    "value": "set-alias"
                },
                "references": {
                    "sentences": [
                        "In the above snippet, nal (New-Alias) and sal (Set-Alias) are used to set cf and ox as aliases for New-Object and iex, respectively."
                    ],
                    "titles": []
                }
            },
            "<UNKNOWNWORD_0xd38eba87>": {
                "token": {
                    "id": "<UNKNOWNWORD_0xd38eba87>",
                    "type": "UnknownWord",
                    "value": "new-object"
                },
                "references": {
                    "sentences": [
                        "In the above snippet, nal (New-Alias) and sal (Set-Alias) are used to set cf and ox as aliases for New-Object and iex, respectively."
                    ],
                    "titles": []
                }
            },
            "<UNKNOWNWORD_0x1d254168>": {
                "token": {
                    "id": "<UNKNOWNWORD_0x1d254168>",
                    "type": "UnknownWord",
                    "value": "wscript"
                },
                "references": {
                    "sentences": [
                        "With the information from the above decoded strings in hand, I could determine that the next stage in the infection flow is the VBS script, which the VBA dropper executes using wscript. Since there were no direct calls to the BAT script in the VBA code, I could assume that, if used, it would be executed from the VBS script.",
                        "This provided greater insight into the scripts functionality; the Wscript.shell string suggests Wscript will be used to execute additional commands, while \"c:\\programdata\\ughldskbhn.bat\" and \"c:\\programdata\\yhjlswle.vbs\" imply that Emotet uses these Batch and VBS files in this infection flow."
                    ],
                    "titles": []
                }
            },
            "<UNKNOWNWORD_0x77e77daf>": {
                "token": {
                    "id": "<UNKNOWNWORD_0x77e77daf>",
                    "type": "UnknownWord",
                    "value": "mjxdfshdrfgzses4"
                },
                "references": {
                    "sentences": [
                        "As can be seen below, the variable MJXdfshDrfGZses4 contains a list of URLs which the script goes over using a for loop. Each time the for loop runs, it tries to download the Emotet DLL into \"c:\\programdata\\bneuihlows.dll\" using Invoke-WebRequest. Then, it checks if the downloaded files length is greater than 47436 bytes. If so, it means that the DLL was downloaded successfully, and the loop breaks."
                    ],
                    "titles": []
                }
            },
            "<UNKNOWNWORD_0xeaba6949>": {
                "token": {
                    "id": "<UNKNOWNWORD_0xeaba6949>",
                    "type": "UnknownWord",
                    "value": "invoke-webrequest"
                },
                "references": {
                    "sentences": [
                        "As can be seen below, the variable MJXdfshDrfGZses4 contains a list of URLs which the script goes over using a for loop. Each time the for loop runs, it tries to download the Emotet DLL into \"c:\\programdata\\bneuihlows.dll\" using Invoke-WebRequest. Then, it checks if the downloaded files length is greater than 47436 bytes. If so, it means that the DLL was downloaded successfully, and the loop breaks."
                    ],
                    "titles": []
                }
            },
            "<UNKNOWNWORD_0xd7b62fb6>": {
                "token": {
                    "id": "<UNKNOWNWORD_0xd7b62fb6>",
                    "type": "UnknownWord",
                    "value": "ooxml"
                },
                "references": {
                    "sentences": [
                        "To match the strings to the right cells, we need a cell to string mapping this is where xl/worksheets/sheetName.xml comes into the picture. In OOXML Excel files, data containing cells will be mapped in an XML file, which will be found in the following path- xl/worksheets/sheetName.xml, for example, the cells of sheet1 will be mapped in xl/worksheets/sheet1.xml. Each one of these cells mapping files contains a tag called SheetData, which contains a row tag for each row in the sheet that contains data. Each row entry contains c (cell) entries. Cells that contain strings have their t (type) values set to s and their v (value) tags contain an integer that is the index of the si object whose string the cell contains in sharedStrings.xml. Cells that contain other types of data, such as integers and floats, have it contained in their v tags.",
                        "The script is still in the works and currently handles only the cells, transpose, and replace functions. In addition, it only works on OOXML files and expects to get the VBA code as an input (I used oledump to extract it from examined Office files). There is still much work to do and cases to address, such as use of variables in function calls, e.g.: cells($i, $j) and of OLE files.",
                        "During my research, which focused on OOXML files, I found two files, which Excel creates by default, that could help achieve this goal: sharedStrings.xml and xl/worksheets/sheetName.xml."
                    ],
                    "titles": []
                },
                "links": [
                    {
                        "src": {
                            "id": "<FILE_0xa4432ed6>",
                            "type": "File",
                            "value": "sharedstrings.xml"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0xd7b62fb6>",
                            "type": "UnknownWord",
                            "value": "ooxml"
                        }
                    }
                ]
            },
            "<UNKNOWNWORD_0xdeb6d952>": {
                "token": {
                    "id": "<UNKNOWNWORD_0xdeb6d952>",
                    "type": "UnknownWord",
                    "value": "sharedstringitem"
                },
                "references": {
                    "sentences": [
                        "The first file, sharedStrings.xml, contains all the strings in the Excel file. The class SharedStringItem (ssi) represents string items (si) and each si element contains a text (t). The file contains unique strings, each representing the full content of one or more Excel cells."
                    ],
                    "titles": []
                }
            },
            "<UNKNOWNWORD_0xac45ab46>": {
                "token": {
                    "id": "<UNKNOWNWORD_0xac45ab46>",
                    "type": "UnknownWord",
                    "value": "sheetdata"
                },
                "references": {
                    "sentences": [
                        "To match the strings to the right cells, we need a cell to string mapping this is where xl/worksheets/sheetName.xml comes into the picture. In OOXML Excel files, data containing cells will be mapped in an XML file, which will be found in the following path- xl/worksheets/sheetName.xml, for example, the cells of sheet1 will be mapped in xl/worksheets/sheet1.xml. Each one of these cells mapping files contains a tag called SheetData, which contains a row tag for each row in the sheet that contains data. Each row entry contains c (cell) entries. Cells that contain strings have their t (type) values set to s and their v (value) tags contain an integer that is the index of the si object whose string the cell contains in sharedStrings.xml. Cells that contain other types of data, such as integers and floats, have it contained in their v tags."
                    ],
                    "titles": []
                }
            },
            "<UNKNOWNWORD_0xb96bea29>": {
                "token": {
                    "id": "<UNKNOWNWORD_0xb96bea29>",
                    "type": "UnknownWord",
                    "value": "instincts"
                },
                "references": {
                    "sentences": [
                        "Deep Instincts agent uses deep learning to prevent malicious droppers, ensuring they cant execute in your environment. The Deep Instinct Prevention Platform stops known, unknown, and zero-day threats with the highest accuracy and lowest false-positive rate in the industry. We stop attacks before they happen, identifying malicious files in <20ms, before execution."
                    ],
                    "titles": []
                }
            },
            "<UNKNOWNWORD_0x188db0f9>": {
                "token": {
                    "id": "<UNKNOWNWORD_0x188db0f9>",
                    "type": "UnknownWord",
                    "value": "instinct"
                },
                "references": {
                    "sentences": [
                        "Deep Instincts agent uses deep learning to prevent malicious droppers, ensuring they cant execute in your environment. The Deep Instinct Prevention Platform stops known, unknown, and zero-day threats with the highest accuracy and lowest false-positive rate in the industry. We stop attacks before they happen, identifying malicious files in <20ms, before execution."
                    ],
                    "titles": []
                }
            }
        },
        "sigma": false,
        "yara": false
    },
    "keywords": {
        "classified": [],
        "dubbed": [],
        "associated": [],
        "targets": [],
        "attributed": []
    },
    "resources": {
        "links": {
            "github": [
                "https://github.com/deepinstinct/Exceller",
                "https://github.com/DidierStevens/DidierStevensSuite/blob/master/oledump.py"
            ],
            "pastebin": [],
            "text_files": [],
            "other": [
                "https://www.deepinstinct.com/author/bar-block",
                "https://www.deepinstinct.com/blog/the-re-emergence-of-emotet",
                "https://www.deepinstinct.com/blog/aghast-at-aggah-teasing-security-controls-with-advanced-evasion-techniques",
                "https://haxys.net/tutorials/reversing/powershell/0-reverse/",
                "https://www.deepinstinct.com/platform",
                "https://www.deepinstinct.com/request-a-demo"
            ]
        },
        "images": [
            "https://www.deepinstinct.com/_next/image?url=https%3A%2F%2Fwww.deepinstinct.com%2Fimage%2Fblt442cf53006fa9f86%2F628bac33dcc93261eccb0ce7%2Fdropper-microsoft.png&w=3840&q=100",
            "https://www.deepinstinct.com/_next/image?url=https%3A%2F%2Fwww.deepinstinct.com%2Fimage%2Fblt442cf53006fa9f86%2F628bac33dcc93261eccb0ce7%2Fdropper-microsoft.png&w=3840&q=100",
            "https://www.deepinstinct.com/image/blt16045f0fc463790b/628bf86fb385dc53524279a4/figure-1-aggah-dropper-vba-code.png",
            "https://www.deepinstinct.com/image/blt09a4cd05aeda025c/628bf970dcc93261eccb0f7c/figure-2-emotet-dropper.png",
            "https://www.deepinstinct.com/image/bltf3327db072364607/628d1fdfb385dc535242822b/figure-3-dridex-dropper.png",
            "https://www.deepinstinct.com/image/blt7649ae84ea8d869e/628d2077ce671353d5082b52/figure-4.png",
            "https://www.deepinstinct.com/image/blt0ca60396657c7038/628bfac78e88d660b6a1470d/figure-5.png",
            "https://www.deepinstinct.com/image/blt7719083856e6757e/628bfac7bd980555189d83c9/figure-6.png",
            "https://www.deepinstinct.com/image/blt414878f67faefe29/628bfac7dcc93261eccb102a/figure-7.png",
            "https://www.deepinstinct.com/image/bltf6c6237be83fffba/628bfac7b4fa6b61ed70c66a/figure-8.png",
            "https://www.deepinstinct.com/image/blta249affc12700c80/628bfac7b385dc5352427a53/figure-9.png",
            "https://www.deepinstinct.com/image/blta229676baf288b34/628bfac73b65ce548fba2194/figure-10-emotet-dropper.png",
            "https://www.deepinstinct.com/image/bltefb059d80970414f/628d28f730bc9653db3ade0c/figure-11-1.png",
            "https://www.deepinstinct.com/image/bltc7c65192480d38bf/628d28f7b4fa6b61ed70ca73/figure-11-2.png",
            "https://www.deepinstinct.com/image/blta1bf7239df1d2ab3/628d28f76f81705517a1e6d2/figure-11-3.png",
            "https://www.deepinstinct.com/image/blt2ab7d48cb6753b4d/628cfab5b4fa6b61ed70c9a7/snippet-12.png",
            "https://www.deepinstinct.com/image/blt7b40a6a3494af1aa/628cfab5dcc93261eccb1481/snippet-13.png",
            "https://www.deepinstinct.com/image/blt58a773fc0bc8a2aa/628d27a0ce671353d5082b66/figure-14.png",
            "https://www.deepinstinct.com/image/bltce0b755eabaaca2e/628d238d30bc9653db3addf4/figure-15.png",
            "https://www.deepinstinct.com/image/bltec6bde9b358dfeac/628d2bd11cd65960bcff1f60/figure-16-0.png",
            "https://www.deepinstinct.com/image/blt795151ceb599ddd2/628d23bd3b9b8554904a63dd/figure-16-powershell-code.png",
            "https://www.deepinstinct.com/image/blt0273849fee256c6f/628d23cd1cd65960bcff1f44/figure-17.png",
            "https://www.deepinstinct.com/image/blt24ec4b6bf6ce685c/628d23e7ce671353d5082b58/figure-18.png",
            "https://www.deepinstinct.com/image/bltd1eb9eeb4f23484f/628d23e78e88d660b6a14dda/figure-19.png",
            "https://www.deepinstinct.com/image/bltfddbcdb8ae8fe085/628d23fadcc93261eccb1509/figure-20.png"
        ]
    }
}