{
    "title": "How to Analyze Malicious PDF Files",
    "url": "https://www.intezer.com/blog/incident-response/analyze-malicious-pdf-files",
    "threats": {
        "Threat": [
            {
                "token": {
                    "id": "<THREAT_0x7b599f25>",
                    "type": "Threat",
                    "value": "raccoon_stealer"
                },
                "references": {
                    "sentences": [
                        "In the process tree we see the execution chain of the PDF followed by word process to open the RTF file and then the call to Equation Editor that is being exploited by the RTF. The malware is classified as Raccoon Stealer. We can see in the Genetic Analysis tab that the sample shares code with Azorult and thats because Raccoon Stealer is considered as its successor."
                    ],
                    "titles": [
                        "Investigating Suspicious PDF Files"
                    ]
                },
                "links": [
                    {
                        "src": {
                            "id": "<THREAT_0x7b599f25>",
                            "type": "Threat",
                            "value": "raccoon_stealer"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<THREAT_0x84afd698>",
                            "type": "Threat",
                            "value": "azorult"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<THREAT_0x84afd698>",
                    "type": "Threat",
                    "value": "azorult"
                },
                "references": {
                    "sentences": [
                        "In the process tree we see the execution chain of the PDF followed by word process to open the RTF file and then the call to Equation Editor that is being exploited by the RTF. The malware is classified as Raccoon Stealer. We can see in the Genetic Analysis tab that the sample shares code with Azorult and thats because Raccoon Stealer is considered as its successor."
                    ],
                    "titles": [
                        "Investigating Suspicious PDF Files"
                    ]
                },
                "links": [
                    {
                        "src": {
                            "id": "<THREAT_0x7b599f25>",
                            "type": "Threat",
                            "value": "raccoon_stealer"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<THREAT_0x84afd698>",
                            "type": "Threat",
                            "value": "azorult"
                        }
                    }
                ]
            }
        ]
    },
    "ttps": {},
    "meanings": {
        "Category": [
            {
                "token": {
                    "id": "<CATEGORY_0xf1a480bb>",
                    "type": "Category",
                    "value": "malware"
                },
                "references": {
                    "sentences": [
                        "In this article, we will describe the PDF format and how it can be abused to deliver malware. Then we will show how to identify and detect malicious PDF files using open-source and free tools.",
                        "You can find more information about the tools and techniques to analyze malicious Office files by checking out our previous blog. From the output of rtfobj we learn that the extracted RTF file exploited CVE-2017-11882 a known vulnerability in Microsoft Equation Editor that enables code execution. Since Microsoft patched this vulnerability, this particular attack would only be effective if a user failed to keep their software updated. Now, we can either continue investigating the shellcode located in the RTF file or upload the original PDF to Intezer Analyze that will automatically execute all the steps we just did and on top of that provide a classification of the threat executed by the PDF.",
                        "In the process tree we see the execution chain of the PDF followed by word process to open the RTF file and then the call to Equation Editor that is being exploited by the RTF. The malware is classified as Raccoon Stealer. We can see in the Genetic Analysis tab that the sample shares code with Azorult and thats because Raccoon Stealer is considered as its successor.",
                        "Upon inspecting the javascript code we can determine that the PDF file will open a window that will ask the victim to login into his Amazon account, but the data will be submit to a malicious site http://sellercentral[.]amazon.de.56U8GTHDGT4U7YWEWE84GTYS.abecklink.com eventually leading to credential stealing. In the screenshot below is the execution of the PDF file in Intezer Analyze, which lets us inspect the behavior of the file.",
                        "Nicole is a malware analyst and reverse engineer. Prior to Intezer she was an embedded researcher in the Israel Defense Forces (IDF) Intelligence Corps.",
                        "Portable Document Format (PDF) files are cross-platform file format, supporting links, images, and fonts. The flexibility of the PDF format makes these files very useful and widely used by individuals and organizations all over the world. At the same time, this format is very appealing for cyber criminals, as they can create valid looking documents that will deliver malicious code, or will trick users into clicking links.",
                        "Another way in which threat actors can use the format is to deliver malware in the PDF streams. Streams can contain any type of data (including scripts and binary files) and they can be compressed and encoded which makes it harder to detect embedded code inside files. The compression technique is specified with the name /filter (as mentioned in its part of the dictionary that describes a stream). A stream can have more than one filter.",
                        "One of the challenges of incident responders is to identify and classify the malicious files that were used in the attack that compromised the endpoint. PDF files make the process more time consuming because PDF files can carry malicious code that is hidden and compressed inside the streams of the file, all while these files are widely used for legitimate business both internally and externally in organizations. On top of that, alert fatigue can be a cause of missed alerts and increase the response time of new files to analyze.",
                        "PDF files can be modified so additional elements (such cross-reference tables) will be appended to the end of the file. Now that we understand the format lets see how it can be used by attackers to conceal malicious code.",
                        "Lets take a look at another PDF file (MD5: 1ba5c7ecab62609e4f1d44192cef850e). Once again we will start by running peepdf on the file to understand if the file might be malicious."
                    ],
                    "titles": [
                        "What is the PDF File Format?",
                        "How to Analyze Malicious PDF Files",
                        "Scanning a High Volume of PDFs for Malware",
                        "How PDF Files Get Used to Deliver Malware",
                        "Investigating Suspicious PDF Files"
                    ]
                },
                "links": [
                    {
                        "src": {
                            "id": "<URL_0x97337a93>",
                            "type": "Url",
                            "value": "http://sellercentral.amazon.de.56u8gthdgt4u7ywewe84gtys.abecklink.com"
                        },
                        "relation": "has_category",
                        "dst": {
                            "id": "<CATEGORY_0xf1a480bb>",
                            "type": "Category",
                            "value": "malware"
                        }
                    },
                    {
                        "src": {
                            "id": "<GEO_0x8c658494>",
                            "type": "Geo",
                            "value": "israel"
                        },
                        "relation": "has_category",
                        "dst": {
                            "id": "<CATEGORY_0xf1a480bb>",
                            "type": "Category",
                            "value": "malware"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<CATEGORY_0x96121f83>",
                    "type": "Category",
                    "value": "backdoor"
                },
                "references": {
                    "sentences": [
                        "Many attacks start from a received file, usually attached to an email. Then once the victim opens the file or interacts with it by clicking on links or buttons, the next stage of the attack is executed. The purpose of the attack can be information stealing, installing a backdoor, gaining access to the system, and more."
                    ],
                    "titles": [
                        "How to Analyze Malicious PDF Files"
                    ]
                }
            },
            {
                "token": {
                    "id": "<CATEGORY_0x2ff279a6>",
                    "type": "Category",
                    "value": "phishing"
                },
                "references": {
                    "sentences": [
                        "Many phishing attacks will contain links or images of buttons, coupons, fake CAPTCHA, fake play buttons and more. The purpose of these files is to redirect the victims to sites controlled by the threat actors where they can proceed to the next stage of the attack.",
                        "This PDF was sent as part of a phishing scam that targeted German speaking victims: the PDF was attached to an email regarding a tax invoice asking the victims to open the attached document and login to their Amazon account."
                    ],
                    "titles": [
                        "How PDF Files Get Used to Deliver Malware",
                        "Investigating Suspicious PDF Files"
                    ]
                }
            },
            {
                "token": {
                    "id": "<CATEGORY_0x8a10eea2>",
                    "type": "Category",
                    "value": "scam"
                },
                "references": {
                    "sentences": [
                        "This PDF was sent as part of a phishing scam that targeted German speaking victims: the PDF was attached to an email regarding a tax invoice asking the victims to open the attached document and login to their Amazon account."
                    ],
                    "titles": [
                        "Investigating Suspicious PDF Files"
                    ]
                }
            },
            {
                "token": {
                    "id": "<CATEGORY_0xb68aa214>",
                    "type": "Category",
                    "value": "rat"
                },
                "references": {
                    "sentences": [
                        "You can find more information about the tools and techniques to analyze malicious Office files by checking out our previous blog. From the output of rtfobj we learn that the extracted RTF file exploited CVE-2017-11882 a known vulnerability in Microsoft Equation Editor that enables code execution. Since Microsoft patched this vulnerability, this particular attack would only be effective if a user failed to keep their software updated. Now, we can either continue investigating the shellcode located in the RTF file or upload the original PDF to Intezer Analyze that will automatically execute all the steps we just did and on top of that provide a classification of the threat executed by the PDF."
                    ],
                    "titles": [
                        "Investigating Suspicious PDF Files"
                    ]
                }
            },
            {
                "token": {
                    "id": "<CATEGORY_0xfda51682>",
                    "type": "Category",
                    "value": "scan"
                },
                "references": {
                    "sentences": [
                        "Scan 50 files for free (including PDFs) with Intezer Analyze. If you want to learn how your team can automate alert triage to scan files, URLs, memory dumps, and more book a time to talk with us."
                    ],
                    "titles": [
                        "Scanning a High Volume of PDFs for Malware"
                    ]
                }
            }
        ],
        "Geo": [
            {
                "token": {
                    "id": "<GEO_0xddfcf80f>",
                    "type": "Geo",
                    "value": "german"
                },
                "references": {
                    "sentences": [
                        "This PDF was sent as part of a phishing scam that targeted German speaking victims: the PDF was attached to an email regarding a tax invoice asking the victims to open the attached document and login to their Amazon account."
                    ],
                    "titles": [
                        "Investigating Suspicious PDF Files"
                    ]
                }
            },
            {
                "token": {
                    "id": "<GEO_0x8c658494>",
                    "type": "Geo",
                    "value": "israel"
                },
                "references": {
                    "sentences": [
                        "Nicole is a malware analyst and reverse engineer. Prior to Intezer she was an embedded researcher in the Israel Defense Forces (IDF) Intelligence Corps."
                    ],
                    "titles": [
                        "Scanning a High Volume of PDFs for Malware"
                    ]
                },
                "links": [
                    {
                        "src": {
                            "id": "<GEO_0x8c658494>",
                            "type": "Geo",
                            "value": "israel"
                        },
                        "relation": "has_category",
                        "dst": {
                            "id": "<CATEGORY_0xf1a480bb>",
                            "type": "Category",
                            "value": "malware"
                        }
                    }
                ]
            }
        ],
        "CVE": [
            {
                "token": {
                    "id": "<CVE_0xac7ff143>",
                    "type": "CVE",
                    "value": "cve-2017-11882"
                },
                "references": {
                    "sentences": [
                        "You can find more information about the tools and techniques to analyze malicious Office files by checking out our previous blog. From the output of rtfobj we learn that the extracted RTF file exploited CVE-2017-11882 a known vulnerability in Microsoft Equation Editor that enables code execution. Since Microsoft patched this vulnerability, this particular attack would only be effective if a user failed to keep their software updated. Now, we can either continue investigating the shellcode located in the RTF file or upload the original PDF to Intezer Analyze that will automatically execute all the steps we just did and on top of that provide a classification of the threat executed by the PDF."
                    ],
                    "titles": [
                        "Investigating Suspicious PDF Files"
                    ]
                },
                "info": {
                    "vulners_score": 8.3,
                    "cvss_score": 9.3,
                    "exploit": true,
                    "softs": {
                        "microsoft office": [
                            "2013",
                            "2010",
                            "2016",
                            "2007"
                        ]
                    },
                    "patch": "official fix",
                    "risk_level": 7.8
                }
            }
        ]
    },
    "iocs": {
        "Hash": [
            {
                "token": {
                    "id": "<MD5_0x9933ad26>",
                    "type": "Hash",
                    "hash_type": "MD5",
                    "value": "a2852936a7e33787c0ab11f346631d89"
                },
                "references": {
                    "sentences": [
                        "Lets investigate the following PDF file (MD5: a2852936a7e33787c0ab11f346631d89). The first tool that we are going to use is peepdf, a python tool that parses PDF files allowing us to get the types and content of each object. It will also color the object and highlight the objects that make the file suspicious, like the presence of javascript and embedded files."
                    ],
                    "titles": [
                        "Investigating Suspicious PDF Files"
                    ]
                },
                "links": [
                    {
                        "src": {
                            "id": "<MD5_0x9933ad26>",
                            "type": "Hash",
                            "hash_type": "MD5",
                            "value": "a2852936a7e33787c0ab11f346631d89"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0x8a45075c>",
                            "type": "UnknownWord",
                            "value": "investigate"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<MD5_0x469f4f65>",
                    "type": "Hash",
                    "hash_type": "MD5",
                    "value": "1ba5c7ecab62609e4f1d44192cef850e"
                },
                "references": {
                    "sentences": [
                        "Lets take a look at another PDF file (MD5: 1ba5c7ecab62609e4f1d44192cef850e). Once again we will start by running peepdf on the file to understand if the file might be malicious."
                    ],
                    "titles": [
                        "Investigating Suspicious PDF Files"
                    ]
                }
            }
        ],
        "Url": [
            {
                "token": {
                    "id": "<URL_0x97337a93>",
                    "type": "Url",
                    "value": "http://sellercentral.amazon.de.56u8gthdgt4u7ywewe84gtys.abecklink.com"
                },
                "references": {
                    "sentences": [
                        "Upon inspecting the javascript code we can determine that the PDF file will open a window that will ask the victim to login into his Amazon account, but the data will be submit to a malicious site http://sellercentral[.]amazon.de.56U8GTHDGT4U7YWEWE84GTYS.abecklink.com eventually leading to credential stealing. In the screenshot below is the execution of the PDF file in Intezer Analyze, which lets us inspect the behavior of the file."
                    ],
                    "titles": [
                        "Investigating Suspicious PDF Files"
                    ]
                },
                "links": [
                    {
                        "src": {
                            "id": "<URL_0x97337a93>",
                            "type": "Url",
                            "value": "http://sellercentral.amazon.de.56u8gthdgt4u7ywewe84gtys.abecklink.com"
                        },
                        "relation": "has_category",
                        "dst": {
                            "id": "<CATEGORY_0xf1a480bb>",
                            "type": "Category",
                            "value": "malware"
                        }
                    },
                    {
                        "src": {
                            "id": "<URL_0x97337a93>",
                            "type": "Url",
                            "value": "http://sellercentral.amazon.de.56u8gthdgt4u7ywewe84gtys.abecklink.com"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0xa3f46e0b>",
                            "type": "UnknownWord",
                            "value": "inspecting"
                        }
                    }
                ]
            }
        ]
    },
    "unknownwords": {
        "UnknownWord": [
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x8103e894>",
                    "type": "UnknownWord",
                    "value": "nicole"
                },
                "references": {
                    "sentences": [
                        "Written by Nicole Fishbein - 20 April 2022",
                        "Nicole is a malware analyst and reverse engineer. Prior to Intezer she was an embedded researcher in the Israel Defense Forces (IDF) Intelligence Corps.",
                        "Nicole Fishbein"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xf28d14e8>",
                    "type": "UnknownWord",
                    "value": "fishbein"
                },
                "references": {
                    "sentences": [
                        "Written by Nicole Fishbein - 20 April 2022",
                        "Nicole Fishbein"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x88241b63>",
                    "type": "UnknownWord",
                    "value": "cross-platform"
                },
                "references": {
                    "sentences": [
                        "Portable Document Format (PDF) files are cross-platform file format, supporting links, images, and fonts. The flexibility of the PDF format makes these files very useful and widely used by individuals and organizations all over the world. At the same time, this format is very appealing for cyber criminals, as they can create valid looking documents that will deliver malicious code, or will trick users into clicking links."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xbf50acdf>",
                    "type": "UnknownWord",
                    "value": "fonts"
                },
                "references": {
                    "sentences": [
                        "Portable Document Format (PDF) files are cross-platform file format, supporting links, images, and fonts. The flexibility of the PDF format makes these files very useful and widely used by individuals and organizations all over the world. At the same time, this format is very appealing for cyber criminals, as they can create valid looking documents that will deliver malicious code, or will trick users into clicking links."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x551e7ebb>",
                    "type": "UnknownWord",
                    "value": "flexibility"
                },
                "references": {
                    "sentences": [
                        "PDF files are very common and useful for all types of organizations but the flexibility of the PDF format makes it also very attractive for threat actors who use it to carry out different sorts of attacks. In this blog we presented several open-source and free tools that can be used for static analysis of a single PDF.",
                        "Portable Document Format (PDF) files are cross-platform file format, supporting links, images, and fonts. The flexibility of the PDF format makes these files very useful and widely used by individuals and organizations all over the world. At the same time, this format is very appealing for cyber criminals, as they can create valid looking documents that will deliver malicious code, or will trick users into clicking links."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xf943ef17>",
                    "type": "UnknownWord",
                    "value": "appealing"
                },
                "references": {
                    "sentences": [
                        "Portable Document Format (PDF) files are cross-platform file format, supporting links, images, and fonts. The flexibility of the PDF format makes these files very useful and widely used by individuals and organizations all over the world. At the same time, this format is very appealing for cyber criminals, as they can create valid looking documents that will deliver malicious code, or will trick users into clicking links."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x2038084d>",
                    "type": "UnknownWord",
                    "value": "responders"
                },
                "references": {
                    "sentences": [
                        "One of the challenges of incident responders is to identify and classify the malicious files that were used in the attack that compromised the endpoint. PDF files make the process more time consuming because PDF files can carry malicious code that is hidden and compressed inside the streams of the file, all while these files are widely used for legitimate business both internally and externally in organizations. On top of that, alert fatigue can be a cause of missed alerts and increase the response time of new files to analyze."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x30eef2dd>",
                    "type": "UnknownWord",
                    "value": "classify"
                },
                "references": {
                    "sentences": [
                        "One of the challenges of incident responders is to identify and classify the malicious files that were used in the attack that compromised the endpoint. PDF files make the process more time consuming because PDF files can carry malicious code that is hidden and compressed inside the streams of the file, all while these files are widely used for legitimate business both internally and externally in organizations. On top of that, alert fatigue can be a cause of missed alerts and increase the response time of new files to analyze."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xa4dcfc14>",
                    "type": "UnknownWord",
                    "value": "consuming"
                },
                "references": {
                    "sentences": [
                        "One of the challenges of incident responders is to identify and classify the malicious files that were used in the attack that compromised the endpoint. PDF files make the process more time consuming because PDF files can carry malicious code that is hidden and compressed inside the streams of the file, all while these files are widely used for legitimate business both internally and externally in organizations. On top of that, alert fatigue can be a cause of missed alerts and increase the response time of new files to analyze."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x752fa3b2>",
                    "type": "UnknownWord",
                    "value": "streams"
                },
                "references": {
                    "sentences": [
                        "Strings (text) its full syntax is a bit complex but whats important is to know that it is enclosed in parentheses.<crlf>Arrays enclosed with square brackets ([...]) can contain other objects.<crlf>Dictionaries table of key and value pairs. The key is a name object and the value can be any other object. Enclosed within double angle brackets (<<...>>)<crlf>Streams contains embedded data structures like images (or code) which can be compressed. Streams represented by a dictionary that set the streams length with the key /Length and encoding /Filters.<crlf>Indirect object object that has a unique ID, the object starts with the keyboard obj and ends with endobj other objects can reference the object using its ID. For example a reference to object with ID 3 we would look like this: 3 0 R",
                        "Another way in which threat actors can use the format is to deliver malware in the PDF streams. Streams can contain any type of data (including scripts and binary files) and they can be compressed and encoded which makes it harder to detect embedded code inside files. The compression technique is specified with the name /filter (as mentioned in its part of the dictionary that describes a stream). A stream can have more than one filter.",
                        "One of the challenges of incident responders is to identify and classify the malicious files that were used in the attack that compromised the endpoint. PDF files make the process more time consuming because PDF files can carry malicious code that is hidden and compressed inside the streams of the file, all while these files are widely used for legitimate business both internally and externally in organizations. On top of that, alert fatigue can be a cause of missed alerts and increase the response time of new files to analyze."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x88b701f6>",
                    "type": "UnknownWord",
                    "value": "externally"
                },
                "references": {
                    "sentences": [
                        "One of the challenges of incident responders is to identify and classify the malicious files that were used in the attack that compromised the endpoint. PDF files make the process more time consuming because PDF files can carry malicious code that is hidden and compressed inside the streams of the file, all while these files are widely used for legitimate business both internally and externally in organizations. On top of that, alert fatigue can be a cause of missed alerts and increase the response time of new files to analyze."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x26c30760>",
                    "type": "UnknownWord",
                    "value": "fatigue"
                },
                "references": {
                    "sentences": [
                        "One of the challenges of incident responders is to identify and classify the malicious files that were used in the attack that compromised the endpoint. PDF files make the process more time consuming because PDF files can carry malicious code that is hidden and compressed inside the streams of the file, all while these files are widely used for legitimate business both internally and externally in organizations. On top of that, alert fatigue can be a cause of missed alerts and increase the response time of new files to analyze."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x5f15fb5a>",
                    "type": "UnknownWord",
                    "value": "missed"
                },
                "references": {
                    "sentences": [
                        "One of the challenges of incident responders is to identify and classify the malicious files that were used in the attack that compromised the endpoint. PDF files make the process more time consuming because PDF files can carry malicious code that is hidden and compressed inside the streams of the file, all while these files are widely used for legitimate business both internally and externally in organizations. On top of that, alert fatigue can be a cause of missed alerts and increase the response time of new files to analyze."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x817cbb21>",
                    "type": "UnknownWord",
                    "value": "editable"
                },
                "references": {
                    "sentences": [
                        "The PDF format was created by Adobe in 1993, as a text-based structure that gives users a reliable way to present documents regardless of the operating system and the software they are using. Besides text, PDF files can present a wide variety of content such as images, links, video files, 3D objects, editable forms and much more."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x724c851c>",
                    "type": "UnknownWord",
                    "value": "hierarchical"
                },
                "references": {
                    "sentences": [
                        "The PDF structure is hierarchical and contains four main parts:"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x2095f311>",
                    "type": "UnknownWord",
                    "value": "specifies"
                },
                "references": {
                    "sentences": [
                        "The first line (from the bottom) is %%EOF above is the offset of the cross-reference table 1901. Above that is the trailer that specifies different settings:",
                        "3. Cross-reference table Specifies the offset from the start of the file to each object in the file, so that the PDF reader will be able to locate them without loading the whole document (it can save time when opening big files).<crlf>4. Trailer Specifies information about the cross-reference table so the PDF reader will be able to find the table and other objects. PDF readers start reading the file from the end, lets look at the example below:",
                        "1. Header Specifies the version number of the PDF."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x6d8502d0>",
                    "type": "UnknownWord",
                    "value": "backslash"
                },
                "references": {
                    "sentences": [
                        "Names /name backslash followed by ASCII characters setting a unique name."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x1e1b9d41>",
                    "type": "UnknownWord",
                    "value": "syntax"
                },
                "references": {
                    "sentences": [
                        "Strings (text) its full syntax is a bit complex but whats important is to know that it is enclosed in parentheses.<crlf>Arrays enclosed with square brackets ([...]) can contain other objects.<crlf>Dictionaries table of key and value pairs. The key is a name object and the value can be any other object. Enclosed within double angle brackets (<<...>>)<crlf>Streams contains embedded data structures like images (or code) which can be compressed. Streams represented by a dictionary that set the streams length with the key /Length and encoding /Filters.<crlf>Indirect object object that has a unique ID, the object starts with the keyboard obj and ends with endobj other objects can reference the object using its ID. For example a reference to object with ID 3 we would look like this: 3 0 R"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xef330410>",
                    "type": "UnknownWord",
                    "value": "parentheses"
                },
                "references": {
                    "sentences": [
                        "Strings (text) its full syntax is a bit complex but whats important is to know that it is enclosed in parentheses.<crlf>Arrays enclosed with square brackets ([...]) can contain other objects.<crlf>Dictionaries table of key and value pairs. The key is a name object and the value can be any other object. Enclosed within double angle brackets (<<...>>)<crlf>Streams contains embedded data structures like images (or code) which can be compressed. Streams represented by a dictionary that set the streams length with the key /Length and encoding /Filters.<crlf>Indirect object object that has a unique ID, the object starts with the keyboard obj and ends with endobj other objects can reference the object using its ID. For example a reference to object with ID 3 we would look like this: 3 0 R"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xac710dba>",
                    "type": "UnknownWord",
                    "value": "square"
                },
                "references": {
                    "sentences": [
                        "Strings (text) its full syntax is a bit complex but whats important is to know that it is enclosed in parentheses.<crlf>Arrays enclosed with square brackets ([...]) can contain other objects.<crlf>Dictionaries table of key and value pairs. The key is a name object and the value can be any other object. Enclosed within double angle brackets (<<...>>)<crlf>Streams contains embedded data structures like images (or code) which can be compressed. Streams represented by a dictionary that set the streams length with the key /Length and encoding /Filters.<crlf>Indirect object object that has a unique ID, the object starts with the keyboard obj and ends with endobj other objects can reference the object using its ID. For example a reference to object with ID 3 we would look like this: 3 0 R"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x7131c715>",
                    "type": "UnknownWord",
                    "value": "brackets"
                },
                "references": {
                    "sentences": [
                        "Strings (text) its full syntax is a bit complex but whats important is to know that it is enclosed in parentheses.<crlf>Arrays enclosed with square brackets ([...]) can contain other objects.<crlf>Dictionaries table of key and value pairs. The key is a name object and the value can be any other object. Enclosed within double angle brackets (<<...>>)<crlf>Streams contains embedded data structures like images (or code) which can be compressed. Streams represented by a dictionary that set the streams length with the key /Length and encoding /Filters.<crlf>Indirect object object that has a unique ID, the object starts with the keyboard obj and ends with endobj other objects can reference the object using its ID. For example a reference to object with ID 3 we would look like this: 3 0 R"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x5062b118>",
                    "type": "UnknownWord",
                    "value": "dictionaries"
                },
                "references": {
                    "sentences": [
                        "Strings (text) its full syntax is a bit complex but whats important is to know that it is enclosed in parentheses.<crlf>Arrays enclosed with square brackets ([...]) can contain other objects.<crlf>Dictionaries table of key and value pairs. The key is a name object and the value can be any other object. Enclosed within double angle brackets (<<...>>)<crlf>Streams contains embedded data structures like images (or code) which can be compressed. Streams represented by a dictionary that set the streams length with the key /Length and encoding /Filters.<crlf>Indirect object object that has a unique ID, the object starts with the keyboard obj and ends with endobj other objects can reference the object using its ID. For example a reference to object with ID 3 we would look like this: 3 0 R"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xb2595ff7>",
                    "type": "UnknownWord",
                    "value": "angle"
                },
                "references": {
                    "sentences": [
                        "Strings (text) its full syntax is a bit complex but whats important is to know that it is enclosed in parentheses.<crlf>Arrays enclosed with square brackets ([...]) can contain other objects.<crlf>Dictionaries table of key and value pairs. The key is a name object and the value can be any other object. Enclosed within double angle brackets (<<...>>)<crlf>Streams contains embedded data structures like images (or code) which can be compressed. Streams represented by a dictionary that set the streams length with the key /Length and encoding /Filters.<crlf>Indirect object object that has a unique ID, the object starts with the keyboard obj and ends with endobj other objects can reference the object using its ID. For example a reference to object with ID 3 we would look like this: 3 0 R"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xfcc48aaa>",
                    "type": "UnknownWord",
                    "value": "<<"
                },
                "references": {
                    "sentences": [
                        "Strings (text) its full syntax is a bit complex but whats important is to know that it is enclosed in parentheses.<crlf>Arrays enclosed with square brackets ([...]) can contain other objects.<crlf>Dictionaries table of key and value pairs. The key is a name object and the value can be any other object. Enclosed within double angle brackets (<<...>>)<crlf>Streams contains embedded data structures like images (or code) which can be compressed. Streams represented by a dictionary that set the streams length with the key /Length and encoding /Filters.<crlf>Indirect object object that has a unique ID, the object starts with the keyboard obj and ends with endobj other objects can reference the object using its ID. For example a reference to object with ID 3 we would look like this: 3 0 R"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xac287262>",
                    "type": "UnknownWord",
                    "value": ">>"
                },
                "references": {
                    "sentences": [
                        "Strings (text) its full syntax is a bit complex but whats important is to know that it is enclosed in parentheses.<crlf>Arrays enclosed with square brackets ([...]) can contain other objects.<crlf>Dictionaries table of key and value pairs. The key is a name object and the value can be any other object. Enclosed within double angle brackets (<<...>>)<crlf>Streams contains embedded data structures like images (or code) which can be compressed. Streams represented by a dictionary that set the streams length with the key /Length and encoding /Filters.<crlf>Indirect object object that has a unique ID, the object starts with the keyboard obj and ends with endobj other objects can reference the object using its ID. For example a reference to object with ID 3 we would look like this: 3 0 R"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x62e5b3fc>",
                    "type": "UnknownWord",
                    "value": "represented"
                },
                "references": {
                    "sentences": [
                        "Strings (text) its full syntax is a bit complex but whats important is to know that it is enclosed in parentheses.<crlf>Arrays enclosed with square brackets ([...]) can contain other objects.<crlf>Dictionaries table of key and value pairs. The key is a name object and the value can be any other object. Enclosed within double angle brackets (<<...>>)<crlf>Streams contains embedded data structures like images (or code) which can be compressed. Streams represented by a dictionary that set the streams length with the key /Length and encoding /Filters.<crlf>Indirect object object that has a unique ID, the object starts with the keyboard obj and ends with endobj other objects can reference the object using its ID. For example a reference to object with ID 3 we would look like this: 3 0 R"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x95a5f6c8>",
                    "type": "UnknownWord",
                    "value": "dictionary"
                },
                "references": {
                    "sentences": [
                        "Strings (text) its full syntax is a bit complex but whats important is to know that it is enclosed in parentheses.<crlf>Arrays enclosed with square brackets ([...]) can contain other objects.<crlf>Dictionaries table of key and value pairs. The key is a name object and the value can be any other object. Enclosed within double angle brackets (<<...>>)<crlf>Streams contains embedded data structures like images (or code) which can be compressed. Streams represented by a dictionary that set the streams length with the key /Length and encoding /Filters.<crlf>Indirect object object that has a unique ID, the object starts with the keyboard obj and ends with endobj other objects can reference the object using its ID. For example a reference to object with ID 3 we would look like this: 3 0 R",
                        "Another way in which threat actors can use the format is to deliver malware in the PDF streams. Streams can contain any type of data (including scripts and binary files) and they can be compressed and encoded which makes it harder to detect embedded code inside files. The compression technique is specified with the name /filter (as mentioned in its part of the dictionary that describes a stream). A stream can have more than one filter.",
                        "Size number of entries in the cross-reference table<crlf>Root which entry in the table holds the offset for the root object. This object is the Document Catalog; it contains information about how the file will be presented and references to other objects that describe the documents content.<crlf>Info which entry in the table holds the offset for the documents information dictionary."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x92161dbe>",
                    "type": "UnknownWord",
                    "value": "indirect"
                },
                "references": {
                    "sentences": [
                        "Strings (text) its full syntax is a bit complex but whats important is to know that it is enclosed in parentheses.<crlf>Arrays enclosed with square brackets ([...]) can contain other objects.<crlf>Dictionaries table of key and value pairs. The key is a name object and the value can be any other object. Enclosed within double angle brackets (<<...>>)<crlf>Streams contains embedded data structures like images (or code) which can be compressed. Streams represented by a dictionary that set the streams length with the key /Length and encoding /Filters.<crlf>Indirect object object that has a unique ID, the object starts with the keyboard obj and ends with endobj other objects can reference the object using its ID. For example a reference to object with ID 3 we would look like this: 3 0 R"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x565ba370>",
                    "type": "UnknownWord",
                    "value": "obj"
                },
                "references": {
                    "sentences": [
                        "Strings (text) its full syntax is a bit complex but whats important is to know that it is enclosed in parentheses.<crlf>Arrays enclosed with square brackets ([...]) can contain other objects.<crlf>Dictionaries table of key and value pairs. The key is a name object and the value can be any other object. Enclosed within double angle brackets (<<...>>)<crlf>Streams contains embedded data structures like images (or code) which can be compressed. Streams represented by a dictionary that set the streams length with the key /Length and encoding /Filters.<crlf>Indirect object object that has a unique ID, the object starts with the keyboard obj and ends with endobj other objects can reference the object using its ID. For example a reference to object with ID 3 we would look like this: 3 0 R"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xe1708383>",
                    "type": "UnknownWord",
                    "value": "endobj"
                },
                "references": {
                    "sentences": [
                        "Strings (text) its full syntax is a bit complex but whats important is to know that it is enclosed in parentheses.<crlf>Arrays enclosed with square brackets ([...]) can contain other objects.<crlf>Dictionaries table of key and value pairs. The key is a name object and the value can be any other object. Enclosed within double angle brackets (<<...>>)<crlf>Streams contains embedded data structures like images (or code) which can be compressed. Streams represented by a dictionary that set the streams length with the key /Length and encoding /Filters.<crlf>Indirect object object that has a unique ID, the object starts with the keyboard obj and ends with endobj other objects can reference the object using its ID. For example a reference to object with ID 3 we would look like this: 3 0 R"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x684b2c45>",
                    "type": "UnknownWord",
                    "value": "cross-reference"
                },
                "references": {
                    "sentences": [
                        "The first line (from the bottom) is %%EOF above is the offset of the cross-reference table 1901. Above that is the trailer that specifies different settings:",
                        "3. Cross-reference table Specifies the offset from the start of the file to each object in the file, so that the PDF reader will be able to locate them without loading the whole document (it can save time when opening big files).<crlf>4. Trailer Specifies information about the cross-reference table so the PDF reader will be able to find the table and other objects. PDF readers start reading the file from the end, lets look at the example below:",
                        "Size number of entries in the cross-reference table<crlf>Root which entry in the table holds the offset for the root object. This object is the Document Catalog; it contains information about how the file will be presented and references to other objects that describe the documents content.<crlf>Info which entry in the table holds the offset for the documents information dictionary.",
                        "PDF files can be modified so additional elements (such cross-reference tables) will be appended to the end of the file. Now that we understand the format lets see how it can be used by attackers to conceal malicious code."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x7bf80a4>",
                    "type": "UnknownWord",
                    "value": "offset"
                },
                "references": {
                    "sentences": [
                        "The first line (from the bottom) is %%EOF above is the offset of the cross-reference table 1901. Above that is the trailer that specifies different settings:",
                        "3. Cross-reference table Specifies the offset from the start of the file to each object in the file, so that the PDF reader will be able to locate them without loading the whole document (it can save time when opening big files).<crlf>4. Trailer Specifies information about the cross-reference table so the PDF reader will be able to find the table and other objects. PDF readers start reading the file from the end, lets look at the example below:",
                        "Size number of entries in the cross-reference table<crlf>Root which entry in the table holds the offset for the root object. This object is the Document Catalog; it contains information about how the file will be presented and references to other objects that describe the documents content.<crlf>Info which entry in the table holds the offset for the documents information dictionary."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x87d1cdf2>",
                    "type": "UnknownWord",
                    "value": "trailer"
                },
                "references": {
                    "sentences": [
                        "The first line (from the bottom) is %%EOF above is the offset of the cross-reference table 1901. Above that is the trailer that specifies different settings:",
                        "3. Cross-reference table Specifies the offset from the start of the file to each object in the file, so that the PDF reader will be able to locate them without loading the whole document (it can save time when opening big files).<crlf>4. Trailer Specifies information about the cross-reference table so the PDF reader will be able to find the table and other objects. PDF readers start reading the file from the end, lets look at the example below:"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xe0d4c443>",
                    "type": "UnknownWord",
                    "value": "eof"
                },
                "references": {
                    "sentences": [
                        "The first line (from the bottom) is %%EOF above is the offset of the cross-reference table 1901. Above that is the trailer that specifies different settings:"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xf36ba403>",
                    "type": "UnknownWord",
                    "value": "conceal"
                },
                "references": {
                    "sentences": [
                        "PDF files can be modified so additional elements (such cross-reference tables) will be appended to the end of the file. Now that we understand the format lets see how it can be used by attackers to conceal malicious code."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xa148e3dd>",
                    "type": "UnknownWord",
                    "value": "necessarily"
                },
                "references": {
                    "sentences": [
                        "PDF files support a wide variety of data types that can be present (and not necessarily visible). Threat actors fully control the content of the files they send to lure victims and they use the different capabilities of the PDF format for their attacks."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x590a0e73>",
                    "type": "UnknownWord",
                    "value": "coupons"
                },
                "references": {
                    "sentences": [
                        "Many phishing attacks will contain links or images of buttons, coupons, fake CAPTCHA, fake play buttons and more. The purpose of these files is to redirect the victims to sites controlled by the threat actors where they can proceed to the next stage of the attack."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x7b06b745>",
                    "type": "UnknownWord",
                    "value": "natively"
                },
                "references": {
                    "sentences": [
                        "PDF files natively support JavaScript, so attackers can create files that will execute scripts once a file has been opened at this stage to download additional payload or steal information."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xaf83929f>",
                    "type": "UnknownWord",
                    "value": "stream"
                },
                "references": {
                    "sentences": [
                        "The content of the embedded file is saved to drop_file2, we see that the stream containing the data is The content of the embedded file is saved to drop_file2. We can see that the stream containing the data is decoded with FlateDecode therefore we use the -f flag which tells pdf-parser to pass the data through filters. Next well check what is the type of the embedded data, so lets use the file command on the extracted file:",
                        "Another way in which threat actors can use the format is to deliver malware in the PDF streams. Streams can contain any type of data (including scripts and binary files) and they can be compressed and encoded which makes it harder to detect embedded code inside files. The compression technique is specified with the name /filter (as mentioned in its part of the dictionary that describes a stream). A stream can have more than one filter."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x2323dda2>",
                    "type": "UnknownWord",
                    "value": "alone"
                },
                "references": {
                    "sentences": [
                        "There are many PDF readers that are being used, some are multiplatform, others based on web browsers but like any other software they have bugs and vulnerabilities. Adobe PDF Reader alone has 91 reported vulnerabilities. Therefore threat actors can make PDF files that will exploit vulnerabilities, which will allow them to execute code and gain access to the victims endpoint."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x8a45075c>",
                    "type": "UnknownWord",
                    "value": "investigate"
                },
                "references": {
                    "sentences": [
                        "At this point, we need to investigate an RTF file. Well use rtfobj from oletools to inspect the file:",
                        "Lets investigate the following PDF file (MD5: a2852936a7e33787c0ab11f346631d89). The first tool that we are going to use is peepdf, a python tool that parses PDF files allowing us to get the types and content of each object. It will also color the object and highlight the objects that make the file suspicious, like the presence of javascript and embedded files."
                    ],
                    "titles": []
                },
                "links": [
                    {
                        "src": {
                            "id": "<MD5_0x9933ad26>",
                            "type": "Hash",
                            "hash_type": "MD5",
                            "value": "a2852936a7e33787c0ab11f346631d89"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0x8a45075c>",
                            "type": "UnknownWord",
                            "value": "investigate"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xc6a2be2c>",
                    "type": "UnknownWord",
                    "value": "peepdf"
                },
                "references": {
                    "sentences": [
                        "Output of peepdf",
                        "Peepdf output",
                        "After running the peepdf with the PDF file we get the output below. We can see that the file was updated and it has two versions. In the later version we can spot an encoded javascript code which makes this file suspicious so we will extract the content of the object and investigate it.",
                        "Lets investigate the following PDF file (MD5: a2852936a7e33787c0ab11f346631d89). The first tool that we are going to use is peepdf, a python tool that parses PDF files allowing us to get the types and content of each object. It will also color the object and highlight the objects that make the file suspicious, like the presence of javascript and embedded files.",
                        "Lets take a look at another PDF file (MD5: 1ba5c7ecab62609e4f1d44192cef850e). Once again we will start by running peepdf on the file to understand if the file might be malicious."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xf85b8877>",
                    "type": "UnknownWord",
                    "value": "spot"
                },
                "references": {
                    "sentences": [
                        "After running the peepdf with the PDF file we get the output below. We can see that the file was updated and it has two versions. In the later version we can spot an encoded javascript code which makes this file suspicious so we will extract the content of the object and investigate it."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x3dafb49d>",
                    "type": "UnknownWord",
                    "value": "stevens"
                },
                "references": {
                    "sentences": [
                        "To extract the data from the suspicious object number 18 we will use another open-source tool called pdf-parser created by Didier Stevens. This python tool allows us to inspect and extract different objects. The command below will extract the javascript saved in the object into a file called extract_js:"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x58add40a>",
                    "type": "UnknownWord",
                    "value": "pdf-parser"
                },
                "references": {
                    "sentences": [
                        "The content of the embedded file is saved to drop_file2, we see that the stream containing the data is The content of the embedded file is saved to drop_file2. We can see that the stream containing the data is decoded with FlateDecode therefore we use the -f flag which tells pdf-parser to pass the data through filters. Next well check what is the type of the embedded data, so lets use the file command on the extracted file:",
                        "To extract the data from the suspicious object number 18 we will use another open-source tool called pdf-parser created by Didier Stevens. This python tool allows us to inspect and extract different objects. The command below will extract the javascript saved in the object into a file called extract_js:",
                        "As we see in the output below the file contains a javascript object (object number 9) and one embedded file (object number 8). Lets inspect the content of object 8 by running pdf-parser as we did in the previous example:"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xa7e0ec80>",
                    "type": "UnknownWord",
                    "value": "didier"
                },
                "references": {
                    "sentences": [
                        "To extract the data from the suspicious object number 18 we will use another open-source tool called pdf-parser created by Didier Stevens. This python tool allows us to inspect and extract different objects. The command below will extract the javascript saved in the object into a file called extract_js:"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xe2820e13>",
                    "type": "UnknownWord",
                    "value": "extract_js"
                },
                "references": {
                    "sentences": [
                        "To extract the data from the suspicious object number 18 we will use another open-source tool called pdf-parser created by Didier Stevens. This python tool allows us to inspect and extract different objects. The command below will extract the javascript saved in the object into a file called extract_js:"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xa3f46e0b>",
                    "type": "UnknownWord",
                    "value": "inspecting"
                },
                "references": {
                    "sentences": [
                        "Upon inspecting the javascript code we can determine that the PDF file will open a window that will ask the victim to login into his Amazon account, but the data will be submit to a malicious site http://sellercentral[.]amazon.de.56U8GTHDGT4U7YWEWE84GTYS.abecklink.com eventually leading to credential stealing. In the screenshot below is the execution of the PDF file in Intezer Analyze, which lets us inspect the behavior of the file."
                    ],
                    "titles": []
                },
                "links": [
                    {
                        "src": {
                            "id": "<URL_0x97337a93>",
                            "type": "Url",
                            "value": "http://sellercentral.amazon.de.56u8gthdgt4u7ywewe84gtys.abecklink.com"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0xa3f46e0b>",
                            "type": "UnknownWord",
                            "value": "inspecting"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xa77751ba>",
                    "type": "UnknownWord",
                    "value": "drop_file2"
                },
                "references": {
                    "sentences": [
                        "The content of the embedded file is saved to drop_file2, we see that the stream containing the data is The content of the embedded file is saved to drop_file2. We can see that the stream containing the data is decoded with FlateDecode therefore we use the -f flag which tells pdf-parser to pass the data through filters. Next well check what is the type of the embedded data, so lets use the file command on the extracted file:"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xcad7309c>",
                    "type": "UnknownWord",
                    "value": "flatedecode"
                },
                "references": {
                    "sentences": [
                        "The content of the embedded file is saved to drop_file2, we see that the stream containing the data is The content of the embedded file is saved to drop_file2. We can see that the stream containing the data is decoded with FlateDecode therefore we use the -f flag which tells pdf-parser to pass the data through filters. Next well check what is the type of the embedded data, so lets use the file command on the extracted file:"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x384fb171>",
                    "type": "UnknownWord",
                    "value": "-f"
                },
                "references": {
                    "sentences": [
                        "The content of the embedded file is saved to drop_file2, we see that the stream containing the data is The content of the embedded file is saved to drop_file2. We can see that the stream containing the data is decoded with FlateDecode therefore we use the -f flag which tells pdf-parser to pass the data through filters. Next well check what is the type of the embedded data, so lets use the file command on the extracted file:"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xcc566ce4>",
                    "type": "UnknownWord",
                    "value": "rtfobj"
                },
                "references": {
                    "sentences": [
                        "You can find more information about the tools and techniques to analyze malicious Office files by checking out our previous blog. From the output of rtfobj we learn that the extracted RTF file exploited CVE-2017-11882 a known vulnerability in Microsoft Equation Editor that enables code execution. Since Microsoft patched this vulnerability, this particular attack would only be effective if a user failed to keep their software updated. Now, we can either continue investigating the shellcode located in the RTF file or upload the original PDF to Intezer Analyze that will automatically execute all the steps we just did and on top of that provide a classification of the threat executed by the PDF.",
                        "At this point, we need to investigate an RTF file. Well use rtfobj from oletools to inspect the file:",
                        "rtfobj output for the extracted RTF file"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x48eabb32>",
                    "type": "UnknownWord",
                    "value": "oletools"
                },
                "references": {
                    "sentences": [
                        "At this point, we need to investigate an RTF file. Well use rtfobj from oletools to inspect the file:"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x86da866c>",
                    "type": "UnknownWord",
                    "value": "classification"
                },
                "references": {
                    "sentences": [
                        "You can find more information about the tools and techniques to analyze malicious Office files by checking out our previous blog. From the output of rtfobj we learn that the extracted RTF file exploited CVE-2017-11882 a known vulnerability in Microsoft Equation Editor that enables code execution. Since Microsoft patched this vulnerability, this particular attack would only be effective if a user failed to keep their software updated. Now, we can either continue investigating the shellcode located in the RTF file or upload the original PDF to Intezer Analyze that will automatically execute all the steps we just did and on top of that provide a classification of the threat executed by the PDF."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xd0752dd8>",
                    "type": "UnknownWord",
                    "value": "tree"
                },
                "references": {
                    "sentences": [
                        "In the process tree we see the execution chain of the PDF followed by word process to open the RTF file and then the call to Equation Editor that is being exploited by the RTF. The malware is classified as Raccoon Stealer. We can see in the Genetic Analysis tab that the sample shares code with Azorult and thats because Raccoon Stealer is considered as its successor."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x31d512e0>",
                    "type": "UnknownWord",
                    "value": "genetic"
                },
                "references": {
                    "sentences": [
                        "Genetic Analysis tab of the PDF file in intezer Analyze",
                        "In the process tree we see the execution chain of the PDF followed by word process to open the RTF file and then the call to Equation Editor that is being exploited by the RTF. The malware is classified as Raccoon Stealer. We can see in the Genetic Analysis tab that the sample shares code with Azorult and thats because Raccoon Stealer is considered as its successor."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xf07bf123>",
                    "type": "UnknownWord",
                    "value": "sorts"
                },
                "references": {
                    "sentences": [
                        "PDF files are very common and useful for all types of organizations but the flexibility of the PDF format makes it also very attractive for threat actors who use it to carry out different sorts of attacks. In this blog we presented several open-source and free tools that can be used for static analysis of a single PDF."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x1ef2ce2f>",
                    "type": "UnknownWord",
                    "value": "scalable"
                },
                "references": {
                    "sentences": [
                        "But manual analysis of PDFs isnt scalable for organizations when there are hundreds of files (or even more) that need to be investigated. In this case we can use a platform like Intezer that will automate the initial investigation of the files, allowing us to focus our efforts only on cases where the manual analysis is absolutely mandatory."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x2f2d15a8>",
                    "type": "UnknownWord",
                    "value": "absolutely"
                },
                "references": {
                    "sentences": [
                        "But manual analysis of PDFs isnt scalable for organizations when there are hundreds of files (or even more) that need to be investigated. In this case we can use a platform like Intezer that will automate the initial investigation of the files, allowing us to focus our efforts only on cases where the manual analysis is absolutely mandatory."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xaed4441d>",
                    "type": "UnknownWord",
                    "value": "book"
                },
                "references": {
                    "sentences": [
                        "Scan 50 files for free (including PDFs) with Intezer Analyze. If you want to learn how your team can automate alert triage to scan files, URLs, memory dumps, and more book a time to talk with us."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x2f9dfa08>",
                    "type": "UnknownWord",
                    "value": "she"
                },
                "references": {
                    "sentences": [
                        "Nicole is a malware analyst and reverse engineer. Prior to Intezer she was an embedded researcher in the Israel Defense Forces (IDF) Intelligence Corps."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x35841148>",
                    "type": "UnknownWord",
                    "value": "idf"
                },
                "references": {
                    "sentences": [
                        "Nicole is a malware analyst and reverse engineer. Prior to Intezer she was an embedded researcher in the Israel Defense Forces (IDF) Intelligence Corps."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x2bbd42b4>",
                    "type": "UnknownWord",
                    "value": "fine"
                },
                "references": {
                    "sentences": [
                        "fine analysis"
                    ],
                    "titles": []
                }
            }
        ]
    },
    "other_links": [],
    "info": {
        "potential_threats": {},
        "sigma": false,
        "yara": false
    },
    "keywords": {
        "classified": [
            "The malware is classified as Raccoon Stealer"
        ],
        "dubbed": [],
        "associated": [],
        "targets": [],
        "attributed": []
    },
    "resources": {
        "links": {
            "github": [
                "https://github.com/jesparza/peepdf",
                "https://github.com/DidierStevens/DidierStevensSuite/blob/master/pdf-parser.py",
                "https://github.com/decalage2/oletools/wiki/rtfobj"
            ],
            "pastebin": [],
            "text_files": [],
            "other": [
                "https://analyze.intezer.com/files/dd294bd399212b760e68434af9c96a70f0ef9f7bc43b06d67addd3472eb6d69a",
                "https://unit42.paloaltonetworks.com/phishing-trends-with-pdf-files/",
                "https://cve.mitre.org/cgi-bin/cvekey.cgi?keyword=adobe+pdf+reader",
                "https://www.bleepingcomputer.com/news/security/clever-amazon-phishing-scam-creates-login-prompts-in-pdf-docs/",
                "https://analyze.intezer.com/files/2e26d1a3d65d7e15658033c8936c93d74cd7a1b0214c98d9a2e575fa4017d123",
                "https://www.intezer.com/blog/malware-analysis/analyze-malicious-microsoft-office-files/",
                "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-11882",
                "https://msrc.microsoft.com/update-guide/vulnerability/CVE-2017-11882",
                "https://analyze.intezer.com/files/7a810869705eed61ae1afa60c0f4cf202fe4137fa7ffb164d523d9d380279ee6",
                "https://blogs.blackberry.com/en/2021/09/threat-thursday-raccoon-infostealer#:~:text=Raccoon%20is%20considered,April%20of%202019.",
                "https://analyze.intezer.com/analyses/9fd616c5-d21d-40a0-bf24-9df348805752/genetic-analysis",
                "https://analyze.intezer.com/",
                "https://www.intezer.com/book-a-demo-analyze/",
                "https://twitter.com/NicoleFishi19",
                "https://www.intezer.com/tag/dfir/",
                "https://www.intezer.com/tag/digital-forensics/",
                "https://www.intezer.com/tag/fine-analysis/",
                "https://www.intezer.com/tag/incident-response/",
                "https://www.intezer.com/tag/open-source/",
                "https://www.intezer.com/tag/pdfs/"
            ]
        },
        "images": [
            "https://149520725.v2.pressablecdn.com/wp-content/uploads/2020/07/Screenshot_20200720-202117__01-60x60.png",
            "https://149520725.v2.pressablecdn.com/wp-content/uploads/2022/04/analyze-malicious-pdf-files-1270x475.png",
            "https://lh3.googleusercontent.com/nRKngVqb3ZPy-IkpGtA54VWSBeOoBH6tIBZFcBc-a8YNiInuIEv8IskvRH4_hY8ghwhN8EBEgbVKy73Sx-vpY0OLmCcqcKXLYMtY2QSrP7gVb3ZSW7WHdvn-Ycq3hgkpDtJvXPpe",
            "https://lh3.googleusercontent.com/3FmrRcQAFqO0LzQYcH6ngE8tVPmPFRw-x4-EbWHJWIUJ5of2L5JITvGmdrMp3OiQKr2yozMgXdFApsy2CnM6MR3fu3F_nB_7Q7c1hmThBn78Qg-arLsxSMN3DUIw9LTMyn2KMSOj",
            "https://lh6.googleusercontent.com/qx9hL7oPvQ1xv-a5W5vku31__fCGW1Cxh711qlVfsgUHi1oMT6xcXteiLNxrc_4lUn_leXTOA9ivU1mOKrHdjAfyNfZUr7l88KWXjMte1xnNuAHph_R3DcypYehaoFR-huWe1a51",
            "https://lh6.googleusercontent.com/OdzG26EpV5_Ni-iGcJ9k_bPFPgf51FaUdk3eTT_uiUBUcrLT5EvnuDDTVI_BDO1v1YPufCzCou5kPaYeCtIXMGL8xI-_Jpd63nEvym0OpomBtRKpPT80hdm0H57RIQEOjaYVdIV2",
            "https://lh6.googleusercontent.com/zQ6fRO1GMYEH9K4Hi_qumN68AmjxLIj6X1up0hQtoeKwa-XwN1lJzWnDdOUHhWKi6qpxZNejcyYnCHdt1ZA2uHVlQwIiQAeLlUbofEH4Qpv5TiysPC45O_B-OTOfwbaSJKdq7W5e",
            "https://lh5.googleusercontent.com/7jVpZJZXIyVcNAa3ndOx55Dstli-6uy-NGBy9Nnkr0C7jz39iKH8PV51O2G6EuXn3NyzmjXtBk_nSY1_g3j7mY4QgwJs_fbRpmEU8rQl-i9O8foChPQSCeoMbDeXmxntrf6h7APW",
            "https://149520725.v2.pressablecdn.com/wp-content/uploads/2020/07/Screenshot_20200720-202117__01-60x60.png"
        ]
    }
}