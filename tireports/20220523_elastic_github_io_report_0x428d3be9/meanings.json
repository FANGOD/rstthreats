{
    "title": "A peek behind the BPFDoor",
    "url": "https://elastic.github.io/security-research/intelligence/2022/05/04.bpfdoor/article",
    "threats": {
        "Threat": [
            {
                "token": {
                    "id": "<THREAT_0xe0d73a8f>",
                    "type": "Threat",
                    "value": "bpfdoor"
                },
                "references": {
                    "sentences": [
                        "BPFDoor configuration extractor",
                        "The following Elastic Detection Rules will identify BPFDoor activity:",
                        "Atypical BPFDoor sample",
                        "Elastic Detection Summary of complete BPFDoor attack lifecycle",
                        "In order to do this, we had to break down the BPF filters in the BPFDoor source code so we could craft packets for the different protocols. To do this, we used Scapy, a packet manipulation program, to ensure we could pass the filters for the purpose of activating the backdoor. Once we ensured we could pass the filters, Rhys Rustad-Elliott, an engineer at Elastic built a BPFDoor client that accepts a password, IP address, and port allowing you to connect to a BPFDoor sample and interact if you possess the samples hardcoded passwords.",
                        "The BPFDoor scanner will allow you to scan for hosts infected with the BPFDoor malware and the BPFDoor configuration extractor will allow you to extrapolate the malwares configuration or hardcoded values which can lead to additional observations you can use for further analysis, developing additional signatures or connecting to the backdoor utilizing our client.",
                        "The BPFDoor configuration extractor can be downloaded here.",
                        "The above capabilities allow BPFDoor to attach a filter onto any socket and allow or disallow certain types of data to come through the socket - used carefully by the adversary to invoke a series of different functions within the payload.",
                        "BPFDoor source code BPF Filters",
                        "This EQL rule can be used to successfully identify BPFDoor reverse shell connections having been established within your environment:",
                        "BPFDoor scanner<crlf>BPFDoor configuration extractor",
                        "BPFDoor source code BPF Filter Pseudocode",
                        "The Elastic Security Team has released a Python script that can identify if you have BPFDoor infected hosts.",
                        "Elastic Analyzer View of BPFDoor following a reverse shell connection and post exploitation actions",
                        "To clearly articulate the details of this malware, weve created two diagrams that outline the specific pseudocode for BPFDoor based on the source code uploaded to VT and found on Pastebin. While this contains a lot of detail, it is simple to understand if researchers choose to further this research.",
                        "The hunt rule we created here identifies a sequence of events beginning with a session id change, followed by a network connection accepted, in correlation with ptmx file creation and a deletion of the process responsible for accepting the network connection. This EQL rule can be used to successfully identify BPFDoor bind shell connections within your environment:",
                        "EQL BPFDoor bind shell hunt query",
                        "Elastic Analyzer View of BPFDoor demonstrating real process capture.",
                        "The Elastic Security Team has created a few tools that will aid researchers in analyzing the BPFDoor malware.",
                        "Elastic Analyzer View of the BPFDoor initial invocation process tree",
                        "In the below steps, we will break BPFDoors actions down according to the vast majority of the samples available.",
                        "This tool will allow you to extract configurations from any BPFDoor malware you may have collected. This will allow you to develop additional signatures and further analysis of the malware as well as your environment.",
                        "BPFDoor also holds in its repertoire the ability to subvert the traditional Linux socket client - server architecture in order to hide its malicious traffic. The methods which it utilizes to achieve this are both unusual and intriguing.",
                        "EQL BPFDoor reverse shell hunt query",
                        "Below you can see visual representations of the BPFDoor process tree, utilizing Elastics Analyzer View. The first image displays the tree prior to active use of the backdoor (i.e reverse shell, bind shell, or pingback) and the second image after a reverse shell has connected and performed post-exploitation activities.",
                        "BPFDoor Tools",
                        "As stated in step 9 (above), BPF or Berkeley Packet Filters is a technology from the early 90s that allows a user-space program to attach a network filter onto any socket and allow or disallow certain types of data to come through the socket. These filters are made up of bytecode that runs on an abstract virtual machine in the Linux kernel. The BPF virtual machine has functionality to inspect all parts of incoming packets and make an allow/drop decision based on what it sees. . You can see in the image example below what this looks like within the BPFDoor source code:",
                        "BPFDoor is a backdoor payload specifically crafted for Linux. Its purpose is for long-term persistence in order to gain re-entry into a previously or actively compromised target environment. It notably utilizes BPF along with a number of other techniques to achieve this goal, taking great care to be as efficient and stealthy as possible. PWC researchers discovered this very interesting piece of malware in 2021. PWC attributes this back door to a specific group from China, Red Menshen, and detailed a number of interesting components in a high-level threat research post released last week.",
                        "A preview of the BPFDoor Client developed by Elastic Security to assist in research",
                        "In this attack, the initial TCP handshake is done between the attacker and a completely legitimate process for example nginx or sshd. These handshake packets happen to be also delivered to the backdoor (like every packet on the system) but are filtered out by BPF. Once the connection is established, however, BPFDoor sends a magic packet to the legitimate service. The implant receives it and makes a note of the originating IP and port the attacker is using, and it opens a new listening socket on an inconspicuous port (42391 - 43391).",
                        "BPF-based malware payloads, while ultimately uncommon, serve a specific purpose on Linux-based hosts where stealthy and performant operations are critical for success. Tools such as BPFDoor are not alone. Recently, Pangu Labs discovered a payload by the name of Bvp47, a sensor that used stealthy BPF-based telemetry to acquire detailed information about the workloads running on infected hosts.",
                        "BPFDoor uses a raw socket (as opposed to cooked ones that handle IP/TCP/UDP headers transparently) to observe every packet arriving at the machine, ethernet frame headers and all. While this might sound like a stealthy way to intercept traffic, its actually not on any machine with a significant amount of network traffic the CPU usage will be consistently high.",
                        "Depending on the password or lack of password provided, BPFDoor will behave exactly the same way it would in the wild. You can invoke a reverse shell, establish a bind shell, or connect to it with no supplied password to receive a ping-back confirming its installation.",
                        "Researchers looking to use BPFDoor can for access to the BPFDoor client POC. Please note that these tools will be shared at our discretion with those in the trusted security community looking to improve the detection of this vulnerability.",
                        "During execution, BPFDoor removes existing files from /dev/shm and copies itself there prior to initialization. A detection for this would be any execution of a binary from this directory as root (you have to be root to write to and read from this directory).",
                        "After developing the 2 detection rules along with the 2 hunt rules listed below and in addition to the 6 YARA signatures deployed we were able to detect BPFDoor in a myriad of different ways and within different stages of its life cycle. As stated earlier though, if you detect this malware in your environment it should be the least of your concerns given the threat actor will most likely have already successfully compromised your network via other means.",
                        "Quickly after beginning our research into this malware we realized we would also need to actively interact with BPFDoor in order to observe the full extent of the capabilities that it possesses and monitor what these capabilities would look like from a host and SIEM level.",
                        "A trend we have had the privilege of observing at Elastic, is the threat landscape of Linux targeted attacks - these being focused often on cloud workloads, or systems that typically have less observational technology configured in many of the environments we see. The trend of complex, well-designed payloads is something that is often simply overlooked, and specifically in the case of BPFDoor, remained hidden for years.",
                        "BPFDoor scanner tool",
                        "BPFDoor demonstrates a perfect example of how important monitoring workloads within Linux environments can be. Payloads such as this are near-on impossible to observe and detect without sufficient controls, and should be considered a moving trend within the general adversarial landscape.",
                        "The third area we wanted to look at was the network connections tied to two of the three capabilities (reverse shell and bind shell) the backdoor possesses. We wanted to see if there were any suspicious network connections tied to process or user abnormalities we could sequence together based off of the way BPFDoor handles establishing a reverse or bind shell.",
                        "BPFDoor is interesting given the anti-forensics, and obfuscation tactics used. Astute readers will observe slight differences in the PID tree visible when running a ps ajxf on an infected host when compared to executed data within the Analyzer View inside of Elastic. This is due to the process name spoofing mentioned in step 6 (above) of the attack lifecycle above. The image below is taken from a system running BPFDoor with an active reverse shell connection established:",
                        "The following MITRE ATT&CK Tactic, Techniques, and Sub-techniques have been observed with the BPFDoor malware.",
                        "An observed running process created by the BPFDoor reverse shell",
                        "We wanted to see over time, between BPFDoor payloads, what, if anything, the threat actors modified. A number of samples were detonated and analyzed ranging from the uploaded source code to a sample uploaded last month. We found that the behavior over time did not change a great deal. It maintained the same relative attack lifecycle with a few variations with the hardcoded values such as passwords, process names, and files - this is not uncommon when compared to other malware samples that look to evade detection or leverage payloads across a variety of victims.",
                        "The Elastic Security Team has released several tools that can aid in further research regarding BPFDoor to include a network scanner used to identify infected hosts, a BPFDoor malware configuration extractor, and a BPFDoor client binary that can be used to actively interact with a sample."
                    ],
                    "titles": [
                        "Observables",
                        "Interacting with BPFDoor",
                        "Existing Detection Rules",
                        "Impact",
                        "BPFDoor Client POC",
                        "Preamble",
                        "A peek behind the BPFDoor",
                        "BPFDoor Scanner",
                        "Defense Evasion Insights",
                        "Source Pseudocode",
                        "Hunting Queries",
                        "BPFDoor Configuration Extractor",
                        "Summary",
                        "Attack Lifecycle",
                        "Detection of BPFDoor",
                        "General Analysis",
                        "Historical Analysis",
                        "Linux Malware Sophistication",
                        "BPF Filters"
                    ]
                },
                "links": [
                    {
                        "src": {
                            "id": "<GEO_0xa7d71219>",
                            "type": "Geo",
                            "value": "asia"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<THREAT_0xe0d73a8f>",
                            "type": "Threat",
                            "value": "bpfdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<SHA256_0x79916d51>",
                            "type": "Hash",
                            "hash_type": "SHA256",
                            "value": "599ae527f10ddb4625687748b7d3734ee51673b664f2e5d0346e64f85e185683"
                        },
                        "relation": "use_threat",
                        "dst": {
                            "id": "<THREAT_0xe0d73a8f>",
                            "type": "Threat",
                            "value": "bpfdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<TTP_0x4f6a185>",
                            "type": "TTP",
                            "value": "ta0040"
                        },
                        "relation": "use_threat",
                        "dst": {
                            "id": "<THREAT_0xe0d73a8f>",
                            "type": "Threat",
                            "value": "bpfdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<GEO_0x516b8d00>",
                            "type": "Geo",
                            "value": "taiwan"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<THREAT_0xe0d73a8f>",
                            "type": "Threat",
                            "value": "bpfdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<THREAT_0xe0d73a8f>",
                            "type": "Threat",
                            "value": "bpfdoor"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<TTP_0x7bb405dc>",
                            "type": "TTP",
                            "value": "ta0005"
                        }
                    },
                    {
                        "src": {
                            "id": "<SHA256_0xf82e6100>",
                            "type": "Hash",
                            "hash_type": "SHA256",
                            "value": "76bf736b25d5c9aaf6a84edd4e615796fffc338a893b49c120c0b4941ce37925"
                        },
                        "relation": "use_threat",
                        "dst": {
                            "id": "<THREAT_0xe0d73a8f>",
                            "type": "Threat",
                            "value": "bpfdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<GEO_0x314f25f5>",
                            "type": "Geo",
                            "value": "vietnam"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<THREAT_0xe0d73a8f>",
                            "type": "Threat",
                            "value": "bpfdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<GEO_0x491fab9b>",
                            "type": "Geo",
                            "value": "korea"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<THREAT_0xe0d73a8f>",
                            "type": "Threat",
                            "value": "bpfdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<THREAT_0xe0d73a8f>",
                            "type": "Threat",
                            "value": "bpfdoor"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<TTP_0x4f6a185>",
                            "type": "TTP",
                            "value": "ta0040"
                        }
                    },
                    {
                        "src": {
                            "id": "<SHA256_0x27749377>",
                            "type": "Hash",
                            "hash_type": "SHA256",
                            "value": "5faab159397964e630c4156f8852bcc6ee46df1cdd8be2a8d3f3d8e5980f3bb3"
                        },
                        "relation": "use_threat",
                        "dst": {
                            "id": "<THREAT_0xe0d73a8f>",
                            "type": "Threat",
                            "value": "bpfdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<INDUSTRY_0xc57b659c>",
                            "type": "Industry",
                            "value": "iot"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<THREAT_0xe0d73a8f>",
                            "type": "Threat",
                            "value": "bpfdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<CATEGORY_0x16ae57bb>",
                            "type": "Category",
                            "value": "vpn"
                        },
                        "relation": "has_category",
                        "dst": {
                            "id": "<THREAT_0xe0d73a8f>",
                            "type": "Threat",
                            "value": "bpfdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<THREAT_0x701f3e4d>",
                            "type": "Threat",
                            "value": "bvp47"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<THREAT_0xe0d73a8f>",
                            "type": "Threat",
                            "value": "bpfdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<CATEGORY_0xb68aa214>",
                            "type": "Category",
                            "value": "rat"
                        },
                        "relation": "has_category",
                        "dst": {
                            "id": "<THREAT_0xe0d73a8f>",
                            "type": "Threat",
                            "value": "bpfdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<SHA256_0x641a5648>",
                            "type": "Hash",
                            "hash_type": "SHA256",
                            "value": "2e0aa3da45a0360d051359e1a038beff8551b957698f21756cfc6ed5539e4bdb"
                        },
                        "relation": "use_threat",
                        "dst": {
                            "id": "<THREAT_0xe0d73a8f>",
                            "type": "Threat",
                            "value": "bpfdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<SHA256_0xe1054d72>",
                            "type": "Hash",
                            "hash_type": "SHA256",
                            "value": "96e906128095dead57fdc9ce8688bb889166b67c9a1b8fdb93d7cff7f3836bb9"
                        },
                        "relation": "use_threat",
                        "dst": {
                            "id": "<THREAT_0xe0d73a8f>",
                            "type": "Threat",
                            "value": "bpfdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<INDUSTRY_0xbc688f09>",
                            "type": "Industry",
                            "value": "telco"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<THREAT_0xe0d73a8f>",
                            "type": "Threat",
                            "value": "bpfdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<THREAT_0xe0d73a8f>",
                            "type": "Threat",
                            "value": "bpfdoor"
                        },
                        "relation": "has_category",
                        "dst": {
                            "id": "<CATEGORY_0xf1a480bb>",
                            "type": "Category",
                            "value": "malware"
                        }
                    },
                    {
                        "src": {
                            "id": "<SHA256_0x8affc0e8>",
                            "type": "Hash",
                            "hash_type": "SHA256",
                            "value": "f8a5e735d6e79eb587954a371515a82a15883cf2eda9d7ddb8938b86e714ea27"
                        },
                        "relation": "use_threat",
                        "dst": {
                            "id": "<THREAT_0xe0d73a8f>",
                            "type": "Threat",
                            "value": "bpfdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<INDUSTRY_0x26fd0e75>",
                            "type": "Industry",
                            "value": "ics"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<THREAT_0xe0d73a8f>",
                            "type": "Threat",
                            "value": "bpfdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<SHA256_0x64f8915e>",
                            "type": "Hash",
                            "hash_type": "SHA256",
                            "value": "4c5cf8f977fc7c368a8e095700a44be36c8332462c0b1e41bff03238b2bf2a2d"
                        },
                        "relation": "use_threat",
                        "dst": {
                            "id": "<THREAT_0xe0d73a8f>",
                            "type": "Threat",
                            "value": "bpfdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<CATEGORY_0xfda51682>",
                            "type": "Category",
                            "value": "scan"
                        },
                        "relation": "has_category",
                        "dst": {
                            "id": "<THREAT_0xe0d73a8f>",
                            "type": "Threat",
                            "value": "bpfdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<INDUSTRY_0x39572ba2>",
                            "type": "Industry",
                            "value": "logistic"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<THREAT_0xe0d73a8f>",
                            "type": "Threat",
                            "value": "bpfdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<SHA256_0x93779565>",
                            "type": "Hash",
                            "hash_type": "SHA256",
                            "value": "f47de978da1dbfc5e0f195745e3368d3ceef034e964817c66ba01396a1953d72"
                        },
                        "relation": "use_threat",
                        "dst": {
                            "id": "<THREAT_0xe0d73a8f>",
                            "type": "Threat",
                            "value": "bpfdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<GEO_0x9d5138f7>",
                            "type": "Geo",
                            "value": "turkey"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<THREAT_0xe0d73a8f>",
                            "type": "Threat",
                            "value": "bpfdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<INDUSTRY_0xdca60ecc>",
                            "type": "Industry",
                            "value": "education"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<THREAT_0xe0d73a8f>",
                            "type": "Threat",
                            "value": "bpfdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<SHA256_0x899aad58>",
                            "type": "Hash",
                            "hash_type": "SHA256",
                            "value": "c80bd1c4a796b4d3944a097e96f384c85687daeedcdcf05cc885c8c9b279b09c"
                        },
                        "relation": "use_threat",
                        "dst": {
                            "id": "<THREAT_0xe0d73a8f>",
                            "type": "Threat",
                            "value": "bpfdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<SHA256_0xa3696527>",
                            "type": "Hash",
                            "hash_type": "SHA256",
                            "value": "93f4262fce8c6b4f8e239c35a0679fbbbb722141b95a5f2af53a2bcafe4edd1c"
                        },
                        "relation": "use_threat",
                        "dst": {
                            "id": "<THREAT_0xe0d73a8f>",
                            "type": "Threat",
                            "value": "bpfdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<GEO_0x44858a57>",
                            "type": "Geo",
                            "value": "myanmar"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<THREAT_0xe0d73a8f>",
                            "type": "Threat",
                            "value": "bpfdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<SHA256_0x337d1647>",
                            "type": "Hash",
                            "hash_type": "SHA256",
                            "value": "07ecb1f2d9ffbd20a46cd36cd06b022db3cc8e45b1ecab62cd11f9ca7a26ab6d"
                        },
                        "relation": "use_threat",
                        "dst": {
                            "id": "<THREAT_0xe0d73a8f>",
                            "type": "Threat",
                            "value": "bpfdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<GEO_0xedd1e04b>",
                            "type": "Geo",
                            "value": "china"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<THREAT_0xe0d73a8f>",
                            "type": "Threat",
                            "value": "bpfdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<GEO_0xc87ae5df>",
                            "type": "Geo",
                            "value": "india"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<THREAT_0xe0d73a8f>",
                            "type": "Threat",
                            "value": "bpfdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<TTP_0x7bb405dc>",
                            "type": "TTP",
                            "value": "ta0005"
                        },
                        "relation": "use_threat",
                        "dst": {
                            "id": "<THREAT_0xe0d73a8f>",
                            "type": "Threat",
                            "value": "bpfdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<SHA256_0xa80968dc>",
                            "type": "Hash",
                            "hash_type": "SHA256",
                            "value": "fd1b20ee5bd429046d3c04e9c675c41e9095bea70e0329bd32d7edd17ebaf68a"
                        },
                        "relation": "use_threat",
                        "dst": {
                            "id": "<THREAT_0xe0d73a8f>",
                            "type": "Threat",
                            "value": "bpfdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<CATEGORY_0x96121f83>",
                            "type": "Category",
                            "value": "backdoor"
                        },
                        "relation": "has_category",
                        "dst": {
                            "id": "<THREAT_0xe0d73a8f>",
                            "type": "Threat",
                            "value": "bpfdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<SHA256_0xb014bab4>",
                            "type": "Hash",
                            "hash_type": "SHA256",
                            "value": "5b2a079690efb5f4e0944353dd883303ffd6bab4aad1f0c88b49a76ddcb28ee9"
                        },
                        "relation": "use_threat",
                        "dst": {
                            "id": "<THREAT_0xe0d73a8f>",
                            "type": "Threat",
                            "value": "bpfdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<INDUSTRY_0x6ba3d0a8>",
                            "type": "Industry",
                            "value": "government"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<THREAT_0xe0d73a8f>",
                            "type": "Threat",
                            "value": "bpfdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<SHA256_0x9658b5ca>",
                            "type": "Hash",
                            "hash_type": "SHA256",
                            "value": "97a546c7d08ad34dfab74c9c8a96986c54768c592a8dae521ddcf612a84fb8cc"
                        },
                        "relation": "use_threat",
                        "dst": {
                            "id": "<THREAT_0xe0d73a8f>",
                            "type": "Threat",
                            "value": "bpfdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<TTP_0x82bb17ed>",
                            "type": "TTP",
                            "value": "ta0002"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<THREAT_0xe0d73a8f>",
                            "type": "Threat",
                            "value": "bpfdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<CATEGORY_0xf1a480bb>",
                            "type": "Category",
                            "value": "malware"
                        },
                        "relation": "has_category",
                        "dst": {
                            "id": "<THREAT_0xe0d73a8f>",
                            "type": "Threat",
                            "value": "bpfdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<SHA256_0x28994b97>",
                            "type": "Hash",
                            "hash_type": "SHA256",
                            "value": "74ef6cc38f5a1a80148752b63c117e6846984debd2af806c65887195a8eccc56"
                        },
                        "relation": "use_threat",
                        "dst": {
                            "id": "<THREAT_0xe0d73a8f>",
                            "type": "Threat",
                            "value": "bpfdoor"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<THREAT_0x701f3e4d>",
                    "type": "Threat",
                    "value": "bvp47"
                },
                "references": {
                    "sentences": [
                        "BPF-based malware payloads, while ultimately uncommon, serve a specific purpose on Linux-based hosts where stealthy and performant operations are critical for success. Tools such as BPFDoor are not alone. Recently, Pangu Labs discovered a payload by the name of Bvp47, a sensor that used stealthy BPF-based telemetry to acquire detailed information about the workloads running on infected hosts."
                    ],
                    "titles": [
                        "General Analysis"
                    ]
                },
                "links": [
                    {
                        "src": {
                            "id": "<THREAT_0x701f3e4d>",
                            "type": "Threat",
                            "value": "bvp47"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<THREAT_0xe0d73a8f>",
                            "type": "Threat",
                            "value": "bpfdoor"
                        }
                    }
                ]
            }
        ]
    },
    "ttps": {
        "TTP": [
            {
                "token": {
                    "id": "<TTP_0x7bb405dc>",
                    "type": "TTP",
                    "value": "ta0005"
                },
                "references": {
                    "sentences": [],
                    "titles": [
                        "Defense Evasion Insights"
                    ]
                },
                "links": [
                    {
                        "src": {
                            "id": "<CATEGORY_0xb68aa214>",
                            "type": "Category",
                            "value": "rat"
                        },
                        "relation": "has_category",
                        "dst": {
                            "id": "<TTP_0x7bb405dc>",
                            "type": "TTP",
                            "value": "ta0005"
                        }
                    },
                    {
                        "src": {
                            "id": "<TTP_0x7bb405dc>",
                            "type": "TTP",
                            "value": "ta0005"
                        },
                        "relation": "use_threat",
                        "dst": {
                            "id": "<THREAT_0xe0d73a8f>",
                            "type": "Threat",
                            "value": "bpfdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<THREAT_0xe0d73a8f>",
                            "type": "Threat",
                            "value": "bpfdoor"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<TTP_0x7bb405dc>",
                            "type": "TTP",
                            "value": "ta0005"
                        }
                    },
                    {
                        "src": {
                            "id": "<CATEGORY_0x96121f83>",
                            "type": "Category",
                            "value": "backdoor"
                        },
                        "relation": "has_category",
                        "dst": {
                            "id": "<TTP_0x7bb405dc>",
                            "type": "TTP",
                            "value": "ta0005"
                        }
                    },
                    {
                        "src": {
                            "id": "<CATEGORY_0xf1a480bb>",
                            "type": "Category",
                            "value": "malware"
                        },
                        "relation": "has_category",
                        "dst": {
                            "id": "<TTP_0x7bb405dc>",
                            "type": "TTP",
                            "value": "ta0005"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<TTP_0x4f6a185>",
                    "type": "TTP",
                    "value": "ta0040"
                },
                "references": {
                    "sentences": [],
                    "titles": [
                        "Impact"
                    ]
                },
                "links": [
                    {
                        "src": {
                            "id": "<CATEGORY_0xf1a480bb>",
                            "type": "Category",
                            "value": "malware"
                        },
                        "relation": "has_category",
                        "dst": {
                            "id": "<TTP_0x4f6a185>",
                            "type": "TTP",
                            "value": "ta0040"
                        }
                    },
                    {
                        "src": {
                            "id": "<TTP_0x4f6a185>",
                            "type": "TTP",
                            "value": "ta0040"
                        },
                        "relation": "use_threat",
                        "dst": {
                            "id": "<THREAT_0xe0d73a8f>",
                            "type": "Threat",
                            "value": "bpfdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<THREAT_0xe0d73a8f>",
                            "type": "Threat",
                            "value": "bpfdoor"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<TTP_0x4f6a185>",
                            "type": "TTP",
                            "value": "ta0040"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<TTP_0x82bb17ed>",
                    "type": "TTP",
                    "value": "ta0002"
                },
                "references": {
                    "sentences": [
                        "Execution"
                    ],
                    "titles": [
                        "Tactics"
                    ]
                },
                "links": [
                    {
                        "src": {
                            "id": "<TTP_0x82bb17ed>",
                            "type": "TTP",
                            "value": "ta0002"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<THREAT_0xe0d73a8f>",
                            "type": "Threat",
                            "value": "bpfdoor"
                        }
                    }
                ]
            }
        ]
    },
    "meanings": {
        "Category": [
            {
                "token": {
                    "id": "<CATEGORY_0x96121f83>",
                    "type": "Category",
                    "value": "backdoor"
                },
                "references": {
                    "sentences": [
                        "After researching this malware it became apparent as to why the backdoor remained in use and hidden for so long. If you arent intimately familiar with Linux process abnormalities or werent looking for it you would generally not detect it. Even though it takes advantage of Linux capabilities in a stealthy manner to evade detection, there are still opportunities for both behavioral and signature-based detections.",
                        "When executed the binary copies itself into /dev/shm/. A temporary filesystem /dev/shm stands for shared memory and is a temporary file storage facility serving as an efficient means of inter-process communication<crlf>Renames its process to kdmtmpflush, a hardcoded process name<crlf>Initializes itself with the -init flag and forks itself. Forking in Linux means creating a new process by duplicating the calling process<crlf>Deletes itself by removing the original binary invoked. The forked process continues to run<crlf>Alters the forked processes creation and modification time values, also known as timestomping<crlf>Creates a new process environment for itself and removes the old one setting (spoofing) a new process name. It changes the way it appears on the system akin to wearing a mask. The process is still kdmtmpflush but if you were to run a ps you would see whatever value it set<crlf>Creates a process ID (PID) file in /var/run. PID files are text files containing the process of the associated program meant for preventing multiple starts, marking residency, and used by the program to stop itself. This file resides in /var/run, another temporary file storage facility<crlf>Creates a raw network socket. On Linux, a socket is an endpoint for network communication that allows you to specify in detail every section of a packet allowing a user to implement their own transport layer protocol above the internet (IP) level<crlf>Sets BPF filters on the raw socket. BPF allows a user-space program to attach a filter onto any socket and allow or disallow certain types of data to come through the socket<crlf>Observes incoming packets<crlf>If a packet is observed that matches the BPF filters and contains the required data it is passed to the backdoor for processing<crlf>It forks the current process again<crlf>Changes the forked processes working directory to /<crlf>Changes (spoofs) the name of the forked process to a hardcoded value<crlf>Based on the password or existence of a password sent in the magic packet the backdoor provides a reverse shell, establishes a bind shell, or sends back a ping",
                        "BPFDoor is a backdoor payload specifically crafted for Linux. Its purpose is for long-term persistence in order to gain re-entry into a previously or actively compromised target environment. It notably utilizes BPF along with a number of other techniques to achieve this goal, taking great care to be as efficient and stealthy as possible. PWC researchers discovered this very interesting piece of malware in 2021. PWC attributes this back door to a specific group from China, Red Menshen, and detailed a number of interesting components in a high-level threat research post released last week.",
                        "We took this BPF code, converted it, and wrote it up as pseudo code in an effort to aid our research and craft packets able to successfully get through these filters in order to activate the backdoor.",
                        "In order to do this, we had to break down the BPF filters in the BPFDoor source code so we could craft packets for the different protocols. To do this, we used Scapy, a packet manipulation program, to ensure we could pass the filters for the purpose of activating the backdoor. Once we ensured we could pass the filters, Rhys Rustad-Elliott, an engineer at Elastic built a BPFDoor client that accepts a password, IP address, and port allowing you to connect to a BPFDoor sample and interact if you possess the samples hardcoded passwords.",
                        "This inherently passive backdoor payload is built to be a form of persistence a method to regain access if the first or second stage payloads are lost. It is built for and intended to be installed on high-uptime servers or appliances, IoT/SCADA, or cloud systems with access to the Internet. The backdoor usually sits in temporary storage so if a server were to be rebooted or shut down, the backdoor would be lost.",
                        "The BPFDoor scanner will allow you to scan for hosts infected with the BPFDoor malware and the BPFDoor configuration extractor will allow you to extrapolate the malwares configuration or hardcoded values which can lead to additional observations you can use for further analysis, developing additional signatures or connecting to the backdoor utilizing our client.",
                        "In this attack, the initial TCP handshake is done between the attacker and a completely legitimate process for example nginx or sshd. These handshake packets happen to be also delivered to the backdoor (like every packet on the system) but are filtered out by BPF. Once the connection is established, however, BPFDoor sends a magic packet to the legitimate service. The implant receives it and makes a note of the originating IP and port the attacker is using, and it opens a new listening socket on an inconspicuous port (42391 - 43391).",
                        "Below you can see visual representations of the BPFDoor process tree, utilizing Elastics Analyzer View. The first image displays the tree prior to active use of the backdoor (i.e reverse shell, bind shell, or pingback) and the second image after a reverse shell has connected and performed post-exploitation activities.",
                        "We posture that the threat group would change passwords and update process or file names in an effort to improve operational security and remain hidden. It also makes sense that the general functionality of the backdoor would not change in any great way. As the saying goes If its not broken, dont fix it. Our malware analysis and reverse engineering team compared the source code (uploaded to VirusTotal and found on Pastebin) to a recently uploaded sample highlighting some of the notable changes within the main function of the malware in the images below.",
                        "It should be assumed that if this malware is found on a system the initial-access (1st stage) or post-exploitation (2nd stage) payloads are still most likely present and possibly active elsewhere in the environment. This backdoor excels at stealth, taking every opportunity to blend in and remain undetected.",
                        "The third area we wanted to look at was the network connections tied to two of the three capabilities (reverse shell and bind shell) the backdoor possesses. We wanted to see if there were any suspicious network connections tied to process or user abnormalities we could sequence together based off of the way BPFDoor handles establishing a reverse or bind shell."
                    ],
                    "titles": [
                        "Preamble",
                        "Detection of BPFDoor",
                        "Attack Lifecycle",
                        "BPFDoor Client POC",
                        "Defense Evasion Insights",
                        "Historical Analysis",
                        "BPF Filters"
                    ]
                },
                "links": [
                    {
                        "src": {
                            "id": "<CATEGORY_0x96121f83>",
                            "type": "Category",
                            "value": "backdoor"
                        },
                        "relation": "has_category",
                        "dst": {
                            "id": "<TTP_0x7bb405dc>",
                            "type": "TTP",
                            "value": "ta0005"
                        }
                    },
                    {
                        "src": {
                            "id": "<CATEGORY_0x96121f83>",
                            "type": "Category",
                            "value": "backdoor"
                        },
                        "relation": "has_category",
                        "dst": {
                            "id": "<THREAT_0xe0d73a8f>",
                            "type": "Threat",
                            "value": "bpfdoor"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<CATEGORY_0xf1a480bb>",
                    "type": "Category",
                    "value": "malware"
                },
                "references": {
                    "sentences": [
                        "Perhaps most concerningly, the payload itself has been observed across the last 5 years in various phases of development and complexity, indicating that the threat actor responsible for operating the malware has been at it for some time, undetected in many environments.",
                        "The BPFDoor scanner will allow you to scan for hosts infected with the BPFDoor malware and the BPFDoor configuration extractor will allow you to extrapolate the malwares configuration or hardcoded values which can lead to additional observations you can use for further analysis, developing additional signatures or connecting to the backdoor utilizing our client.",
                        "To clearly articulate the details of this malware, weve created two diagrams that outline the specific pseudocode for BPFDoor based on the source code uploaded to VT and found on Pastebin. While this contains a lot of detail, it is simple to understand if researchers choose to further this research.",
                        "The Elastic Security Team has created a few tools that will aid researchers in analyzing the BPFDoor malware.",
                        "This tool will allow you to extract configurations from any BPFDoor malware you may have collected. This will allow you to develop additional signatures and further analysis of the malware as well as your environment.",
                        "BPFDoor also holds in its repertoire the ability to subvert the traditional Linux socket client - server architecture in order to hide its malicious traffic. The methods which it utilizes to achieve this are both unusual and intriguing.",
                        "We posture that the threat group would change passwords and update process or file names in an effort to improve operational security and remain hidden. It also makes sense that the general functionality of the backdoor would not change in any great way. As the saying goes If its not broken, dont fix it. Our malware analysis and reverse engineering team compared the source code (uploaded to VirusTotal and found on Pastebin) to a recently uploaded sample highlighting some of the notable changes within the main function of the malware in the images below.",
                        "It should be assumed that if this malware is found on a system the initial-access (1st stage) or post-exploitation (2nd stage) payloads are still most likely present and possibly active elsewhere in the environment. This backdoor excels at stealth, taking every opportunity to blend in and remain undetected.",
                        "BPFDoor is a backdoor payload specifically crafted for Linux. Its purpose is for long-term persistence in order to gain re-entry into a previously or actively compromised target environment. It notably utilizes BPF along with a number of other techniques to achieve this goal, taking great care to be as efficient and stealthy as possible. PWC researchers discovered this very interesting piece of malware in 2021. PWC attributes this back door to a specific group from China, Red Menshen, and detailed a number of interesting components in a high-level threat research post released last week.",
                        "eBPF (Extended Berkeley Packet Filters), a new evolution of BPF used increasingly today, is gaining popularity amongst system operators given its efficiency and proven, powerful capabilities leveraged often for system performance, network, and security telemetry collection. Adversaries are taking note and it is our assumption that malware targeting cloud systems will increasingly leverage these methods in the future.",
                        "PWCs findings indicated that Red Menshen had focused their efforts on targeting specific Telecommunications, Government, Logistics, and Education groups across the Middle East and Asia. This activity has been across a Monday-to-Friday working period, between 01:00 UTC and 10:00 UTC, indicating that the operators of the malware were consistent in their attacks, and operation during a working week.",
                        "After developing the 2 detection rules along with the 2 hunt rules listed below and in addition to the 6 YARA signatures deployed we were able to detect BPFDoor in a myriad of different ways and within different stages of its life cycle. As stated earlier though, if you detect this malware in your environment it should be the least of your concerns given the threat actor will most likely have already successfully compromised your network via other means.",
                        "BPF-based malware payloads, while ultimately uncommon, serve a specific purpose on Linux-based hosts where stealthy and performant operations are critical for success. Tools such as BPFDoor are not alone. Recently, Pangu Labs discovered a payload by the name of Bvp47, a sensor that used stealthy BPF-based telemetry to acquire detailed information about the workloads running on infected hosts.",
                        "Quickly after beginning our research into this malware we realized we would also need to actively interact with BPFDoor in order to observe the full extent of the capabilities that it possesses and monitor what these capabilities would look like from a host and SIEM level.",
                        "The second opportunity we noticed, for detection, was a specific PID file being created in /var/run. We noticed the dropped PID file was completely empty while doing a quick query via the Osquery integration to the /var/run directory. While this is not inherently malicious, it is unusual for the file size of a PID to be 0 or above 10 bytes and thus we created an additional rule centered around detecting this unusual behavior.",
                        "The first area of opportunity we witnessed while testing was the behavior we observed during the initial execution of the malware, specifically its working directory, in a shared memory location /dev/shm. This is a native temporary filesystem location in Linux that uses RAM for storage, and a binary executing from it let alone generating network connections is fairly uncommon in practice.",
                        "After researching this malware it became apparent as to why the backdoor remained in use and hidden for so long. If you arent intimately familiar with Linux process abnormalities or werent looking for it you would generally not detect it. Even though it takes advantage of Linux capabilities in a stealthy manner to evade detection, there are still opportunities for both behavioral and signature-based detections.",
                        "The following MITRE ATT&CK Tactic, Techniques, and Sub-techniques have been observed with the BPFDoor malware.",
                        "We wanted to see over time, between BPFDoor payloads, what, if anything, the threat actors modified. A number of samples were detonated and analyzed ranging from the uploaded source code to a sample uploaded last month. We found that the behavior over time did not change a great deal. It maintained the same relative attack lifecycle with a few variations with the hardcoded values such as passwords, process names, and files - this is not uncommon when compared to other malware samples that look to evade detection or leverage payloads across a variety of victims.",
                        "The Elastic Security Team has released several tools that can aid in further research regarding BPFDoor to include a network scanner used to identify infected hosts, a BPFDoor malware configuration extractor, and a BPFDoor client binary that can be used to actively interact with a sample."
                    ],
                    "titles": [
                        "Preamble",
                        "Observables",
                        "Detection of BPFDoor",
                        "Attack Lifecycle",
                        "Interacting with BPFDoor",
                        "Historical Analysis",
                        "General Analysis",
                        "Defense Evasion Insights",
                        "Source Pseudocode",
                        "BPFDoor Configuration Extractor",
                        "Linux Malware Sophistication",
                        "Impact",
                        "BPFDoor Client POC"
                    ]
                },
                "links": [
                    {
                        "src": {
                            "id": "<SHA256_0x8affc0e8>",
                            "type": "Hash",
                            "hash_type": "SHA256",
                            "value": "f8a5e735d6e79eb587954a371515a82a15883cf2eda9d7ddb8938b86e714ea27"
                        },
                        "relation": "has_category",
                        "dst": {
                            "id": "<CATEGORY_0xf1a480bb>",
                            "type": "Category",
                            "value": "malware"
                        }
                    },
                    {
                        "src": {
                            "id": "<SHA256_0xb014bab4>",
                            "type": "Hash",
                            "hash_type": "SHA256",
                            "value": "5b2a079690efb5f4e0944353dd883303ffd6bab4aad1f0c88b49a76ddcb28ee9"
                        },
                        "relation": "has_category",
                        "dst": {
                            "id": "<CATEGORY_0xf1a480bb>",
                            "type": "Category",
                            "value": "malware"
                        }
                    },
                    {
                        "src": {
                            "id": "<SHA256_0x641a5648>",
                            "type": "Hash",
                            "hash_type": "SHA256",
                            "value": "2e0aa3da45a0360d051359e1a038beff8551b957698f21756cfc6ed5539e4bdb"
                        },
                        "relation": "has_category",
                        "dst": {
                            "id": "<CATEGORY_0xf1a480bb>",
                            "type": "Category",
                            "value": "malware"
                        }
                    },
                    {
                        "src": {
                            "id": "<SHA256_0x9658b5ca>",
                            "type": "Hash",
                            "hash_type": "SHA256",
                            "value": "97a546c7d08ad34dfab74c9c8a96986c54768c592a8dae521ddcf612a84fb8cc"
                        },
                        "relation": "has_category",
                        "dst": {
                            "id": "<CATEGORY_0xf1a480bb>",
                            "type": "Category",
                            "value": "malware"
                        }
                    },
                    {
                        "src": {
                            "id": "<SHA256_0x337d1647>",
                            "type": "Hash",
                            "hash_type": "SHA256",
                            "value": "07ecb1f2d9ffbd20a46cd36cd06b022db3cc8e45b1ecab62cd11f9ca7a26ab6d"
                        },
                        "relation": "has_category",
                        "dst": {
                            "id": "<CATEGORY_0xf1a480bb>",
                            "type": "Category",
                            "value": "malware"
                        }
                    },
                    {
                        "src": {
                            "id": "<THREAT_0xe0d73a8f>",
                            "type": "Threat",
                            "value": "bpfdoor"
                        },
                        "relation": "has_category",
                        "dst": {
                            "id": "<CATEGORY_0xf1a480bb>",
                            "type": "Category",
                            "value": "malware"
                        }
                    },
                    {
                        "src": {
                            "id": "<SHA256_0xa80968dc>",
                            "type": "Hash",
                            "hash_type": "SHA256",
                            "value": "fd1b20ee5bd429046d3c04e9c675c41e9095bea70e0329bd32d7edd17ebaf68a"
                        },
                        "relation": "has_category",
                        "dst": {
                            "id": "<CATEGORY_0xf1a480bb>",
                            "type": "Category",
                            "value": "malware"
                        }
                    },
                    {
                        "src": {
                            "id": "<SHA256_0x28994b97>",
                            "type": "Hash",
                            "hash_type": "SHA256",
                            "value": "74ef6cc38f5a1a80148752b63c117e6846984debd2af806c65887195a8eccc56"
                        },
                        "relation": "has_category",
                        "dst": {
                            "id": "<CATEGORY_0xf1a480bb>",
                            "type": "Category",
                            "value": "malware"
                        }
                    },
                    {
                        "src": {
                            "id": "<SHA256_0xe1054d72>",
                            "type": "Hash",
                            "hash_type": "SHA256",
                            "value": "96e906128095dead57fdc9ce8688bb889166b67c9a1b8fdb93d7cff7f3836bb9"
                        },
                        "relation": "has_category",
                        "dst": {
                            "id": "<CATEGORY_0xf1a480bb>",
                            "type": "Category",
                            "value": "malware"
                        }
                    },
                    {
                        "src": {
                            "id": "<SHA256_0xf82e6100>",
                            "type": "Hash",
                            "hash_type": "SHA256",
                            "value": "76bf736b25d5c9aaf6a84edd4e615796fffc338a893b49c120c0b4941ce37925"
                        },
                        "relation": "has_category",
                        "dst": {
                            "id": "<CATEGORY_0xf1a480bb>",
                            "type": "Category",
                            "value": "malware"
                        }
                    },
                    {
                        "src": {
                            "id": "<CATEGORY_0xf1a480bb>",
                            "type": "Category",
                            "value": "malware"
                        },
                        "relation": "has_category",
                        "dst": {
                            "id": "<TTP_0x7bb405dc>",
                            "type": "TTP",
                            "value": "ta0005"
                        }
                    },
                    {
                        "src": {
                            "id": "<SHA256_0x899aad58>",
                            "type": "Hash",
                            "hash_type": "SHA256",
                            "value": "c80bd1c4a796b4d3944a097e96f384c85687daeedcdcf05cc885c8c9b279b09c"
                        },
                        "relation": "has_category",
                        "dst": {
                            "id": "<CATEGORY_0xf1a480bb>",
                            "type": "Category",
                            "value": "malware"
                        }
                    },
                    {
                        "src": {
                            "id": "<SHA256_0xa3696527>",
                            "type": "Hash",
                            "hash_type": "SHA256",
                            "value": "93f4262fce8c6b4f8e239c35a0679fbbbb722141b95a5f2af53a2bcafe4edd1c"
                        },
                        "relation": "has_category",
                        "dst": {
                            "id": "<CATEGORY_0xf1a480bb>",
                            "type": "Category",
                            "value": "malware"
                        }
                    },
                    {
                        "src": {
                            "id": "<SHA256_0x64f8915e>",
                            "type": "Hash",
                            "hash_type": "SHA256",
                            "value": "4c5cf8f977fc7c368a8e095700a44be36c8332462c0b1e41bff03238b2bf2a2d"
                        },
                        "relation": "has_category",
                        "dst": {
                            "id": "<CATEGORY_0xf1a480bb>",
                            "type": "Category",
                            "value": "malware"
                        }
                    },
                    {
                        "src": {
                            "id": "<CATEGORY_0xf1a480bb>",
                            "type": "Category",
                            "value": "malware"
                        },
                        "relation": "has_category",
                        "dst": {
                            "id": "<TTP_0x4f6a185>",
                            "type": "TTP",
                            "value": "ta0040"
                        }
                    },
                    {
                        "src": {
                            "id": "<SHA256_0x79916d51>",
                            "type": "Hash",
                            "hash_type": "SHA256",
                            "value": "599ae527f10ddb4625687748b7d3734ee51673b664f2e5d0346e64f85e185683"
                        },
                        "relation": "has_category",
                        "dst": {
                            "id": "<CATEGORY_0xf1a480bb>",
                            "type": "Category",
                            "value": "malware"
                        }
                    },
                    {
                        "src": {
                            "id": "<SHA256_0x93779565>",
                            "type": "Hash",
                            "hash_type": "SHA256",
                            "value": "f47de978da1dbfc5e0f195745e3368d3ceef034e964817c66ba01396a1953d72"
                        },
                        "relation": "has_category",
                        "dst": {
                            "id": "<CATEGORY_0xf1a480bb>",
                            "type": "Category",
                            "value": "malware"
                        }
                    },
                    {
                        "src": {
                            "id": "<SHA256_0x27749377>",
                            "type": "Hash",
                            "hash_type": "SHA256",
                            "value": "5faab159397964e630c4156f8852bcc6ee46df1cdd8be2a8d3f3d8e5980f3bb3"
                        },
                        "relation": "has_category",
                        "dst": {
                            "id": "<CATEGORY_0xf1a480bb>",
                            "type": "Category",
                            "value": "malware"
                        }
                    },
                    {
                        "src": {
                            "id": "<CATEGORY_0xf1a480bb>",
                            "type": "Category",
                            "value": "malware"
                        },
                        "relation": "has_category",
                        "dst": {
                            "id": "<THREAT_0xe0d73a8f>",
                            "type": "Threat",
                            "value": "bpfdoor"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<CATEGORY_0xfda51682>",
                    "type": "Category",
                    "value": "scan"
                },
                "references": {
                    "sentences": [
                        "The BPFDoor scanner will allow you to scan for hosts infected with the BPFDoor malware and the BPFDoor configuration extractor will allow you to extrapolate the malwares configuration or hardcoded values which can lead to additional observations you can use for further analysis, developing additional signatures or connecting to the backdoor utilizing our client."
                    ],
                    "titles": [
                        "Preamble"
                    ]
                },
                "links": [
                    {
                        "src": {
                            "id": "<CATEGORY_0xfda51682>",
                            "type": "Category",
                            "value": "scan"
                        },
                        "relation": "has_category",
                        "dst": {
                            "id": "<THREAT_0xe0d73a8f>",
                            "type": "Threat",
                            "value": "bpfdoor"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<CATEGORY_0x16ae57bb>",
                    "type": "Category",
                    "value": "vpn"
                },
                "references": {
                    "sentences": [
                        "Red Menshen has leveraged a network of VPS servers to act as a controller network and access these systems via compromised routers based out of Taiwan. The routers act as a VPN network for the adversarial groups via a sequence of specifically crafted packets sent to an infected host. Researchers have indicated that this payload is pervasive and that compromised hosts have been observed across the US, South Korea, Hong Kong, Turkey, India, Vietnam, and Myanmar."
                    ],
                    "titles": [
                        "General Analysis"
                    ]
                },
                "links": [
                    {
                        "src": {
                            "id": "<CATEGORY_0x16ae57bb>",
                            "type": "Category",
                            "value": "vpn"
                        },
                        "relation": "has_category",
                        "dst": {
                            "id": "<THREAT_0xe0d73a8f>",
                            "type": "Threat",
                            "value": "bpfdoor"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<CATEGORY_0xb68aa214>",
                    "type": "Category",
                    "value": "rat"
                },
                "references": {
                    "sentences": [
                        "Elastic Analyzer View of BPFDoor following a reverse shell connection and post exploitation actions",
                        "This EQL rule can be used to successfully identify BPFDoor reverse shell connections having been established within your environment:",
                        "BPFDoor is interesting given the anti-forensics, and obfuscation tactics used. Astute readers will observe slight differences in the PID tree visible when running a ps ajxf on an infected host when compared to executed data within the Analyzer View inside of Elastic. This is due to the process name spoofing mentioned in step 6 (above) of the attack lifecycle above. The image below is taken from a system running BPFDoor with an active reverse shell connection established:",
                        "The hunt rule we created here identifies a sequence of events beginning with a session id change, followed by a network connection accepted, in correlation with ptmx file creation and a deletion of the process responsible for accepting the network connection. This EQL rule can be used to successfully identify BPFDoor bind shell connections within your environment:",
                        "EQL BPFDoor bind shell hunt query",
                        "When executed the binary copies itself into /dev/shm/. A temporary filesystem /dev/shm stands for shared memory and is a temporary file storage facility serving as an efficient means of inter-process communication<crlf>Renames its process to kdmtmpflush, a hardcoded process name<crlf>Initializes itself with the -init flag and forks itself. Forking in Linux means creating a new process by duplicating the calling process<crlf>Deletes itself by removing the original binary invoked. The forked process continues to run<crlf>Alters the forked processes creation and modification time values, also known as timestomping<crlf>Creates a new process environment for itself and removes the old one setting (spoofing) a new process name. It changes the way it appears on the system akin to wearing a mask. The process is still kdmtmpflush but if you were to run a ps you would see whatever value it set<crlf>Creates a process ID (PID) file in /var/run. PID files are text files containing the process of the associated program meant for preventing multiple starts, marking residency, and used by the program to stop itself. This file resides in /var/run, another temporary file storage facility<crlf>Creates a raw network socket. On Linux, a socket is an endpoint for network communication that allows you to specify in detail every section of a packet allowing a user to implement their own transport layer protocol above the internet (IP) level<crlf>Sets BPF filters on the raw socket. BPF allows a user-space program to attach a filter onto any socket and allow or disallow certain types of data to come through the socket<crlf>Observes incoming packets<crlf>If a packet is observed that matches the BPF filters and contains the required data it is passed to the backdoor for processing<crlf>It forks the current process again<crlf>Changes the forked processes working directory to /<crlf>Changes (spoofs) the name of the forked process to a hardcoded value<crlf>Based on the password or existence of a password sent in the magic packet the backdoor provides a reverse shell, establishes a bind shell, or sends back a ping",
                        "Once activated, a typical reverse shell - which this back door also supports - creates an outbound connection to a listener set up by the attacker. This has the advantage of bypassing firewalls watching inbound traffic only. This method is well-understood by defenders, however. The sneakiest way to get a shell connected would be to reuse an existing packet flow, redirected to a separate process.",
                        "An observed running process created by the BPFDoor reverse shell",
                        "While threat groups continue to increase in maturity, we expect this kind of mature, well designed and hidden threat will continue to be found within Linux environments. These kinds of findings reiterate the importance of comprehensive security controls across the entirety of a fleet, rather than simply focusing on user endpoints.",
                        "The reverse shell was the first capability focused on. Taking a deep look at the process tree in and around the reverse shell establishment allowed us to key in on what would be considered a strange or even abnormal sequence of events leading to and involving an outbound network connection.",
                        "Native API<crlf>External Remote Services<crlf>Hide Artifacts<crlf>Indicator Removal on Host<crlf>Non-Application Layer Protocol<crlf>Command and Scripting Interpreter: Unix Shell<crlf>Abuse Elevation Control Mechanism: Setuid and Setgid",
                        "Depending on the password or lack of password provided, BPFDoor will behave exactly the same way it would in the wild. You can invoke a reverse shell, establish a bind shell, or connect to it with no supplied password to receive a ping-back confirming its installation.",
                        "EQL BPFDoor reverse shell hunt query",
                        "Below you can see visual representations of the BPFDoor process tree, utilizing Elastics Analyzer View. The first image displays the tree prior to active use of the backdoor (i.e reverse shell, bind shell, or pingback) and the second image after a reverse shell has connected and performed post-exploitation activities.",
                        "The bind shell was the last capability we honed in on. Identifying an abnormal sequence of events surrounding the bind shell connection was difficult due to the way it forks then accepts the connection and kills the accepting process post established connection. Therefore we had to focus on the sequence of events within the process entity id directly involving the network connection and subsequent killing of the accepting process.",
                        "The third area we wanted to look at was the network connections tied to two of the three capabilities (reverse shell and bind shell) the backdoor possesses. We wanted to see if there were any suspicious network connections tied to process or user abnormalities we could sequence together based off of the way BPFDoor handles establishing a reverse or bind shell."
                    ],
                    "titles": [
                        "Hunting Queries",
                        "Techniques (sub-techniques)",
                        "Detection of BPFDoor",
                        "Attack Lifecycle",
                        "Summary",
                        "Defense Evasion Insights",
                        "BPFDoor Client POC"
                    ]
                },
                "links": [
                    {
                        "src": {
                            "id": "<CATEGORY_0xb68aa214>",
                            "type": "Category",
                            "value": "rat"
                        },
                        "relation": "has_category",
                        "dst": {
                            "id": "<THREAT_0xe0d73a8f>",
                            "type": "Threat",
                            "value": "bpfdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<CATEGORY_0xb68aa214>",
                            "type": "Category",
                            "value": "rat"
                        },
                        "relation": "has_category",
                        "dst": {
                            "id": "<TTP_0x7bb405dc>",
                            "type": "TTP",
                            "value": "ta0005"
                        }
                    }
                ]
            }
        ],
        "Geo": [
            {
                "token": {
                    "id": "<GEO_0xedd1e04b>",
                    "type": "Geo",
                    "value": "china"
                },
                "references": {
                    "sentences": [
                        "BPFDoor is a backdoor payload specifically crafted for Linux. Its purpose is for long-term persistence in order to gain re-entry into a previously or actively compromised target environment. It notably utilizes BPF along with a number of other techniques to achieve this goal, taking great care to be as efficient and stealthy as possible. PWC researchers discovered this very interesting piece of malware in 2021. PWC attributes this back door to a specific group from China, Red Menshen, and detailed a number of interesting components in a high-level threat research post released last week."
                    ],
                    "titles": [
                        "Preamble"
                    ]
                },
                "links": [
                    {
                        "src": {
                            "id": "<GEO_0xedd1e04b>",
                            "type": "Geo",
                            "value": "china"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<THREAT_0xe0d73a8f>",
                            "type": "Threat",
                            "value": "bpfdoor"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<GEO_0xa7d71219>",
                    "type": "Geo",
                    "value": "asia"
                },
                "references": {
                    "sentences": [
                        "PWCs findings indicated that Red Menshen had focused their efforts on targeting specific Telecommunications, Government, Logistics, and Education groups across the Middle East and Asia. This activity has been across a Monday-to-Friday working period, between 01:00 UTC and 10:00 UTC, indicating that the operators of the malware were consistent in their attacks, and operation during a working week."
                    ],
                    "titles": [
                        "Preamble"
                    ]
                },
                "links": [
                    {
                        "src": {
                            "id": "<GEO_0xa7d71219>",
                            "type": "Geo",
                            "value": "asia"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<THREAT_0xe0d73a8f>",
                            "type": "Threat",
                            "value": "bpfdoor"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<GEO_0x516b8d00>",
                    "type": "Geo",
                    "value": "taiwan"
                },
                "references": {
                    "sentences": [
                        "Red Menshen has leveraged a network of VPS servers to act as a controller network and access these systems via compromised routers based out of Taiwan. The routers act as a VPN network for the adversarial groups via a sequence of specifically crafted packets sent to an infected host. Researchers have indicated that this payload is pervasive and that compromised hosts have been observed across the US, South Korea, Hong Kong, Turkey, India, Vietnam, and Myanmar."
                    ],
                    "titles": [
                        "General Analysis"
                    ]
                },
                "links": [
                    {
                        "src": {
                            "id": "<GEO_0x516b8d00>",
                            "type": "Geo",
                            "value": "taiwan"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<THREAT_0xe0d73a8f>",
                            "type": "Threat",
                            "value": "bpfdoor"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<GEO_0x491fab9b>",
                    "type": "Geo",
                    "value": "korea"
                },
                "references": {
                    "sentences": [
                        "Red Menshen has leveraged a network of VPS servers to act as a controller network and access these systems via compromised routers based out of Taiwan. The routers act as a VPN network for the adversarial groups via a sequence of specifically crafted packets sent to an infected host. Researchers have indicated that this payload is pervasive and that compromised hosts have been observed across the US, South Korea, Hong Kong, Turkey, India, Vietnam, and Myanmar."
                    ],
                    "titles": [
                        "General Analysis"
                    ]
                },
                "links": [
                    {
                        "src": {
                            "id": "<GEO_0x491fab9b>",
                            "type": "Geo",
                            "value": "korea"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<THREAT_0xe0d73a8f>",
                            "type": "Threat",
                            "value": "bpfdoor"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<GEO_0x9d5138f7>",
                    "type": "Geo",
                    "value": "turkey"
                },
                "references": {
                    "sentences": [
                        "Red Menshen has leveraged a network of VPS servers to act as a controller network and access these systems via compromised routers based out of Taiwan. The routers act as a VPN network for the adversarial groups via a sequence of specifically crafted packets sent to an infected host. Researchers have indicated that this payload is pervasive and that compromised hosts have been observed across the US, South Korea, Hong Kong, Turkey, India, Vietnam, and Myanmar."
                    ],
                    "titles": [
                        "General Analysis"
                    ]
                },
                "links": [
                    {
                        "src": {
                            "id": "<GEO_0x9d5138f7>",
                            "type": "Geo",
                            "value": "turkey"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<THREAT_0xe0d73a8f>",
                            "type": "Threat",
                            "value": "bpfdoor"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<GEO_0xc87ae5df>",
                    "type": "Geo",
                    "value": "india"
                },
                "references": {
                    "sentences": [
                        "Red Menshen has leveraged a network of VPS servers to act as a controller network and access these systems via compromised routers based out of Taiwan. The routers act as a VPN network for the adversarial groups via a sequence of specifically crafted packets sent to an infected host. Researchers have indicated that this payload is pervasive and that compromised hosts have been observed across the US, South Korea, Hong Kong, Turkey, India, Vietnam, and Myanmar."
                    ],
                    "titles": [
                        "General Analysis"
                    ]
                },
                "links": [
                    {
                        "src": {
                            "id": "<GEO_0xc87ae5df>",
                            "type": "Geo",
                            "value": "india"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<THREAT_0xe0d73a8f>",
                            "type": "Threat",
                            "value": "bpfdoor"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<GEO_0x314f25f5>",
                    "type": "Geo",
                    "value": "vietnam"
                },
                "references": {
                    "sentences": [
                        "Red Menshen has leveraged a network of VPS servers to act as a controller network and access these systems via compromised routers based out of Taiwan. The routers act as a VPN network for the adversarial groups via a sequence of specifically crafted packets sent to an infected host. Researchers have indicated that this payload is pervasive and that compromised hosts have been observed across the US, South Korea, Hong Kong, Turkey, India, Vietnam, and Myanmar."
                    ],
                    "titles": [
                        "General Analysis"
                    ]
                },
                "links": [
                    {
                        "src": {
                            "id": "<GEO_0x314f25f5>",
                            "type": "Geo",
                            "value": "vietnam"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<THREAT_0xe0d73a8f>",
                            "type": "Threat",
                            "value": "bpfdoor"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<GEO_0x44858a57>",
                    "type": "Geo",
                    "value": "myanmar"
                },
                "references": {
                    "sentences": [
                        "Red Menshen has leveraged a network of VPS servers to act as a controller network and access these systems via compromised routers based out of Taiwan. The routers act as a VPN network for the adversarial groups via a sequence of specifically crafted packets sent to an infected host. Researchers have indicated that this payload is pervasive and that compromised hosts have been observed across the US, South Korea, Hong Kong, Turkey, India, Vietnam, and Myanmar."
                    ],
                    "titles": [
                        "General Analysis"
                    ]
                },
                "links": [
                    {
                        "src": {
                            "id": "<GEO_0x44858a57>",
                            "type": "Geo",
                            "value": "myanmar"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<THREAT_0xe0d73a8f>",
                            "type": "Threat",
                            "value": "bpfdoor"
                        }
                    }
                ]
            }
        ],
        "Industry": [
            {
                "token": {
                    "id": "<INDUSTRY_0xbc688f09>",
                    "type": "Industry",
                    "value": "telco"
                },
                "references": {
                    "sentences": [
                        "PWCs findings indicated that Red Menshen had focused their efforts on targeting specific Telecommunications, Government, Logistics, and Education groups across the Middle East and Asia. This activity has been across a Monday-to-Friday working period, between 01:00 UTC and 10:00 UTC, indicating that the operators of the malware were consistent in their attacks, and operation during a working week."
                    ],
                    "titles": [
                        "Preamble"
                    ]
                },
                "links": [
                    {
                        "src": {
                            "id": "<INDUSTRY_0xbc688f09>",
                            "type": "Industry",
                            "value": "telco"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<THREAT_0xe0d73a8f>",
                            "type": "Threat",
                            "value": "bpfdoor"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<INDUSTRY_0x6ba3d0a8>",
                    "type": "Industry",
                    "value": "government"
                },
                "references": {
                    "sentences": [
                        "PWCs findings indicated that Red Menshen had focused their efforts on targeting specific Telecommunications, Government, Logistics, and Education groups across the Middle East and Asia. This activity has been across a Monday-to-Friday working period, between 01:00 UTC and 10:00 UTC, indicating that the operators of the malware were consistent in their attacks, and operation during a working week."
                    ],
                    "titles": [
                        "Preamble"
                    ]
                },
                "links": [
                    {
                        "src": {
                            "id": "<INDUSTRY_0x6ba3d0a8>",
                            "type": "Industry",
                            "value": "government"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<THREAT_0xe0d73a8f>",
                            "type": "Threat",
                            "value": "bpfdoor"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<INDUSTRY_0x39572ba2>",
                    "type": "Industry",
                    "value": "logistic"
                },
                "references": {
                    "sentences": [
                        "PWCs findings indicated that Red Menshen had focused their efforts on targeting specific Telecommunications, Government, Logistics, and Education groups across the Middle East and Asia. This activity has been across a Monday-to-Friday working period, between 01:00 UTC and 10:00 UTC, indicating that the operators of the malware were consistent in their attacks, and operation during a working week."
                    ],
                    "titles": [
                        "Preamble"
                    ]
                },
                "links": [
                    {
                        "src": {
                            "id": "<INDUSTRY_0x39572ba2>",
                            "type": "Industry",
                            "value": "logistic"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<THREAT_0xe0d73a8f>",
                            "type": "Threat",
                            "value": "bpfdoor"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<INDUSTRY_0xdca60ecc>",
                    "type": "Industry",
                    "value": "education"
                },
                "references": {
                    "sentences": [
                        "PWCs findings indicated that Red Menshen had focused their efforts on targeting specific Telecommunications, Government, Logistics, and Education groups across the Middle East and Asia. This activity has been across a Monday-to-Friday working period, between 01:00 UTC and 10:00 UTC, indicating that the operators of the malware were consistent in their attacks, and operation during a working week."
                    ],
                    "titles": [
                        "Preamble"
                    ]
                },
                "links": [
                    {
                        "src": {
                            "id": "<INDUSTRY_0xdca60ecc>",
                            "type": "Industry",
                            "value": "education"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<THREAT_0xe0d73a8f>",
                            "type": "Threat",
                            "value": "bpfdoor"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<INDUSTRY_0xc57b659c>",
                    "type": "Industry",
                    "value": "iot"
                },
                "references": {
                    "sentences": [
                        "This inherently passive backdoor payload is built to be a form of persistence a method to regain access if the first or second stage payloads are lost. It is built for and intended to be installed on high-uptime servers or appliances, IoT/SCADA, or cloud systems with access to the Internet. The backdoor usually sits in temporary storage so if a server were to be rebooted or shut down, the backdoor would be lost."
                    ],
                    "titles": [
                        "Attack Lifecycle"
                    ]
                },
                "links": [
                    {
                        "src": {
                            "id": "<INDUSTRY_0xc57b659c>",
                            "type": "Industry",
                            "value": "iot"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<THREAT_0xe0d73a8f>",
                            "type": "Threat",
                            "value": "bpfdoor"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<INDUSTRY_0x26fd0e75>",
                    "type": "Industry",
                    "value": "ics"
                },
                "references": {
                    "sentences": [
                        "This inherently passive backdoor payload is built to be a form of persistence a method to regain access if the first or second stage payloads are lost. It is built for and intended to be installed on high-uptime servers or appliances, IoT/SCADA, or cloud systems with access to the Internet. The backdoor usually sits in temporary storage so if a server were to be rebooted or shut down, the backdoor would be lost."
                    ],
                    "titles": [
                        "Attack Lifecycle"
                    ]
                },
                "links": [
                    {
                        "src": {
                            "id": "<INDUSTRY_0x26fd0e75>",
                            "type": "Industry",
                            "value": "ics"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<THREAT_0xe0d73a8f>",
                            "type": "Threat",
                            "value": "bpfdoor"
                        }
                    }
                ]
            }
        ]
    },
    "iocs": {
        "Hash": [
            {
                "token": {
                    "id": "<SHA256_0x28994b97>",
                    "type": "Hash",
                    "hash_type": "SHA256",
                    "value": "74ef6cc38f5a1a80148752b63c117e6846984debd2af806c65887195a8eccc56"
                },
                "references": {
                    "sentences": [],
                    "titles": [
                        "Observables"
                    ]
                },
                "links": [
                    {
                        "src": {
                            "id": "<SHA256_0x28994b97>",
                            "type": "Hash",
                            "hash_type": "SHA256",
                            "value": "74ef6cc38f5a1a80148752b63c117e6846984debd2af806c65887195a8eccc56"
                        },
                        "relation": "has_category",
                        "dst": {
                            "id": "<CATEGORY_0xf1a480bb>",
                            "type": "Category",
                            "value": "malware"
                        }
                    },
                    {
                        "src": {
                            "id": "<SHA256_0x28994b97>",
                            "type": "Hash",
                            "hash_type": "SHA256",
                            "value": "74ef6cc38f5a1a80148752b63c117e6846984debd2af806c65887195a8eccc56"
                        },
                        "relation": "use_threat",
                        "dst": {
                            "id": "<THREAT_0xe0d73a8f>",
                            "type": "Threat",
                            "value": "bpfdoor"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<SHA256_0x337d1647>",
                    "type": "Hash",
                    "hash_type": "SHA256",
                    "value": "07ecb1f2d9ffbd20a46cd36cd06b022db3cc8e45b1ecab62cd11f9ca7a26ab6d"
                },
                "references": {
                    "sentences": [],
                    "titles": [
                        "Observables"
                    ]
                },
                "links": [
                    {
                        "src": {
                            "id": "<SHA256_0x337d1647>",
                            "type": "Hash",
                            "hash_type": "SHA256",
                            "value": "07ecb1f2d9ffbd20a46cd36cd06b022db3cc8e45b1ecab62cd11f9ca7a26ab6d"
                        },
                        "relation": "use_threat",
                        "dst": {
                            "id": "<THREAT_0xe0d73a8f>",
                            "type": "Threat",
                            "value": "bpfdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<SHA256_0x337d1647>",
                            "type": "Hash",
                            "hash_type": "SHA256",
                            "value": "07ecb1f2d9ffbd20a46cd36cd06b022db3cc8e45b1ecab62cd11f9ca7a26ab6d"
                        },
                        "relation": "has_category",
                        "dst": {
                            "id": "<CATEGORY_0xf1a480bb>",
                            "type": "Category",
                            "value": "malware"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<SHA256_0xf82e6100>",
                    "type": "Hash",
                    "hash_type": "SHA256",
                    "value": "76bf736b25d5c9aaf6a84edd4e615796fffc338a893b49c120c0b4941ce37925"
                },
                "references": {
                    "sentences": [],
                    "titles": [
                        "Observables"
                    ]
                },
                "links": [
                    {
                        "src": {
                            "id": "<SHA256_0xf82e6100>",
                            "type": "Hash",
                            "hash_type": "SHA256",
                            "value": "76bf736b25d5c9aaf6a84edd4e615796fffc338a893b49c120c0b4941ce37925"
                        },
                        "relation": "has_category",
                        "dst": {
                            "id": "<CATEGORY_0xf1a480bb>",
                            "type": "Category",
                            "value": "malware"
                        }
                    },
                    {
                        "src": {
                            "id": "<SHA256_0xf82e6100>",
                            "type": "Hash",
                            "hash_type": "SHA256",
                            "value": "76bf736b25d5c9aaf6a84edd4e615796fffc338a893b49c120c0b4941ce37925"
                        },
                        "relation": "use_threat",
                        "dst": {
                            "id": "<THREAT_0xe0d73a8f>",
                            "type": "Threat",
                            "value": "bpfdoor"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<SHA256_0xa3696527>",
                    "type": "Hash",
                    "hash_type": "SHA256",
                    "value": "93f4262fce8c6b4f8e239c35a0679fbbbb722141b95a5f2af53a2bcafe4edd1c"
                },
                "references": {
                    "sentences": [],
                    "titles": [
                        "Observables"
                    ]
                },
                "links": [
                    {
                        "src": {
                            "id": "<SHA256_0xa3696527>",
                            "type": "Hash",
                            "hash_type": "SHA256",
                            "value": "93f4262fce8c6b4f8e239c35a0679fbbbb722141b95a5f2af53a2bcafe4edd1c"
                        },
                        "relation": "use_threat",
                        "dst": {
                            "id": "<THREAT_0xe0d73a8f>",
                            "type": "Threat",
                            "value": "bpfdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<SHA256_0xa3696527>",
                            "type": "Hash",
                            "hash_type": "SHA256",
                            "value": "93f4262fce8c6b4f8e239c35a0679fbbbb722141b95a5f2af53a2bcafe4edd1c"
                        },
                        "relation": "has_category",
                        "dst": {
                            "id": "<CATEGORY_0xf1a480bb>",
                            "type": "Category",
                            "value": "malware"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<SHA256_0xe1054d72>",
                    "type": "Hash",
                    "hash_type": "SHA256",
                    "value": "96e906128095dead57fdc9ce8688bb889166b67c9a1b8fdb93d7cff7f3836bb9"
                },
                "references": {
                    "sentences": [],
                    "titles": [
                        "Observables"
                    ]
                },
                "links": [
                    {
                        "src": {
                            "id": "<SHA256_0xe1054d72>",
                            "type": "Hash",
                            "hash_type": "SHA256",
                            "value": "96e906128095dead57fdc9ce8688bb889166b67c9a1b8fdb93d7cff7f3836bb9"
                        },
                        "relation": "has_category",
                        "dst": {
                            "id": "<CATEGORY_0xf1a480bb>",
                            "type": "Category",
                            "value": "malware"
                        }
                    },
                    {
                        "src": {
                            "id": "<SHA256_0xe1054d72>",
                            "type": "Hash",
                            "hash_type": "SHA256",
                            "value": "96e906128095dead57fdc9ce8688bb889166b67c9a1b8fdb93d7cff7f3836bb9"
                        },
                        "relation": "use_threat",
                        "dst": {
                            "id": "<THREAT_0xe0d73a8f>",
                            "type": "Threat",
                            "value": "bpfdoor"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<SHA256_0x79916d51>",
                    "type": "Hash",
                    "hash_type": "SHA256",
                    "value": "599ae527f10ddb4625687748b7d3734ee51673b664f2e5d0346e64f85e185683"
                },
                "references": {
                    "sentences": [],
                    "titles": [
                        "Observables"
                    ]
                },
                "links": [
                    {
                        "src": {
                            "id": "<SHA256_0x79916d51>",
                            "type": "Hash",
                            "hash_type": "SHA256",
                            "value": "599ae527f10ddb4625687748b7d3734ee51673b664f2e5d0346e64f85e185683"
                        },
                        "relation": "has_category",
                        "dst": {
                            "id": "<CATEGORY_0xf1a480bb>",
                            "type": "Category",
                            "value": "malware"
                        }
                    },
                    {
                        "src": {
                            "id": "<SHA256_0x79916d51>",
                            "type": "Hash",
                            "hash_type": "SHA256",
                            "value": "599ae527f10ddb4625687748b7d3734ee51673b664f2e5d0346e64f85e185683"
                        },
                        "relation": "use_threat",
                        "dst": {
                            "id": "<THREAT_0xe0d73a8f>",
                            "type": "Threat",
                            "value": "bpfdoor"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<SHA256_0x641a5648>",
                    "type": "Hash",
                    "hash_type": "SHA256",
                    "value": "2e0aa3da45a0360d051359e1a038beff8551b957698f21756cfc6ed5539e4bdb"
                },
                "references": {
                    "sentences": [],
                    "titles": [
                        "Observables"
                    ]
                },
                "links": [
                    {
                        "src": {
                            "id": "<SHA256_0x641a5648>",
                            "type": "Hash",
                            "hash_type": "SHA256",
                            "value": "2e0aa3da45a0360d051359e1a038beff8551b957698f21756cfc6ed5539e4bdb"
                        },
                        "relation": "use_threat",
                        "dst": {
                            "id": "<THREAT_0xe0d73a8f>",
                            "type": "Threat",
                            "value": "bpfdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<SHA256_0x641a5648>",
                            "type": "Hash",
                            "hash_type": "SHA256",
                            "value": "2e0aa3da45a0360d051359e1a038beff8551b957698f21756cfc6ed5539e4bdb"
                        },
                        "relation": "has_category",
                        "dst": {
                            "id": "<CATEGORY_0xf1a480bb>",
                            "type": "Category",
                            "value": "malware"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<SHA256_0x93779565>",
                    "type": "Hash",
                    "hash_type": "SHA256",
                    "value": "f47de978da1dbfc5e0f195745e3368d3ceef034e964817c66ba01396a1953d72"
                },
                "references": {
                    "sentences": [],
                    "titles": [
                        "Observables"
                    ]
                },
                "links": [
                    {
                        "src": {
                            "id": "<SHA256_0x93779565>",
                            "type": "Hash",
                            "hash_type": "SHA256",
                            "value": "f47de978da1dbfc5e0f195745e3368d3ceef034e964817c66ba01396a1953d72"
                        },
                        "relation": "use_threat",
                        "dst": {
                            "id": "<THREAT_0xe0d73a8f>",
                            "type": "Threat",
                            "value": "bpfdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<SHA256_0x93779565>",
                            "type": "Hash",
                            "hash_type": "SHA256",
                            "value": "f47de978da1dbfc5e0f195745e3368d3ceef034e964817c66ba01396a1953d72"
                        },
                        "relation": "has_category",
                        "dst": {
                            "id": "<CATEGORY_0xf1a480bb>",
                            "type": "Category",
                            "value": "malware"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<SHA256_0xa80968dc>",
                    "type": "Hash",
                    "hash_type": "SHA256",
                    "value": "fd1b20ee5bd429046d3c04e9c675c41e9095bea70e0329bd32d7edd17ebaf68a"
                },
                "references": {
                    "sentences": [],
                    "titles": [
                        "Observables"
                    ]
                },
                "links": [
                    {
                        "src": {
                            "id": "<SHA256_0xa80968dc>",
                            "type": "Hash",
                            "hash_type": "SHA256",
                            "value": "fd1b20ee5bd429046d3c04e9c675c41e9095bea70e0329bd32d7edd17ebaf68a"
                        },
                        "relation": "has_category",
                        "dst": {
                            "id": "<CATEGORY_0xf1a480bb>",
                            "type": "Category",
                            "value": "malware"
                        }
                    },
                    {
                        "src": {
                            "id": "<SHA256_0xa80968dc>",
                            "type": "Hash",
                            "hash_type": "SHA256",
                            "value": "fd1b20ee5bd429046d3c04e9c675c41e9095bea70e0329bd32d7edd17ebaf68a"
                        },
                        "relation": "use_threat",
                        "dst": {
                            "id": "<THREAT_0xe0d73a8f>",
                            "type": "Threat",
                            "value": "bpfdoor"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<SHA256_0x27749377>",
                    "type": "Hash",
                    "hash_type": "SHA256",
                    "value": "5faab159397964e630c4156f8852bcc6ee46df1cdd8be2a8d3f3d8e5980f3bb3"
                },
                "references": {
                    "sentences": [],
                    "titles": [
                        "Observables"
                    ]
                },
                "links": [
                    {
                        "src": {
                            "id": "<SHA256_0x27749377>",
                            "type": "Hash",
                            "hash_type": "SHA256",
                            "value": "5faab159397964e630c4156f8852bcc6ee46df1cdd8be2a8d3f3d8e5980f3bb3"
                        },
                        "relation": "has_category",
                        "dst": {
                            "id": "<CATEGORY_0xf1a480bb>",
                            "type": "Category",
                            "value": "malware"
                        }
                    },
                    {
                        "src": {
                            "id": "<SHA256_0x27749377>",
                            "type": "Hash",
                            "hash_type": "SHA256",
                            "value": "5faab159397964e630c4156f8852bcc6ee46df1cdd8be2a8d3f3d8e5980f3bb3"
                        },
                        "relation": "use_threat",
                        "dst": {
                            "id": "<THREAT_0xe0d73a8f>",
                            "type": "Threat",
                            "value": "bpfdoor"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<SHA256_0x8affc0e8>",
                    "type": "Hash",
                    "hash_type": "SHA256",
                    "value": "f8a5e735d6e79eb587954a371515a82a15883cf2eda9d7ddb8938b86e714ea27"
                },
                "references": {
                    "sentences": [],
                    "titles": [
                        "Observables"
                    ]
                },
                "links": [
                    {
                        "src": {
                            "id": "<SHA256_0x8affc0e8>",
                            "type": "Hash",
                            "hash_type": "SHA256",
                            "value": "f8a5e735d6e79eb587954a371515a82a15883cf2eda9d7ddb8938b86e714ea27"
                        },
                        "relation": "has_category",
                        "dst": {
                            "id": "<CATEGORY_0xf1a480bb>",
                            "type": "Category",
                            "value": "malware"
                        }
                    },
                    {
                        "src": {
                            "id": "<SHA256_0x8affc0e8>",
                            "type": "Hash",
                            "hash_type": "SHA256",
                            "value": "f8a5e735d6e79eb587954a371515a82a15883cf2eda9d7ddb8938b86e714ea27"
                        },
                        "relation": "use_threat",
                        "dst": {
                            "id": "<THREAT_0xe0d73a8f>",
                            "type": "Threat",
                            "value": "bpfdoor"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<SHA256_0xb014bab4>",
                    "type": "Hash",
                    "hash_type": "SHA256",
                    "value": "5b2a079690efb5f4e0944353dd883303ffd6bab4aad1f0c88b49a76ddcb28ee9"
                },
                "references": {
                    "sentences": [],
                    "titles": [
                        "Observables"
                    ]
                },
                "links": [
                    {
                        "src": {
                            "id": "<SHA256_0xb014bab4>",
                            "type": "Hash",
                            "hash_type": "SHA256",
                            "value": "5b2a079690efb5f4e0944353dd883303ffd6bab4aad1f0c88b49a76ddcb28ee9"
                        },
                        "relation": "has_category",
                        "dst": {
                            "id": "<CATEGORY_0xf1a480bb>",
                            "type": "Category",
                            "value": "malware"
                        }
                    },
                    {
                        "src": {
                            "id": "<SHA256_0xb014bab4>",
                            "type": "Hash",
                            "hash_type": "SHA256",
                            "value": "5b2a079690efb5f4e0944353dd883303ffd6bab4aad1f0c88b49a76ddcb28ee9"
                        },
                        "relation": "use_threat",
                        "dst": {
                            "id": "<THREAT_0xe0d73a8f>",
                            "type": "Threat",
                            "value": "bpfdoor"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<SHA256_0x9658b5ca>",
                    "type": "Hash",
                    "hash_type": "SHA256",
                    "value": "97a546c7d08ad34dfab74c9c8a96986c54768c592a8dae521ddcf612a84fb8cc"
                },
                "references": {
                    "sentences": [],
                    "titles": [
                        "Observables"
                    ]
                },
                "links": [
                    {
                        "src": {
                            "id": "<SHA256_0x9658b5ca>",
                            "type": "Hash",
                            "hash_type": "SHA256",
                            "value": "97a546c7d08ad34dfab74c9c8a96986c54768c592a8dae521ddcf612a84fb8cc"
                        },
                        "relation": "has_category",
                        "dst": {
                            "id": "<CATEGORY_0xf1a480bb>",
                            "type": "Category",
                            "value": "malware"
                        }
                    },
                    {
                        "src": {
                            "id": "<SHA256_0x9658b5ca>",
                            "type": "Hash",
                            "hash_type": "SHA256",
                            "value": "97a546c7d08ad34dfab74c9c8a96986c54768c592a8dae521ddcf612a84fb8cc"
                        },
                        "relation": "use_threat",
                        "dst": {
                            "id": "<THREAT_0xe0d73a8f>",
                            "type": "Threat",
                            "value": "bpfdoor"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<SHA256_0x899aad58>",
                    "type": "Hash",
                    "hash_type": "SHA256",
                    "value": "c80bd1c4a796b4d3944a097e96f384c85687daeedcdcf05cc885c8c9b279b09c"
                },
                "references": {
                    "sentences": [],
                    "titles": [
                        "Observables"
                    ]
                },
                "links": [
                    {
                        "src": {
                            "id": "<SHA256_0x899aad58>",
                            "type": "Hash",
                            "hash_type": "SHA256",
                            "value": "c80bd1c4a796b4d3944a097e96f384c85687daeedcdcf05cc885c8c9b279b09c"
                        },
                        "relation": "use_threat",
                        "dst": {
                            "id": "<THREAT_0xe0d73a8f>",
                            "type": "Threat",
                            "value": "bpfdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<SHA256_0x899aad58>",
                            "type": "Hash",
                            "hash_type": "SHA256",
                            "value": "c80bd1c4a796b4d3944a097e96f384c85687daeedcdcf05cc885c8c9b279b09c"
                        },
                        "relation": "has_category",
                        "dst": {
                            "id": "<CATEGORY_0xf1a480bb>",
                            "type": "Category",
                            "value": "malware"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<SHA256_0x64f8915e>",
                    "type": "Hash",
                    "hash_type": "SHA256",
                    "value": "4c5cf8f977fc7c368a8e095700a44be36c8332462c0b1e41bff03238b2bf2a2d"
                },
                "references": {
                    "sentences": [],
                    "titles": [
                        "Observables"
                    ]
                },
                "links": [
                    {
                        "src": {
                            "id": "<SHA256_0x64f8915e>",
                            "type": "Hash",
                            "hash_type": "SHA256",
                            "value": "4c5cf8f977fc7c368a8e095700a44be36c8332462c0b1e41bff03238b2bf2a2d"
                        },
                        "relation": "use_threat",
                        "dst": {
                            "id": "<THREAT_0xe0d73a8f>",
                            "type": "Threat",
                            "value": "bpfdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<SHA256_0x64f8915e>",
                            "type": "Hash",
                            "hash_type": "SHA256",
                            "value": "4c5cf8f977fc7c368a8e095700a44be36c8332462c0b1e41bff03238b2bf2a2d"
                        },
                        "relation": "has_category",
                        "dst": {
                            "id": "<CATEGORY_0xf1a480bb>",
                            "type": "Category",
                            "value": "malware"
                        }
                    }
                ]
            }
        ]
    },
    "unknownwords": {
        "UnknownWord": [
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x42925e37>",
                    "type": "UnknownWord",
                    "value": "peek"
                },
                "references": {
                    "sentences": [],
                    "titles": [
                        "A peek behind the BPFDoor"
                    ]
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x718f0259>",
                    "type": "UnknownWord",
                    "value": "colson wilhoit"
                },
                "references": {
                    "sentences": [
                        "Colson Wilhoit @DefSecSentinel<crlf>|<crlf><crlf>Alex Bell @tabell<crlf>|<crlf><crlf>Rhys Rustad-Elliott @rhysre<crlf>|<crlf><crlf>Jake King @jtnk<crlf>2022-05-17"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x3e82a3a1>",
                    "type": "UnknownWord",
                    "value": "defsecsentinel"
                },
                "references": {
                    "sentences": [
                        "Colson Wilhoit @DefSecSentinel<crlf>|<crlf><crlf>Alex Bell @tabell<crlf>|<crlf><crlf>Rhys Rustad-Elliott @rhysre<crlf>|<crlf><crlf>Jake King @jtnk<crlf>2022-05-17"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xd0d52427>",
                    "type": "UnknownWord",
                    "value": "alex"
                },
                "references": {
                    "sentences": [
                        "Colson Wilhoit @DefSecSentinel<crlf>|<crlf><crlf>Alex Bell @tabell<crlf>|<crlf><crlf>Rhys Rustad-Elliott @rhysre<crlf>|<crlf><crlf>Jake King @jtnk<crlf>2022-05-17"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x99fa5796>",
                    "type": "UnknownWord",
                    "value": "bell"
                },
                "references": {
                    "sentences": [
                        "Colson Wilhoit @DefSecSentinel<crlf>|<crlf><crlf>Alex Bell @tabell<crlf>|<crlf><crlf>Rhys Rustad-Elliott @rhysre<crlf>|<crlf><crlf>Jake King @jtnk<crlf>2022-05-17"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x5bcb8ac1>",
                    "type": "UnknownWord",
                    "value": "tabell"
                },
                "references": {
                    "sentences": [
                        "Colson Wilhoit @DefSecSentinel<crlf>|<crlf><crlf>Alex Bell @tabell<crlf>|<crlf><crlf>Rhys Rustad-Elliott @rhysre<crlf>|<crlf><crlf>Jake King @jtnk<crlf>2022-05-17"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x14de1da1>",
                    "type": "UnknownWord",
                    "value": "rhys"
                },
                "references": {
                    "sentences": [
                        "Colson Wilhoit @DefSecSentinel<crlf>|<crlf><crlf>Alex Bell @tabell<crlf>|<crlf><crlf>Rhys Rustad-Elliott @rhysre<crlf>|<crlf><crlf>Jake King @jtnk<crlf>2022-05-17",
                        "In order to do this, we had to break down the BPF filters in the BPFDoor source code so we could craft packets for the different protocols. To do this, we used Scapy, a packet manipulation program, to ensure we could pass the filters for the purpose of activating the backdoor. Once we ensured we could pass the filters, Rhys Rustad-Elliott, an engineer at Elastic built a BPFDoor client that accepts a password, IP address, and port allowing you to connect to a BPFDoor sample and interact if you possess the samples hardcoded passwords."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x3a64adfc>",
                    "type": "UnknownWord",
                    "value": "rustad-elliott"
                },
                "references": {
                    "sentences": [
                        "Colson Wilhoit @DefSecSentinel<crlf>|<crlf><crlf>Alex Bell @tabell<crlf>|<crlf><crlf>Rhys Rustad-Elliott @rhysre<crlf>|<crlf><crlf>Jake King @jtnk<crlf>2022-05-17",
                        "In order to do this, we had to break down the BPF filters in the BPFDoor source code so we could craft packets for the different protocols. To do this, we used Scapy, a packet manipulation program, to ensure we could pass the filters for the purpose of activating the backdoor. Once we ensured we could pass the filters, Rhys Rustad-Elliott, an engineer at Elastic built a BPFDoor client that accepts a password, IP address, and port allowing you to connect to a BPFDoor sample and interact if you possess the samples hardcoded passwords."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x52cd1bf1>",
                    "type": "UnknownWord",
                    "value": "rhysre"
                },
                "references": {
                    "sentences": [
                        "Colson Wilhoit @DefSecSentinel<crlf>|<crlf><crlf>Alex Bell @tabell<crlf>|<crlf><crlf>Rhys Rustad-Elliott @rhysre<crlf>|<crlf><crlf>Jake King @jtnk<crlf>2022-05-17"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xa9f6e7b9>",
                    "type": "UnknownWord",
                    "value": "jake king"
                },
                "references": {
                    "sentences": [
                        "Colson Wilhoit @DefSecSentinel<crlf>|<crlf><crlf>Alex Bell @tabell<crlf>|<crlf><crlf>Rhys Rustad-Elliott @rhysre<crlf>|<crlf><crlf>Jake King @jtnk<crlf>2022-05-17"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x5607343b>",
                    "type": "UnknownWord",
                    "value": "jtnk"
                },
                "references": {
                    "sentences": [
                        "Colson Wilhoit @DefSecSentinel<crlf>|<crlf><crlf>Alex Bell @tabell<crlf>|<crlf><crlf>Rhys Rustad-Elliott @rhysre<crlf>|<crlf><crlf>Jake King @jtnk<crlf>2022-05-17"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xaf1919e1>",
                    "type": "UnknownWord",
                    "value": "preamble"
                },
                "references": {
                    "sentences": [],
                    "titles": [
                        "Preamble"
                    ]
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xe5d79d43>",
                    "type": "UnknownWord",
                    "value": "re-entry"
                },
                "references": {
                    "sentences": [
                        "BPFDoor is a backdoor payload specifically crafted for Linux. Its purpose is for long-term persistence in order to gain re-entry into a previously or actively compromised target environment. It notably utilizes BPF along with a number of other techniques to achieve this goal, taking great care to be as efficient and stealthy as possible. PWC researchers discovered this very interesting piece of malware in 2021. PWC attributes this back door to a specific group from China, Red Menshen, and detailed a number of interesting components in a high-level threat research post released last week."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xa8145cfc>",
                    "type": "UnknownWord",
                    "value": "notably"
                },
                "references": {
                    "sentences": [
                        "BPFDoor is a backdoor payload specifically crafted for Linux. Its purpose is for long-term persistence in order to gain re-entry into a previously or actively compromised target environment. It notably utilizes BPF along with a number of other techniques to achieve this goal, taking great care to be as efficient and stealthy as possible. PWC researchers discovered this very interesting piece of malware in 2021. PWC attributes this back door to a specific group from China, Red Menshen, and detailed a number of interesting components in a high-level threat research post released last week."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x23a4a2cf>",
                    "type": "UnknownWord",
                    "value": "bpf"
                },
                "references": {
                    "sentences": [
                        "BPFDoor source code BPF Filter Pseudocode",
                        "Thats where BPF comes in - an extremely efficient, kernel-level packet filter is the perfect tool to allow the implant to ignore 99% of network traffic and only become activated when a special pattern is encountered. This implant looks for a so-called magic packet in every TCP, UDP and ICMP packet received on the system.",
                        "When executed the binary copies itself into /dev/shm/. A temporary filesystem /dev/shm stands for shared memory and is a temporary file storage facility serving as an efficient means of inter-process communication<crlf>Renames its process to kdmtmpflush, a hardcoded process name<crlf>Initializes itself with the -init flag and forks itself. Forking in Linux means creating a new process by duplicating the calling process<crlf>Deletes itself by removing the original binary invoked. The forked process continues to run<crlf>Alters the forked processes creation and modification time values, also known as timestomping<crlf>Creates a new process environment for itself and removes the old one setting (spoofing) a new process name. It changes the way it appears on the system akin to wearing a mask. The process is still kdmtmpflush but if you were to run a ps you would see whatever value it set<crlf>Creates a process ID (PID) file in /var/run. PID files are text files containing the process of the associated program meant for preventing multiple starts, marking residency, and used by the program to stop itself. This file resides in /var/run, another temporary file storage facility<crlf>Creates a raw network socket. On Linux, a socket is an endpoint for network communication that allows you to specify in detail every section of a packet allowing a user to implement their own transport layer protocol above the internet (IP) level<crlf>Sets BPF filters on the raw socket. BPF allows a user-space program to attach a filter onto any socket and allow or disallow certain types of data to come through the socket<crlf>Observes incoming packets<crlf>If a packet is observed that matches the BPF filters and contains the required data it is passed to the backdoor for processing<crlf>It forks the current process again<crlf>Changes the forked processes working directory to /<crlf>Changes (spoofs) the name of the forked process to a hardcoded value<crlf>Based on the password or existence of a password sent in the magic packet the backdoor provides a reverse shell, establishes a bind shell, or sends back a ping",
                        "As stated in step 9 (above), BPF or Berkeley Packet Filters is a technology from the early 90s that allows a user-space program to attach a network filter onto any socket and allow or disallow certain types of data to come through the socket. These filters are made up of bytecode that runs on an abstract virtual machine in the Linux kernel. The BPF virtual machine has functionality to inspect all parts of incoming packets and make an allow/drop decision based on what it sees. . You can see in the image example below what this looks like within the BPFDoor source code:",
                        "BPFDoor is a backdoor payload specifically crafted for Linux. Its purpose is for long-term persistence in order to gain re-entry into a previously or actively compromised target environment. It notably utilizes BPF along with a number of other techniques to achieve this goal, taking great care to be as efficient and stealthy as possible. PWC researchers discovered this very interesting piece of malware in 2021. PWC attributes this back door to a specific group from China, Red Menshen, and detailed a number of interesting components in a high-level threat research post released last week.",
                        "eBPF (Extended Berkeley Packet Filters), a new evolution of BPF used increasingly today, is gaining popularity amongst system operators given its efficiency and proven, powerful capabilities leveraged often for system performance, network, and security telemetry collection. Adversaries are taking note and it is our assumption that malware targeting cloud systems will increasingly leverage these methods in the future.",
                        "We took this BPF code, converted it, and wrote it up as pseudo code in an effort to aid our research and craft packets able to successfully get through these filters in order to activate the backdoor.",
                        "In order to do this, we had to break down the BPF filters in the BPFDoor source code so we could craft packets for the different protocols. To do this, we used Scapy, a packet manipulation program, to ensure we could pass the filters for the purpose of activating the backdoor. Once we ensured we could pass the filters, Rhys Rustad-Elliott, an engineer at Elastic built a BPFDoor client that accepts a password, IP address, and port allowing you to connect to a BPFDoor sample and interact if you possess the samples hardcoded passwords.",
                        "In this attack, the initial TCP handshake is done between the attacker and a completely legitimate process for example nginx or sshd. These handshake packets happen to be also delivered to the backdoor (like every packet on the system) but are filtered out by BPF. Once the connection is established, however, BPFDoor sends a magic packet to the legitimate service. The implant receives it and makes a note of the originating IP and port the attacker is using, and it opens a new listening socket on an inconspicuous port (42391 - 43391).",
                        "BPFDoor source code BPF Filters"
                    ],
                    "titles": [
                        "BPF Filters"
                    ]
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x556da5c2>",
                    "type": "UnknownWord",
                    "value": "pwc"
                },
                "references": {
                    "sentences": [
                        "BPFDoor is a backdoor payload specifically crafted for Linux. Its purpose is for long-term persistence in order to gain re-entry into a previously or actively compromised target environment. It notably utilizes BPF along with a number of other techniques to achieve this goal, taking great care to be as efficient and stealthy as possible. PWC researchers discovered this very interesting piece of malware in 2021. PWC attributes this back door to a specific group from China, Red Menshen, and detailed a number of interesting components in a high-level threat research post released last week."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x77a948c6>",
                    "type": "UnknownWord",
                    "value": "door"
                },
                "references": {
                    "sentences": [
                        "Once activated, a typical reverse shell - which this back door also supports - creates an outbound connection to a listener set up by the attacker. This has the advantage of bypassing firewalls watching inbound traffic only. This method is well-understood by defenders, however. The sneakiest way to get a shell connected would be to reuse an existing packet flow, redirected to a separate process.",
                        "BPFDoor is a backdoor payload specifically crafted for Linux. Its purpose is for long-term persistence in order to gain re-entry into a previously or actively compromised target environment. It notably utilizes BPF along with a number of other techniques to achieve this goal, taking great care to be as efficient and stealthy as possible. PWC researchers discovered this very interesting piece of malware in 2021. PWC attributes this back door to a specific group from China, Red Menshen, and detailed a number of interesting components in a high-level threat research post released last week."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xad74d484>",
                    "type": "UnknownWord",
                    "value": "menshen"
                },
                "references": {
                    "sentences": [
                        "PWCs findings indicated that Red Menshen had focused their efforts on targeting specific Telecommunications, Government, Logistics, and Education groups across the Middle East and Asia. This activity has been across a Monday-to-Friday working period, between 01:00 UTC and 10:00 UTC, indicating that the operators of the malware were consistent in their attacks, and operation during a working week.",
                        "BPFDoor is a backdoor payload specifically crafted for Linux. Its purpose is for long-term persistence in order to gain re-entry into a previously or actively compromised target environment. It notably utilizes BPF along with a number of other techniques to achieve this goal, taking great care to be as efficient and stealthy as possible. PWC researchers discovered this very interesting piece of malware in 2021. PWC attributes this back door to a specific group from China, Red Menshen, and detailed a number of interesting components in a high-level threat research post released last week.",
                        "Red Menshen has leveraged a network of VPS servers to act as a controller network and access these systems via compromised routers based out of Taiwan. The routers act as a VPN network for the adversarial groups via a sequence of specifically crafted packets sent to an infected host. Researchers have indicated that this payload is pervasive and that compromised hosts have been observed across the US, South Korea, Hong Kong, Turkey, India, Vietnam, and Myanmar."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x404b8dfd>",
                    "type": "UnknownWord",
                    "value": "pwcs"
                },
                "references": {
                    "sentences": [
                        "PWCs findings indicated that Red Menshen had focused their efforts on targeting specific Telecommunications, Government, Logistics, and Education groups across the Middle East and Asia. This activity has been across a Monday-to-Friday working period, between 01:00 UTC and 10:00 UTC, indicating that the operators of the malware were consistent in their attacks, and operation during a working week."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xbd14bb>",
                    "type": "UnknownWord",
                    "value": "monday-to-friday"
                },
                "references": {
                    "sentences": [
                        "PWCs findings indicated that Red Menshen had focused their efforts on targeting specific Telecommunications, Government, Logistics, and Education groups across the Middle East and Asia. This activity has been across a Monday-to-Friday working period, between 01:00 UTC and 10:00 UTC, indicating that the operators of the malware were consistent in their attacks, and operation during a working week."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x55154817>",
                    "type": "UnknownWord",
                    "value": "concerningly"
                },
                "references": {
                    "sentences": [
                        "Perhaps most concerningly, the payload itself has been observed across the last 5 years in various phases of development and complexity, indicating that the threat actor responsible for operating the malware has been at it for some time, undetected in many environments."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xb8c5401c>",
                    "type": "UnknownWord",
                    "value": "aid"
                },
                "references": {
                    "sentences": [
                        "The Elastic Security Team has created a few tools that will aid researchers in analyzing the BPFDoor malware.",
                        "We took this BPF code, converted it, and wrote it up as pseudo code in an effort to aid our research and craft packets able to successfully get through these filters in order to activate the backdoor.",
                        "The Elastic Security Team has released several tools that can aid in further research regarding BPFDoor to include a network scanner used to identify infected hosts, a BPFDoor malware configuration extractor, and a BPFDoor client binary that can be used to actively interact with a sample."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x44179b0>",
                    "type": "UnknownWord",
                    "value": "extractor"
                },
                "references": {
                    "sentences": [
                        "BPFDoor scanner<crlf>BPFDoor configuration extractor",
                        "BPFDoor configuration extractor",
                        "The BPFDoor scanner will allow you to scan for hosts infected with the BPFDoor malware and the BPFDoor configuration extractor will allow you to extrapolate the malwares configuration or hardcoded values which can lead to additional observations you can use for further analysis, developing additional signatures or connecting to the backdoor utilizing our client.",
                        "The BPFDoor configuration extractor can be downloaded here.",
                        "The Elastic Security Team has released several tools that can aid in further research regarding BPFDoor to include a network scanner used to identify infected hosts, a BPFDoor malware configuration extractor, and a BPFDoor client binary that can be used to actively interact with a sample."
                    ],
                    "titles": [
                        "BPFDoor Configuration Extractor"
                    ]
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x791df79f>",
                    "type": "UnknownWord",
                    "value": "extrapolate"
                },
                "references": {
                    "sentences": [
                        "The BPFDoor scanner will allow you to scan for hosts infected with the BPFDoor malware and the BPFDoor configuration extractor will allow you to extrapolate the malwares configuration or hardcoded values which can lead to additional observations you can use for further analysis, developing additional signatures or connecting to the backdoor utilizing our client."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x3e6852d8>",
                    "type": "UnknownWord",
                    "value": "vps"
                },
                "references": {
                    "sentences": [
                        "Red Menshen has leveraged a network of VPS servers to act as a controller network and access these systems via compromised routers based out of Taiwan. The routers act as a VPN network for the adversarial groups via a sequence of specifically crafted packets sent to an infected host. Researchers have indicated that this payload is pervasive and that compromised hosts have been observed across the US, South Korea, Hong Kong, Turkey, India, Vietnam, and Myanmar."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xc579c877>",
                    "type": "UnknownWord",
                    "value": "pervasive"
                },
                "references": {
                    "sentences": [
                        "Red Menshen has leveraged a network of VPS servers to act as a controller network and access these systems via compromised routers based out of Taiwan. The routers act as a VPN network for the adversarial groups via a sequence of specifically crafted packets sent to an infected host. Researchers have indicated that this payload is pervasive and that compromised hosts have been observed across the US, South Korea, Hong Kong, Turkey, India, Vietnam, and Myanmar."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x41109ad1>",
                    "type": "UnknownWord",
                    "value": "bpf-based"
                },
                "references": {
                    "sentences": [
                        "BPF-based malware payloads, while ultimately uncommon, serve a specific purpose on Linux-based hosts where stealthy and performant operations are critical for success. Tools such as BPFDoor are not alone. Recently, Pangu Labs discovered a payload by the name of Bvp47, a sensor that used stealthy BPF-based telemetry to acquire detailed information about the workloads running on infected hosts."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x6fc1a9f2>",
                    "type": "UnknownWord",
                    "value": "uncommon"
                },
                "references": {
                    "sentences": [
                        "The first area of opportunity we witnessed while testing was the behavior we observed during the initial execution of the malware, specifically its working directory, in a shared memory location /dev/shm. This is a native temporary filesystem location in Linux that uses RAM for storage, and a binary executing from it let alone generating network connections is fairly uncommon in practice.",
                        "We wanted to see over time, between BPFDoor payloads, what, if anything, the threat actors modified. A number of samples were detonated and analyzed ranging from the uploaded source code to a sample uploaded last month. We found that the behavior over time did not change a great deal. It maintained the same relative attack lifecycle with a few variations with the hardcoded values such as passwords, process names, and files - this is not uncommon when compared to other malware samples that look to evade detection or leverage payloads across a variety of victims.",
                        "BPF-based malware payloads, while ultimately uncommon, serve a specific purpose on Linux-based hosts where stealthy and performant operations are critical for success. Tools such as BPFDoor are not alone. Recently, Pangu Labs discovered a payload by the name of Bvp47, a sensor that used stealthy BPF-based telemetry to acquire detailed information about the workloads running on infected hosts."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x4670b763>",
                    "type": "UnknownWord",
                    "value": "linux-based"
                },
                "references": {
                    "sentences": [
                        "BPF-based malware payloads, while ultimately uncommon, serve a specific purpose on Linux-based hosts where stealthy and performant operations are critical for success. Tools such as BPFDoor are not alone. Recently, Pangu Labs discovered a payload by the name of Bvp47, a sensor that used stealthy BPF-based telemetry to acquire detailed information about the workloads running on infected hosts."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xfb61439d>",
                    "type": "UnknownWord",
                    "value": "performant"
                },
                "references": {
                    "sentences": [
                        "BPF-based malware payloads, while ultimately uncommon, serve a specific purpose on Linux-based hosts where stealthy and performant operations are critical for success. Tools such as BPFDoor are not alone. Recently, Pangu Labs discovered a payload by the name of Bvp47, a sensor that used stealthy BPF-based telemetry to acquire detailed information about the workloads running on infected hosts."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x2323dda2>",
                    "type": "UnknownWord",
                    "value": "alone"
                },
                "references": {
                    "sentences": [
                        "The first area of opportunity we witnessed while testing was the behavior we observed during the initial execution of the malware, specifically its working directory, in a shared memory location /dev/shm. This is a native temporary filesystem location in Linux that uses RAM for storage, and a binary executing from it let alone generating network connections is fairly uncommon in practice.",
                        "BPF-based malware payloads, while ultimately uncommon, serve a specific purpose on Linux-based hosts where stealthy and performant operations are critical for success. Tools such as BPFDoor are not alone. Recently, Pangu Labs discovered a payload by the name of Bvp47, a sensor that used stealthy BPF-based telemetry to acquire detailed information about the workloads running on infected hosts."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xf4657431>",
                    "type": "UnknownWord",
                    "value": "pangu"
                },
                "references": {
                    "sentences": [
                        "BPF-based malware payloads, while ultimately uncommon, serve a specific purpose on Linux-based hosts where stealthy and performant operations are critical for success. Tools such as BPFDoor are not alone. Recently, Pangu Labs discovered a payload by the name of Bvp47, a sensor that used stealthy BPF-based telemetry to acquire detailed information about the workloads running on infected hosts."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x3ece6c39>",
                    "type": "UnknownWord",
                    "value": "sensor"
                },
                "references": {
                    "sentences": [
                        "BPF-based malware payloads, while ultimately uncommon, serve a specific purpose on Linux-based hosts where stealthy and performant operations are critical for success. Tools such as BPFDoor are not alone. Recently, Pangu Labs discovered a payload by the name of Bvp47, a sensor that used stealthy BPF-based telemetry to acquire detailed information about the workloads running on infected hosts."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xcc82d133>",
                    "type": "UnknownWord",
                    "value": "ebpf"
                },
                "references": {
                    "sentences": [
                        "eBPF (Extended Berkeley Packet Filters), a new evolution of BPF used increasingly today, is gaining popularity amongst system operators given its efficiency and proven, powerful capabilities leveraged often for system performance, network, and security telemetry collection. Adversaries are taking note and it is our assumption that malware targeting cloud systems will increasingly leverage these methods in the future."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x1d985bc4>",
                    "type": "UnknownWord",
                    "value": "berkeley"
                },
                "references": {
                    "sentences": [
                        "As stated in step 9 (above), BPF or Berkeley Packet Filters is a technology from the early 90s that allows a user-space program to attach a network filter onto any socket and allow or disallow certain types of data to come through the socket. These filters are made up of bytecode that runs on an abstract virtual machine in the Linux kernel. The BPF virtual machine has functionality to inspect all parts of incoming packets and make an allow/drop decision based on what it sees. . You can see in the image example below what this looks like within the BPFDoor source code:",
                        "eBPF (Extended Berkeley Packet Filters), a new evolution of BPF used increasingly today, is gaining popularity amongst system operators given its efficiency and proven, powerful capabilities leveraged often for system performance, network, and security telemetry collection. Adversaries are taking note and it is our assumption that malware targeting cloud systems will increasingly leverage these methods in the future."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xb381dce8>",
                    "type": "UnknownWord",
                    "value": "popularity"
                },
                "references": {
                    "sentences": [
                        "eBPF (Extended Berkeley Packet Filters), a new evolution of BPF used increasingly today, is gaining popularity amongst system operators given its efficiency and proven, powerful capabilities leveraged often for system performance, network, and security telemetry collection. Adversaries are taking note and it is our assumption that malware targeting cloud systems will increasingly leverage these methods in the future."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x76dc84f7>",
                    "type": "UnknownWord",
                    "value": "amongst"
                },
                "references": {
                    "sentences": [
                        "eBPF (Extended Berkeley Packet Filters), a new evolution of BPF used increasingly today, is gaining popularity amongst system operators given its efficiency and proven, powerful capabilities leveraged often for system performance, network, and security telemetry collection. Adversaries are taking note and it is our assumption that malware targeting cloud systems will increasingly leverage these methods in the future."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x114d8a7a>",
                    "type": "UnknownWord",
                    "value": "efficiency"
                },
                "references": {
                    "sentences": [
                        "eBPF (Extended Berkeley Packet Filters), a new evolution of BPF used increasingly today, is gaining popularity amongst system operators given its efficiency and proven, powerful capabilities leveraged often for system performance, network, and security telemetry collection. Adversaries are taking note and it is our assumption that malware targeting cloud systems will increasingly leverage these methods in the future."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xe7c7e42e>",
                    "type": "UnknownWord",
                    "value": "assumption"
                },
                "references": {
                    "sentences": [
                        "eBPF (Extended Berkeley Packet Filters), a new evolution of BPF used increasingly today, is gaining popularity amongst system operators given its efficiency and proven, powerful capabilities leveraged often for system performance, network, and security telemetry collection. Adversaries are taking note and it is our assumption that malware targeting cloud systems will increasingly leverage these methods in the future."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xb7bb054f>",
                    "type": "UnknownWord",
                    "value": "passive"
                },
                "references": {
                    "sentences": [
                        "This inherently passive backdoor payload is built to be a form of persistence a method to regain access if the first or second stage payloads are lost. It is built for and intended to be installed on high-uptime servers or appliances, IoT/SCADA, or cloud systems with access to the Internet. The backdoor usually sits in temporary storage so if a server were to be rebooted or shut down, the backdoor would be lost."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xba64c7c4>",
                    "type": "UnknownWord",
                    "value": "regain"
                },
                "references": {
                    "sentences": [
                        "This inherently passive backdoor payload is built to be a form of persistence a method to regain access if the first or second stage payloads are lost. It is built for and intended to be installed on high-uptime servers or appliances, IoT/SCADA, or cloud systems with access to the Internet. The backdoor usually sits in temporary storage so if a server were to be rebooted or shut down, the backdoor would be lost."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x533d2d76>",
                    "type": "UnknownWord",
                    "value": "lost"
                },
                "references": {
                    "sentences": [
                        "This inherently passive backdoor payload is built to be a form of persistence a method to regain access if the first or second stage payloads are lost. It is built for and intended to be installed on high-uptime servers or appliances, IoT/SCADA, or cloud systems with access to the Internet. The backdoor usually sits in temporary storage so if a server were to be rebooted or shut down, the backdoor would be lost."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x7faf2401>",
                    "type": "UnknownWord",
                    "value": "high-uptime"
                },
                "references": {
                    "sentences": [
                        "This inherently passive backdoor payload is built to be a form of persistence a method to regain access if the first or second stage payloads are lost. It is built for and intended to be installed on high-uptime servers or appliances, IoT/SCADA, or cloud systems with access to the Internet. The backdoor usually sits in temporary storage so if a server were to be rebooted or shut down, the backdoor would be lost."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x59f960e>",
                    "type": "UnknownWord",
                    "value": "sits"
                },
                "references": {
                    "sentences": [
                        "This inherently passive backdoor payload is built to be a form of persistence a method to regain access if the first or second stage payloads are lost. It is built for and intended to be installed on high-uptime servers or appliances, IoT/SCADA, or cloud systems with access to the Internet. The backdoor usually sits in temporary storage so if a server were to be rebooted or shut down, the backdoor would be lost."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x174992d2>",
                    "type": "UnknownWord",
                    "value": "rebooted"
                },
                "references": {
                    "sentences": [
                        "This inherently passive backdoor payload is built to be a form of persistence a method to regain access if the first or second stage payloads are lost. It is built for and intended to be installed on high-uptime servers or appliances, IoT/SCADA, or cloud systems with access to the Internet. The backdoor usually sits in temporary storage so if a server were to be rebooted or shut down, the backdoor would be lost."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x69624ef3>",
                    "type": "UnknownWord",
                    "value": "assumed"
                },
                "references": {
                    "sentences": [
                        "It should be assumed that if this malware is found on a system the initial-access (1st stage) or post-exploitation (2nd stage) payloads are still most likely present and possibly active elsewhere in the environment. This backdoor excels at stealth, taking every opportunity to blend in and remain undetected."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x71b21818>",
                    "type": "UnknownWord",
                    "value": "initial-access"
                },
                "references": {
                    "sentences": [
                        "It should be assumed that if this malware is found on a system the initial-access (1st stage) or post-exploitation (2nd stage) payloads are still most likely present and possibly active elsewhere in the environment. This backdoor excels at stealth, taking every opportunity to blend in and remain undetected."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x5bd42f18>",
                    "type": "UnknownWord",
                    "value": "1st"
                },
                "references": {
                    "sentences": [
                        "It should be assumed that if this malware is found on a system the initial-access (1st stage) or post-exploitation (2nd stage) payloads are still most likely present and possibly active elsewhere in the environment. This backdoor excels at stealth, taking every opportunity to blend in and remain undetected."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x58336b52>",
                    "type": "UnknownWord",
                    "value": "elsewhere"
                },
                "references": {
                    "sentences": [
                        "It should be assumed that if this malware is found on a system the initial-access (1st stage) or post-exploitation (2nd stage) payloads are still most likely present and possibly active elsewhere in the environment. This backdoor excels at stealth, taking every opportunity to blend in and remain undetected."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x85a30003>",
                    "type": "UnknownWord",
                    "value": "excels"
                },
                "references": {
                    "sentences": [
                        "It should be assumed that if this malware is found on a system the initial-access (1st stage) or post-exploitation (2nd stage) payloads are still most likely present and possibly active elsewhere in the environment. This backdoor excels at stealth, taking every opportunity to blend in and remain undetected."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x42935e66>",
                    "type": "UnknownWord",
                    "value": "break"
                },
                "references": {
                    "sentences": [
                        "In the below steps, we will break BPFDoors actions down according to the vast majority of the samples available."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xd7bdc8a7>",
                    "type": "UnknownWord",
                    "value": "vast"
                },
                "references": {
                    "sentences": [
                        "In the below steps, we will break BPFDoors actions down according to the vast majority of the samples available."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xbe4a55>",
                    "type": "UnknownWord",
                    "value": "dev"
                },
                "references": {
                    "sentences": [
                        "When executed the binary copies itself into /dev/shm/. A temporary filesystem /dev/shm stands for shared memory and is a temporary file storage facility serving as an efficient means of inter-process communication<crlf>Renames its process to kdmtmpflush, a hardcoded process name<crlf>Initializes itself with the -init flag and forks itself. Forking in Linux means creating a new process by duplicating the calling process<crlf>Deletes itself by removing the original binary invoked. The forked process continues to run<crlf>Alters the forked processes creation and modification time values, also known as timestomping<crlf>Creates a new process environment for itself and removes the old one setting (spoofing) a new process name. It changes the way it appears on the system akin to wearing a mask. The process is still kdmtmpflush but if you were to run a ps you would see whatever value it set<crlf>Creates a process ID (PID) file in /var/run. PID files are text files containing the process of the associated program meant for preventing multiple starts, marking residency, and used by the program to stop itself. This file resides in /var/run, another temporary file storage facility<crlf>Creates a raw network socket. On Linux, a socket is an endpoint for network communication that allows you to specify in detail every section of a packet allowing a user to implement their own transport layer protocol above the internet (IP) level<crlf>Sets BPF filters on the raw socket. BPF allows a user-space program to attach a filter onto any socket and allow or disallow certain types of data to come through the socket<crlf>Observes incoming packets<crlf>If a packet is observed that matches the BPF filters and contains the required data it is passed to the backdoor for processing<crlf>It forks the current process again<crlf>Changes the forked processes working directory to /<crlf>Changes (spoofs) the name of the forked process to a hardcoded value<crlf>Based on the password or existence of a password sent in the magic packet the backdoor provides a reverse shell, establishes a bind shell, or sends back a ping",
                        "The first area of opportunity we witnessed while testing was the behavior we observed during the initial execution of the malware, specifically its working directory, in a shared memory location /dev/shm. This is a native temporary filesystem location in Linux that uses RAM for storage, and a binary executing from it let alone generating network connections is fairly uncommon in practice.",
                        "During execution, BPFDoor removes existing files from /dev/shm and copies itself there prior to initialization. A detection for this would be any execution of a binary from this directory as root (you have to be root to write to and read from this directory)."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xde6573c8>",
                    "type": "UnknownWord",
                    "value": "shm"
                },
                "references": {
                    "sentences": [
                        "When executed the binary copies itself into /dev/shm/. A temporary filesystem /dev/shm stands for shared memory and is a temporary file storage facility serving as an efficient means of inter-process communication<crlf>Renames its process to kdmtmpflush, a hardcoded process name<crlf>Initializes itself with the -init flag and forks itself. Forking in Linux means creating a new process by duplicating the calling process<crlf>Deletes itself by removing the original binary invoked. The forked process continues to run<crlf>Alters the forked processes creation and modification time values, also known as timestomping<crlf>Creates a new process environment for itself and removes the old one setting (spoofing) a new process name. It changes the way it appears on the system akin to wearing a mask. The process is still kdmtmpflush but if you were to run a ps you would see whatever value it set<crlf>Creates a process ID (PID) file in /var/run. PID files are text files containing the process of the associated program meant for preventing multiple starts, marking residency, and used by the program to stop itself. This file resides in /var/run, another temporary file storage facility<crlf>Creates a raw network socket. On Linux, a socket is an endpoint for network communication that allows you to specify in detail every section of a packet allowing a user to implement their own transport layer protocol above the internet (IP) level<crlf>Sets BPF filters on the raw socket. BPF allows a user-space program to attach a filter onto any socket and allow or disallow certain types of data to come through the socket<crlf>Observes incoming packets<crlf>If a packet is observed that matches the BPF filters and contains the required data it is passed to the backdoor for processing<crlf>It forks the current process again<crlf>Changes the forked processes working directory to /<crlf>Changes (spoofs) the name of the forked process to a hardcoded value<crlf>Based on the password or existence of a password sent in the magic packet the backdoor provides a reverse shell, establishes a bind shell, or sends back a ping",
                        "The first area of opportunity we witnessed while testing was the behavior we observed during the initial execution of the malware, specifically its working directory, in a shared memory location /dev/shm. This is a native temporary filesystem location in Linux that uses RAM for storage, and a binary executing from it let alone generating network connections is fairly uncommon in practice.",
                        "During execution, BPFDoor removes existing files from /dev/shm and copies itself there prior to initialization. A detection for this would be any execution of a binary from this directory as root (you have to be root to write to and read from this directory)."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x753dd8dc>",
                    "type": "UnknownWord",
                    "value": "inter-process"
                },
                "references": {
                    "sentences": [
                        "When executed the binary copies itself into /dev/shm/. A temporary filesystem /dev/shm stands for shared memory and is a temporary file storage facility serving as an efficient means of inter-process communication<crlf>Renames its process to kdmtmpflush, a hardcoded process name<crlf>Initializes itself with the -init flag and forks itself. Forking in Linux means creating a new process by duplicating the calling process<crlf>Deletes itself by removing the original binary invoked. The forked process continues to run<crlf>Alters the forked processes creation and modification time values, also known as timestomping<crlf>Creates a new process environment for itself and removes the old one setting (spoofing) a new process name. It changes the way it appears on the system akin to wearing a mask. The process is still kdmtmpflush but if you were to run a ps you would see whatever value it set<crlf>Creates a process ID (PID) file in /var/run. PID files are text files containing the process of the associated program meant for preventing multiple starts, marking residency, and used by the program to stop itself. This file resides in /var/run, another temporary file storage facility<crlf>Creates a raw network socket. On Linux, a socket is an endpoint for network communication that allows you to specify in detail every section of a packet allowing a user to implement their own transport layer protocol above the internet (IP) level<crlf>Sets BPF filters on the raw socket. BPF allows a user-space program to attach a filter onto any socket and allow or disallow certain types of data to come through the socket<crlf>Observes incoming packets<crlf>If a packet is observed that matches the BPF filters and contains the required data it is passed to the backdoor for processing<crlf>It forks the current process again<crlf>Changes the forked processes working directory to /<crlf>Changes (spoofs) the name of the forked process to a hardcoded value<crlf>Based on the password or existence of a password sent in the magic packet the backdoor provides a reverse shell, establishes a bind shell, or sends back a ping"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x34f097ce>",
                    "type": "UnknownWord",
                    "value": "kdmtmpflush"
                },
                "references": {
                    "sentences": [
                        "The difference lies in the fact that kdmtmpflush and sh are run prior to spoofing, and are captured at runtime by Elastic Endpoint. This is an accurate representation of the processes active on the host, further confirming the importance of appropriate observation software for Linux hosts - you cant always trust what you see on the local system:",
                        "When executed the binary copies itself into /dev/shm/. A temporary filesystem /dev/shm stands for shared memory and is a temporary file storage facility serving as an efficient means of inter-process communication<crlf>Renames its process to kdmtmpflush, a hardcoded process name<crlf>Initializes itself with the -init flag and forks itself. Forking in Linux means creating a new process by duplicating the calling process<crlf>Deletes itself by removing the original binary invoked. The forked process continues to run<crlf>Alters the forked processes creation and modification time values, also known as timestomping<crlf>Creates a new process environment for itself and removes the old one setting (spoofing) a new process name. It changes the way it appears on the system akin to wearing a mask. The process is still kdmtmpflush but if you were to run a ps you would see whatever value it set<crlf>Creates a process ID (PID) file in /var/run. PID files are text files containing the process of the associated program meant for preventing multiple starts, marking residency, and used by the program to stop itself. This file resides in /var/run, another temporary file storage facility<crlf>Creates a raw network socket. On Linux, a socket is an endpoint for network communication that allows you to specify in detail every section of a packet allowing a user to implement their own transport layer protocol above the internet (IP) level<crlf>Sets BPF filters on the raw socket. BPF allows a user-space program to attach a filter onto any socket and allow or disallow certain types of data to come through the socket<crlf>Observes incoming packets<crlf>If a packet is observed that matches the BPF filters and contains the required data it is passed to the backdoor for processing<crlf>It forks the current process again<crlf>Changes the forked processes working directory to /<crlf>Changes (spoofs) the name of the forked process to a hardcoded value<crlf>Based on the password or existence of a password sent in the magic packet the backdoor provides a reverse shell, establishes a bind shell, or sends back a ping"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x89147a11>",
                    "type": "UnknownWord",
                    "value": "initializes"
                },
                "references": {
                    "sentences": [
                        "When executed the binary copies itself into /dev/shm/. A temporary filesystem /dev/shm stands for shared memory and is a temporary file storage facility serving as an efficient means of inter-process communication<crlf>Renames its process to kdmtmpflush, a hardcoded process name<crlf>Initializes itself with the -init flag and forks itself. Forking in Linux means creating a new process by duplicating the calling process<crlf>Deletes itself by removing the original binary invoked. The forked process continues to run<crlf>Alters the forked processes creation and modification time values, also known as timestomping<crlf>Creates a new process environment for itself and removes the old one setting (spoofing) a new process name. It changes the way it appears on the system akin to wearing a mask. The process is still kdmtmpflush but if you were to run a ps you would see whatever value it set<crlf>Creates a process ID (PID) file in /var/run. PID files are text files containing the process of the associated program meant for preventing multiple starts, marking residency, and used by the program to stop itself. This file resides in /var/run, another temporary file storage facility<crlf>Creates a raw network socket. On Linux, a socket is an endpoint for network communication that allows you to specify in detail every section of a packet allowing a user to implement their own transport layer protocol above the internet (IP) level<crlf>Sets BPF filters on the raw socket. BPF allows a user-space program to attach a filter onto any socket and allow or disallow certain types of data to come through the socket<crlf>Observes incoming packets<crlf>If a packet is observed that matches the BPF filters and contains the required data it is passed to the backdoor for processing<crlf>It forks the current process again<crlf>Changes the forked processes working directory to /<crlf>Changes (spoofs) the name of the forked process to a hardcoded value<crlf>Based on the password or existence of a password sent in the magic packet the backdoor provides a reverse shell, establishes a bind shell, or sends back a ping"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xcde59562>",
                    "type": "UnknownWord",
                    "value": "-init"
                },
                "references": {
                    "sentences": [
                        "When executed the binary copies itself into /dev/shm/. A temporary filesystem /dev/shm stands for shared memory and is a temporary file storage facility serving as an efficient means of inter-process communication<crlf>Renames its process to kdmtmpflush, a hardcoded process name<crlf>Initializes itself with the -init flag and forks itself. Forking in Linux means creating a new process by duplicating the calling process<crlf>Deletes itself by removing the original binary invoked. The forked process continues to run<crlf>Alters the forked processes creation and modification time values, also known as timestomping<crlf>Creates a new process environment for itself and removes the old one setting (spoofing) a new process name. It changes the way it appears on the system akin to wearing a mask. The process is still kdmtmpflush but if you were to run a ps you would see whatever value it set<crlf>Creates a process ID (PID) file in /var/run. PID files are text files containing the process of the associated program meant for preventing multiple starts, marking residency, and used by the program to stop itself. This file resides in /var/run, another temporary file storage facility<crlf>Creates a raw network socket. On Linux, a socket is an endpoint for network communication that allows you to specify in detail every section of a packet allowing a user to implement their own transport layer protocol above the internet (IP) level<crlf>Sets BPF filters on the raw socket. BPF allows a user-space program to attach a filter onto any socket and allow or disallow certain types of data to come through the socket<crlf>Observes incoming packets<crlf>If a packet is observed that matches the BPF filters and contains the required data it is passed to the backdoor for processing<crlf>It forks the current process again<crlf>Changes the forked processes working directory to /<crlf>Changes (spoofs) the name of the forked process to a hardcoded value<crlf>Based on the password or existence of a password sent in the magic packet the backdoor provides a reverse shell, establishes a bind shell, or sends back a ping"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x2bfc43eb>",
                    "type": "UnknownWord",
                    "value": "forks"
                },
                "references": {
                    "sentences": [
                        "When executed the binary copies itself into /dev/shm/. A temporary filesystem /dev/shm stands for shared memory and is a temporary file storage facility serving as an efficient means of inter-process communication<crlf>Renames its process to kdmtmpflush, a hardcoded process name<crlf>Initializes itself with the -init flag and forks itself. Forking in Linux means creating a new process by duplicating the calling process<crlf>Deletes itself by removing the original binary invoked. The forked process continues to run<crlf>Alters the forked processes creation and modification time values, also known as timestomping<crlf>Creates a new process environment for itself and removes the old one setting (spoofing) a new process name. It changes the way it appears on the system akin to wearing a mask. The process is still kdmtmpflush but if you were to run a ps you would see whatever value it set<crlf>Creates a process ID (PID) file in /var/run. PID files are text files containing the process of the associated program meant for preventing multiple starts, marking residency, and used by the program to stop itself. This file resides in /var/run, another temporary file storage facility<crlf>Creates a raw network socket. On Linux, a socket is an endpoint for network communication that allows you to specify in detail every section of a packet allowing a user to implement their own transport layer protocol above the internet (IP) level<crlf>Sets BPF filters on the raw socket. BPF allows a user-space program to attach a filter onto any socket and allow or disallow certain types of data to come through the socket<crlf>Observes incoming packets<crlf>If a packet is observed that matches the BPF filters and contains the required data it is passed to the backdoor for processing<crlf>It forks the current process again<crlf>Changes the forked processes working directory to /<crlf>Changes (spoofs) the name of the forked process to a hardcoded value<crlf>Based on the password or existence of a password sent in the magic packet the backdoor provides a reverse shell, establishes a bind shell, or sends back a ping",
                        "The bind shell was the last capability we honed in on. Identifying an abnormal sequence of events surrounding the bind shell connection was difficult due to the way it forks then accepts the connection and kills the accepting process post established connection. Therefore we had to focus on the sequence of events within the process entity id directly involving the network connection and subsequent killing of the accepting process."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x44efccc5>",
                    "type": "UnknownWord",
                    "value": "forking"
                },
                "references": {
                    "sentences": [
                        "When executed the binary copies itself into /dev/shm/. A temporary filesystem /dev/shm stands for shared memory and is a temporary file storage facility serving as an efficient means of inter-process communication<crlf>Renames its process to kdmtmpflush, a hardcoded process name<crlf>Initializes itself with the -init flag and forks itself. Forking in Linux means creating a new process by duplicating the calling process<crlf>Deletes itself by removing the original binary invoked. The forked process continues to run<crlf>Alters the forked processes creation and modification time values, also known as timestomping<crlf>Creates a new process environment for itself and removes the old one setting (spoofing) a new process name. It changes the way it appears on the system akin to wearing a mask. The process is still kdmtmpflush but if you were to run a ps you would see whatever value it set<crlf>Creates a process ID (PID) file in /var/run. PID files are text files containing the process of the associated program meant for preventing multiple starts, marking residency, and used by the program to stop itself. This file resides in /var/run, another temporary file storage facility<crlf>Creates a raw network socket. On Linux, a socket is an endpoint for network communication that allows you to specify in detail every section of a packet allowing a user to implement their own transport layer protocol above the internet (IP) level<crlf>Sets BPF filters on the raw socket. BPF allows a user-space program to attach a filter onto any socket and allow or disallow certain types of data to come through the socket<crlf>Observes incoming packets<crlf>If a packet is observed that matches the BPF filters and contains the required data it is passed to the backdoor for processing<crlf>It forks the current process again<crlf>Changes the forked processes working directory to /<crlf>Changes (spoofs) the name of the forked process to a hardcoded value<crlf>Based on the password or existence of a password sent in the magic packet the backdoor provides a reverse shell, establishes a bind shell, or sends back a ping"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x99b788d9>",
                    "type": "UnknownWord",
                    "value": "duplicating"
                },
                "references": {
                    "sentences": [
                        "When executed the binary copies itself into /dev/shm/. A temporary filesystem /dev/shm stands for shared memory and is a temporary file storage facility serving as an efficient means of inter-process communication<crlf>Renames its process to kdmtmpflush, a hardcoded process name<crlf>Initializes itself with the -init flag and forks itself. Forking in Linux means creating a new process by duplicating the calling process<crlf>Deletes itself by removing the original binary invoked. The forked process continues to run<crlf>Alters the forked processes creation and modification time values, also known as timestomping<crlf>Creates a new process environment for itself and removes the old one setting (spoofing) a new process name. It changes the way it appears on the system akin to wearing a mask. The process is still kdmtmpflush but if you were to run a ps you would see whatever value it set<crlf>Creates a process ID (PID) file in /var/run. PID files are text files containing the process of the associated program meant for preventing multiple starts, marking residency, and used by the program to stop itself. This file resides in /var/run, another temporary file storage facility<crlf>Creates a raw network socket. On Linux, a socket is an endpoint for network communication that allows you to specify in detail every section of a packet allowing a user to implement their own transport layer protocol above the internet (IP) level<crlf>Sets BPF filters on the raw socket. BPF allows a user-space program to attach a filter onto any socket and allow or disallow certain types of data to come through the socket<crlf>Observes incoming packets<crlf>If a packet is observed that matches the BPF filters and contains the required data it is passed to the backdoor for processing<crlf>It forks the current process again<crlf>Changes the forked processes working directory to /<crlf>Changes (spoofs) the name of the forked process to a hardcoded value<crlf>Based on the password or existence of a password sent in the magic packet the backdoor provides a reverse shell, establishes a bind shell, or sends back a ping"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x5323e639>",
                    "type": "UnknownWord",
                    "value": "invoked"
                },
                "references": {
                    "sentences": [
                        "When executed the binary copies itself into /dev/shm/. A temporary filesystem /dev/shm stands for shared memory and is a temporary file storage facility serving as an efficient means of inter-process communication<crlf>Renames its process to kdmtmpflush, a hardcoded process name<crlf>Initializes itself with the -init flag and forks itself. Forking in Linux means creating a new process by duplicating the calling process<crlf>Deletes itself by removing the original binary invoked. The forked process continues to run<crlf>Alters the forked processes creation and modification time values, also known as timestomping<crlf>Creates a new process environment for itself and removes the old one setting (spoofing) a new process name. It changes the way it appears on the system akin to wearing a mask. The process is still kdmtmpflush but if you were to run a ps you would see whatever value it set<crlf>Creates a process ID (PID) file in /var/run. PID files are text files containing the process of the associated program meant for preventing multiple starts, marking residency, and used by the program to stop itself. This file resides in /var/run, another temporary file storage facility<crlf>Creates a raw network socket. On Linux, a socket is an endpoint for network communication that allows you to specify in detail every section of a packet allowing a user to implement their own transport layer protocol above the internet (IP) level<crlf>Sets BPF filters on the raw socket. BPF allows a user-space program to attach a filter onto any socket and allow or disallow certain types of data to come through the socket<crlf>Observes incoming packets<crlf>If a packet is observed that matches the BPF filters and contains the required data it is passed to the backdoor for processing<crlf>It forks the current process again<crlf>Changes the forked processes working directory to /<crlf>Changes (spoofs) the name of the forked process to a hardcoded value<crlf>Based on the password or existence of a password sent in the magic packet the backdoor provides a reverse shell, establishes a bind shell, or sends back a ping"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xcf0a0d33>",
                    "type": "UnknownWord",
                    "value": "forked"
                },
                "references": {
                    "sentences": [
                        "When executed the binary copies itself into /dev/shm/. A temporary filesystem /dev/shm stands for shared memory and is a temporary file storage facility serving as an efficient means of inter-process communication<crlf>Renames its process to kdmtmpflush, a hardcoded process name<crlf>Initializes itself with the -init flag and forks itself. Forking in Linux means creating a new process by duplicating the calling process<crlf>Deletes itself by removing the original binary invoked. The forked process continues to run<crlf>Alters the forked processes creation and modification time values, also known as timestomping<crlf>Creates a new process environment for itself and removes the old one setting (spoofing) a new process name. It changes the way it appears on the system akin to wearing a mask. The process is still kdmtmpflush but if you were to run a ps you would see whatever value it set<crlf>Creates a process ID (PID) file in /var/run. PID files are text files containing the process of the associated program meant for preventing multiple starts, marking residency, and used by the program to stop itself. This file resides in /var/run, another temporary file storage facility<crlf>Creates a raw network socket. On Linux, a socket is an endpoint for network communication that allows you to specify in detail every section of a packet allowing a user to implement their own transport layer protocol above the internet (IP) level<crlf>Sets BPF filters on the raw socket. BPF allows a user-space program to attach a filter onto any socket and allow or disallow certain types of data to come through the socket<crlf>Observes incoming packets<crlf>If a packet is observed that matches the BPF filters and contains the required data it is passed to the backdoor for processing<crlf>It forks the current process again<crlf>Changes the forked processes working directory to /<crlf>Changes (spoofs) the name of the forked process to a hardcoded value<crlf>Based on the password or existence of a password sent in the magic packet the backdoor provides a reverse shell, establishes a bind shell, or sends back a ping"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x438aa5e5>",
                    "type": "UnknownWord",
                    "value": "alters"
                },
                "references": {
                    "sentences": [
                        "When executed the binary copies itself into /dev/shm/. A temporary filesystem /dev/shm stands for shared memory and is a temporary file storage facility serving as an efficient means of inter-process communication<crlf>Renames its process to kdmtmpflush, a hardcoded process name<crlf>Initializes itself with the -init flag and forks itself. Forking in Linux means creating a new process by duplicating the calling process<crlf>Deletes itself by removing the original binary invoked. The forked process continues to run<crlf>Alters the forked processes creation and modification time values, also known as timestomping<crlf>Creates a new process environment for itself and removes the old one setting (spoofing) a new process name. It changes the way it appears on the system akin to wearing a mask. The process is still kdmtmpflush but if you were to run a ps you would see whatever value it set<crlf>Creates a process ID (PID) file in /var/run. PID files are text files containing the process of the associated program meant for preventing multiple starts, marking residency, and used by the program to stop itself. This file resides in /var/run, another temporary file storage facility<crlf>Creates a raw network socket. On Linux, a socket is an endpoint for network communication that allows you to specify in detail every section of a packet allowing a user to implement their own transport layer protocol above the internet (IP) level<crlf>Sets BPF filters on the raw socket. BPF allows a user-space program to attach a filter onto any socket and allow or disallow certain types of data to come through the socket<crlf>Observes incoming packets<crlf>If a packet is observed that matches the BPF filters and contains the required data it is passed to the backdoor for processing<crlf>It forks the current process again<crlf>Changes the forked processes working directory to /<crlf>Changes (spoofs) the name of the forked process to a hardcoded value<crlf>Based on the password or existence of a password sent in the magic packet the backdoor provides a reverse shell, establishes a bind shell, or sends back a ping"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xd0b1f039>",
                    "type": "UnknownWord",
                    "value": "timestomping"
                },
                "references": {
                    "sentences": [
                        "When executed the binary copies itself into /dev/shm/. A temporary filesystem /dev/shm stands for shared memory and is a temporary file storage facility serving as an efficient means of inter-process communication<crlf>Renames its process to kdmtmpflush, a hardcoded process name<crlf>Initializes itself with the -init flag and forks itself. Forking in Linux means creating a new process by duplicating the calling process<crlf>Deletes itself by removing the original binary invoked. The forked process continues to run<crlf>Alters the forked processes creation and modification time values, also known as timestomping<crlf>Creates a new process environment for itself and removes the old one setting (spoofing) a new process name. It changes the way it appears on the system akin to wearing a mask. The process is still kdmtmpflush but if you were to run a ps you would see whatever value it set<crlf>Creates a process ID (PID) file in /var/run. PID files are text files containing the process of the associated program meant for preventing multiple starts, marking residency, and used by the program to stop itself. This file resides in /var/run, another temporary file storage facility<crlf>Creates a raw network socket. On Linux, a socket is an endpoint for network communication that allows you to specify in detail every section of a packet allowing a user to implement their own transport layer protocol above the internet (IP) level<crlf>Sets BPF filters on the raw socket. BPF allows a user-space program to attach a filter onto any socket and allow or disallow certain types of data to come through the socket<crlf>Observes incoming packets<crlf>If a packet is observed that matches the BPF filters and contains the required data it is passed to the backdoor for processing<crlf>It forks the current process again<crlf>Changes the forked processes working directory to /<crlf>Changes (spoofs) the name of the forked process to a hardcoded value<crlf>Based on the password or existence of a password sent in the magic packet the backdoor provides a reverse shell, establishes a bind shell, or sends back a ping"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x278e6413>",
                    "type": "UnknownWord",
                    "value": "akin"
                },
                "references": {
                    "sentences": [
                        "When executed the binary copies itself into /dev/shm/. A temporary filesystem /dev/shm stands for shared memory and is a temporary file storage facility serving as an efficient means of inter-process communication<crlf>Renames its process to kdmtmpflush, a hardcoded process name<crlf>Initializes itself with the -init flag and forks itself. Forking in Linux means creating a new process by duplicating the calling process<crlf>Deletes itself by removing the original binary invoked. The forked process continues to run<crlf>Alters the forked processes creation and modification time values, also known as timestomping<crlf>Creates a new process environment for itself and removes the old one setting (spoofing) a new process name. It changes the way it appears on the system akin to wearing a mask. The process is still kdmtmpflush but if you were to run a ps you would see whatever value it set<crlf>Creates a process ID (PID) file in /var/run. PID files are text files containing the process of the associated program meant for preventing multiple starts, marking residency, and used by the program to stop itself. This file resides in /var/run, another temporary file storage facility<crlf>Creates a raw network socket. On Linux, a socket is an endpoint for network communication that allows you to specify in detail every section of a packet allowing a user to implement their own transport layer protocol above the internet (IP) level<crlf>Sets BPF filters on the raw socket. BPF allows a user-space program to attach a filter onto any socket and allow or disallow certain types of data to come through the socket<crlf>Observes incoming packets<crlf>If a packet is observed that matches the BPF filters and contains the required data it is passed to the backdoor for processing<crlf>It forks the current process again<crlf>Changes the forked processes working directory to /<crlf>Changes (spoofs) the name of the forked process to a hardcoded value<crlf>Based on the password or existence of a password sent in the magic packet the backdoor provides a reverse shell, establishes a bind shell, or sends back a ping"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xe183029f>",
                    "type": "UnknownWord",
                    "value": "wearing"
                },
                "references": {
                    "sentences": [
                        "When executed the binary copies itself into /dev/shm/. A temporary filesystem /dev/shm stands for shared memory and is a temporary file storage facility serving as an efficient means of inter-process communication<crlf>Renames its process to kdmtmpflush, a hardcoded process name<crlf>Initializes itself with the -init flag and forks itself. Forking in Linux means creating a new process by duplicating the calling process<crlf>Deletes itself by removing the original binary invoked. The forked process continues to run<crlf>Alters the forked processes creation and modification time values, also known as timestomping<crlf>Creates a new process environment for itself and removes the old one setting (spoofing) a new process name. It changes the way it appears on the system akin to wearing a mask. The process is still kdmtmpflush but if you were to run a ps you would see whatever value it set<crlf>Creates a process ID (PID) file in /var/run. PID files are text files containing the process of the associated program meant for preventing multiple starts, marking residency, and used by the program to stop itself. This file resides in /var/run, another temporary file storage facility<crlf>Creates a raw network socket. On Linux, a socket is an endpoint for network communication that allows you to specify in detail every section of a packet allowing a user to implement their own transport layer protocol above the internet (IP) level<crlf>Sets BPF filters on the raw socket. BPF allows a user-space program to attach a filter onto any socket and allow or disallow certain types of data to come through the socket<crlf>Observes incoming packets<crlf>If a packet is observed that matches the BPF filters and contains the required data it is passed to the backdoor for processing<crlf>It forks the current process again<crlf>Changes the forked processes working directory to /<crlf>Changes (spoofs) the name of the forked process to a hardcoded value<crlf>Based on the password or existence of a password sent in the magic packet the backdoor provides a reverse shell, establishes a bind shell, or sends back a ping"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x6941e8fe>",
                    "type": "UnknownWord",
                    "value": "mask"
                },
                "references": {
                    "sentences": [
                        "When executed the binary copies itself into /dev/shm/. A temporary filesystem /dev/shm stands for shared memory and is a temporary file storage facility serving as an efficient means of inter-process communication<crlf>Renames its process to kdmtmpflush, a hardcoded process name<crlf>Initializes itself with the -init flag and forks itself. Forking in Linux means creating a new process by duplicating the calling process<crlf>Deletes itself by removing the original binary invoked. The forked process continues to run<crlf>Alters the forked processes creation and modification time values, also known as timestomping<crlf>Creates a new process environment for itself and removes the old one setting (spoofing) a new process name. It changes the way it appears on the system akin to wearing a mask. The process is still kdmtmpflush but if you were to run a ps you would see whatever value it set<crlf>Creates a process ID (PID) file in /var/run. PID files are text files containing the process of the associated program meant for preventing multiple starts, marking residency, and used by the program to stop itself. This file resides in /var/run, another temporary file storage facility<crlf>Creates a raw network socket. On Linux, a socket is an endpoint for network communication that allows you to specify in detail every section of a packet allowing a user to implement their own transport layer protocol above the internet (IP) level<crlf>Sets BPF filters on the raw socket. BPF allows a user-space program to attach a filter onto any socket and allow or disallow certain types of data to come through the socket<crlf>Observes incoming packets<crlf>If a packet is observed that matches the BPF filters and contains the required data it is passed to the backdoor for processing<crlf>It forks the current process again<crlf>Changes the forked processes working directory to /<crlf>Changes (spoofs) the name of the forked process to a hardcoded value<crlf>Based on the password or existence of a password sent in the magic packet the backdoor provides a reverse shell, establishes a bind shell, or sends back a ping"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x8a605237>",
                    "type": "UnknownWord",
                    "value": "whatever"
                },
                "references": {
                    "sentences": [
                        "When executed the binary copies itself into /dev/shm/. A temporary filesystem /dev/shm stands for shared memory and is a temporary file storage facility serving as an efficient means of inter-process communication<crlf>Renames its process to kdmtmpflush, a hardcoded process name<crlf>Initializes itself with the -init flag and forks itself. Forking in Linux means creating a new process by duplicating the calling process<crlf>Deletes itself by removing the original binary invoked. The forked process continues to run<crlf>Alters the forked processes creation and modification time values, also known as timestomping<crlf>Creates a new process environment for itself and removes the old one setting (spoofing) a new process name. It changes the way it appears on the system akin to wearing a mask. The process is still kdmtmpflush but if you were to run a ps you would see whatever value it set<crlf>Creates a process ID (PID) file in /var/run. PID files are text files containing the process of the associated program meant for preventing multiple starts, marking residency, and used by the program to stop itself. This file resides in /var/run, another temporary file storage facility<crlf>Creates a raw network socket. On Linux, a socket is an endpoint for network communication that allows you to specify in detail every section of a packet allowing a user to implement their own transport layer protocol above the internet (IP) level<crlf>Sets BPF filters on the raw socket. BPF allows a user-space program to attach a filter onto any socket and allow or disallow certain types of data to come through the socket<crlf>Observes incoming packets<crlf>If a packet is observed that matches the BPF filters and contains the required data it is passed to the backdoor for processing<crlf>It forks the current process again<crlf>Changes the forked processes working directory to /<crlf>Changes (spoofs) the name of the forked process to a hardcoded value<crlf>Based on the password or existence of a password sent in the magic packet the backdoor provides a reverse shell, establishes a bind shell, or sends back a ping"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xe539604a>",
                    "type": "UnknownWord",
                    "value": "pid"
                },
                "references": {
                    "sentences": [
                        "When executed the binary copies itself into /dev/shm/. A temporary filesystem /dev/shm stands for shared memory and is a temporary file storage facility serving as an efficient means of inter-process communication<crlf>Renames its process to kdmtmpflush, a hardcoded process name<crlf>Initializes itself with the -init flag and forks itself. Forking in Linux means creating a new process by duplicating the calling process<crlf>Deletes itself by removing the original binary invoked. The forked process continues to run<crlf>Alters the forked processes creation and modification time values, also known as timestomping<crlf>Creates a new process environment for itself and removes the old one setting (spoofing) a new process name. It changes the way it appears on the system akin to wearing a mask. The process is still kdmtmpflush but if you were to run a ps you would see whatever value it set<crlf>Creates a process ID (PID) file in /var/run. PID files are text files containing the process of the associated program meant for preventing multiple starts, marking residency, and used by the program to stop itself. This file resides in /var/run, another temporary file storage facility<crlf>Creates a raw network socket. On Linux, a socket is an endpoint for network communication that allows you to specify in detail every section of a packet allowing a user to implement their own transport layer protocol above the internet (IP) level<crlf>Sets BPF filters on the raw socket. BPF allows a user-space program to attach a filter onto any socket and allow or disallow certain types of data to come through the socket<crlf>Observes incoming packets<crlf>If a packet is observed that matches the BPF filters and contains the required data it is passed to the backdoor for processing<crlf>It forks the current process again<crlf>Changes the forked processes working directory to /<crlf>Changes (spoofs) the name of the forked process to a hardcoded value<crlf>Based on the password or existence of a password sent in the magic packet the backdoor provides a reverse shell, establishes a bind shell, or sends back a ping",
                        "BPFDoor is interesting given the anti-forensics, and obfuscation tactics used. Astute readers will observe slight differences in the PID tree visible when running a ps ajxf on an infected host when compared to executed data within the Analyzer View inside of Elastic. This is due to the process name spoofing mentioned in step 6 (above) of the attack lifecycle above. The image below is taken from a system running BPFDoor with an active reverse shell connection established:",
                        "Our Abnormal Process ID or Lock File Created rule identifies the creation of a PID file in the main directory of /var/run with no subdirectory, ignoring common PID files to be expected:",
                        "The second opportunity we noticed, for detection, was a specific PID file being created in /var/run. We noticed the dropped PID file was completely empty while doing a quick query via the Osquery integration to the /var/run directory. While this is not inherently malicious, it is unusual for the file size of a PID to be 0 or above 10 bytes and thus we created an additional rule centered around detecting this unusual behavior."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xc9740a34>",
                    "type": "UnknownWord",
                    "value": "var"
                },
                "references": {
                    "sentences": [
                        "When executed the binary copies itself into /dev/shm/. A temporary filesystem /dev/shm stands for shared memory and is a temporary file storage facility serving as an efficient means of inter-process communication<crlf>Renames its process to kdmtmpflush, a hardcoded process name<crlf>Initializes itself with the -init flag and forks itself. Forking in Linux means creating a new process by duplicating the calling process<crlf>Deletes itself by removing the original binary invoked. The forked process continues to run<crlf>Alters the forked processes creation and modification time values, also known as timestomping<crlf>Creates a new process environment for itself and removes the old one setting (spoofing) a new process name. It changes the way it appears on the system akin to wearing a mask. The process is still kdmtmpflush but if you were to run a ps you would see whatever value it set<crlf>Creates a process ID (PID) file in /var/run. PID files are text files containing the process of the associated program meant for preventing multiple starts, marking residency, and used by the program to stop itself. This file resides in /var/run, another temporary file storage facility<crlf>Creates a raw network socket. On Linux, a socket is an endpoint for network communication that allows you to specify in detail every section of a packet allowing a user to implement their own transport layer protocol above the internet (IP) level<crlf>Sets BPF filters on the raw socket. BPF allows a user-space program to attach a filter onto any socket and allow or disallow certain types of data to come through the socket<crlf>Observes incoming packets<crlf>If a packet is observed that matches the BPF filters and contains the required data it is passed to the backdoor for processing<crlf>It forks the current process again<crlf>Changes the forked processes working directory to /<crlf>Changes (spoofs) the name of the forked process to a hardcoded value<crlf>Based on the password or existence of a password sent in the magic packet the backdoor provides a reverse shell, establishes a bind shell, or sends back a ping",
                        "Our Abnormal Process ID or Lock File Created rule identifies the creation of a PID file in the main directory of /var/run with no subdirectory, ignoring common PID files to be expected:",
                        "The second opportunity we noticed, for detection, was a specific PID file being created in /var/run. We noticed the dropped PID file was completely empty while doing a quick query via the Osquery integration to the /var/run directory. While this is not inherently malicious, it is unusual for the file size of a PID to be 0 or above 10 bytes and thus we created an additional rule centered around detecting this unusual behavior."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x4d6c01f6>",
                    "type": "UnknownWord",
                    "value": "marking"
                },
                "references": {
                    "sentences": [
                        "When executed the binary copies itself into /dev/shm/. A temporary filesystem /dev/shm stands for shared memory and is a temporary file storage facility serving as an efficient means of inter-process communication<crlf>Renames its process to kdmtmpflush, a hardcoded process name<crlf>Initializes itself with the -init flag and forks itself. Forking in Linux means creating a new process by duplicating the calling process<crlf>Deletes itself by removing the original binary invoked. The forked process continues to run<crlf>Alters the forked processes creation and modification time values, also known as timestomping<crlf>Creates a new process environment for itself and removes the old one setting (spoofing) a new process name. It changes the way it appears on the system akin to wearing a mask. The process is still kdmtmpflush but if you were to run a ps you would see whatever value it set<crlf>Creates a process ID (PID) file in /var/run. PID files are text files containing the process of the associated program meant for preventing multiple starts, marking residency, and used by the program to stop itself. This file resides in /var/run, another temporary file storage facility<crlf>Creates a raw network socket. On Linux, a socket is an endpoint for network communication that allows you to specify in detail every section of a packet allowing a user to implement their own transport layer protocol above the internet (IP) level<crlf>Sets BPF filters on the raw socket. BPF allows a user-space program to attach a filter onto any socket and allow or disallow certain types of data to come through the socket<crlf>Observes incoming packets<crlf>If a packet is observed that matches the BPF filters and contains the required data it is passed to the backdoor for processing<crlf>It forks the current process again<crlf>Changes the forked processes working directory to /<crlf>Changes (spoofs) the name of the forked process to a hardcoded value<crlf>Based on the password or existence of a password sent in the magic packet the backdoor provides a reverse shell, establishes a bind shell, or sends back a ping"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x1f23c4f9>",
                    "type": "UnknownWord",
                    "value": "residency"
                },
                "references": {
                    "sentences": [
                        "When executed the binary copies itself into /dev/shm/. A temporary filesystem /dev/shm stands for shared memory and is a temporary file storage facility serving as an efficient means of inter-process communication<crlf>Renames its process to kdmtmpflush, a hardcoded process name<crlf>Initializes itself with the -init flag and forks itself. Forking in Linux means creating a new process by duplicating the calling process<crlf>Deletes itself by removing the original binary invoked. The forked process continues to run<crlf>Alters the forked processes creation and modification time values, also known as timestomping<crlf>Creates a new process environment for itself and removes the old one setting (spoofing) a new process name. It changes the way it appears on the system akin to wearing a mask. The process is still kdmtmpflush but if you were to run a ps you would see whatever value it set<crlf>Creates a process ID (PID) file in /var/run. PID files are text files containing the process of the associated program meant for preventing multiple starts, marking residency, and used by the program to stop itself. This file resides in /var/run, another temporary file storage facility<crlf>Creates a raw network socket. On Linux, a socket is an endpoint for network communication that allows you to specify in detail every section of a packet allowing a user to implement their own transport layer protocol above the internet (IP) level<crlf>Sets BPF filters on the raw socket. BPF allows a user-space program to attach a filter onto any socket and allow or disallow certain types of data to come through the socket<crlf>Observes incoming packets<crlf>If a packet is observed that matches the BPF filters and contains the required data it is passed to the backdoor for processing<crlf>It forks the current process again<crlf>Changes the forked processes working directory to /<crlf>Changes (spoofs) the name of the forked process to a hardcoded value<crlf>Based on the password or existence of a password sent in the magic packet the backdoor provides a reverse shell, establishes a bind shell, or sends back a ping"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xb7f5b2b5>",
                    "type": "UnknownWord",
                    "value": "resides"
                },
                "references": {
                    "sentences": [
                        "When executed the binary copies itself into /dev/shm/. A temporary filesystem /dev/shm stands for shared memory and is a temporary file storage facility serving as an efficient means of inter-process communication<crlf>Renames its process to kdmtmpflush, a hardcoded process name<crlf>Initializes itself with the -init flag and forks itself. Forking in Linux means creating a new process by duplicating the calling process<crlf>Deletes itself by removing the original binary invoked. The forked process continues to run<crlf>Alters the forked processes creation and modification time values, also known as timestomping<crlf>Creates a new process environment for itself and removes the old one setting (spoofing) a new process name. It changes the way it appears on the system akin to wearing a mask. The process is still kdmtmpflush but if you were to run a ps you would see whatever value it set<crlf>Creates a process ID (PID) file in /var/run. PID files are text files containing the process of the associated program meant for preventing multiple starts, marking residency, and used by the program to stop itself. This file resides in /var/run, another temporary file storage facility<crlf>Creates a raw network socket. On Linux, a socket is an endpoint for network communication that allows you to specify in detail every section of a packet allowing a user to implement their own transport layer protocol above the internet (IP) level<crlf>Sets BPF filters on the raw socket. BPF allows a user-space program to attach a filter onto any socket and allow or disallow certain types of data to come through the socket<crlf>Observes incoming packets<crlf>If a packet is observed that matches the BPF filters and contains the required data it is passed to the backdoor for processing<crlf>It forks the current process again<crlf>Changes the forked processes working directory to /<crlf>Changes (spoofs) the name of the forked process to a hardcoded value<crlf>Based on the password or existence of a password sent in the magic packet the backdoor provides a reverse shell, establishes a bind shell, or sends back a ping"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x275a64d3>",
                    "type": "UnknownWord",
                    "value": "specify"
                },
                "references": {
                    "sentences": [
                        "When executed the binary copies itself into /dev/shm/. A temporary filesystem /dev/shm stands for shared memory and is a temporary file storage facility serving as an efficient means of inter-process communication<crlf>Renames its process to kdmtmpflush, a hardcoded process name<crlf>Initializes itself with the -init flag and forks itself. Forking in Linux means creating a new process by duplicating the calling process<crlf>Deletes itself by removing the original binary invoked. The forked process continues to run<crlf>Alters the forked processes creation and modification time values, also known as timestomping<crlf>Creates a new process environment for itself and removes the old one setting (spoofing) a new process name. It changes the way it appears on the system akin to wearing a mask. The process is still kdmtmpflush but if you were to run a ps you would see whatever value it set<crlf>Creates a process ID (PID) file in /var/run. PID files are text files containing the process of the associated program meant for preventing multiple starts, marking residency, and used by the program to stop itself. This file resides in /var/run, another temporary file storage facility<crlf>Creates a raw network socket. On Linux, a socket is an endpoint for network communication that allows you to specify in detail every section of a packet allowing a user to implement their own transport layer protocol above the internet (IP) level<crlf>Sets BPF filters on the raw socket. BPF allows a user-space program to attach a filter onto any socket and allow or disallow certain types of data to come through the socket<crlf>Observes incoming packets<crlf>If a packet is observed that matches the BPF filters and contains the required data it is passed to the backdoor for processing<crlf>It forks the current process again<crlf>Changes the forked processes working directory to /<crlf>Changes (spoofs) the name of the forked process to a hardcoded value<crlf>Based on the password or existence of a password sent in the magic packet the backdoor provides a reverse shell, establishes a bind shell, or sends back a ping"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xf23a5eca>",
                    "type": "UnknownWord",
                    "value": "user-space"
                },
                "references": {
                    "sentences": [
                        "When executed the binary copies itself into /dev/shm/. A temporary filesystem /dev/shm stands for shared memory and is a temporary file storage facility serving as an efficient means of inter-process communication<crlf>Renames its process to kdmtmpflush, a hardcoded process name<crlf>Initializes itself with the -init flag and forks itself. Forking in Linux means creating a new process by duplicating the calling process<crlf>Deletes itself by removing the original binary invoked. The forked process continues to run<crlf>Alters the forked processes creation and modification time values, also known as timestomping<crlf>Creates a new process environment for itself and removes the old one setting (spoofing) a new process name. It changes the way it appears on the system akin to wearing a mask. The process is still kdmtmpflush but if you were to run a ps you would see whatever value it set<crlf>Creates a process ID (PID) file in /var/run. PID files are text files containing the process of the associated program meant for preventing multiple starts, marking residency, and used by the program to stop itself. This file resides in /var/run, another temporary file storage facility<crlf>Creates a raw network socket. On Linux, a socket is an endpoint for network communication that allows you to specify in detail every section of a packet allowing a user to implement their own transport layer protocol above the internet (IP) level<crlf>Sets BPF filters on the raw socket. BPF allows a user-space program to attach a filter onto any socket and allow or disallow certain types of data to come through the socket<crlf>Observes incoming packets<crlf>If a packet is observed that matches the BPF filters and contains the required data it is passed to the backdoor for processing<crlf>It forks the current process again<crlf>Changes the forked processes working directory to /<crlf>Changes (spoofs) the name of the forked process to a hardcoded value<crlf>Based on the password or existence of a password sent in the magic packet the backdoor provides a reverse shell, establishes a bind shell, or sends back a ping",
                        "As stated in step 9 (above), BPF or Berkeley Packet Filters is a technology from the early 90s that allows a user-space program to attach a network filter onto any socket and allow or disallow certain types of data to come through the socket. These filters are made up of bytecode that runs on an abstract virtual machine in the Linux kernel. The BPF virtual machine has functionality to inspect all parts of incoming packets and make an allow/drop decision based on what it sees. . You can see in the image example below what this looks like within the BPFDoor source code:"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x3093eb9a>",
                    "type": "UnknownWord",
                    "value": "attach"
                },
                "references": {
                    "sentences": [
                        "When executed the binary copies itself into /dev/shm/. A temporary filesystem /dev/shm stands for shared memory and is a temporary file storage facility serving as an efficient means of inter-process communication<crlf>Renames its process to kdmtmpflush, a hardcoded process name<crlf>Initializes itself with the -init flag and forks itself. Forking in Linux means creating a new process by duplicating the calling process<crlf>Deletes itself by removing the original binary invoked. The forked process continues to run<crlf>Alters the forked processes creation and modification time values, also known as timestomping<crlf>Creates a new process environment for itself and removes the old one setting (spoofing) a new process name. It changes the way it appears on the system akin to wearing a mask. The process is still kdmtmpflush but if you were to run a ps you would see whatever value it set<crlf>Creates a process ID (PID) file in /var/run. PID files are text files containing the process of the associated program meant for preventing multiple starts, marking residency, and used by the program to stop itself. This file resides in /var/run, another temporary file storage facility<crlf>Creates a raw network socket. On Linux, a socket is an endpoint for network communication that allows you to specify in detail every section of a packet allowing a user to implement their own transport layer protocol above the internet (IP) level<crlf>Sets BPF filters on the raw socket. BPF allows a user-space program to attach a filter onto any socket and allow or disallow certain types of data to come through the socket<crlf>Observes incoming packets<crlf>If a packet is observed that matches the BPF filters and contains the required data it is passed to the backdoor for processing<crlf>It forks the current process again<crlf>Changes the forked processes working directory to /<crlf>Changes (spoofs) the name of the forked process to a hardcoded value<crlf>Based on the password or existence of a password sent in the magic packet the backdoor provides a reverse shell, establishes a bind shell, or sends back a ping",
                        "As stated in step 9 (above), BPF or Berkeley Packet Filters is a technology from the early 90s that allows a user-space program to attach a network filter onto any socket and allow or disallow certain types of data to come through the socket. These filters are made up of bytecode that runs on an abstract virtual machine in the Linux kernel. The BPF virtual machine has functionality to inspect all parts of incoming packets and make an allow/drop decision based on what it sees. . You can see in the image example below what this looks like within the BPFDoor source code:",
                        "The above capabilities allow BPFDoor to attach a filter onto any socket and allow or disallow certain types of data to come through the socket - used carefully by the adversary to invoke a series of different functions within the payload."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x92831274>",
                    "type": "UnknownWord",
                    "value": "disallow"
                },
                "references": {
                    "sentences": [
                        "When executed the binary copies itself into /dev/shm/. A temporary filesystem /dev/shm stands for shared memory and is a temporary file storage facility serving as an efficient means of inter-process communication<crlf>Renames its process to kdmtmpflush, a hardcoded process name<crlf>Initializes itself with the -init flag and forks itself. Forking in Linux means creating a new process by duplicating the calling process<crlf>Deletes itself by removing the original binary invoked. The forked process continues to run<crlf>Alters the forked processes creation and modification time values, also known as timestomping<crlf>Creates a new process environment for itself and removes the old one setting (spoofing) a new process name. It changes the way it appears on the system akin to wearing a mask. The process is still kdmtmpflush but if you were to run a ps you would see whatever value it set<crlf>Creates a process ID (PID) file in /var/run. PID files are text files containing the process of the associated program meant for preventing multiple starts, marking residency, and used by the program to stop itself. This file resides in /var/run, another temporary file storage facility<crlf>Creates a raw network socket. On Linux, a socket is an endpoint for network communication that allows you to specify in detail every section of a packet allowing a user to implement their own transport layer protocol above the internet (IP) level<crlf>Sets BPF filters on the raw socket. BPF allows a user-space program to attach a filter onto any socket and allow or disallow certain types of data to come through the socket<crlf>Observes incoming packets<crlf>If a packet is observed that matches the BPF filters and contains the required data it is passed to the backdoor for processing<crlf>It forks the current process again<crlf>Changes the forked processes working directory to /<crlf>Changes (spoofs) the name of the forked process to a hardcoded value<crlf>Based on the password or existence of a password sent in the magic packet the backdoor provides a reverse shell, establishes a bind shell, or sends back a ping",
                        "As stated in step 9 (above), BPF or Berkeley Packet Filters is a technology from the early 90s that allows a user-space program to attach a network filter onto any socket and allow or disallow certain types of data to come through the socket. These filters are made up of bytecode that runs on an abstract virtual machine in the Linux kernel. The BPF virtual machine has functionality to inspect all parts of incoming packets and make an allow/drop decision based on what it sees. . You can see in the image example below what this looks like within the BPFDoor source code:",
                        "The above capabilities allow BPFDoor to attach a filter onto any socket and allow or disallow certain types of data to come through the socket - used carefully by the adversary to invoke a series of different functions within the payload."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x8d0d6e79>",
                    "type": "UnknownWord",
                    "value": "establishes"
                },
                "references": {
                    "sentences": [
                        "When executed the binary copies itself into /dev/shm/. A temporary filesystem /dev/shm stands for shared memory and is a temporary file storage facility serving as an efficient means of inter-process communication<crlf>Renames its process to kdmtmpflush, a hardcoded process name<crlf>Initializes itself with the -init flag and forks itself. Forking in Linux means creating a new process by duplicating the calling process<crlf>Deletes itself by removing the original binary invoked. The forked process continues to run<crlf>Alters the forked processes creation and modification time values, also known as timestomping<crlf>Creates a new process environment for itself and removes the old one setting (spoofing) a new process name. It changes the way it appears on the system akin to wearing a mask. The process is still kdmtmpflush but if you were to run a ps you would see whatever value it set<crlf>Creates a process ID (PID) file in /var/run. PID files are text files containing the process of the associated program meant for preventing multiple starts, marking residency, and used by the program to stop itself. This file resides in /var/run, another temporary file storage facility<crlf>Creates a raw network socket. On Linux, a socket is an endpoint for network communication that allows you to specify in detail every section of a packet allowing a user to implement their own transport layer protocol above the internet (IP) level<crlf>Sets BPF filters on the raw socket. BPF allows a user-space program to attach a filter onto any socket and allow or disallow certain types of data to come through the socket<crlf>Observes incoming packets<crlf>If a packet is observed that matches the BPF filters and contains the required data it is passed to the backdoor for processing<crlf>It forks the current process again<crlf>Changes the forked processes working directory to /<crlf>Changes (spoofs) the name of the forked process to a hardcoded value<crlf>Based on the password or existence of a password sent in the magic packet the backdoor provides a reverse shell, establishes a bind shell, or sends back a ping",
                        "The implant then reconfigures the firewall to temporarily redirect all traffic from the attackers IP/port combination to the new listening socket. The attacker initiates a second TCP handshake on the same legitimate port as before, only now iptables forwards those packets to the listening socket owned by the implant. . This establishes the communication channel between attacker and implant that will be used for command and control. The implant then covers its tracks by removing the iptables firewall rules that redirected the traffic."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x66e53c90>",
                    "type": "UnknownWord",
                    "value": "bind"
                },
                "references": {
                    "sentences": [
                        "The hunt rule we created here identifies a sequence of events beginning with a session id change, followed by a network connection accepted, in correlation with ptmx file creation and a deletion of the process responsible for accepting the network connection. This EQL rule can be used to successfully identify BPFDoor bind shell connections within your environment:",
                        "When executed the binary copies itself into /dev/shm/. A temporary filesystem /dev/shm stands for shared memory and is a temporary file storage facility serving as an efficient means of inter-process communication<crlf>Renames its process to kdmtmpflush, a hardcoded process name<crlf>Initializes itself with the -init flag and forks itself. Forking in Linux means creating a new process by duplicating the calling process<crlf>Deletes itself by removing the original binary invoked. The forked process continues to run<crlf>Alters the forked processes creation and modification time values, also known as timestomping<crlf>Creates a new process environment for itself and removes the old one setting (spoofing) a new process name. It changes the way it appears on the system akin to wearing a mask. The process is still kdmtmpflush but if you were to run a ps you would see whatever value it set<crlf>Creates a process ID (PID) file in /var/run. PID files are text files containing the process of the associated program meant for preventing multiple starts, marking residency, and used by the program to stop itself. This file resides in /var/run, another temporary file storage facility<crlf>Creates a raw network socket. On Linux, a socket is an endpoint for network communication that allows you to specify in detail every section of a packet allowing a user to implement their own transport layer protocol above the internet (IP) level<crlf>Sets BPF filters on the raw socket. BPF allows a user-space program to attach a filter onto any socket and allow or disallow certain types of data to come through the socket<crlf>Observes incoming packets<crlf>If a packet is observed that matches the BPF filters and contains the required data it is passed to the backdoor for processing<crlf>It forks the current process again<crlf>Changes the forked processes working directory to /<crlf>Changes (spoofs) the name of the forked process to a hardcoded value<crlf>Based on the password or existence of a password sent in the magic packet the backdoor provides a reverse shell, establishes a bind shell, or sends back a ping",
                        "EQL BPFDoor bind shell hunt query",
                        "Depending on the password or lack of password provided, BPFDoor will behave exactly the same way it would in the wild. You can invoke a reverse shell, establish a bind shell, or connect to it with no supplied password to receive a ping-back confirming its installation.",
                        "Below you can see visual representations of the BPFDoor process tree, utilizing Elastics Analyzer View. The first image displays the tree prior to active use of the backdoor (i.e reverse shell, bind shell, or pingback) and the second image after a reverse shell has connected and performed post-exploitation activities.",
                        "The bind shell was the last capability we honed in on. Identifying an abnormal sequence of events surrounding the bind shell connection was difficult due to the way it forks then accepts the connection and kills the accepting process post established connection. Therefore we had to focus on the sequence of events within the process entity id directly involving the network connection and subsequent killing of the accepting process.",
                        "The third area we wanted to look at was the network connections tied to two of the three capabilities (reverse shell and bind shell) the backdoor possesses. We wanted to see if there were any suspicious network connections tied to process or user abnormalities we could sequence together based off of the way BPFDoor handles establishing a reverse or bind shell."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x97d45ffc>",
                    "type": "UnknownWord",
                    "value": "atypical"
                },
                "references": {
                    "sentences": [
                        "Atypical BPFDoor sample"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xce003c9f>",
                    "type": "UnknownWord",
                    "value": "alter"
                },
                "references": {
                    "sentences": [
                        "As we mentioned earlier, one recent sample we have come across that does not seem to exhibit some of the tactics of prior payloads has been observed - It doesnt alter its initial name to a hardcoded value and simply executes from its placed location, otherwise, it models relatively the same behavior.",
                        "Of note there is one sample we have come across that does not seem to exhibit steps 1 - 4. It doesnt alter its initial name to a hardcoded value and simply executes from its placed location, otherwise, it models the same behavior."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xd0d24dc2>",
                    "type": "UnknownWord",
                    "value": "visual"
                },
                "references": {
                    "sentences": [
                        "Below you can see visual representations of the BPFDoor process tree, utilizing Elastics Analyzer View. The first image displays the tree prior to active use of the backdoor (i.e reverse shell, bind shell, or pingback) and the second image after a reverse shell has connected and performed post-exploitation activities."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xd0752dd8>",
                    "type": "UnknownWord",
                    "value": "tree"
                },
                "references": {
                    "sentences": [
                        "BPFDoor is interesting given the anti-forensics, and obfuscation tactics used. Astute readers will observe slight differences in the PID tree visible when running a ps ajxf on an infected host when compared to executed data within the Analyzer View inside of Elastic. This is due to the process name spoofing mentioned in step 6 (above) of the attack lifecycle above. The image below is taken from a system running BPFDoor with an active reverse shell connection established:",
                        "Below you can see visual representations of the BPFDoor process tree, utilizing Elastics Analyzer View. The first image displays the tree prior to active use of the backdoor (i.e reverse shell, bind shell, or pingback) and the second image after a reverse shell has connected and performed post-exploitation activities.",
                        "Elastic Analyzer View of the BPFDoor initial invocation process tree",
                        "The reverse shell was the first capability focused on. Taking a deep look at the process tree in and around the reverse shell establishment allowed us to key in on what would be considered a strange or even abnormal sequence of events leading to and involving an outbound network connection."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x28df03ad>",
                    "type": "UnknownWord",
                    "value": "pingback"
                },
                "references": {
                    "sentences": [
                        "Below you can see visual representations of the BPFDoor process tree, utilizing Elastics Analyzer View. The first image displays the tree prior to active use of the backdoor (i.e reverse shell, bind shell, or pingback) and the second image after a reverse shell has connected and performed post-exploitation activities."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x46f1bff>",
                    "type": "UnknownWord",
                    "value": "invocation"
                },
                "references": {
                    "sentences": [
                        "Elastic Analyzer View of the BPFDoor initial invocation process tree"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x898086d4>",
                    "type": "UnknownWord",
                    "value": "astute"
                },
                "references": {
                    "sentences": [
                        "BPFDoor is interesting given the anti-forensics, and obfuscation tactics used. Astute readers will observe slight differences in the PID tree visible when running a ps ajxf on an infected host when compared to executed data within the Analyzer View inside of Elastic. This is due to the process name spoofing mentioned in step 6 (above) of the attack lifecycle above. The image below is taken from a system running BPFDoor with an active reverse shell connection established:"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x25a2a2d2>",
                    "type": "UnknownWord",
                    "value": "ajxf"
                },
                "references": {
                    "sentences": [
                        "BPFDoor is interesting given the anti-forensics, and obfuscation tactics used. Astute readers will observe slight differences in the PID tree visible when running a ps ajxf on an infected host when compared to executed data within the Analyzer View inside of Elastic. This is due to the process name spoofing mentioned in step 6 (above) of the attack lifecycle above. The image below is taken from a system running BPFDoor with an active reverse shell connection established:"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x70e6c62b>",
                    "type": "UnknownWord",
                    "value": "demonstrating"
                },
                "references": {
                    "sentences": [
                        "Elastic Analyzer View of BPFDoor demonstrating real process capture."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xc8a7a775>",
                    "type": "UnknownWord",
                    "value": "repertoire"
                },
                "references": {
                    "sentences": [
                        "BPFDoor also holds in its repertoire the ability to subvert the traditional Linux socket client - server architecture in order to hide its malicious traffic. The methods which it utilizes to achieve this are both unusual and intriguing."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xdd363c4>",
                    "type": "UnknownWord",
                    "value": "subvert"
                },
                "references": {
                    "sentences": [
                        "BPFDoor also holds in its repertoire the ability to subvert the traditional Linux socket client - server architecture in order to hide its malicious traffic. The methods which it utilizes to achieve this are both unusual and intriguing."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x386a2400>",
                    "type": "UnknownWord",
                    "value": "intriguing"
                },
                "references": {
                    "sentences": [
                        "BPFDoor also holds in its repertoire the ability to subvert the traditional Linux socket client - server architecture in order to hide its malicious traffic. The methods which it utilizes to achieve this are both unusual and intriguing."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xc5505cb9>",
                    "type": "UnknownWord",
                    "value": "synonmous"
                },
                "references": {
                    "sentences": [
                        "The sockets interface is almost synonmous with TCP/IP communication. This simple interface has endured for over 40 years - predating both Linux and Windows implementations."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xa055ad21>",
                    "type": "UnknownWord",
                    "value": "endured"
                },
                "references": {
                    "sentences": [
                        "The sockets interface is almost synonmous with TCP/IP communication. This simple interface has endured for over 40 years - predating both Linux and Windows implementations."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xf93ab954>",
                    "type": "UnknownWord",
                    "value": "predating"
                },
                "references": {
                    "sentences": [
                        "The sockets interface is almost synonmous with TCP/IP communication. This simple interface has endured for over 40 years - predating both Linux and Windows implementations."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x756bad8d>",
                    "type": "UnknownWord",
                    "value": "opposed"
                },
                "references": {
                    "sentences": [
                        "BPFDoor uses a raw socket (as opposed to cooked ones that handle IP/TCP/UDP headers transparently) to observe every packet arriving at the machine, ethernet frame headers and all. While this might sound like a stealthy way to intercept traffic, its actually not on any machine with a significant amount of network traffic the CPU usage will be consistently high."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x54a12434>",
                    "type": "UnknownWord",
                    "value": "cooked"
                },
                "references": {
                    "sentences": [
                        "BPFDoor uses a raw socket (as opposed to cooked ones that handle IP/TCP/UDP headers transparently) to observe every packet arriving at the machine, ethernet frame headers and all. While this might sound like a stealthy way to intercept traffic, its actually not on any machine with a significant amount of network traffic the CPU usage will be consistently high."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x533ce732>",
                    "type": "UnknownWord",
                    "value": "handle"
                },
                "references": {
                    "sentences": [
                        "BPFDoor uses a raw socket (as opposed to cooked ones that handle IP/TCP/UDP headers transparently) to observe every packet arriving at the machine, ethernet frame headers and all. While this might sound like a stealthy way to intercept traffic, its actually not on any machine with a significant amount of network traffic the CPU usage will be consistently high."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x6876b79>",
                    "type": "UnknownWord",
                    "value": "transparently"
                },
                "references": {
                    "sentences": [
                        "BPFDoor uses a raw socket (as opposed to cooked ones that handle IP/TCP/UDP headers transparently) to observe every packet arriving at the machine, ethernet frame headers and all. While this might sound like a stealthy way to intercept traffic, its actually not on any machine with a significant amount of network traffic the CPU usage will be consistently high."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x4a7d423e>",
                    "type": "UnknownWord",
                    "value": "arriving"
                },
                "references": {
                    "sentences": [
                        "BPFDoor uses a raw socket (as opposed to cooked ones that handle IP/TCP/UDP headers transparently) to observe every packet arriving at the machine, ethernet frame headers and all. While this might sound like a stealthy way to intercept traffic, its actually not on any machine with a significant amount of network traffic the CPU usage will be consistently high."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x27cfee7c>",
                    "type": "UnknownWord",
                    "value": "ethernet"
                },
                "references": {
                    "sentences": [
                        "BPFDoor uses a raw socket (as opposed to cooked ones that handle IP/TCP/UDP headers transparently) to observe every packet arriving at the machine, ethernet frame headers and all. While this might sound like a stealthy way to intercept traffic, its actually not on any machine with a significant amount of network traffic the CPU usage will be consistently high."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xc9bef566>",
                    "type": "UnknownWord",
                    "value": "sound"
                },
                "references": {
                    "sentences": [
                        "BPFDoor uses a raw socket (as opposed to cooked ones that handle IP/TCP/UDP headers transparently) to observe every packet arriving at the machine, ethernet frame headers and all. While this might sound like a stealthy way to intercept traffic, its actually not on any machine with a significant amount of network traffic the CPU usage will be consistently high."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x8297515e>",
                    "type": "UnknownWord",
                    "value": "kernel-level"
                },
                "references": {
                    "sentences": [
                        "Thats where BPF comes in - an extremely efficient, kernel-level packet filter is the perfect tool to allow the implant to ignore 99% of network traffic and only become activated when a special pattern is encountered. This implant looks for a so-called magic packet in every TCP, UDP and ICMP packet received on the system."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x1892850f>",
                    "type": "UnknownWord",
                    "value": "icmp"
                },
                "references": {
                    "sentences": [
                        "Thats where BPF comes in - an extremely efficient, kernel-level packet filter is the perfect tool to allow the implant to ignore 99% of network traffic and only become activated when a special pattern is encountered. This implant looks for a so-called magic packet in every TCP, UDP and ICMP packet received on the system."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x4833e8a4>",
                    "type": "UnknownWord",
                    "value": "watching"
                },
                "references": {
                    "sentences": [
                        "Once activated, a typical reverse shell - which this back door also supports - creates an outbound connection to a listener set up by the attacker. This has the advantage of bypassing firewalls watching inbound traffic only. This method is well-understood by defenders, however. The sneakiest way to get a shell connected would be to reuse an existing packet flow, redirected to a separate process."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x9cbea04a>",
                    "type": "UnknownWord",
                    "value": "well-understood"
                },
                "references": {
                    "sentences": [
                        "Once activated, a typical reverse shell - which this back door also supports - creates an outbound connection to a listener set up by the attacker. This has the advantage of bypassing firewalls watching inbound traffic only. This method is well-understood by defenders, however. The sneakiest way to get a shell connected would be to reuse an existing packet flow, redirected to a separate process."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xe046ee2e>",
                    "type": "UnknownWord",
                    "value": "sneakiest"
                },
                "references": {
                    "sentences": [
                        "Once activated, a typical reverse shell - which this back door also supports - creates an outbound connection to a listener set up by the attacker. This has the advantage of bypassing firewalls watching inbound traffic only. This method is well-understood by defenders, however. The sneakiest way to get a shell connected would be to reuse an existing packet flow, redirected to a separate process."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x857e4ec4>",
                    "type": "UnknownWord",
                    "value": "nginx"
                },
                "references": {
                    "sentences": [
                        "In this attack, the initial TCP handshake is done between the attacker and a completely legitimate process for example nginx or sshd. These handshake packets happen to be also delivered to the backdoor (like every packet on the system) but are filtered out by BPF. Once the connection is established, however, BPFDoor sends a magic packet to the legitimate service. The implant receives it and makes a note of the originating IP and port the attacker is using, and it opens a new listening socket on an inconspicuous port (42391 - 43391)."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x1ef201>",
                    "type": "UnknownWord",
                    "value": "sshd"
                },
                "references": {
                    "sentences": [
                        "In this attack, the initial TCP handshake is done between the attacker and a completely legitimate process for example nginx or sshd. These handshake packets happen to be also delivered to the backdoor (like every packet on the system) but are filtered out by BPF. Once the connection is established, however, BPFDoor sends a magic packet to the legitimate service. The implant receives it and makes a note of the originating IP and port the attacker is using, and it opens a new listening socket on an inconspicuous port (42391 - 43391)."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xe3889e15>",
                    "type": "UnknownWord",
                    "value": "filtered"
                },
                "references": {
                    "sentences": [
                        "In this attack, the initial TCP handshake is done between the attacker and a completely legitimate process for example nginx or sshd. These handshake packets happen to be also delivered to the backdoor (like every packet on the system) but are filtered out by BPF. Once the connection is established, however, BPFDoor sends a magic packet to the legitimate service. The implant receives it and makes a note of the originating IP and port the attacker is using, and it opens a new listening socket on an inconspicuous port (42391 - 43391)."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xfb492bd3>",
                    "type": "UnknownWord",
                    "value": "listening"
                },
                "references": {
                    "sentences": [
                        "The implant then reconfigures the firewall to temporarily redirect all traffic from the attackers IP/port combination to the new listening socket. The attacker initiates a second TCP handshake on the same legitimate port as before, only now iptables forwards those packets to the listening socket owned by the implant. . This establishes the communication channel between attacker and implant that will be used for command and control. The implant then covers its tracks by removing the iptables firewall rules that redirected the traffic.",
                        "In this attack, the initial TCP handshake is done between the attacker and a completely legitimate process for example nginx or sshd. These handshake packets happen to be also delivered to the backdoor (like every packet on the system) but are filtered out by BPF. Once the connection is established, however, BPFDoor sends a magic packet to the legitimate service. The implant receives it and makes a note of the originating IP and port the attacker is using, and it opens a new listening socket on an inconspicuous port (42391 - 43391)."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xa631850a>",
                    "type": "UnknownWord",
                    "value": "inconspicuous"
                },
                "references": {
                    "sentences": [
                        "In this attack, the initial TCP handshake is done between the attacker and a completely legitimate process for example nginx or sshd. These handshake packets happen to be also delivered to the backdoor (like every packet on the system) but are filtered out by BPF. Once the connection is established, however, BPFDoor sends a magic packet to the legitimate service. The implant receives it and makes a note of the originating IP and port the attacker is using, and it opens a new listening socket on an inconspicuous port (42391 - 43391)."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x5716d3a2>",
                    "type": "UnknownWord",
                    "value": "reconfigures"
                },
                "references": {
                    "sentences": [
                        "The implant then reconfigures the firewall to temporarily redirect all traffic from the attackers IP/port combination to the new listening socket. The attacker initiates a second TCP handshake on the same legitimate port as before, only now iptables forwards those packets to the listening socket owned by the implant. . This establishes the communication channel between attacker and implant that will be used for command and control. The implant then covers its tracks by removing the iptables firewall rules that redirected the traffic."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xfdd8d31c>",
                    "type": "UnknownWord",
                    "value": "temporarily"
                },
                "references": {
                    "sentences": [
                        "The implant then reconfigures the firewall to temporarily redirect all traffic from the attackers IP/port combination to the new listening socket. The attacker initiates a second TCP handshake on the same legitimate port as before, only now iptables forwards those packets to the listening socket owned by the implant. . This establishes the communication channel between attacker and implant that will be used for command and control. The implant then covers its tracks by removing the iptables firewall rules that redirected the traffic."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x3a736543>",
                    "type": "UnknownWord",
                    "value": "statefully"
                },
                "references": {
                    "sentences": [
                        "Despite the firewall rule being removed, traffic on the legitimate port will continue to be forwarded to the implant due to how Linux statefully tracks connections. No visible traffic will be addressed to the implant port (although it will be delivered there)."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xf35638a1>",
                    "type": "UnknownWord",
                    "value": "representing"
                },
                "references": {
                    "sentences": [
                        "A diagram representing the aforementioned network flows"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x2767461b>",
                    "type": "UnknownWord",
                    "value": "bytecode"
                },
                "references": {
                    "sentences": [
                        "As stated in step 9 (above), BPF or Berkeley Packet Filters is a technology from the early 90s that allows a user-space program to attach a network filter onto any socket and allow or disallow certain types of data to come through the socket. These filters are made up of bytecode that runs on an abstract virtual machine in the Linux kernel. The BPF virtual machine has functionality to inspect all parts of incoming packets and make an allow/drop decision based on what it sees. . You can see in the image example below what this looks like within the BPFDoor source code:"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xd6a2125e>",
                    "type": "UnknownWord",
                    "value": "abstract"
                },
                "references": {
                    "sentences": [
                        "As stated in step 9 (above), BPF or Berkeley Packet Filters is a technology from the early 90s that allows a user-space program to attach a network filter onto any socket and allow or disallow certain types of data to come through the socket. These filters are made up of bytecode that runs on an abstract virtual machine in the Linux kernel. The BPF virtual machine has functionality to inspect all parts of incoming packets and make an allow/drop decision based on what it sees. . You can see in the image example below what this looks like within the BPFDoor source code:"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x118fce18>",
                    "type": "UnknownWord",
                    "value": "pseudo"
                },
                "references": {
                    "sentences": [
                        "We took this BPF code, converted it, and wrote it up as pseudo code in an effort to aid our research and craft packets able to successfully get through these filters in order to activate the backdoor."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x2d46af10>",
                    "type": "UnknownWord",
                    "value": "craft"
                },
                "references": {
                    "sentences": [
                        "We took this BPF code, converted it, and wrote it up as pseudo code in an effort to aid our research and craft packets able to successfully get through these filters in order to activate the backdoor.",
                        "In order to do this, we had to break down the BPF filters in the BPFDoor source code so we could craft packets for the different protocols. To do this, we used Scapy, a packet manipulation program, to ensure we could pass the filters for the purpose of activating the backdoor. Once we ensured we could pass the filters, Rhys Rustad-Elliott, an engineer at Elastic built a BPFDoor client that accepts a password, IP address, and port allowing you to connect to a BPFDoor sample and interact if you possess the samples hardcoded passwords."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xa7d0307b>",
                    "type": "UnknownWord",
                    "value": "detonated"
                },
                "references": {
                    "sentences": [
                        "We wanted to see over time, between BPFDoor payloads, what, if anything, the threat actors modified. A number of samples were detonated and analyzed ranging from the uploaded source code to a sample uploaded last month. We found that the behavior over time did not change a great deal. It maintained the same relative attack lifecycle with a few variations with the hardcoded values such as passwords, process names, and files - this is not uncommon when compared to other malware samples that look to evade detection or leverage payloads across a variety of victims."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x9a457ea1>",
                    "type": "UnknownWord",
                    "value": "relative"
                },
                "references": {
                    "sentences": [
                        "We wanted to see over time, between BPFDoor payloads, what, if anything, the threat actors modified. A number of samples were detonated and analyzed ranging from the uploaded source code to a sample uploaded last month. We found that the behavior over time did not change a great deal. It maintained the same relative attack lifecycle with a few variations with the hardcoded values such as passwords, process names, and files - this is not uncommon when compared to other malware samples that look to evade detection or leverage payloads across a variety of victims."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x21cc07c5>",
                    "type": "UnknownWord",
                    "value": "sense"
                },
                "references": {
                    "sentences": [
                        "We posture that the threat group would change passwords and update process or file names in an effort to improve operational security and remain hidden. It also makes sense that the general functionality of the backdoor would not change in any great way. As the saying goes If its not broken, dont fix it. Our malware analysis and reverse engineering team compared the source code (uploaded to VirusTotal and found on Pastebin) to a recently uploaded sample highlighting some of the notable changes within the main function of the malware in the images below."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x7de5fc28>",
                    "type": "UnknownWord",
                    "value": "saying"
                },
                "references": {
                    "sentences": [
                        "We posture that the threat group would change passwords and update process or file names in an effort to improve operational security and remain hidden. It also makes sense that the general functionality of the backdoor would not change in any great way. As the saying goes If its not broken, dont fix it. Our malware analysis and reverse engineering team compared the source code (uploaded to VirusTotal and found on Pastebin) to a recently uploaded sample highlighting some of the notable changes within the main function of the malware in the images below."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xa9c8ebbc>",
                    "type": "UnknownWord",
                    "value": "comparison"
                },
                "references": {
                    "sentences": [
                        "A side by side comparison of the main functions for the Pastebin source code and a sample uploaded to VT last month focusing on the hardcoded string values for the passwords, process names and file name"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xa049c08d>",
                    "type": "UnknownWord",
                    "value": "observational"
                },
                "references": {
                    "sentences": [
                        "A trend we have had the privilege of observing at Elastic, is the threat landscape of Linux targeted attacks - these being focused often on cloud workloads, or systems that typically have less observational technology configured in many of the environments we see. The trend of complex, well-designed payloads is something that is often simply overlooked, and specifically in the case of BPFDoor, remained hidden for years."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x6a1c0bc7>",
                    "type": "UnknownWord",
                    "value": "well-designed"
                },
                "references": {
                    "sentences": [
                        "A trend we have had the privilege of observing at Elastic, is the threat landscape of Linux targeted attacks - these being focused often on cloud workloads, or systems that typically have less observational technology configured in many of the environments we see. The trend of complex, well-designed payloads is something that is often simply overlooked, and specifically in the case of BPFDoor, remained hidden for years."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x5bd62b4a>",
                    "type": "UnknownWord",
                    "value": "overlooked"
                },
                "references": {
                    "sentences": [
                        "A trend we have had the privilege of observing at Elastic, is the threat landscape of Linux targeted attacks - these being focused often on cloud workloads, or systems that typically have less observational technology configured in many of the environments we see. The trend of complex, well-designed payloads is something that is often simply overlooked, and specifically in the case of BPFDoor, remained hidden for years."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x418eb895>",
                    "type": "UnknownWord",
                    "value": "gaps"
                },
                "references": {
                    "sentences": [
                        "It is important to consider these workloads a critical component of your security posture: A lack of visibility within cloud workloads will eventually lead to large gaps in security controls - adversarial groups are further growing to understand these trends, and act accordingly. Best practices state that endpoint defenses should be consistent across the fleet of systems under management, and conform to a least privilege architecture."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x7e560d97>",
                    "type": "UnknownWord",
                    "value": "accordingly"
                },
                "references": {
                    "sentences": [
                        "It is important to consider these workloads a critical component of your security posture: A lack of visibility within cloud workloads will eventually lead to large gaps in security controls - adversarial groups are further growing to understand these trends, and act accordingly. Best practices state that endpoint defenses should be consistent across the fleet of systems under management, and conform to a least privilege architecture."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xe5c9f88f>",
                    "type": "UnknownWord",
                    "value": "fleet"
                },
                "references": {
                    "sentences": [
                        "While threat groups continue to increase in maturity, we expect this kind of mature, well designed and hidden threat will continue to be found within Linux environments. These kinds of findings reiterate the importance of comprehensive security controls across the entirety of a fleet, rather than simply focusing on user endpoints.",
                        "It is important to consider these workloads a critical component of your security posture: A lack of visibility within cloud workloads will eventually lead to large gaps in security controls - adversarial groups are further growing to understand these trends, and act accordingly. Best practices state that endpoint defenses should be consistent across the fleet of systems under management, and conform to a least privilege architecture."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x95616c29>",
                    "type": "UnknownWord",
                    "value": "conform"
                },
                "references": {
                    "sentences": [
                        "It is important to consider these workloads a critical component of your security posture: A lack of visibility within cloud workloads will eventually lead to large gaps in security controls - adversarial groups are further growing to understand these trends, and act accordingly. Best practices state that endpoint defenses should be consistent across the fleet of systems under management, and conform to a least privilege architecture."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xb741e5de>",
                    "type": "UnknownWord",
                    "value": "became"
                },
                "references": {
                    "sentences": [
                        "After researching this malware it became apparent as to why the backdoor remained in use and hidden for so long. If you arent intimately familiar with Linux process abnormalities or werent looking for it you would generally not detect it. Even though it takes advantage of Linux capabilities in a stealthy manner to evade detection, there are still opportunities for both behavioral and signature-based detections."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xd3ff2770>",
                    "type": "UnknownWord",
                    "value": "arent"
                },
                "references": {
                    "sentences": [
                        "After researching this malware it became apparent as to why the backdoor remained in use and hidden for so long. If you arent intimately familiar with Linux process abnormalities or werent looking for it you would generally not detect it. Even though it takes advantage of Linux capabilities in a stealthy manner to evade detection, there are still opportunities for both behavioral and signature-based detections."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xfbce014e>",
                    "type": "UnknownWord",
                    "value": "intimately"
                },
                "references": {
                    "sentences": [
                        "After researching this malware it became apparent as to why the backdoor remained in use and hidden for so long. If you arent intimately familiar with Linux process abnormalities or werent looking for it you would generally not detect it. Even though it takes advantage of Linux capabilities in a stealthy manner to evade detection, there are still opportunities for both behavioral and signature-based detections."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x14eca87e>",
                    "type": "UnknownWord",
                    "value": "abnormalities"
                },
                "references": {
                    "sentences": [
                        "After researching this malware it became apparent as to why the backdoor remained in use and hidden for so long. If you arent intimately familiar with Linux process abnormalities or werent looking for it you would generally not detect it. Even though it takes advantage of Linux capabilities in a stealthy manner to evade detection, there are still opportunities for both behavioral and signature-based detections.",
                        "The third area we wanted to look at was the network connections tied to two of the three capabilities (reverse shell and bind shell) the backdoor possesses. We wanted to see if there were any suspicious network connections tied to process or user abnormalities we could sequence together based off of the way BPFDoor handles establishing a reverse or bind shell."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xf401c6b5>",
                    "type": "UnknownWord",
                    "value": "werent"
                },
                "references": {
                    "sentences": [
                        "After researching this malware it became apparent as to why the backdoor remained in use and hidden for so long. If you arent intimately familiar with Linux process abnormalities or werent looking for it you would generally not detect it. Even though it takes advantage of Linux capabilities in a stealthy manner to evade detection, there are still opportunities for both behavioral and signature-based detections."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xa88b6151>",
                    "type": "UnknownWord",
                    "value": "signature-based"
                },
                "references": {
                    "sentences": [
                        "After researching this malware it became apparent as to why the backdoor remained in use and hidden for so long. If you arent intimately familiar with Linux process abnormalities or werent looking for it you would generally not detect it. Even though it takes advantage of Linux capabilities in a stealthy manner to evade detection, there are still opportunities for both behavioral and signature-based detections."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x9c5892d1>",
                    "type": "UnknownWord",
                    "value": "detonating"
                },
                "references": {
                    "sentences": [
                        "This was verified by detonating the binary in a VM while our Elastic Agent was installed and observing the sequence of events. You can see an image of this detection on the Kibana Security Alerts page below. This rule is publicly available as an Elastic SIEM detection rule - Binary Executed from Shared Memory Directory:"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x3ab70fb8>",
                    "type": "UnknownWord",
                    "value": "kibana"
                },
                "references": {
                    "sentences": [
                        "Elastic Alert in Kibana - Abnormal Process ID or Lock File Created",
                        "Elastic Alert in Kibana - Suspicious Network Connection Accept by Root",
                        "This was verified by detonating the binary in a VM while our Elastic Agent was installed and observing the sequence of events. You can see an image of this detection on the Kibana Security Alerts page below. This rule is publicly available as an Elastic SIEM detection rule - Binary Executed from Shared Memory Directory:",
                        "Elastic Alert in Kibana - Suspicious Network Connection Attempt by Root",
                        "Elastic Alert in Kibana - Binary Executed from Shared Memory Directory"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x48f95f56>",
                    "type": "UnknownWord",
                    "value": "osquery"
                },
                "references": {
                    "sentences": [
                        "The second opportunity we noticed, for detection, was a specific PID file being created in /var/run. We noticed the dropped PID file was completely empty while doing a quick query via the Osquery integration to the /var/run directory. While this is not inherently malicious, it is unusual for the file size of a PID to be 0 or above 10 bytes and thus we created an additional rule centered around detecting this unusual behavior."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x8822a0ce>",
                    "type": "UnknownWord",
                    "value": "integration"
                },
                "references": {
                    "sentences": [
                        "The second opportunity we noticed, for detection, was a specific PID file being created in /var/run. We noticed the dropped PID file was completely empty while doing a quick query via the Osquery integration to the /var/run directory. While this is not inherently malicious, it is unusual for the file size of a PID to be 0 or above 10 bytes and thus we created an additional rule centered around detecting this unusual behavior."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x7259ce6f>",
                    "type": "UnknownWord",
                    "value": "centered"
                },
                "references": {
                    "sentences": [
                        "The second opportunity we noticed, for detection, was a specific PID file being created in /var/run. We noticed the dropped PID file was completely empty while doing a quick query via the Osquery integration to the /var/run directory. While this is not inherently malicious, it is unusual for the file size of a PID to be 0 or above 10 bytes and thus we created an additional rule centered around detecting this unusual behavior."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x6b8b304e>",
                    "type": "UnknownWord",
                    "value": "subdirectory"
                },
                "references": {
                    "sentences": [
                        "Our Abnormal Process ID or Lock File Created rule identifies the creation of a PID file in the main directory of /var/run with no subdirectory, ignoring common PID files to be expected:"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xc3d87346>",
                    "type": "UnknownWord",
                    "value": "ignoring"
                },
                "references": {
                    "sentences": [
                        "Our Abnormal Process ID or Lock File Created rule identifies the creation of a PID file in the main directory of /var/run with no subdirectory, ignoring common PID files to be expected:"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x4c20a35c>",
                    "type": "UnknownWord",
                    "value": "tied"
                },
                "references": {
                    "sentences": [
                        "The third area we wanted to look at was the network connections tied to two of the three capabilities (reverse shell and bind shell) the backdoor possesses. We wanted to see if there were any suspicious network connections tied to process or user abnormalities we could sequence together based off of the way BPFDoor handles establishing a reverse or bind shell."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x222e16be>",
                    "type": "UnknownWord",
                    "value": "possesses"
                },
                "references": {
                    "sentences": [
                        "The third area we wanted to look at was the network connections tied to two of the three capabilities (reverse shell and bind shell) the backdoor possesses. We wanted to see if there were any suspicious network connections tied to process or user abnormalities we could sequence together based off of the way BPFDoor handles establishing a reverse or bind shell.",
                        "Quickly after beginning our research into this malware we realized we would also need to actively interact with BPFDoor in order to observe the full extent of the capabilities that it possesses and monitor what these capabilities would look like from a host and SIEM level."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xc8a25cd>",
                    "type": "UnknownWord",
                    "value": "establishment"
                },
                "references": {
                    "sentences": [
                        "The reverse shell was the first capability focused on. Taking a deep look at the process tree in and around the reverse shell establishment allowed us to key in on what would be considered a strange or even abnormal sequence of events leading to and involving an outbound network connection."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x12917a88>",
                    "type": "UnknownWord",
                    "value": "honed"
                },
                "references": {
                    "sentences": [
                        "The bind shell was the last capability we honed in on. Identifying an abnormal sequence of events surrounding the bind shell connection was difficult due to the way it forks then accepts the connection and kills the accepting process post established connection. Therefore we had to focus on the sequence of events within the process entity id directly involving the network connection and subsequent killing of the accepting process."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x51942446>",
                    "type": "UnknownWord",
                    "value": "accepting"
                },
                "references": {
                    "sentences": [
                        "The bind shell was the last capability we honed in on. Identifying an abnormal sequence of events surrounding the bind shell connection was difficult due to the way it forks then accepts the connection and kills the accepting process post established connection. Therefore we had to focus on the sequence of events within the process entity id directly involving the network connection and subsequent killing of the accepting process.",
                        "The hunt rule we created here identifies a sequence of events beginning with a session id change, followed by a network connection accepted, in correlation with ptmx file creation and a deletion of the process responsible for accepting the network connection. This EQL rule can be used to successfully identify BPFDoor bind shell connections within your environment:"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xe92ad681>",
                    "type": "UnknownWord",
                    "value": "killing"
                },
                "references": {
                    "sentences": [
                        "The bind shell was the last capability we honed in on. Identifying an abnormal sequence of events surrounding the bind shell connection was difficult due to the way it forks then accepts the connection and kills the accepting process post established connection. Therefore we had to focus on the sequence of events within the process entity id directly involving the network connection and subsequent killing of the accepting process."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x9f354410>",
                    "type": "UnknownWord",
                    "value": "myriad"
                },
                "references": {
                    "sentences": [
                        "After developing the 2 detection rules along with the 2 hunt rules listed below and in addition to the 6 YARA signatures deployed we were able to detect BPFDoor in a myriad of different ways and within different stages of its life cycle. As stated earlier though, if you detect this malware in your environment it should be the least of your concerns given the threat actor will most likely have already successfully compromised your network via other means."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x80e95ea5>",
                    "type": "UnknownWord",
                    "value": "life"
                },
                "references": {
                    "sentences": [
                        "After developing the 2 detection rules along with the 2 hunt rules listed below and in addition to the 6 YARA signatures deployed we were able to detect BPFDoor in a myriad of different ways and within different stages of its life cycle. As stated earlier though, if you detect this malware in your environment it should be the least of your concerns given the threat actor will most likely have already successfully compromised your network via other means."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x35b7b581>",
                    "type": "UnknownWord",
                    "value": "cycle"
                },
                "references": {
                    "sentences": [
                        "After developing the 2 detection rules along with the 2 hunt rules listed below and in addition to the 6 YARA signatures deployed we were able to detect BPFDoor in a myriad of different ways and within different stages of its life cycle. As stated earlier though, if you detect this malware in your environment it should be the least of your concerns given the threat actor will most likely have already successfully compromised your network via other means."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xe539d2e4>",
                    "type": "UnknownWord",
                    "value": "eql"
                },
                "references": {
                    "sentences": [
                        "EQL BPFDoor bind shell hunt query",
                        "EQL BPFDoor reverse shell hunt query",
                        "The hunt rule we created here identifies a sequence of events beginning with a session id change, followed by a network connection accepted, in correlation with ptmx file creation and a deletion of the process responsible for accepting the network connection. This EQL rule can be used to successfully identify BPFDoor bind shell connections within your environment:",
                        "This EQL rule can be used to successfully identify BPFDoor reverse shell connections having been established within your environment:"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x1fc7a245>",
                    "type": "UnknownWord",
                    "value": "accepted"
                },
                "references": {
                    "sentences": [
                        "The hunt rule we created here identifies a sequence of events beginning with a session id change, followed by a network connection accepted, in correlation with ptmx file creation and a deletion of the process responsible for accepting the network connection. This EQL rule can be used to successfully identify BPFDoor bind shell connections within your environment:"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xfe2a79b5>",
                    "type": "UnknownWord",
                    "value": "correlation"
                },
                "references": {
                    "sentences": [
                        "The hunt rule we created here identifies a sequence of events beginning with a session id change, followed by a network connection accepted, in correlation with ptmx file creation and a deletion of the process responsible for accepting the network connection. This EQL rule can be used to successfully identify BPFDoor bind shell connections within your environment:"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x993e02bc>",
                    "type": "UnknownWord",
                    "value": "ptmx"
                },
                "references": {
                    "sentences": [
                        "The hunt rule we created here identifies a sequence of events beginning with a session id change, followed by a network connection accepted, in correlation with ptmx file creation and a deletion of the process responsible for accepting the network connection. This EQL rule can be used to successfully identify BPFDoor bind shell connections within your environment:"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x7d5399c>",
                    "type": "UnknownWord",
                    "value": "listens"
                },
                "references": {
                    "sentences": [
                        "The scanner sends a packet to a defined IP address using the default target port (68/UDP)and default interface. It listens to return traffic on port 53/UDP."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x87937905>",
                    "type": "UnknownWord",
                    "value": "realized"
                },
                "references": {
                    "sentences": [
                        "Quickly after beginning our research into this malware we realized we would also need to actively interact with BPFDoor in order to observe the full extent of the capabilities that it possesses and monitor what these capabilities would look like from a host and SIEM level."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xed6a8a70>",
                    "type": "UnknownWord",
                    "value": "scapy"
                },
                "references": {
                    "sentences": [
                        "In order to do this, we had to break down the BPF filters in the BPFDoor source code so we could craft packets for the different protocols. To do this, we used Scapy, a packet manipulation program, to ensure we could pass the filters for the purpose of activating the backdoor. Once we ensured we could pass the filters, Rhys Rustad-Elliott, an engineer at Elastic built a BPFDoor client that accepts a password, IP address, and port allowing you to connect to a BPFDoor sample and interact if you possess the samples hardcoded passwords."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xc091d516>",
                    "type": "UnknownWord",
                    "value": "possess"
                },
                "references": {
                    "sentences": [
                        "In order to do this, we had to break down the BPF filters in the BPFDoor source code so we could craft packets for the different protocols. To do this, we used Scapy, a packet manipulation program, to ensure we could pass the filters for the purpose of activating the backdoor. Once we ensured we could pass the filters, Rhys Rustad-Elliott, an engineer at Elastic built a BPFDoor client that accepts a password, IP address, and port allowing you to connect to a BPFDoor sample and interact if you possess the samples hardcoded passwords."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x23662f1d>",
                    "type": "UnknownWord",
                    "value": "supplied"
                },
                "references": {
                    "sentences": [
                        "Depending on the password or lack of password provided, BPFDoor will behave exactly the same way it would in the wild. You can invoke a reverse shell, establish a bind shell, or connect to it with no supplied password to receive a ping-back confirming its installation."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x1ef7b0b0>",
                    "type": "UnknownWord",
                    "value": "ping-back"
                },
                "references": {
                    "sentences": [
                        "Depending on the password or lack of password provided, BPFDoor will behave exactly the same way it would in the wild. You can invoke a reverse shell, establish a bind shell, or connect to it with no supplied password to receive a ping-back confirming its installation."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xef7f3f0d>",
                    "type": "UnknownWord",
                    "value": "discretion"
                },
                "references": {
                    "sentences": [
                        "Researchers looking to use BPFDoor can for access to the BPFDoor client POC. Please note that these tools will be shared at our discretion with those in the trusted security community looking to improve the detection of this vulnerability."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x74171c5f>",
                    "type": "UnknownWord",
                    "value": "sub-techniques"
                },
                "references": {
                    "sentences": [
                        "The following MITRE ATT&CK Tactic, Techniques, and Sub-techniques have been observed with the BPFDoor malware.",
                        "Techniques (and sub-techniques) represent how an adversary achieves a tactical goal by performing an action."
                    ],
                    "titles": [
                        "Techniques (sub-techniques)"
                    ]
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x1d323fed>",
                    "type": "UnknownWord",
                    "value": "sub-technique"
                },
                "references": {
                    "sentences": [
                        "Tactics represent the why of an ATT&CK technique or sub-technique. It is the adversarys tactical goal: the reason for performing an action."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xedc7db2c>",
                    "type": "UnknownWord",
                    "value": "unix"
                },
                "references": {
                    "sentences": [
                        "Native API<crlf>External Remote Services<crlf>Hide Artifacts<crlf>Indicator Removal on Host<crlf>Non-Application Layer Protocol<crlf>Command and Scripting Interpreter: Unix Shell<crlf>Abuse Elevation Control Mechanism: Setuid and Setgid"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x42243778>",
                    "type": "UnknownWord",
                    "value": "setuid"
                },
                "references": {
                    "sentences": [
                        "Native API<crlf>External Remote Services<crlf>Hide Artifacts<crlf>Indicator Removal on Host<crlf>Non-Application Layer Protocol<crlf>Command and Scripting Interpreter: Unix Shell<crlf>Abuse Elevation Control Mechanism: Setuid and Setgid"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x93a5ed38>",
                    "type": "UnknownWord",
                    "value": "setgid"
                },
                "references": {
                    "sentences": [
                        "Native API<crlf>External Remote Services<crlf>Hide Artifacts<crlf>Indicator Removal on Host<crlf>Non-Application Layer Protocol<crlf>Command and Scripting Interpreter: Unix Shell<crlf>Abuse Elevation Control Mechanism: Setuid and Setgid"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xa7cbd0b4>",
                    "type": "UnknownWord",
                    "value": "articulate"
                },
                "references": {
                    "sentences": [
                        "To clearly articulate the details of this malware, weve created two diagrams that outline the specific pseudocode for BPFDoor based on the source code uploaded to VT and found on Pastebin. While this contains a lot of detail, it is simple to understand if researchers choose to further this research."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x9c473be6>",
                    "type": "UnknownWord",
                    "value": "maturity"
                },
                "references": {
                    "sentences": [
                        "While threat groups continue to increase in maturity, we expect this kind of mature, well designed and hidden threat will continue to be found within Linux environments. These kinds of findings reiterate the importance of comprehensive security controls across the entirety of a fleet, rather than simply focusing on user endpoints."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x6eac5507>",
                    "type": "UnknownWord",
                    "value": "reiterate"
                },
                "references": {
                    "sentences": [
                        "While threat groups continue to increase in maturity, we expect this kind of mature, well designed and hidden threat will continue to be found within Linux environments. These kinds of findings reiterate the importance of comprehensive security controls across the entirety of a fleet, rather than simply focusing on user endpoints."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xb2f8a8c7>",
                    "type": "UnknownWord",
                    "value": "entirety"
                },
                "references": {
                    "sentences": [
                        "While threat groups continue to increase in maturity, we expect this kind of mature, well designed and hidden threat will continue to be found within Linux environments. These kinds of findings reiterate the importance of comprehensive security controls across the entirety of a fleet, rather than simply focusing on user endpoints."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xe8271a3b>",
                    "type": "UnknownWord",
                    "value": "near-on"
                },
                "references": {
                    "sentences": [
                        "BPFDoor demonstrates a perfect example of how important monitoring workloads within Linux environments can be. Payloads such as this are near-on impossible to observe and detect without sufficient controls, and should be considered a moving trend within the general adversarial landscape."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x7177853b>",
                    "type": "UnknownWord",
                    "value": "observables"
                },
                "references": {
                    "sentences": [],
                    "titles": [
                        "Observables"
                    ]
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x7a7c2dc7>",
                    "type": "UnknownWord",
                    "value": "haldrund"
                },
                "references": {
                    "sentences": [],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x177eb342>",
                    "type": "UnknownWord",
                    "value": "kdevrund"
                },
                "references": {
                    "sentences": [],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x3f09b6ba>",
                    "type": "UnknownWord",
                    "value": "xinetd"
                },
                "references": {
                    "sentences": [],
                    "titles": []
                }
            }
        ]
    },
    "other_links": [],
    "info": {
        "potential_threats": {
            "<UNKNOWNWORD_0x3a64adfc>": {
                "token": {
                    "id": "<UNKNOWNWORD_0x3a64adfc>",
                    "type": "UnknownWord",
                    "value": "rustad-elliott"
                },
                "references": {
                    "sentences": [
                        "Colson Wilhoit @DefSecSentinel<crlf>|<crlf><crlf>Alex Bell @tabell<crlf>|<crlf><crlf>Rhys Rustad-Elliott @rhysre<crlf>|<crlf><crlf>Jake King @jtnk<crlf>2022-05-17",
                        "In order to do this, we had to break down the BPF filters in the BPFDoor source code so we could craft packets for the different protocols. To do this, we used Scapy, a packet manipulation program, to ensure we could pass the filters for the purpose of activating the backdoor. Once we ensured we could pass the filters, Rhys Rustad-Elliott, an engineer at Elastic built a BPFDoor client that accepts a password, IP address, and port allowing you to connect to a BPFDoor sample and interact if you possess the samples hardcoded passwords."
                    ],
                    "titles": []
                }
            },
            "<UNKNOWNWORD_0xad74d484>": {
                "token": {
                    "id": "<UNKNOWNWORD_0xad74d484>",
                    "type": "UnknownWord",
                    "value": "menshen"
                },
                "references": {
                    "sentences": [
                        "PWCs findings indicated that Red Menshen had focused their efforts on targeting specific Telecommunications, Government, Logistics, and Education groups across the Middle East and Asia. This activity has been across a Monday-to-Friday working period, between 01:00 UTC and 10:00 UTC, indicating that the operators of the malware were consistent in their attacks, and operation during a working week.",
                        "BPFDoor is a backdoor payload specifically crafted for Linux. Its purpose is for long-term persistence in order to gain re-entry into a previously or actively compromised target environment. It notably utilizes BPF along with a number of other techniques to achieve this goal, taking great care to be as efficient and stealthy as possible. PWC researchers discovered this very interesting piece of malware in 2021. PWC attributes this back door to a specific group from China, Red Menshen, and detailed a number of interesting components in a high-level threat research post released last week.",
                        "Red Menshen has leveraged a network of VPS servers to act as a controller network and access these systems via compromised routers based out of Taiwan. The routers act as a VPN network for the adversarial groups via a sequence of specifically crafted packets sent to an infected host. Researchers have indicated that this payload is pervasive and that compromised hosts have been observed across the US, South Korea, Hong Kong, Turkey, India, Vietnam, and Myanmar."
                    ],
                    "titles": []
                }
            },
            "<UNKNOWNWORD_0xbd14bb>": {
                "token": {
                    "id": "<UNKNOWNWORD_0xbd14bb>",
                    "type": "UnknownWord",
                    "value": "monday-to-friday"
                },
                "references": {
                    "sentences": [
                        "PWCs findings indicated that Red Menshen had focused their efforts on targeting specific Telecommunications, Government, Logistics, and Education groups across the Middle East and Asia. This activity has been across a Monday-to-Friday working period, between 01:00 UTC and 10:00 UTC, indicating that the operators of the malware were consistent in their attacks, and operation during a working week."
                    ],
                    "titles": []
                }
            },
            "<UNKNOWNWORD_0x4670b763>": {
                "token": {
                    "id": "<UNKNOWNWORD_0x4670b763>",
                    "type": "UnknownWord",
                    "value": "linux-based"
                },
                "references": {
                    "sentences": [
                        "BPF-based malware payloads, while ultimately uncommon, serve a specific purpose on Linux-based hosts where stealthy and performant operations are critical for success. Tools such as BPFDoor are not alone. Recently, Pangu Labs discovered a payload by the name of Bvp47, a sensor that used stealthy BPF-based telemetry to acquire detailed information about the workloads running on infected hosts."
                    ],
                    "titles": []
                }
            },
            "<UNKNOWNWORD_0xf4657431>": {
                "token": {
                    "id": "<UNKNOWNWORD_0xf4657431>",
                    "type": "UnknownWord",
                    "value": "pangu"
                },
                "references": {
                    "sentences": [
                        "BPF-based malware payloads, while ultimately uncommon, serve a specific purpose on Linux-based hosts where stealthy and performant operations are critical for success. Tools such as BPFDoor are not alone. Recently, Pangu Labs discovered a payload by the name of Bvp47, a sensor that used stealthy BPF-based telemetry to acquire detailed information about the workloads running on infected hosts."
                    ],
                    "titles": []
                }
            },
            "<UNKNOWNWORD_0x1d985bc4>": {
                "token": {
                    "id": "<UNKNOWNWORD_0x1d985bc4>",
                    "type": "UnknownWord",
                    "value": "berkeley"
                },
                "references": {
                    "sentences": [
                        "As stated in step 9 (above), BPF or Berkeley Packet Filters is a technology from the early 90s that allows a user-space program to attach a network filter onto any socket and allow or disallow certain types of data to come through the socket. These filters are made up of bytecode that runs on an abstract virtual machine in the Linux kernel. The BPF virtual machine has functionality to inspect all parts of incoming packets and make an allow/drop decision based on what it sees. . You can see in the image example below what this looks like within the BPFDoor source code:",
                        "eBPF (Extended Berkeley Packet Filters), a new evolution of BPF used increasingly today, is gaining popularity amongst system operators given its efficiency and proven, powerful capabilities leveraged often for system performance, network, and security telemetry collection. Adversaries are taking note and it is our assumption that malware targeting cloud systems will increasingly leverage these methods in the future."
                    ],
                    "titles": []
                }
            },
            "<UNKNOWNWORD_0x3ab70fb8>": {
                "token": {
                    "id": "<UNKNOWNWORD_0x3ab70fb8>",
                    "type": "UnknownWord",
                    "value": "kibana"
                },
                "references": {
                    "sentences": [
                        "Elastic Alert in Kibana - Abnormal Process ID or Lock File Created",
                        "Elastic Alert in Kibana - Suspicious Network Connection Accept by Root",
                        "This was verified by detonating the binary in a VM while our Elastic Agent was installed and observing the sequence of events. You can see an image of this detection on the Kibana Security Alerts page below. This rule is publicly available as an Elastic SIEM detection rule - Binary Executed from Shared Memory Directory:",
                        "Elastic Alert in Kibana - Suspicious Network Connection Attempt by Root",
                        "Elastic Alert in Kibana - Binary Executed from Shared Memory Directory"
                    ],
                    "titles": []
                }
            },
            "<UNKNOWNWORD_0x48f95f56>": {
                "token": {
                    "id": "<UNKNOWNWORD_0x48f95f56>",
                    "type": "UnknownWord",
                    "value": "osquery"
                },
                "references": {
                    "sentences": [
                        "The second opportunity we noticed, for detection, was a specific PID file being created in /var/run. We noticed the dropped PID file was completely empty while doing a quick query via the Osquery integration to the /var/run directory. While this is not inherently malicious, it is unusual for the file size of a PID to be 0 or above 10 bytes and thus we created an additional rule centered around detecting this unusual behavior."
                    ],
                    "titles": []
                }
            },
            "<UNKNOWNWORD_0xed6a8a70>": {
                "token": {
                    "id": "<UNKNOWNWORD_0xed6a8a70>",
                    "type": "UnknownWord",
                    "value": "scapy"
                },
                "references": {
                    "sentences": [
                        "In order to do this, we had to break down the BPF filters in the BPFDoor source code so we could craft packets for the different protocols. To do this, we used Scapy, a packet manipulation program, to ensure we could pass the filters for the purpose of activating the backdoor. Once we ensured we could pass the filters, Rhys Rustad-Elliott, an engineer at Elastic built a BPFDoor client that accepts a password, IP address, and port allowing you to connect to a BPFDoor sample and interact if you possess the samples hardcoded passwords."
                    ],
                    "titles": []
                }
            },
            "<UNKNOWNWORD_0x74171c5f>": {
                "token": {
                    "id": "<UNKNOWNWORD_0x74171c5f>",
                    "type": "UnknownWord",
                    "value": "sub-techniques"
                },
                "references": {
                    "sentences": [
                        "The following MITRE ATT&CK Tactic, Techniques, and Sub-techniques have been observed with the BPFDoor malware.",
                        "Techniques (and sub-techniques) represent how an adversary achieves a tactical goal by performing an action."
                    ],
                    "titles": [
                        "Techniques (sub-techniques)"
                    ]
                }
            },
            "<UNKNOWNWORD_0x42243778>": {
                "token": {
                    "id": "<UNKNOWNWORD_0x42243778>",
                    "type": "UnknownWord",
                    "value": "setuid"
                },
                "references": {
                    "sentences": [
                        "Native API<crlf>External Remote Services<crlf>Hide Artifacts<crlf>Indicator Removal on Host<crlf>Non-Application Layer Protocol<crlf>Command and Scripting Interpreter: Unix Shell<crlf>Abuse Elevation Control Mechanism: Setuid and Setgid"
                    ],
                    "titles": []
                }
            },
            "<UNKNOWNWORD_0x93a5ed38>": {
                "token": {
                    "id": "<UNKNOWNWORD_0x93a5ed38>",
                    "type": "UnknownWord",
                    "value": "setgid"
                },
                "references": {
                    "sentences": [
                        "Native API<crlf>External Remote Services<crlf>Hide Artifacts<crlf>Indicator Removal on Host<crlf>Non-Application Layer Protocol<crlf>Command and Scripting Interpreter: Unix Shell<crlf>Abuse Elevation Control Mechanism: Setuid and Setgid"
                    ],
                    "titles": []
                }
            }
        },
        "sigma": false,
        "yara": true
    },
    "keywords": {
        "classified": [],
        "dubbed": [
            "The forked process continues to run<crlf>Alters the forked processes creation and modification time values, also known as timestomping<crlf>Creates a new process environment for itself and removes the old one setting (spoofing) a new process name"
        ],
        "associated": [],
        "targets": [],
        "attributed": [
            "PWC attributes this back door to a specific group from China, Red Menshen, and detailed a number of interesting components in a high-level threat research post released last week"
        ]
    },
    "resources": {
        "links": {
            "github": [
                "https://github.com/DefSecSentinel",
                "https://github.com/tabell",
                "https://github.com/rhysre",
                "https://github.com/jtnk",
                "https://github.com/elastic/detection-rules/blob/main/rules/linux/execution_process_started_in_shared_memory_directory.toml",
                "https://github.com/elastic/detection-rules/blob/main/rules/linux/execution_abnormal_process_id_file_created.toml",
                "https://github.com/elastic/detection-rules/blob/main/rules/linux/execution_abnormal_process_id_file_created.toml",
                "https://github.com/elastic/detection-rules/blob/main/rules/linux/execution_process_started_in_shared_memory_directory.toml"
            ],
            "pastebin": [],
            "text_files": [
                "https://www.pwc.com/gx/en/issues/cybersecurity/cyber-threat-intelligence/cyber-year-in-retrospect/yir-cyber-threats-report-download.pdf",
                "../media/bpfdoor_pseudocode.pdf"
            ],
            "other": [
                "https://doublepulsar.com/bpfdoor-an-active-chinese-global-surveillance-tool-54b078f1a896",
                "https://www.pwc.com/gx/en/issues/cybersecurity/cyber-threat-intelligence/cyber-year-in-retrospect/yir-cyber-threats-report-download.pdf",
                "../../../../../tools/bpfdoor-scanner/",
                "../../../../../tools/bpfdoor-config-extractor/",
                "https://doublepulsar.com/bpfdoor-an-active-chinese-global-surveillance-tool-54b078f1a896",
                "https://doublepulsar.com/bpfdoor-an-active-chinese-global-surveillance-tool-54b078f1a896",
                "https://www.pangulab.cn/en/post/the_bvp47_a_top-tier_backdoor_of_us_nsa_equation_group/",
                "https://ebpf.io/",
                "https://attack.mitre.org/techniques/T1070/006/",
                "https://www.kernel.org/doc/html/v5.12/networking/filter.html",
                "https://www.virustotal.com/gui/file/07ecb1f2d9ffbd20a46cd36cd06b022db3cc8e45b1ecab62cd11f9ca7a26ab6d/detection",
                "https://www.kernel.org/doc/html/v5.12/networking/filter.html",
                "https://www.virustotal.com/gui/file/599ae527f10ddb4625687748b7d3734ee51673b664f2e5d0346e64f85e185683/detection",
                "https://www.virustotal.com/gui/file/8b9db0bc9152628bdacc32dab01590211bee9f27d58e0f66f6a1e26aea7552a6/detection",
                "https://pastebin.com/raw/kmmJuuQP",
                "https://www.virustotal.com/gui/file/07ecb1f2d9ffbd20a46cd36cd06b022db3cc8e45b1ecab62cd11f9ca7a26ab6d/detection",
                "https://docs.elastic.co/en/integrations/osquery_manager",
                "../../../../../tools/bpfdoor-scanner/",
                "../../../../../tools/bpfdoor-config-extractor/",
                "https://scapy.net/",
                "https://attack.mitre.org/tactics/TA0002/",
                "https://attack.mitre.org/techniques/T1106/",
                "https://attack.mitre.org/techniques/T1133/",
                "https://attack.mitre.org/techniques/T1564/",
                "https://attack.mitre.org/techniques/T1070/",
                "https://attack.mitre.org/techniques/T1095/",
                "https://attack.mitre.org/techniques/T1059/004",
                "https://attack.mitre.org/techniques/T1548/001/",
                "../media/bpfdoor_pseudocode.pdf"
            ]
        },
        "images": [
            "https://avatars.githubusercontent.com/u/48036388?v=4",
            "https://avatars.githubusercontent.com/u/5386353?v=4",
            "https://avatars.githubusercontent.com/u/91164188?v=4",
            "https://avatars.githubusercontent.com/u/18609142?v=4",
            "../media/image12.png",
            "../media/image1.png",
            "../media/image4.png",
            "../media/image7.png",
            "../media/image3.png",
            "../media/image14.png",
            "../media/image6.png",
            "../media/image5.png",
            "../media/image10.png",
            "../media/image8.png",
            "../media/image11.png",
            "../media/image2.png",
            "../media/image15.png",
            "../media/image9.png",
            "../media/image17.png",
            "../media/image16.png",
            "../media/image13.png"
        ]
    }
}