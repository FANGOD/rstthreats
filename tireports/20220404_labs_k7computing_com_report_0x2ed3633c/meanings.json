{
    "title": "The Discord Token Grab",
    "url": "https://labs.k7computing.com/index.php/the-discord-token-grab",
    "threats": {
        "Threat": [
            {
                "token": {
                    "id": "<THREAT_0xd4bd8fb5>",
                    "type": "Threat",
                    "value": "kazy"
                },
                "references": {
                    "sentences": [
                        "Previous Post Dissecting the Kazy Crypter<crlf>Next Post"
                    ],
                    "titles": [
                        "Like what you're reading? Subscribe to our top stories."
                    ]
                }
            }
        ]
    },
    "ttps": {},
    "meanings": {
        "Category": [
            {
                "token": {
                    "id": "<CATEGORY_0xf1a480bb>",
                    "type": "Category",
                    "value": "malware"
                },
                "references": {
                    "sentences": [
                        "When the original malware sample is executed, it verifies and downloads the required python modules through pip if not found in the users PC.",
                        "The JSON payload structure in this malware is as follows",
                        "The following information is collected by the malware by sending a request to the URL with the stolen token in the Authorization Header.",
                        "The malware also has the capability to steal the browser cookies and send them to C2.",
                        "As the first step of analysis , we used Detect It Easy to identify the compiler and its Microsoft Visual C++. Further investigation showed that the malwares source python script is compiled using PyInstaller to create a Microsoft Visual C payload.",
                        "Recently we came across a Twitter feed that described a malware sample coded in Python and fairly new to have many detections (at the time of writing this blog) which attracted our interest in diving deeper into the sample.",
                        "The compiled sample has the actual malicious python script 333.py in the overlay.",
                        "The malware steals the token from the below mentioned browsers and apps",
                        "The process then continues to run in the background and maintains all the tokens sent to the C2 in its local memory. If a user changes their Discord credentials, a new token would get generated and this would trigger the malware again to send the details to its C2 server.",
                        "Figure 6: JSON payload sent during the start of malware activity",
                        "Using the stolen token, the malware sends an API request to the Discord server /billing/payment-sources route, to check if the user has any saved payment sources like credit/debit cards."
                    ],
                    "titles": [
                        "Behavioral Analysis",
                        "The Discord Token Grab",
                        "Lets now look at the analysis"
                    ]
                }
            },
            {
                "token": {
                    "id": "<CATEGORY_0x32239007>",
                    "type": "Category",
                    "value": "stealer"
                },
                "references": {
                    "sentences": [
                        "Stealer Trojan"
                    ],
                    "titles": [
                        "The Discord Token Grab"
                    ]
                }
            },
            {
                "token": {
                    "id": "<CATEGORY_0x151cee5c>",
                    "type": "Category",
                    "value": "trojan"
                },
                "references": {
                    "sentences": [
                        "Stealer Trojan",
                        "Detection Name: Trojan ( 0001140e1 )"
                    ],
                    "titles": [
                        "The Discord Token Grab",
                        "Indicators of Compromise (IOCs)"
                    ]
                }
            },
            {
                "token": {
                    "id": "<CATEGORY_0xc8ecca29>",
                    "type": "Category",
                    "value": "c2"
                },
                "references": {
                    "sentences": [
                        "The malware also has the capability to steal the browser cookies and send them to C2.",
                        "Figure 11: Stolen Information sent to C2 as JSON payload",
                        "The process then continues to run in the background and maintains all the tokens sent to the C2 in its local memory. If a user changes their Discord credentials, a new token would get generated and this would trigger the malware again to send the details to its C2 server.",
                        "C2 (Discord Webhook URL): hxxps://discord[.]com/api/webhooks/954910299654328380/SKmJo86TbjSj905A8TODrBL2vC5uwsmlXWNzGsphdrRfvC_aAwwTfl02Pcrv2LW2oC8G"
                    ],
                    "titles": [
                        "Behavioral Analysis",
                        "Indicators of Compromise (IOCs)"
                    ]
                },
                "links": [
                    {
                        "src": {
                            "id": "<URL_0xc03c7c32>",
                            "type": "Url",
                            "value": "https://discord.com/api/webhooks/954910299654328380/skmjo86tbjsj905a8todrbl2vc5uwsmlxwnzgsphdrrfvc_aawwtfl02pcrv2lw2oc8g"
                        },
                        "relation": "has_category",
                        "dst": {
                            "id": "<CATEGORY_0xc8ecca29>",
                            "type": "Category",
                            "value": "c2"
                        }
                    }
                ]
            }
        ],
        "Industry": [
            {
                "token": {
                    "id": "<INDUSTRY_0xf74966f7>",
                    "type": "Industry",
                    "value": "financial"
                },
                "references": {
                    "sentences": [
                        "Using the stolen token, the malware sends an API request to the Discord server /billing/payment-sources route, to check if the user has any saved payment sources like credit/debit cards.",
                        "Figure 9: Checks if the user has any payment info saved"
                    ],
                    "titles": [
                        "Behavioral Analysis"
                    ]
                }
            }
        ]
    },
    "iocs": {
        "File": [
            {
                "token": {
                    "id": "<FILE_0xc6348f76>",
                    "type": "File",
                    "value": "333.pyc"
                },
                "references": {
                    "sentences": [
                        "For ease of understanding, images shown below are from the extracted 333.pyc file.",
                        "We used pyinstxtractor to extract the .pyc files (including 333.pyc) from the zlib archive (overlay)."
                    ],
                    "titles": [
                        "Lets now look at the analysis",
                        "Behavioral Analysis"
                    ]
                },
                "links": [
                    {
                        "src": {
                            "id": "<FILE_0xc6348f76>",
                            "type": "File",
                            "value": "333.pyc"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0x6d67943e>",
                            "type": "UnknownWord",
                            "value": "pyc"
                        }
                    },
                    {
                        "src": {
                            "id": "<FILE_0xc6348f76>",
                            "type": "File",
                            "value": "333.pyc"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0x1ecab03b>",
                            "type": "UnknownWord",
                            "value": "zlib"
                        }
                    },
                    {
                        "src": {
                            "id": "<FILE_0xc6348f76>",
                            "type": "File",
                            "value": "333.pyc"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0xa6e59776>",
                            "type": "UnknownWord",
                            "value": "ease"
                        }
                    },
                    {
                        "src": {
                            "id": "<FILE_0xc6348f76>",
                            "type": "File",
                            "value": "333.pyc"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0x78e2492f>",
                            "type": "UnknownWord",
                            "value": "pyinstxtractor"
                        }
                    }
                ]
            }
        ],
        "Url": [
            {
                "token": {
                    "id": "<URL_0xc03c7c32>",
                    "type": "Url",
                    "value": "https://discord.com/api/webhooks/954910299654328380/skmjo86tbjsj905a8todrbl2vc5uwsmlxwnzgsphdrrfvc_aawwtfl02pcrv2lw2oc8g"
                },
                "references": {
                    "sentences": [
                        "After killing the identified network monitoring application, it sends a POST request with the following JSON containing ready to log message to the Discord webhook url hxxps[:]//discord[.]com/api/webhooks/954910299654328380/SKmJo86TbjSj905A8TODrBL2vC5uwsmlXWNzGsphdrRfvC_aAwwTfl02Pcrv2LW2oC8G",
                        "C2 (Discord Webhook URL): hxxps://discord[.]com/api/webhooks/954910299654328380/SKmJo86TbjSj905A8TODrBL2vC5uwsmlXWNzGsphdrRfvC_aAwwTfl02Pcrv2LW2oC8G"
                    ],
                    "titles": [
                        "Behavioral Analysis",
                        "Indicators of Compromise (IOCs)"
                    ]
                },
                "links": [
                    {
                        "src": {
                            "id": "<URL_0xc03c7c32>",
                            "type": "Url",
                            "value": "https://discord.com/api/webhooks/954910299654328380/skmjo86tbjsj905a8todrbl2vc5uwsmlxwnzgsphdrrfvc_aawwtfl02pcrv2lw2oc8g"
                        },
                        "relation": "c2_from_net",
                        "dst": {
                            "id": "<URL_0xc03c7c32>",
                            "type": "Url",
                            "value": "https://discord.com/api/webhooks/954910299654328380/skmjo86tbjsj905a8todrbl2vc5uwsmlxwnzgsphdrrfvc_aawwtfl02pcrv2lw2oc8g"
                        }
                    },
                    {
                        "src": {
                            "id": "<URL_0xc03c7c32>",
                            "type": "Url",
                            "value": "https://discord.com/api/webhooks/954910299654328380/skmjo86tbjsj905a8todrbl2vc5uwsmlxwnzgsphdrrfvc_aawwtfl02pcrv2lw2oc8g"
                        },
                        "relation": "has_category",
                        "dst": {
                            "id": "<CATEGORY_0xc8ecca29>",
                            "type": "Category",
                            "value": "c2"
                        }
                    },
                    {
                        "src": {
                            "id": "<URL_0xc03c7c32>",
                            "type": "Url",
                            "value": "https://discord.com/api/webhooks/954910299654328380/skmjo86tbjsj905a8todrbl2vc5uwsmlxwnzgsphdrrfvc_aawwtfl02pcrv2lw2oc8g"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0xe92ad681>",
                            "type": "UnknownWord",
                            "value": "killing"
                        }
                    }
                ]
            }
        ],
        "Path": [
            {
                "token": {
                    "id": "<PATH_0x3bec7d4e>",
                    "type": "Path",
                    "value": "c:\\users\\*******\\appdata\\local\\google\\chrome\\user data\\default\\local storage\\leveldb"
                },
                "references": {
                    "sentences": [
                        "For example, the full path to the leveldb directory in Chrome would look like C:\\Users\\*******\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Local Storage\\leveldb\\"
                    ],
                    "titles": [
                        "Behavioral Analysis"
                    ]
                },
                "links": [
                    {
                        "src": {
                            "id": "<PATH_0x3bec7d4e>",
                            "type": "Path",
                            "value": "c:\\users\\*******\\appdata\\local\\google\\chrome\\user data\\default\\local storage\\leveldb"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0x642d8f7>",
                            "type": "UnknownWord",
                            "value": "<PATH_0x3bec7d4e>"
                        }
                    }
                ]
            }
        ],
        "Hash": [
            {
                "token": {
                    "id": "<MD5_0xe066eddd>",
                    "type": "Hash",
                    "hash_type": "MD5",
                    "value": "cba0e7debb118110852f7f2b1f0c9c2a"
                },
                "references": {
                    "sentences": [
                        "Hash: CBA0E7DEBB118110852F7F2B1F0C9C2A"
                    ],
                    "titles": [
                        "Indicators of Compromise (IOCs)"
                    ]
                }
            }
        ]
    },
    "unknownwords": {
        "UnknownWord": [
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xf78c6bfc>",
                    "type": "UnknownWord",
                    "value": "rahul"
                },
                "references": {
                    "sentences": [
                        "By Rahul RApril 4, 2022"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xe2c3273b>",
                    "type": "UnknownWord",
                    "value": "rapril"
                },
                "references": {
                    "sentences": [
                        "By Rahul RApril 4, 2022"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xd8424396>",
                    "type": "UnknownWord",
                    "value": "coded"
                },
                "references": {
                    "sentences": [
                        "Recently we came across a Twitter feed that described a malware sample coded in Python and fairly new to have many detections (at the time of writing this blog) which attracted our interest in diving deeper into the sample."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x2102f464>",
                    "type": "UnknownWord",
                    "value": "grabbing"
                },
                "references": {
                    "sentences": [
                        "Upon analyzing the sample we found some interesting technique that describes how threat actors steal your credentials/any personal information stored in Discord; a popular social networking app, by grabbing Discords authtokens."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xb41908fc>",
                    "type": "UnknownWord",
                    "value": "authtokens"
                },
                "references": {
                    "sentences": [
                        "Upon analyzing the sample we found some interesting technique that describes how threat actors steal your credentials/any personal information stored in Discord; a popular social networking app, by grabbing Discords authtokens."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xaea70920>",
                    "type": "UnknownWord",
                    "value": "compiler"
                },
                "references": {
                    "sentences": [
                        "As the first step of analysis , we used Detect It Easy to identify the compiler and its Microsoft Visual C++. Further investigation showed that the malwares source python script is compiled using PyInstaller to create a Microsoft Visual C payload.",
                        "Figure 1: Compiler details"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xd0d24dc2>",
                    "type": "UnknownWord",
                    "value": "visual"
                },
                "references": {
                    "sentences": [
                        "As the first step of analysis , we used Detect It Easy to identify the compiler and its Microsoft Visual C++. Further investigation showed that the malwares source python script is compiled using PyInstaller to create a Microsoft Visual C payload."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x4ecce5ca>",
                    "type": "UnknownWord",
                    "value": "pyinstaller"
                },
                "references": {
                    "sentences": [
                        "As the first step of analysis , we used Detect It Easy to identify the compiler and its Microsoft Visual C++. Further investigation showed that the malwares source python script is compiled using PyInstaller to create a Microsoft Visual C payload."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x78e2492f>",
                    "type": "UnknownWord",
                    "value": "pyinstxtractor"
                },
                "references": {
                    "sentences": [
                        "We used pyinstxtractor to extract the .pyc files (including 333.pyc) from the zlib archive (overlay)."
                    ],
                    "titles": []
                },
                "links": [
                    {
                        "src": {
                            "id": "<FILE_0xc6348f76>",
                            "type": "File",
                            "value": "333.pyc"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0x78e2492f>",
                            "type": "UnknownWord",
                            "value": "pyinstxtractor"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x6d67943e>",
                    "type": "UnknownWord",
                    "value": "pyc"
                },
                "references": {
                    "sentences": [
                        "We used pyinstxtractor to extract the .pyc files (including 333.pyc) from the zlib archive (overlay)."
                    ],
                    "titles": []
                },
                "links": [
                    {
                        "src": {
                            "id": "<FILE_0xc6348f76>",
                            "type": "File",
                            "value": "333.pyc"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0x6d67943e>",
                            "type": "UnknownWord",
                            "value": "pyc"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x1ecab03b>",
                    "type": "UnknownWord",
                    "value": "zlib"
                },
                "references": {
                    "sentences": [
                        "We used pyinstxtractor to extract the .pyc files (including 333.pyc) from the zlib archive (overlay)."
                    ],
                    "titles": []
                },
                "links": [
                    {
                        "src": {
                            "id": "<FILE_0xc6348f76>",
                            "type": "File",
                            "value": "333.pyc"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0x1ecab03b>",
                            "type": "UnknownWord",
                            "value": "zlib"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x41cfb030>",
                    "type": "UnknownWord",
                    "value": "imported"
                },
                "references": {
                    "sentences": [
                        "Figure 4: Imported Modules"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xa6e59776>",
                    "type": "UnknownWord",
                    "value": "ease"
                },
                "references": {
                    "sentences": [
                        "For ease of understanding, images shown below are from the extracted 333.pyc file."
                    ],
                    "titles": []
                },
                "links": [
                    {
                        "src": {
                            "id": "<FILE_0xc6348f76>",
                            "type": "File",
                            "value": "333.pyc"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0xa6e59776>",
                            "type": "UnknownWord",
                            "value": "ease"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xab655e21>",
                    "type": "UnknownWord",
                    "value": "procedure"
                },
                "references": {
                    "sentences": [
                        "Figure 5: Procedure for killing monitoring apps"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xe92ad681>",
                    "type": "UnknownWord",
                    "value": "killing"
                },
                "references": {
                    "sentences": [
                        "After killing the identified network monitoring application, it sends a POST request with the following JSON containing ready to log message to the Discord webhook url hxxps[:]//discord[.]com/api/webhooks/954910299654328380/SKmJo86TbjSj905A8TODrBL2vC5uwsmlXWNzGsphdrRfvC_aAwwTfl02Pcrv2LW2oC8G",
                        "Figure 5: Procedure for killing monitoring apps"
                    ],
                    "titles": []
                },
                "links": [
                    {
                        "src": {
                            "id": "<URL_0xc03c7c32>",
                            "type": "Url",
                            "value": "https://discord.com/api/webhooks/954910299654328380/skmjo86tbjsj905a8todrbl2vc5uwsmlxwnzgsphdrrfvc_aawwtfl02pcrv2lw2oc8g"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0xe92ad681>",
                            "type": "UnknownWord",
                            "value": "killing"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x3e010e29>",
                    "type": "UnknownWord",
                    "value": "opera browser"
                },
                "references": {
                    "sentences": [
                        "Discord app<crlf>Google Chrome<crlf>Opera Browser<crlf>Brave<crlf>Yandex"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x6db2fa5b>",
                    "type": "UnknownWord",
                    "value": "brave"
                },
                "references": {
                    "sentences": [
                        "Discord app<crlf>Google Chrome<crlf>Opera Browser<crlf>Brave<crlf>Yandex"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x642d8f7>",
                    "type": "UnknownWord",
                    "value": "<PATH_0x3bec7d4e>"
                },
                "references": {
                    "sentences": [
                        "For example, the full path to the leveldb directory in Chrome would look like C:\\Users\\*******\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Local Storage\\leveldb\\"
                    ],
                    "titles": []
                },
                "links": [
                    {
                        "src": {
                            "id": "<PATH_0x3bec7d4e>",
                            "type": "Path",
                            "value": "c:\\users\\*******\\appdata\\local\\google\\chrome\\user data\\default\\local storage\\leveldb"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0x642d8f7>",
                            "type": "UnknownWord",
                            "value": "<PATH_0x3bec7d4e>"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x328f29d5>",
                    "type": "UnknownWord",
                    "value": "iterates"
                },
                "references": {
                    "sentences": [
                        "It then iterates through all the files inside the obtained directory and searches for files ending with .log or .ldb extension. Once a log file is obtained it reads the content into memory and searches for the Discord token/MFA pattern through the below regex r[\\w-]{24}\\.[\\w-]{6}\\.[\\w-]{27}, rmfa\\.[\\w-]{84}. Each token found is then appended to a Python List."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xcac06afa>",
                    "type": "UnknownWord",
                    "value": "ldb"
                },
                "references": {
                    "sentences": [
                        "It then iterates through all the files inside the obtained directory and searches for files ending with .log or .ldb extension. Once a log file is obtained it reads the content into memory and searches for the Discord token/MFA pattern through the below regex r[\\w-]{24}\\.[\\w-]{6}\\.[\\w-]{27}, rmfa\\.[\\w-]{84}. Each token found is then appended to a Python List."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x1535a890>",
                    "type": "UnknownWord",
                    "value": "mfa"
                },
                "references": {
                    "sentences": [
                        "It then iterates through all the files inside the obtained directory and searches for files ending with .log or .ldb extension. Once a log file is obtained it reads the content into memory and searches for the Discord token/MFA pattern through the below regex r[\\w-]{24}\\.[\\w-]{6}\\.[\\w-]{27}, rmfa\\.[\\w-]{84}. Each token found is then appended to a Python List."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x51e0c5fe>",
                    "type": "UnknownWord",
                    "value": "w-"
                },
                "references": {
                    "sentences": [
                        "It then iterates through all the files inside the obtained directory and searches for files ending with .log or .ldb extension. Once a log file is obtained it reads the content into memory and searches for the Discord token/MFA pattern through the below regex r[\\w-]{24}\\.[\\w-]{6}\\.[\\w-]{27}, rmfa\\.[\\w-]{84}. Each token found is then appended to a Python List."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x99e6aaa>",
                    "type": "UnknownWord",
                    "value": "rmfa"
                },
                "references": {
                    "sentences": [
                        "It then iterates through all the files inside the obtained directory and searches for files ending with .log or .ldb extension. Once a log file is obtained it reads the content into memory and searches for the Discord token/MFA pattern through the below regex r[\\w-]{24}\\.[\\w-]{6}\\.[\\w-]{27}, rmfa\\.[\\w-]{84}. Each token found is then appended to a Python List."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x878b92f5>",
                    "type": "UnknownWord",
                    "value": "billing"
                },
                "references": {
                    "sentences": [
                        "Using the stolen token, the malware sends an API request to the Discord server /billing/payment-sources route, to check if the user has any saved payment sources like credit/debit cards.",
                        "User data saved in Discord<crlf>Public IP address of the user obtained through a GET request to ipinfo.io/json<crlf>Username<crlf>Discord user_id<crlf>Avatar_id<crlf>Avatar_url<crlf>Email<crlf>Phone Number<crlf>MFA_Enabled status<crlf>Premium user status<crlf>Is Email verified<crlf>Billing Information"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xa6d88e03>",
                    "type": "UnknownWord",
                    "value": "route"
                },
                "references": {
                    "sentences": [
                        "Using the stolen token, the malware sends an API request to the Discord server /billing/payment-sources route, to check if the user has any saved payment sources like credit/debit cards."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x11aae870>",
                    "type": "UnknownWord",
                    "value": "debit"
                },
                "references": {
                    "sentences": [
                        "Using the stolen token, the malware sends an API request to the Discord server /billing/payment-sources route, to check if the user has any saved payment sources like credit/debit cards."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xe868f41d>",
                    "type": "UnknownWord",
                    "value": "authorization"
                },
                "references": {
                    "sentences": [
                        "The following information is collected by the malware by sending a request to the URL with the stolen token in the Authorization Header."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xb0c062e0>",
                    "type": "UnknownWord",
                    "value": "ipinfo"
                },
                "references": {
                    "sentences": [
                        "User data saved in Discord<crlf>Public IP address of the user obtained through a GET request to ipinfo.io/json<crlf>Username<crlf>Discord user_id<crlf>Avatar_id<crlf>Avatar_url<crlf>Email<crlf>Phone Number<crlf>MFA_Enabled status<crlf>Premium user status<crlf>Is Email verified<crlf>Billing Information"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xa04e02fb>",
                    "type": "UnknownWord",
                    "value": "user_id"
                },
                "references": {
                    "sentences": [
                        "User data saved in Discord<crlf>Public IP address of the user obtained through a GET request to ipinfo.io/json<crlf>Username<crlf>Discord user_id<crlf>Avatar_id<crlf>Avatar_url<crlf>Email<crlf>Phone Number<crlf>MFA_Enabled status<crlf>Premium user status<crlf>Is Email verified<crlf>Billing Information"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x2f00b60>",
                    "type": "UnknownWord",
                    "value": "avatar_id"
                },
                "references": {
                    "sentences": [
                        "User data saved in Discord<crlf>Public IP address of the user obtained through a GET request to ipinfo.io/json<crlf>Username<crlf>Discord user_id<crlf>Avatar_id<crlf>Avatar_url<crlf>Email<crlf>Phone Number<crlf>MFA_Enabled status<crlf>Premium user status<crlf>Is Email verified<crlf>Billing Information"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x2640a547>",
                    "type": "UnknownWord",
                    "value": "avatar_url"
                },
                "references": {
                    "sentences": [
                        "User data saved in Discord<crlf>Public IP address of the user obtained through a GET request to ipinfo.io/json<crlf>Username<crlf>Discord user_id<crlf>Avatar_id<crlf>Avatar_url<crlf>Email<crlf>Phone Number<crlf>MFA_Enabled status<crlf>Premium user status<crlf>Is Email verified<crlf>Billing Information"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xb8fcb6e3>",
                    "type": "UnknownWord",
                    "value": "mfa_enabled"
                },
                "references": {
                    "sentences": [
                        "User data saved in Discord<crlf>Public IP address of the user obtained through a GET request to ipinfo.io/json<crlf>Username<crlf>Discord user_id<crlf>Avatar_id<crlf>Avatar_url<crlf>Email<crlf>Phone Number<crlf>MFA_Enabled status<crlf>Premium user status<crlf>Is Email verified<crlf>Billing Information"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x846c75b8>",
                    "type": "UnknownWord",
                    "value": "0001140e1"
                },
                "references": {
                    "sentences": [
                        "Detection Name: Trojan ( 0001140e1 )"
                    ],
                    "titles": []
                }
            }
        ]
    },
    "other_links": [],
    "info": {
        "potential_threats": {},
        "sigma": false,
        "yara": false
    },
    "keywords": {
        "classified": [],
        "dubbed": [],
        "associated": [],
        "targets": [],
        "attributed": []
    },
    "resources": {
        "links": {
            "github": [
                "https://github.com/extremecoders-re/pyinstxtractor"
            ],
            "pastebin": [],
            "text_files": [],
            "other": [
                "https://labs.k7computing.com/index.php/category/social-networking-apps/",
                "https://labs.k7computing.com/index.php/category/stealer-trojan/",
                "https://labs.k7computing.com/index.php/dissecting-the-kazy-crypter/"
            ]
        },
        "images": [
            "https://labs.k7computing.com/wp-content/uploads/2022/04/Discord-Stealer.png",
            "https://labs.k7computing.com/wp-content/uploads/2022/04/Figure1.png",
            "https://labs.k7computing.com/wp-content/uploads/2022/04/Figure2.png",
            "https://labs.k7computing.com/wp-content/uploads/2022/04/Figure3.png",
            "https://labs.k7computing.com/wp-content/uploads/2022/04/Figure4.png",
            "https://labs.k7computing.com/wp-content/uploads/2022/04/Figure5.png",
            "https://labs.k7computing.com/wp-content/uploads/2022/04/Figure6.png",
            "https://labs.k7computing.com/wp-content/uploads/2022/04/Figure7.png",
            "https://labs.k7computing.com/wp-content/uploads/2022/04/Figure8.png",
            "https://labs.k7computing.com/wp-content/uploads/2022/04/Figure9.png",
            "https://labs.k7computing.com/wp-content/uploads/2022/04/Figure10.png",
            "https://labs.k7computing.com/wp-content/uploads/2022/04/Figure11.png",
            "https://labs.k7computing.com/wp-content/uploads/2022/04/Figure12.png"
        ]
    }
}