[
    {
        "report": {
            "id": "report_0x2ed3633c",
            "date": "20220404",
            "title": "The Discord Token Grab",
            "url": "https://labs.k7computing.com/index.php/the-discord-token-grab"
        },
        "chapter": {
            "id": "chapter_0x3974b5ea",
            "title": "The Discord Token Grab",
            "text": "Social Networking Apps\nStealer Trojan"
        }
    },
    {
        "report": {
            "id": "report_0x2ed3633c",
            "date": "20220404",
            "title": "The Discord Token Grab",
            "url": "https://labs.k7computing.com/index.php/the-discord-token-grab"
        },
        "chapter": {
            "id": "chapter_0xcfc469f",
            "title": "Lets now look at the analysis",
            "text": "As the first step of analysis , we used Detect It Easy to identify the compiler and its Microsoft Visual C++. Further investigation showed that the malwares source python script is compiled using PyInstaller to create a Microsoft Visual C payload.\nFigure 1: Compiler details\nThe compiled sample has the actual malicious python script 333.py in the overlay.\nWe used pyinstxtractor to extract the .pyc files (including 333.pyc) from the zlib archive (overlay).\nFigure 2: Extracted files from binary"
        }
    },
    {
        "report": {
            "id": "report_0x2ed3633c",
            "date": "20220404",
            "title": "The Discord Token Grab",
            "url": "https://labs.k7computing.com/index.php/the-discord-token-grab"
        },
        "chapter": {
            "id": "chapter_0x2328ff45",
            "title": "Behavioral Analysis",
            "text": "Figure 3: Startup logo\nWhen the original malware sample is executed, it verifies and downloads the required python modules through pip if not found in the users PC.\nFigure 4: Imported Modules\nAfter downloading the required modules, it searches for all the processes running in the system and kills if the process name has any one of the strings http, wireshark, fiddler, packet in their name.\nFor ease of understanding, images shown below are from the extracted 333.pyc file.\nFigure 5: Procedure for killing monitoring apps\nAfter killing the identified network monitoring application, it sends a POST request with the following JSON containing ready to log message to the Discord webhook url hxxps[:]//discord[.]com/api/webhooks/954910299654328380/SKmJo86TbjSj905A8TODrBL2vC5uwsmlXWNzGsphdrRfvC_aAwwTfl02Pcrv2LW2oC8G\nFigure 6: JSON payload sent during the start of malware activity\nAfter the initial network request, it starts the activity to steal cookies and tokens of Discord.\nFigure 7: Default location of browsers local storage\nThe malware steals the token from the below mentioned browsers and apps\nDiscord app\nGoogle Chrome\nOpera Browser\nBrave\nYandex\nThen for each of the obtained paths, it creates a full path using string operation and points to the leveldb directory.\nFor example, the full path to the leveldb directory in Chrome would look like C:\\Users\\*******\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Local Storage\\leveldb\\\nFigure 8: Parsing files to steal Discord token\nIt then iterates through all the files inside the obtained directory and searches for files ending with .log or .ldb extension. Once a log file is obtained it reads the content into memory and searches for the Discord token/MFA pattern through the below regex r[\\w-]{24}\\.[\\w-]{6}\\.[\\w-]{27}, rmfa\\.[\\w-]{84}. Each token found is then appended to a Python List.\nUsing the stolen token, the malware sends an API request to the Discord server /billing/payment-sources route, to check if the user has any saved payment sources like credit/debit cards.\nFigure 9: Checks if the user has any payment info saved\nThe following information is collected by the malware by sending a request to the URL with the stolen token in the Authorization Header.\nUser data saved in Discord\nPublic IP address of the user obtained through a GET request to ipinfo.io/json\nUsername\nDiscord user_id\nAvatar_id\nAvatar_url\nEmail\nPhone Number\nMFA_Enabled status\nPremium user status\nIs Email verified\nBilling Information\nFigure 10: User data response from Discord Server\nAfter collecting all the information, it creates a JSON payload for sending it to the webhook URL.\nThe JSON payload structure in this malware is as follows\nFigure 11: Stolen Information sent to C2 as JSON payload\nThe process then continues to run in the background and maintains all the tokens sent to the C2 in its local memory. If a user changes their Discord credentials, a new token would get generated and this would trigger the malware again to send the details to its C2 server.\nThe malware also has the capability to steal the browser cookies and send them to C2.\nFigure 12: Browser cookie stealing capability"
        }
    },
    {
        "report": {
            "id": "report_0x2ed3633c",
            "date": "20220404",
            "title": "The Discord Token Grab",
            "url": "https://labs.k7computing.com/index.php/the-discord-token-grab"
        },
        "chapter": {
            "id": "chapter_0x3232e298",
            "title": "Indicators of Compromise (IOCs)",
            "text": "Hash: CBA0E7DEBB118110852F7F2B1F0C9C2A\nDetection Name: Trojan ( 0001140e1 )\nC2 (Discord Webhook URL): hxxps://discord[.]com/api/webhooks/954910299654328380/SKmJo86TbjSj905A8TODrBL2vC5uwsmlXWNzGsphdrRfvC_aAwwTfl02Pcrv2LW2oC8G\nReferences:\nhttps://twitter.com/struppigel/status/1506613766804357128"
        }
    },
    {
        "report": {
            "id": "report_0x2ed3633c",
            "date": "20220404",
            "title": "The Discord Token Grab",
            "url": "https://labs.k7computing.com/index.php/the-discord-token-grab"
        },
        "chapter": {
            "id": "chapter_0x336eb669",
            "title": "Like what you're reading? Subscribe to our top stories.",
            "text": "If you want to subscribe to our monthly newsletter, please submit the form below.\nEmail* :\nPrevious Post Dissecting the Kazy Crypter\nNext Post"
        }
    }
]