{
    "id": "<report_0xd54ec8ca>",
    "url": "https://labs.k7computing.com/index.php/shells-blooming-in-spring",
    "title": "Shells blooming in Spring",
    "meta": [
        {
            "id": "<chapter_0xd8bc7cfa>",
            "title": "Shells blooming in Spring",
            "title_level": 1,
            "sentences": [
                {
                    "id": "<sentence_0x3ccb8368>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "By Mohith Kalyan and Anurag ShandilyaMay 5, 2022",
                    "html": "\nBy Mohith Kalyan and Anurag ShandilyaMay 5, 2022\n \n"
                },
                {
                    "id": "<sentence_0xb538fc2a>",
                    "is_empty": true,
                    "have_tags": false,
                    "tags": {},
                    "text": "",
                    "html": "<p></p>"
                },
                {
                    "id": "<sentence_0x12ee6556>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "Yet another vulnerability has been reported in the Java platform, this time in the popular Java Spring framework, just a few months after Log4shell, which was in the Java Logging Framework.",
                    "html": "<p>Yet another vulnerability has been reported in the Java platform, this time in the popular Java Spring framework, just a few months after Log4shell, which was in the Java Logging Framework. </p>"
                },
                {
                    "id": "<sentence_0x8fb9c94c>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "Two potential RCE vulnerabilities that are exploited in the wild are :",
                    "html": "<p>Two potential RCE vulnerabilities that are exploited in the wild are :</p>"
                },
                {
                    "id": "<sentence_0x8685e096>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "CVE-2022-22965 (a.k.a Springshell), found in the Spring Core framework<crlf>CVE-2022-22963, found in Spring Cloud",
                    "html": "<ol>\n<li>CVE-2022-22965 (a.k.a Springshell), found in the Spring Core framework</li>\n<li>CVE-2022-22963, found in Spring Cloud</li>\n</ol>"
                },
                {
                    "id": "<sentence_0xc9552358>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "CVE-2022-22965 is an unauthorised Remote Code Execution (RCE) vulnerability found in the Java Spring Framework. The Spring team has released a patch for both vulnerabilities.",
                    "html": "<p>CVE-2022-22965 is an unauthorised Remote Code Execution (RCE) vulnerability found in the Java Spring Framework. The Spring team has released a patch for both vulnerabilities.</p>"
                },
                {
                    "id": "<sentence_0x7c952e43>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "The SpringShell vulnerability allows attackers to target applications running with Java Spring Framework. This vulnerability is triggered when parameters that are passed to the Spring application via HTTP GET/POST request contain a class in them which results in those classes getting loaded allowing arbitrary write on the server.",
                    "html": "<p>The SpringShell vulnerability allows attackers to target applications running with Java Spring Framework. This vulnerability is triggered when parameters that are passed to the Spring application via HTTP GET/POST request contain a class in them which results in those classes getting loaded allowing arbitrary write on the server.</p>"
                },
                {
                    "id": "<sentence_0xc0e08126>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "Lets discuss and dive deep into the analysis of CVE-202222965 vulnerability and its impact on organisations.",
                    "html": "<p>Let\u2019s discuss and dive deep into the analysis of CVE-2022\u201322965 vulnerability and its impact on organisations.</p>"
                },
                {
                    "id": "<sentence_0x50b83443>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "Note: The mere presence of the Spring framework doesnt make the application vulnerable. So, its not easy to track all the vulnerable products that are affected by this vulnerability. But, here are some that are obvious.",
                    "html": "<p>Note: The mere presence of the Spring framework doesn\u2019t make the application vulnerable. So, it\u2019s not easy to track all the vulnerable products that are affected by this vulnerability. But, here are some that are obvious.</p>"
                },
                {
                    "id": "<sentence_0xdf6a7ed8>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "Vulnerable Products",
                    "html": "<p>Vulnerable Products</p>"
                },
                {
                    "id": "<sentence_0xbcc2bc4b>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "Apache tomcat <10.0.20<crlf>Apache tomcat <9.0.62<crlf>Apache tomcat <8.5.78<crlf>VMware",
                    "html": "<ul>\n<li>Apache tomcat &lt;10.0.20</li>\n<li>Apache tomcat &lt;9.0.62</li>\n<li>Apache tomcat &lt;8.5.78</li>\n<li>VMware</li>\n</ul>"
                },
                {
                    "id": "<sentence_0xc5deedb8>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "To exploit CVE-2022-22965 (Springshell), the victims environment must have",
                    "html": "<p>To exploit CVE-2022-22965 (Springshell), the victim\u2019s environment must have</p>"
                },
                {
                    "id": "<sentence_0xc8fffb05>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "Spring Framework versions 5.3.0 to 5.3.17 or 5.2.0 to 5.2.19, and older versions<crlf>Apache Tomcat as the Servlet container<crlf>JDK 9 or higher<crlf>Packaged as a traditional WAR (Web application archive, in contrast to JAR)<crlf>spring-webmvc or spring-webflux dependency",
                    "html": "<ul>\n<li>Spring Framework versions 5.3.0 to 5.3.17 or 5.2.0 to 5.2.19, and older versions</li>\n<li>Apache Tomcat as the Servlet container</li>\n<li>JDK 9 or higher</li>\n<li>Packaged as a traditional WAR (Web application archive, in contrast to JAR)</li>\n<li>spring-webmvc or spring-webflux dependency</li>\n</ul>"
                },
                {
                    "id": "<sentence_0x2da55af>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "Note : Embedded Tomcat versions are not vulnerable to this flaw.",
                    "html": "<p>Note : Embedded Tomcat versions are not vulnerable to this flaw.</p>"
                },
                {
                    "id": "<sentence_0x2ab615ae>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "And to exploit CVE-2022-22963, the victims environment must have",
                    "html": "<p>And to exploit CVE-2022-22963, the victim\u2019s environment must have</p>"
                },
                {
                    "id": "<sentence_0xe376ea08>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "Spring cloud function <=3.1.6 or<crlf>Spring cloud function <=3.2.2",
                    "html": "<ul>\n<li>Spring cloud function &lt;=3.1.6 or</li>\n<li>Spring cloud function &lt;=3.2.2</li>\n</ul>"
                },
                {
                    "id": "<sentence_0xc918cd18>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "The impact of CVE-2022-22965 would be huge compared to CVE-2022-22963, as SpringShell vulnerability affects the Java core framework (spring) and every organisation/application that uses this vulnerable module is susceptible to this vulnerability. On the other hand, the CVE-2022-22963s scope is limited, as the cloud function module is used primarily in cloud projects and the majority of the spring cloud platforms have patched this vulnerability.",
                    "html": "<p>The impact of CVE-2022-22965 would be huge compared to CVE-2022-22963, as SpringShell vulnerability affects the Java core framework (spring) and every organisation/application that uses this vulnerable module is susceptible to this vulnerability. On the other hand, the CVE-2022-22963\u2019s scope is limited, as the cloud function module is used primarily in cloud projects and the majority of the spring cloud platforms have patched this vulnerability.</p>"
                }
            ]
        }
    ],
    "chapters": [
        {
            "id": "<chapter_0xb880505d>",
            "title": "Shells blooming in Spring",
            "title_level": 1,
            "sentences": [
                {
                    "id": "<sentence_0x56a6422b>",
                    "is_empty": true,
                    "have_tags": true,
                    "tags": {
                        "<img_0xe9ece149>": "https://labs.k7computing.com/wp-content/uploads/2022/05/Shells-Spring-2.png"
                    },
                    "text": "",
                    "html": "<img alt=\"\" class=\"hidden-social-img\" src=\"https://labs.k7computing.com/wp-content/uploads/2022/05/Shells-Spring-2.png\"/>"
                },
                {
                    "id": "<sentence_0x9710c52b>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<a_0x7568eb94>": "https://labs.k7computing.com/index.php/category/remote-code-execution-attacks/"
                    },
                    "text": "Remote Code Execution Attacks",
                    "html": "<a class=\"uncategorized\" href=\"https://labs.k7computing.com/index.php/category/remote-code-execution-attacks/\">Remote Code Execution Attacks</a>"
                },
                {
                    "id": "<sentence_0x7713245d>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<a_0xcafc1cff>": "https://labs.k7computing.com/index.php/category/vulnerability/"
                    },
                    "text": "Vulnerability",
                    "html": "<a class=\"uncategorized\" href=\"https://labs.k7computing.com/index.php/category/vulnerability/\">Vulnerability</a>"
                }
            ]
        },
        {
            "id": "<chapter_0x97081992>",
            "title": "Analysis",
            "title_level": 3,
            "sentences": [
                {
                    "id": "<sentence_0x120ff4c9>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<a_0x574f28ab>": "https://spring.io/blog/2022/04/13/spring-framework-data-binding-rules-vulnerability-cve-2022-22968"
                    },
                    "text": "This vulnerability lets a local class load in the HTTP parameter, thus leveraging the internal class directly and leading to an RCE. In other words, Injecting malicious values into unsafe properties of Java class via HTTP parameters. The vulnerability leverages DataBinder class and is exploitable by populating an object from request parameters (binding HTTP parameters in this case). You can find data binding rules by spring framework here.",
                    "html": "<p>This vulnerability lets a local class load in the HTTP parameter, thus leveraging the internal class directly and leading to an RCE. In other words, Injecting malicious values into unsafe properties of Java class via HTTP parameters. The vulnerability leverages DataBinder class and is exploitable by populating an object from request parameters (binding HTTP parameters in this case). You can find data binding rules by spring framework <a href=\"https://spring.io/blog/2022/04/13/spring-framework-data-binding-rules-vulnerability-cve-2022-22968\">here</a>.</p>"
                },
                {
                    "id": "<sentence_0x6a14122f>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "Here is a sample request for an explanation",
                    "html": "<p>Here is a sample request for an explanation </p>"
                },
                {
                    "id": "<sentence_0xc9341bd6>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "curl http://someip:8030/helloworld/greeting?class.module.classLoader.resources.context.parent.pipeline.first.pattern=shell",
                    "html": "<p>curl \u2018http://someip:8030/helloworld/greeting?class.module.classLoader.resources.context.parent.pipeline.first.pattern=shell\u2019</p>"
                },
                {
                    "id": "<sentence_0xc8002c16>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "This is a part request of the exploitation. As you can see in the request, the class object is directly being accessed via HTTP requests. The classLoader is being accessed via class.module.classloader parameter.",
                    "html": "<p>This is a part request of the exploitation. As you can see in the request, the class object is directly being accessed via HTTP requests. The classLoader is being accessed via class.module.classloader parameter.</p>"
                },
                {
                    "id": "<sentence_0x677aeebd>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "To achieve Remote Code Execution, we pass as parameters, a location and a template to the unfiltered Java class via a few properties, and that causes the object to create a new file for storing logs in our specified format.",
                    "html": "<p>To achieve Remote Code Execution, we pass as parameters, a location and a template to the unfiltered Java class via a few properties, and that causes the object to create a new file for storing logs in our specified format. </p>"
                },
                {
                    "id": "<sentence_0xe2d30a4d>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "Having seen the above example, heres what happens under the hood to achieve RCE :",
                    "html": "<p>Having seen the above example, here\u2019s what happens under the hood to achieve RCE : </p>"
                },
                {
                    "id": "<sentence_0x2f4aa0ee>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "A malicious JSP web shell is being created here in our example, and for that, the below-mentioned class properties will be set accordingly as a result of parameter binding.",
                    "html": "<p>A malicious JSP web shell is being created here in our example, and for that, the below-mentioned class properties will be set accordingly as a result of parameter binding.</p>"
                },
                {
                    "id": "<sentence_0x62ae10fc>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "class.module.classLoader.resources.context.parent.pipeline.first.pattern = <PATTERN_REDACTED>",
                    "html": "<p>class.module.classLoader.resources.context.parent.pipeline.first.pattern = &lt;PATTERN_REDACTED&gt;\u201d</p>"
                },
                {
                    "id": "<sentence_0x62d2e33a>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "This is the actual payload. The pattern property is usually set for a logging pattern. But, we injected our malicious payload into that by keeping the pattern as is.",
                    "html": "<p>This is the actual payload. The pattern property is usually set for a logging pattern. But, we injected our malicious payload into that by keeping the pattern as is.</p>"
                },
                {
                    "id": "<sentence_0x75d6a174>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "class.module.classLoader.resources.context.parent.pipeline.first.suffix = .jsp",
                    "html": "<p>class.module.classLoader.resources.context.parent.pipeline.first.suffix = \u201c.jsp\u201d</p>"
                },
                {
                    "id": "<sentence_0xfbfe83b1>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "We have set the suffix parameter to .jsp, this is usually .txt or .log as log files are in text format in general.",
                    "html": "<p>We have set the suffix parameter to .jsp, this is usually .txt or .log as log files are in text format in general.</p>"
                },
                {
                    "id": "<sentence_0x7c1f60bb>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "class.module.classLoader.resources.context.parent.pipeline.first.directory = webapps/ROOT",
                    "html": "<p>class.module.classLoader.resources.context.parent.pipeline.first.directory = \u201cwebapps/ROOT\u201d</p>"
                },
                {
                    "id": "<sentence_0xbe43f869>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "The directory of the web shell is set by this parameter. Usually this will be the location where logs will be stored.",
                    "html": "<p>The directory of the web shell is set by this parameter. Usually this will be the location where logs will be stored.</p>"
                },
                {
                    "id": "<sentence_0xf4be8545>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "class.module.classLoader.resources.context.parent.pipeline.first.prefix = shell",
                    "html": "<p>class.module.classLoader.resources.context.parent.pipeline.first.prefix = \u201cshell\u201d</p>"
                },
                {
                    "id": "<sentence_0xc214fb4d>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "Name of the log file we want to create, here we are creating a web shell with the name shell",
                    "html": "<p>Name of the log file we want to create, here we are creating a web shell with the name \u201cshell\u201d</p>"
                },
                {
                    "id": "<sentence_0x7d645d62>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "class.module.classLoader.resources.context.parent.pipeline.first.fileDateFormat =",
                    "html": "<p>class.module.classLoader.resources.context.parent.pipeline.first.fileDateFormat = \u201c\u201d</p>"
                },
                {
                    "id": "<sentence_0xc8c36d7b>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "The log file usually starts with a date and time for obvious reasons, and this parameter is used to set that format. This parameter is not used in the exploit.",
                    "html": "<p>The log file usually starts with a date and time for obvious reasons, and this parameter is used to set that format. This parameter is not used in the exploit. </p>"
                },
                {
                    "id": "<sentence_0x9a5b65f3>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "You can find the exploitation and setting of these exposed class properties on the wire as seen in Figure 1.",
                    "html": "<p>You can find the exploitation and setting of these exposed class properties on the wire as seen in Figure 1.</p>"
                },
                {
                    "id": "<sentence_0x59897c25>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<img_0xe919994b>": "https://labs.k7computing.com/wp-content/uploads/2022/05/Figure-1.png"
                    },
                    "text": "Figure 1: Wireshark capture of the exploitation request sent",
                    "html": "<figure class=\"wp-caption aligncenter\" id=\"attachment_23899\"><img alt=\"\" class=\"wp-image-23899 size-full\" height=\"447\" src=\"https://labs.k7computing.com/wp-content/uploads/2022/05/Figure-1.png\" width=\"1128\"/><figcaption class=\"wp-caption-text\" id=\"caption-attachment-23899\">Figure 1: Wireshark capture of the exploitation request sent</figcaption></figure>"
                },
                {
                    "id": "<sentence_0xdc4d904c>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "The log file is created with the name shell.jsp and the location webapps/root as we mentioned in the parameter. We smuggled in some Java code via pattern property to execute it on the system within the typical log format. If we dissect the payload, we can see the input stream to take in the input command and pass the command to the exec function as shown below.",
                    "html": "<p>The log file is created with the name shell.jsp and the location webapps/root as we mentioned in the parameter. We smuggled in some Java code via pattern property to execute it on the system within the typical log format. If we dissect the payload, we can see the input stream to take in the input command and pass the command to the exec function as shown below. </p>"
                },
                {
                    "id": "<sentence_0x52a2cf32>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "Runtime.getRuntime().exec(request.getParameter(cmd))",
                    "html": "<p>\u201cRuntime.getRuntime().exec(request.getParameter(\u201ccmd\u201d))\u201d</p>"
                },
                {
                    "id": "<sentence_0xc94a4dd2>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "and throws the output on standard output.",
                    "html": "<p>and throws the output on standard output. </p>"
                },
                {
                    "id": "<sentence_0x6ab926b6>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "To access the created webshell, we request /shell.jsp and use the cmd parameter to pass-along the commands that we want. An example is shown in a subsequent image.",
                    "html": "<p>To access the created webshell, we request /shell.jsp and use the \u2018cmd\u2019 parameter to pass-along the commands that we want. An example is shown in a subsequent image. </p>"
                },
                {
                    "id": "<sentence_0x9c935877>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "Mirai botnet",
                    "html": "<p>Mirai botnet </p>"
                },
                {
                    "id": "<sentence_0x2e1deb13>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "Some recent events brought to light the real-world exploitation of the Springshell vulnerability. It was observed to be exploited and Mirai malware was deployed on infected servers as post-exploitation.",
                    "html": "<p>Some recent events brought to light the real-world exploitation of the Springshell vulnerability. It was observed to be exploited and Mirai malware was deployed on infected servers as post-exploitation.</p>"
                },
                {
                    "id": "<sentence_0x6d0f2085>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "Debugging",
                    "html": "<p>Debugging</p>"
                },
                {
                    "id": "<sentence_0x9955aa49>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<a_0xf6434b41>": "https://github.com/lunasec-io/Spring4Shell-POC"
                    },
                    "text": "We deployed the PoC available here to analyse and debug the vulnerability. We deployed the WAR in Apache Tomcat 9.0.58 in Kali Linux and used IntelliJ to debug Tomcat.",
                    "html": "<p>We deployed the PoC available <a href=\"https://github.com/lunasec-io/Spring4Shell-POC\" rel=\"noopener\" target=\"_blank\">here</a> to analyse and debug the vulnerability. We deployed the WAR in Apache Tomcat 9.0.58 in Kali Linux and used IntelliJ to debug Tomcat.</p>"
                },
                {
                    "id": "<sentence_0xc7e1bb4d>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<a_0xb52607ff>": "https://tomcat.apache.org/tomcat-7.0-doc/api/org/apache/catalina/valves/AccessLogValve.html"
                    },
                    "text": "AccessLogValve is an extended Class that is used for generating Web Server access logs. As per this information available online, it refers to the currentLogFile, Prefix, Suffix and Pattern fields to write logs.",
                    "html": "<p>AccessLogValve is an extended Class that is used for generating Web Server access logs. As per <a href=\"https://tomcat.apache.org/tomcat-7.0-doc/api/org/apache/catalina/valves/AccessLogValve.html\" rel=\"noopener\" target=\"_blank\">this</a> information available online, it refers to the currentLogFile, Prefix, Suffix and Pattern fields to write logs.</p>"
                },
                {
                    "id": "<sentence_0x4b35e660>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "Figure 2 shows the fields set under normal traffic flow and Figure 3 shows fields under exploitation.",
                    "html": "<p>Figure 2 shows the fields set under normal traffic flow and Figure 3 shows fields under exploitation. </p>"
                },
                {
                    "id": "<sentence_0x60990f4a>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<img_0xe0ce2df>": "https://labs.k7computing.com/wp-content/uploads/2022/05/Figure-2.png"
                    },
                    "text": "Figure 2: Normal field values",
                    "html": "<figure class=\"wp-caption aligncenter\" id=\"attachment_23901\"><img alt=\"\" class=\"wp-image-23901 size-full\" height=\"663\" src=\"https://labs.k7computing.com/wp-content/uploads/2022/05/Figure-2.png\" width=\"896\"/><figcaption class=\"wp-caption-text\" id=\"caption-attachment-23901\">Figure 2: Normal field values</figcaption></figure>"
                },
                {
                    "id": "<sentence_0xf4713949>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<img_0x966079b3>": "https://labs.k7computing.com/wp-content/uploads/2022/05/Figure-3.png"
                    },
                    "text": "Figure 3: Field values during exploitation",
                    "html": "<figure class=\"wp-caption aligncenter\" id=\"attachment_23902\"><img alt=\"\" class=\"wp-image-23902 size-full\" height=\"536\" src=\"https://labs.k7computing.com/wp-content/uploads/2022/05/Figure-3.png\" width=\"796\"/><figcaption class=\"wp-caption-text\" id=\"caption-attachment-23902\">Figure 3: Field values during exploitation</figcaption></figure>"
                },
                {
                    "id": "<sentence_0x15203414>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "In the figure above, as a result of the CVE-2022-22695, a specific pattern will be written to the shell.JSP log file. Part of this pattern is shown in Figure 4-A which is a web shell, which can be accessed via browser as can be seen in Figure 4-B.",
                    "html": "<p>In the figure above, as a result of the CVE-2022-22695, a specific pattern will be written to the shell.JSP log file. Part of this pattern is shown in Figure 4-A which is a web shell, which can be accessed via browser as can be seen in Figure 4-B. </p>"
                },
                {
                    "id": "<sentence_0x66dbe1f8>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<img_0xe5fabed1>": "https://labs.k7computing.com/wp-content/uploads/2022/05/Figure-4.png"
                    },
                    "text": "Figure 4: A Shell uploaded to the Web Server; B Shell accessed using browser",
                    "html": "<figure class=\"wp-caption aligncenter\" id=\"attachment_23903\"><img alt=\"\" class=\"wp-image-23903 size-full\" height=\"221\" src=\"https://labs.k7computing.com/wp-content/uploads/2022/05/Figure-4.png\" width=\"957\"/><figcaption class=\"wp-caption-text\" id=\"caption-attachment-23903\">Figure 4: A \u2013 Shell uploaded to the Web Server; B \u2013 Shell accessed using browser</figcaption></figure>"
                },
                {
                    "id": "<sentence_0x9be89b08>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "The root cause(Diff)",
                    "html": "<p>The root cause(Diff)</p>"
                },
                {
                    "id": "<sentence_0xacf597f>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "The following is a patch diff for springshell vulnerability. The exact patch we are looking at is under CachedIntrospectionResults.java which is restricting property paths under Class and properties of types ClassLoader. By not allowing the binding, and only allowing name variants of class properties, the vulnerability is patched.",
                    "html": "<p>The following is a patch diff for springshell vulnerability. The exact patch we are looking at is under CachedIntrospectionResults.java which is restricting property paths under \u201cClass\u201d and properties of types \u2018ClassLoader\u2019. By not allowing the binding, and only allowing name variants of class properties, the vulnerability is patched. </p>"
                },
                {
                    "id": "<sentence_0xb8669fd7>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "we realized that the disallowedFields configuration setting on WebDataBinder is not intuitive and is not clearly documented.",
                    "html": "<p>\u201cwe realized that the disallowedFields configuration setting on WebDataBinder is not intuitive and is not clearly documented.\u201d</p>"
                },
                {
                    "id": "<sentence_0xaba96bb7>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<a_0x574f28ab>": "https://spring.io/blog/2022/04/13/spring-framework-data-binding-rules-vulnerability-cve-2022-22968"
                    },
                    "text": "the patterns for disallowedFields in a DataBinder were case sensitive which means a field was not effectively protected Spring team",
                    "html": "<p>\u201cthe patterns for disallowedFields in a DataBinder were case sensitive which means a field was not effectively protected\u201d \u2014 <a href=\"https://spring.io/blog/2022/04/13/spring-framework-data-binding-rules-vulnerability-cve-2022-22968\" rel=\"noopener\" target=\"_blank\">Spring team </a></p>"
                },
                {
                    "id": "<sentence_0xc9dd547a>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<img_0x1012ae6f>": "https://labs.k7computing.com/wp-content/uploads/2022/05/FIG5-1.png"
                    },
                    "text": "Figure 5: Patch diff of spring shell vulnerability",
                    "html": "<figure class=\"wp-caption aligncenter\" id=\"attachment_23905\"><img alt=\"\" class=\"wp-image-23905 size-full\" height=\"161\" src=\"https://labs.k7computing.com/wp-content/uploads/2022/05/FIG5-1.png\" width=\"512\"/><figcaption class=\"wp-caption-text\" id=\"caption-attachment-23905\">Figure 5: Patch diff of spring shell vulnerability</figcaption></figure>"
                },
                {
                    "id": "<sentence_0x167ed3fc>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "Mitigation",
                    "html": "<p>Mitigation</p>"
                },
                {
                    "id": "<sentence_0xaa8549d6>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "Update your Spring framework to 5.3.18 and 5.2.20 or later<crlf>If you are in a restricted environment, it is recommend to implement the following workarounds Downgrading to Java 8 Upgrading to Tomcat 10.0.20, 9.0.62 or 8.5.78<crlf>Downgrading to Java 8<crlf>Upgrading to Tomcat 10.0.20, 9.0.62 or 8.5.78",
                    "html": "<ol>\n<li>Update your Spring framework to 5.3.18 and 5.2.20 or later</li>\n<li>If you are in a restricted environment, it is recommend to implement the following workarounds\n<ol>\n<li>Downgrading to Java 8</li>\n<li>Upgrading to Tomcat 10.0.20, 9.0.62 or 8.5.78</li>\n</ol>\n</li>\n</ol>"
                },
                {
                    "id": "<sentence_0x358b468e>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "Further readings",
                    "html": "<p>Further readings</p>"
                },
                {
                    "id": "<sentence_0xd769b7ad>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<a_0xb32cbad1>": "https://spring.io/blog/2022/03/31/spring-framework-rce-early-announcement",
                        "<a_0xb52607ff>": "https://tomcat.apache.org/tomcat-7.0-doc/api/org/apache/catalina/valves/AccessLogValve.html",
                        "<a_0x301688ec>": "https://www.virustotal.com/gui/file/5fb0c8f3daef02b9d2ab285d0bf348cf1cb7c36708b0034ad0dee4998a16b9e9/detection",
                        "<a_0xcc03a1ff>": "https://github.com/reznok/Spring4Shell-POC",
                        "<a_0x1b0c1c68>": "https://github.com/dinosn/CVE-2022-22963",
                        "<a_0x574f28ab>": "https://spring.io/blog/2022/04/13/spring-framework-data-binding-rules-vulnerability-cve-2022-22968"
                    },
                    "text": "https://spring.io/blog/2022/03/31/spring-framework-rce-early-announcement<crlf>https://tomcat.apache.org/tomcat-7.0-doc/api/org/apache/catalina/valves/AccessLogValve.html<crlf>https://www.virustotal.com/gui/file/5fb0c8f3daef02b9d2ab285d0bf348cf1cb7c36708b0034ad0dee4998a16b9e9/detection<crlf>https://github.com/reznok/Spring4Shell-POC<crlf>https://github.com/dinosn/CVE-2022-22963<crlf>https://spring.io/blog/2022/04/13/spring-framework-data-binding-rules-vulnerability-cve-2022-22968",
                    "html": "<ol>\n<li><a href=\"https://spring.io/blog/2022/03/31/spring-framework-rce-early-announcement\" rel=\"noopener\" target=\"_blank\">https://spring.io/blog/2022/03/31/spring-framework-rce-early-announcement</a></li>\n<li><a href=\"https://tomcat.apache.org/tomcat-7.0-doc/api/org/apache/catalina/valves/AccessLogValve.html\" rel=\"noopener\" target=\"_blank\">https://tomcat.apache.org/tomcat-7.0-doc/api/org/apache/catalina/valves/AccessLogValve.html</a></li>\n<li><a href=\"https://www.virustotal.com/gui/file/5fb0c8f3daef02b9d2ab285d0bf348cf1cb7c36708b0034ad0dee4998a16b9e9/detection\" rel=\"noopener\" target=\"_blank\">https://www.virustotal.com/gui/file/5fb0c8f3daef02b9d2ab285d0bf348cf1cb7c36708b0034ad0dee4998a16b9e9/detection</a></li>\n<li><a href=\"https://github.com/reznok/Spring4Shell-POC\" rel=\"noopener\" target=\"_blank\">https://github.com/reznok/Spring4Shell-POC</a></li>\n<li><a href=\"https://github.com/dinosn/CVE-2022-22963\" rel=\"noopener\" target=\"_blank\">https://github.com/dinosn/CVE-2022-22963</a></li>\n<li><a href=\"https://spring.io/blog/2022/04/13/spring-framework-data-binding-rules-vulnerability-cve-2022-22968\" rel=\"noopener\" target=\"_blank\">https://spring.io/blog/2022/04/13/spring-framework-data-binding-rules-vulnerability-cve-2022-22968</a></li>\n</ol>"
                },
                {
                    "id": "<sentence_0x1ef0fc0>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "Indicators of Compromise (IoCs)",
                    "html": "<p>Indicators of Compromise (IoCs)</p>"
                },
                {
                    "id": "<sentence_0x859f1142>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "5fb0c8f3daef02b9d2ab285d0bf348cf1cb7c36708b0034ad0dee4998a16b9e9 Second stage post exploitation file",
                    "html": "<p>5fb0c8f3daef02b9d2ab285d0bf348cf1cb7c36708b0034ad0dee4998a16b9e9 \u2013 Second stage post exploitation file</p>"
                },
                {
                    "id": "<sentence_0x34698842>",
                    "is_empty": true,
                    "have_tags": false,
                    "tags": {},
                    "text": "",
                    "html": "<p></p>"
                }
            ]
        },
        {
            "id": "<chapter_0x229f58ab>",
            "title": "Like what you're reading? Subscribe to our top stories.",
            "title_level": 3,
            "sentences": [
                {
                    "id": "<sentence_0x8e6af120>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "If you want to subscribe to our monthly newsletter, please submit the form below.",
                    "html": "<p class=\"sendgrid_widget_text\">If you want to subscribe to our monthly newsletter, please submit the form below.</p>"
                },
                {
                    "id": "<sentence_0xb9092405>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "Email* :",
                    "html": " Email* : \n"
                },
                {
                    "id": "<sentence_0x47ace256>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<a_0xe62cf60c>": "https://labs.k7computing.com/index.php/diving-into-the-emotet-maldoc-boutade/"
                    },
                    "text": "Previous Post Diving into the Emotet Maldoc Boutade<crlf>Next Post",
                    "html": "<ul class=\"controls\">\n<li class=\"previous-post mouse-leaving\">\n<h3>Previous Post\u00ab <a href=\"https://labs.k7computing.com/index.php/diving-into-the-emotet-maldoc-boutade/\" rel=\"prev\">Diving into the Emotet Maldoc Boutade</a>\n</h3>\n</li>\n<li class=\"next-post mouse-leaving\">\n<h3>Next Post\n</h3>\n</li>\n</ul>"
                }
            ]
        }
    ]
}