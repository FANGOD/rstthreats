[
    {
        "report": {
            "id": "report_0xc7324147",
            "date": "20220408",
            "title": "Rook Ransomware. Static Code Analysis",
            "url": "https://chuongdong.com/reverse%20engineering/2022/01/06/RookRansomware"
        },
        "chapter": {
            "id": "chapter_0x906569b1",
            "title": "Rook Ransomware",
            "text": ""
        }
    },
    {
        "report": {
            "id": "report_0xc7324147",
            "date": "20220408",
            "title": "Rook Ransomware. Static Code Analysis",
            "url": "https://chuongdong.com/reverse%20engineering/2022/01/06/RookRansomware"
        },
        "chapter": {
            "id": "chapter_0xaf7fcbbc",
            "title": "Static Code Analysis",
            "text": ""
        }
    },
    {
        "report": {
            "id": "report_0xc7324147",
            "date": "20220408",
            "title": "Rook Ransomware. Static Code Analysis",
            "url": "https://chuongdong.com/reverse%20engineering/2022/01/06/RookRansomware"
        },
        "chapter": {
            "id": "chapter_0xf162ad9",
            "title": "Rook Ransomware",
            "text": "Reverse Engineering\n06 Jan 2022"
        }
    },
    {
        "report": {
            "id": "report_0xc7324147",
            "date": "20220408",
            "title": "Rook Ransomware. Static Code Analysis",
            "url": "https://chuongdong.com/reverse%20engineering/2022/01/06/RookRansomware"
        },
        "chapter": {
            "id": "chapter_0x8e13d3dd",
            "title": "Contents",
            "text": "Rook Ransomware Contents Overview IOCS Ransom Note\nContents\nOverview\nIOCS\nRansom Note\nStatic Code Analysis RSA Key Generation Anti-Detection: Alternate Data Streams Command-line Arguments Logging Stopping Services Terminating Processes Deleting Shadow Copies Multithreading Setup Network Resource Traversal Drives Traversal Shares Traversal Child Thread File Encryption References\nRSA Key Generation\nAnti-Detection: Alternate Data Streams\nCommand-line Arguments\nLogging\nStopping Services\nTerminating Processes\nDeleting Shadow Copies\nMultithreading Setup\nNetwork Resource Traversal\nDrives Traversal\nShares Traversal\nChild Thread\nFile Encryption\nReferences"
        }
    },
    {
        "report": {
            "id": "report_0xc7324147",
            "date": "20220408",
            "title": "Rook Ransomware. Static Code Analysis",
            "url": "https://chuongdong.com/reverse%20engineering/2022/01/06/RookRansomware"
        },
        "chapter": {
            "id": "chapter_0x5587564",
            "title": "Overview",
            "text": "This is my analysis for ROOK Ransomware.\nROOK is a relatively new ransomware that has been coming up in the last few months. With the Mbed TLS library, the malware uses a hybrid cryptography scheme to encrypt files using AES and protect its keys with RSA-2048.\nFor execution speed, ROOK is quite fast since it uses a decently good method of multithreading with two global lists for file and directory traversal.\nAs it has been claimed by other researchers, ROOK borrows some of the code from the leaked BABUK source code. To be more specific, the ROOK developers copied and pasted the code for services & processes termination as well as deleting shadow copies. ROOKs multithreading approach is a reimplementation and an upgrade from that of BABUK version 3, which is now more efficient for directory traversal.\nHowever, unlike BABUK devs who are big fans of using ECDH curves and eSTREAM portfolio Profile 1 ciphers such as ChaCha and HC-128 for hybrid-encryption, ROOK devs stick with the traditional choice of RSA and AES.\nFigure 1: ROOK Leak Site."
        }
    },
    {
        "report": {
            "id": "report_0xc7324147",
            "date": "20220408",
            "title": "Rook Ransomware. Static Code Analysis",
            "url": "https://chuongdong.com/reverse%20engineering/2022/01/06/RookRansomware"
        },
        "chapter": {
            "id": "chapter_0xbf444d5d",
            "title": "IOCS",
            "text": "The analyzed sample is a 64-bit Windows executable.\nMD5: 6d87be9212a1a0e92e58e1ed94c589f9\nSHA256: c2d46d256b8f9490c9599eea11ecef19fde7d4fdd2dea93604cee3cea8e172ac\nSample: MalwareBazaar\nFigure 2: VirusTotal Result."
        }
    },
    {
        "report": {
            "id": "report_0xc7324147",
            "date": "20220408",
            "title": "Rook Ransomware. Static Code Analysis",
            "url": "https://chuongdong.com/reverse%20engineering/2022/01/06/RookRansomware"
        },
        "chapter": {
            "id": "chapter_0x830a032f",
            "title": "Ransom Note",
            "text": "The content of the default ransom note is stored in plaintext in ROOKs executable.\nROOKs ransom note filename is HowToRestoreYourFiles.txt, which is really similar to BABUKs How To Restore Your Files.txt.\nFigure 3: ROOKs Ransom Note."
        }
    },
    {
        "report": {
            "id": "report_0xc7324147",
            "date": "20220408",
            "title": "Rook Ransomware. Static Code Analysis",
            "url": "https://chuongdong.com/reverse%20engineering/2022/01/06/RookRansomware"
        },
        "chapter": {
            "id": "chapter_0x2dc1f316",
            "title": "RSA Key Generation",
            "text": "The first thing ROOK does upon execution is setting up the RSA keys for asymmetric encryption.\nFirst, the malware initializes a CTR_DRBG context using the Mbed TLS library, which is used to build a pseudo-RNG to later randomly generate AES keys.\nFigure 4: CTR_DRBG Initialization.\nNext, it calls mbedtls_pk_parse_public_key to parse the TAs RSA public key into a mbedtls_pk_context struct. The ROOKs public key context is then extracted from the pk_ctx field on the newly populated mbedtls_pk_context struct.\nBelow is the raw content of the public key.\nFigure 5: Parsing ROOKs RSA Public Key.\nROOK then calls RegCreateKeyExW to open the subkey Software in HKEY_CURRENT_USER. Using that, it calls RegQueryValueExW to check if the registry value RookPublicKey exists in there. If it does not, the malware generates a public-private key pair for the victim.\nFigure 6, 7: Querying From Registry & Generating Victim Public-Private Key Pair.\nNext, ROOK encrypts the victims RSA private key using its own public key context.\nFigure 8: Encrypting Victim Private Key Using TAs Public Key.\nThe victims public key and encrypted private key are consecutively stored in the registry at the value RookPublicKey and RookPrivateKey.\nIf the victims public key was already generated before and the malware can query it directly from registry, the victims encrypted private key is pulled from the registry value RookPrivateKey.\nFinally, the malware calls mbedtls_pk_parse_public_key to retrieve the victims public key context and wipes the victims raw private key from memory.\nFigure 9: Writing Keys to Registry & Cleaning Up."
        }
    },
    {
        "report": {
            "id": "report_0xc7324147",
            "date": "20220408",
            "title": "Rook Ransomware. Static Code Analysis",
            "url": "https://chuongdong.com/reverse%20engineering/2022/01/06/RookRansomware"
        },
        "chapter": {
            "id": "chapter_0x65b476bd",
            "title": "Anti-Detection: Alternate Data Streams",
            "text": "Alternate Data Streams (ADS) is a file attribute on the NT File System (NTFS) which was designed for compatibility with Macintosh Hierarchical File System (HFS).\nFor normal files, there is typically one primary data stream that is known as the unnamed data stream since its name is an empty string. However, ADS allows files to have more than one data stream, with any stream with a name being considered alternate.\nBecause alternate data streams are hidden from Windows Explorer and the dir command on the command-line, they are a sneaky way to hide external executable from a seemingly harmless file.\nTo evade detection, ROOK uses ADS to hides its own executable. First, it calls GetModuleFileNameW with a NULL handle to retrieve its own executable path.\nIt then calls CreateFileW to retrieve its own handle and SetFileInformationByHandle to rename the file with a data stream named :ask. This ultimately puts the entire executable into the alternate :ask data stream, leaving an empty file on the primary stream.\nFigure 10: Moving Executable to Data Stream.\nPausing the execution after the handle is released using the call to CloseHandle, we can examine how it looks in the system.\nBy running the command dir /r, we can examine what changes to the executable file.\nTo test this, I use two copies of the ROOK sample and have the ro0k.mal_ one hide itself in the :ask data stream. As we can see in the command-line, that file shows up empty, but its alternate data stream contains the full malicious executable.\nFigure 11: Examining Alternate Data Stream In Command-Line.\nAfter doing this, the ransomware file will appear as empty in the file system until the end of execution.\nAfter hiding itself, ROOK also calls SetFileInformationByHandle again to set the file to be deleted once all handles are closed at the end.\nFigure 12: Set Up File for Self-Deletion."
        }
    },
    {
        "report": {
            "id": "report_0xc7324147",
            "date": "20220408",
            "title": "Rook Ransomware. Static Code Analysis",
            "url": "https://chuongdong.com/reverse%20engineering/2022/01/06/RookRansomware"
        },
        "chapter": {
            "id": "chapter_0xc4031b4",
            "title": "Command-line Arguments",
            "text": "ROOK can run with or without command-line arguments.\nBelow is the list of arguments that can be supplied by the operator.",
            "table": "Argument;Description\n-debug <log_filename>;Enable logging to the specified log file\n-shares <share_list>;List of network shares to be traversed\n-paths <drive_list>;List of local & network drives to be traversed\n"
        }
    },
    {
        "report": {
            "id": "report_0xc7324147",
            "date": "20220408",
            "title": "Rook Ransomware. Static Code Analysis",
            "url": "https://chuongdong.com/reverse%20engineering/2022/01/06/RookRansomware"
        },
        "chapter": {
            "id": "chapter_0x82662c50",
            "title": "Logging",
            "text": "When the debug argument is provided on the command-line, ROOK enables debugging and calls CreateFileW to create the log file to later log into.\nIt also calls InitializeCriticalSection to initialize a critical section to prevent multiple threads from writing into the log file at the same time.\nFigure 13: Logging Initialization."
        }
    },
    {
        "report": {
            "id": "report_0xc7324147",
            "date": "20220408",
            "title": "Rook Ransomware. Static Code Analysis",
            "url": "https://chuongdong.com/reverse%20engineering/2022/01/06/RookRansomware"
        },
        "chapter": {
            "id": "chapter_0xa46ea13",
            "title": "Stopping Services",
            "text": "For stopping services, ROOK borrows this part from the leaked BABUK source code.\nThe malware first calls GetTickCount to get a tick count prior to stopping services. It then calls OpenSCManagerA to retrieve a service control manager handle.\nFigure 14: Retrieving Service Control Manager.\nNext, it iterates through a hard-coded list containing services to be stopped. For each of these service, the malware calls OpenServiceA to retrieve the services handle and QueryServiceStatusEx to query and checks if the service state is SERVICE_STOP_PENDING.\nIf it is not, ROOK calls EnumDependentServicesA to enumerate through all dependent services of the target service and stop them.\nFigure 15: Iterating Through Service Stop List.\nFor each dependent service, the malware calls OpenServiceA to retrieve its handle and ControlService to send a control stop code to stop it. It also sleeps and calls QueryServiceStatusEx to wait until the services state is fully stopped.\nFigure 16: Stopping Dependent Services.\nAfter stopping all dependent services, ROOK calls ControlService send a control stop code to the main service and continuosly checks until the service is fully stopped.\nFigure 17: Stopping Target Services.\nFor stopping all services, the maximum timeout is 30000ms or 30 seconds from the original tick count. If it takes more than 30 seconds to stop services, the malware aborts and exits the function.\nBelow is the list of services that are stopped."
        }
    },
    {
        "report": {
            "id": "report_0xc7324147",
            "date": "20220408",
            "title": "Rook Ransomware. Static Code Analysis",
            "url": "https://chuongdong.com/reverse%20engineering/2022/01/06/RookRansomware"
        },
        "chapter": {
            "id": "chapter_0x5e0fb4b4",
            "title": "Terminating Processes",
            "text": "This part of code is also copied and pasted from the BABUK source code.\nROOK calls CreateToolhelp32Snapshot to retrieve a snapshot of all processes and threads in the system. It then calls Process32FirstW and Process32NextW to enumerate through the snapshot.\nFor each process whose name is in the list of processes to be terminated, the malware calls OpenProcess to retrieve the processs handle and TerminateProcess to terminate it.\nFigure 18: Stopping Target Services.\nBelow is the list of processes that are stopped."
        }
    },
    {
        "report": {
            "id": "report_0xc7324147",
            "date": "20220408",
            "title": "Rook Ransomware. Static Code Analysis",
            "url": "https://chuongdong.com/reverse%20engineering/2022/01/06/RookRansomware"
        },
        "chapter": {
            "id": "chapter_0x4cebd6c0",
            "title": "Deleting Shadow Copies",
            "text": "This part of code is also copied and pasted from the BABUK source code.\nROOK first checks if its process is running under a 64-bit processor by calling IsWow64Process.\nFigure 19: Checking Process Architecture.\nIf it is, the malware calls Wow64DisableWow64FsRedirection to disable file system redirection for its process.\nThen it executes ShellExecuteW to launch the following command in the command line to delete all shadow copies in the system.\nFinally, if the malwares process is running under a 64-bit architecture, it calls Wow64RevertWow64FsRedirection to enable file system redirection.\nFigure 20: Deleting Shadow Copies."
        }
    },
    {
        "report": {
            "id": "report_0xc7324147",
            "date": "20220408",
            "title": "Rook Ransomware. Static Code Analysis",
            "url": "https://chuongdong.com/reverse%20engineering/2022/01/06/RookRansomware"
        },
        "chapter": {
            "id": "chapter_0x526d8f73",
            "title": "Multithreading Setup",
            "text": "Prior to encrypting files, ROOK sets up its own multithreading system.\nInitially, it calls GetSystemInfo to retrieve the number of processors in the system.\nThe multithreading structure is divided into two parts: file encryption and directory enumeration.\nFor file encryption, the malware calculates the maximum number of files to be encrypted by multiple threads at the same time is 24 times the number of processors. It then calls HeapAlloc to allocate a global array to store the files that are set to be encrypted and CreateSemaphoreA to create 2 semaphores that are used for synchronization among threads that access the file array. Finally, it also calls\nInitializeCriticalSection to initialize a critical section that allows one thread to add or remove a file from the global array at a time.\nFigure 21: Threading Setup for File Encryption.\nFor directory enumeration, the malware calculates the maximum number of directories to be enumerated by multiple threads at the same time is 6 times the number of processors. It also creates a global array, 2 semaphores, and a critical section like to the file encryption part above.\nFigure 22: Threading Setup for Directory Enumeration.\nNext, the malware calls HeapAlloc to allocate two arrays to store child thread handles, one for file encryption and the other for directory enumeration.\nROOK then calls CreateThread to spawn threads for double the number of processors for each thread array. The functionalities of these threads are later discussed in the Child Thread section.\nFigure 23: Spawning Child Threads."
        }
    },
    {
        "report": {
            "id": "report_0xc7324147",
            "date": "20220408",
            "title": "Rook Ransomware. Static Code Analysis",
            "url": "https://chuongdong.com/reverse%20engineering/2022/01/06/RookRansomware"
        },
        "chapter": {
            "id": "chapter_0x858bb42b",
            "title": "Network Resource Traversal",
            "text": "When the command-line argument -paths or -shares is not provided, ROOK recursively traverses through all resources in the network.\nThe malware calls WNetOpenEnumW to retrieve an enumeration handle for all network resources and WNetEnumResourceW to enumerate through them.\nFor each network resource, if its a container for other resources that can also be enumerated, ROOK recursively passes it back to the current function to traverse it.\nIf the resource is just a normal and connectable directory, the malware passes it into a recursive function to traverse it, which will be discussed in the Drives Traversal section.\nFigure 24: Traversing Network Resources."
        }
    },
    {
        "report": {
            "id": "report_0xc7324147",
            "date": "20220408",
            "title": "Rook Ransomware. Static Code Analysis",
            "url": "https://chuongdong.com/reverse%20engineering/2022/01/06/RookRansomware"
        },
        "chapter": {
            "id": "chapter_0xdbffbf2d",
            "title": "Drives Traversal",
            "text": "When the command-line argument -paths is provided, ROOK specifically enumerates them and exits upon completion.\nThe argument can come in the form of a list of paths, each separated by a comma. Instead of a normal directory path, ROOK also accepts a two-character string of a drive letter followed by a colon as a path to a drive.\nFigure 25: Parsing -paths Command-Line Argument.\nWhen traversing a drive, ROOK builds the following drive path.\nWith the path, the malware checks and avoids enumerating the drive if its a CD-ROM drive.\nIf the drive type is a remote drive, ROOK calls WNetGetConnectionW to retrieve the remote name of the drive and passes it to be traversed by the recursive_traverse_dir function.\nIf the drive type is not remote drive and CD-ROM drive, the malware simply passes it to the recursive_traverse_dir function.\nIn the recursive_traverse_dir function, ROOK begins by executing two nested while loop. The first one loops and waits until the END_ACCESS_DIR_SEMAPHORE semaphores count is reduced to zero, and its state is nonsignaled. When this happens, it means every directory in the global directory list is already traversed and no thread is extracting from it.\nWhile waiting for this, the inner while loop waits until the BEGIN_ACCESS_FILE_SEMAPHORE semaphore is signaled, which allows the current process to access the global file list. After obtaining the ownership of the critical section for the global file list using EnterCriticalSection, ROOK extracts the file at the current index, increments the index, and encrypts it. The file encryption routine is later discussed at the File Encryption section.\nFigure 27: Waiting for Directory List to Be Cleared & Encrypting File in the Meantime.\nInstead of just looping and waiting for the directory list to be cleared, ROOK extracts and encrypts files in the global file list during the wait time to increase efficiency and avoids wasting computing resources. This makes the overall enumeration and encryption process quite fast.\nNext, the malware calls EnterCriticalSection to obtain the ownership of the global directory list and adds the directory path to be traversed in. Then, it calls ReleaseSemaphore to release the BEGIN_ACCESS_DIR_SEMAPHORE semaphore, which increments its count by one and signals other threads that another directory is available to be enumerated.\nFigure 28: Adding Directory to Global List & Signaling for Enumeration.\nThen, the function begins enumerating the directory for all its sub-directories. ROOK builds the path **\\\\\\*\"** and passes it to **FindFirstFileW** to start the enumeration.\nFigure 29: Enumerating Directory for Sub-Directories.\nFor each sub-directory found, the malware checks if the filename is not in the list of files and directories to avoid. If its not, the sub-directory full path is constructed and passed back to recursive_traverse_dir to be recursively traversed.\nBelow is the list of files and directories to avoid.\nFigure 30: Recursively Traversing All Sub-Directories.\nIf the command-line argument -paths is not provided, ROOK manually mounts all drives that have no volume mounted and traverses through all of them.\nFirst, it builds a list of all drive letters and iterates through it to find drives with type DRIVE_NO_ROOT_DIR. Those drives are then added to the end of the list.\nFigure 31: Finding Drives with an Invalid Root Path.\nNext, ROOK calls FindFirstVolumeW and FindNextVolumeW to scan for available volumes in the system. For each volume, the malware calls GetVolumePathNamesForVolumeNameW to retrieve the volume GUID path and SetVolumeMountPointW to set the path as the root path for the next no-root drive in the list.\nFigure 32: Mounting All Unmounted Drives.\nFinally, the malware calls GetLogicalDrives to iterate through all the drives in the system and traverse them.\nFigure 33: Traversing All Mounted Drives."
        }
    },
    {
        "report": {
            "id": "report_0xc7324147",
            "date": "20220408",
            "title": "Rook Ransomware. Static Code Analysis",
            "url": "https://chuongdong.com/reverse%20engineering/2022/01/06/RookRansomware"
        },
        "chapter": {
            "id": "chapter_0xc3927d3b",
            "title": "Child Thread",
            "text": "For the spawn child threads, they have two different modes of execution depending on the flag passed in as parameter.\nIf the flag is 1, the thread will process a directory from the global directory list.\nFirst, it enters a nested while loop like the one we have seen earlier. The first loop waits until the BEGIN_ACCESS_DIR_SEMAPHORE semaphore enters a nonsignaled state, which means no thread is adding to the directory list.\nWhile waiting for that, ROOK efficiently waits to retrieve access to the global file list, extract a file, and encrypts it similar to the previous nested while loop.\nFigure 36: Waiting for Global Directory List Access.\nAfter the directory list is full, the malware obtains ownership of the lists critical section, extracts a directory out, and begins traversing it for sub-files.\nFigure 37: Extracting Directory & Enumerating for Sub-Files.\nFor the enumeration, ROOK first builds a path to a ransom note file in the directory, calls CreateFileW to create it and WriteFile to write the ransom note content to it.\nBelow is the raw content of the ransom note.\nFigure 38: Dropping Ransom Note.\nNext, it builds the path **\\\\*\"** and passes it to **FindFirstFileW** to begin enumerating through files in the directory.\nFigure 39: Enumerating Files in Directory.\nFor each found file, ROOK checks to make sure its name is not in the files and directories to avoid list and is not HowToRestoreYourFiles.txt.\nFigure 40: Checking for Invalid Filenames.\nROOK also skips the file if its extension is .exe, .dll, or .Rook. After checking, the malware enters a nested while loop to wait until no thread can add to the global file list and extracts files to encrypt during the wait time.\nAfter getting access to the file list, ROOK calls EnterCriticalSection to obtain the ownership of the file lists critical section and\nadds the subfile to the list.\nFigure 41: Adding Subfile to Global File List.\nIf the flag from parameter is 1, the child thread will continuously encrypt files from the global directory list until the list is completely empty.\nFigure 42: Iterating & Encrypting Files in Global List."
        }
    },
    {
        "report": {
            "id": "report_0xc7324147",
            "date": "20220408",
            "title": "Rook Ransomware. Static Code Analysis",
            "url": "https://chuongdong.com/reverse%20engineering/2022/01/06/RookRansomware"
        },
        "chapter": {
            "id": "chapter_0xd6bde386",
            "title": "File Encryption",
            "text": "Prior to file encryption, ROOK calls SetFileAttributesW to set the file attribute to normal.\nIt builds the following path **.Rook\"** and calls **MoveFileExW** to change the file name to have the encrypted extension **.Rook**.\nFigure 43: Adding Encrypted Extension.\nNext, the malware calls CreateFileW to retrieve the file handle for the target and begins the encryption.\nFirst, it uses the Mbed TLS CTR_DRBG context to generates a random 16-byte AES key.\nFigure 44: Randomly Generating AES Key for File.\nNext, ROOK populates the following structures for the file footer.\nThe malware begins by calling GetFileSizeEx to retrieve the size of the file and store it in the file footer. It then uses the victims RSA public key to encrypt the AES key and store it in the metadatas AES_key_encrypted_by_my_public field.\nFigure 45: Encrypting AES Key Using Victims Public Key.\nNext, it copies the victims private key that is encrypted using ROOKs public key during RSA Key Generation into the metadatas my_private_key_encrypted_by_Rook_public field.\nFigure 46: Writing Victims Encrypted Private Key into File Footer.\nIf the file size is greater than 0x80000 bytes, the malware reads and encrypts at most three 0x80000-byte chunks at the beginning of the file using AES-128 ECB.\nFigure 47: Encrypting Files Larger Than 0x80000 Bytes.\nIf the file size is less than 0x80000 bytes or is between 0x80000 and 0x180000 bytes, the entire file will be encrypted.\nFigure 48: Calculating & Encrypting the Last Chunk That Is Less Than 0x80000 Bytes.\nFinally, the file footer is written to the end of the file, which ends the encryption routine.\nFigure 49: Writing File Footer.\nIf ROOK is unable to open the file prior to encryption, the malware attempts to terminate the file owners process.\nIt first calls RmStartSession to starts a new Restart Manager session and WideCharToMultiByte to convert the file path to a multibyte buffer.\nFigure 50: Starting A Restart Manager Session.\nUsing that session handle, the malware calls RmRegisterResources to register the target file as a resource to the RM.\nFigure 51: Registering Target File as a Resource.\nNext, it calls RmGetList to get a list of all applications that are using the file. For each of these applications, if the applications type is Windows Explorer or a critical process, it is skipped.\nThen, ROOK checks to make sure the application is not its own ransomware process through the process IDs. Finally, it calls OpenProcess to retrieve the processs handle and terminate it using TerminateProcess.\nFigure 52: Terminating File Owners.\nAfter terminating all processes that are using the file, ROOK passes it back in to be encrypted.\nFigure 53: Setting Up File to Be Encrypted Again."
        }
    },
    {
        "report": {
            "id": "report_0xc7324147",
            "date": "20220408",
            "title": "Rook Ransomware. Static Code Analysis",
            "url": "https://chuongdong.com/reverse%20engineering/2022/01/06/RookRansomware"
        },
        "chapter": {
            "id": "chapter_0x23e5cc32",
            "title": "References",
            "text": "https://infosecwriteups.com/alternate-data-streams-ads-54b144a831f1\nhttps://www.sentinelone.com/labs/new-rook-ransomware-feeds-off-the-code-of-babuk/\nhttps://chuongdong.com/reverse%20engineering/2021/01/03/BabukRansomware/\nhttps://chuongdong.com/reverse%20engineering/2021/01/16/BabukRansomware-v3/\nTwitter twitter\nFacebook facebook\nEmail email"
        }
    }
]