[
    {
        "report": {
            "id": "report_0x9ad9d7ae",
            "date": "20220401",
            "title": "Complete dissection of an APK with a suspicious C2 Server",
            "url": "https://lab52.io/blog/complete-dissection-of-an-apk-with-a-suspicious-c2-server"
        },
        "chapter": {
            "id": "chapter_0x55e35d66",
            "title": "Complete dissection of an APK with a suspicious C2 Server",
            "text": "April 01, 2022\nDuring our analysis of the Penquin-related infrastructure we reported in our previous post, we paid special attention to the malicious binaries contacting these IP addresses, since as we showed in the analysis, they had been used as C2 of other threats used by Turla.\nOne threat that makes contact with the 82.146.35[.]240 address in particular caught our attention, as it was the only one that contacts against that IP and it was an Spyware for Android devices.\nSo in this report, we want to share our analysis on the capabilities of this piece of malware, although the attribution to Turla does not seem possible given its threat capabilities.\nName: Process Manager\nPackage: com.remote.app\nHash: e0eacd72afe39de3b327a164f9c69a78c9c0f672d3ad202271772d816db4fad8 (sha-256)\nSize: 0.37 MB\nTarget SDK: Android 14 Android 21\nOn the Android device, the application is displayed with a gear-shaped icon.\nWhen the application is run, a warning appears about the permissions granted to the application. These include screen unlock attemps, lock the screen, set the device global proxy, set screen lock password expiration, set storage encryption and disable cameras.\nThe icon is then removed and the application runs in the background, showing in the notification bar.\nAs mentioned in the previous section, the malware requests different permissions from the user. However, the number of permissions requested by the application amounts to 18:\nIn addition, the manifest displays additional information about the application configuration.\nandroid:allowBackup=true: Allows the application data to be added to the backup.\nandroid:exported=true: Can share info with other apps and be accessed by the device.\nandroid_secret_code: In the manifest is the secret code that can allow access to hidden content.\nAs you can see in the image, the com.remote.app package contains 21 classes.15 of them are named after the first letters of the alphabet and then there are the DeviceAdmin, MainActivity, MainService, MyReceiver, NotificationListener and ServiceReceiver classes (the R class is generated by the JADX software).\nThe MainService class is the main class and therefore it is the first one to be executed in the application. This class has a main function OnCreate, it creates a notification channel called Battery Level Service where it will be executed.\nNext, the MainActiviy class is invoked, which using DeviceAdmin configures the device with administration permissions.\nOnce the application is configured, each of the tasks that steal information from the device are executed. Classes a, b, f, g, i, j, k, l, m, n, o and NotificationListener implement functions that steal information from the device and add it to a JSON.\nIn the Class a, the malware adds information about the installed packages to the JSON. For each of them it provides the package name, the application name, the version and its number.\nIn the Class b, the malware adds information about the calls made from the device to the JSON. For each call it shows the number, name (contact), duration, date and type. The type is a number corresponding to the following table:\nSimilarly, the Class f adds to the JSON information about the contact list. Indicating the number and name of each one.\nWe continue with the Class g that collects all the files in the device, saving in the JSON the name and the buffer of each one of them. In case a file cannot be accessed it also indicates it with Access Denied.\nIn addition, it also lists the directories, indicating the name and path.\nThis Class i implements functions related to a location listener (When the location is changed, it is enabled or disabled), then adds in the JSON the location information with each change: The altitude, latitude, longitude, precision and even the speed at which the device is moving.\nThe Class j returns adds to the JSON the clipboard information each time the clipboard is updated. To do so, it uses a listener that is configured in the MainService Class.\nThe Class k implements a timer that launches task l and deletes the generated temporary file every x seconds. Afterwards, Class l records the audio from the device, extracts it in an .mp3 format in cacheDir and then adds a buffer of the file and the name to the JSON.\nThe Class m adds information about the permissions a user has on each package to the JSON. It goes through the entire list of packages on the device and checks what permissions each package is requesting.\nThe Class n adds to the JSON conversations of all contacts thanks to (content://mms-sms/conversations?simple=true) and of addresses of all contacts (content://mms-sms/canonical-addresses). It also has a function that sends a text message in case the contact is not found.\nThe Class o collects information from Wifis scanned by the device. For each of them it adds to the JSON its SSID and BSSID number.\nFinally, NotificationListener Class collects information about notifications. When a notification is opened, it stores in the JSON the name of the app, the content and the time it has been open.\nOnce all the information has been collected in JSON format, the application contacts the C2 (82.146.35[.]240) and identifies the device by its model, version, id and manufacturer.\nLater, it will send the information it has stolen to the same server.\nTo launch each of the tasks the malware has its own commands that are defined in Class e and are launched (in their entirety) with Class d. In the following table you can see the relationship of these commands with each task.\nFinally, among one of the communications made by the malware, we noticed that it tried to download an application called Rozdhan using a goo.gl shorter.\nThe application is on Google Play and is used to earn money, has a referral system that is abused by the malware. The attacker installs it on the device and makes a profit.\nCustomers with Lab52s APT intelligence private feed service already have more tools and means of detection for this campaign.\nIn case of having threat hunting service or being client of S2Grupo CERT, this intelligence has already been applied.\nIf you need more information about Lab52s private APT intelligence feed service, you can contact us through the following link",
            "table": "IOCs;Unnamed: 1\n82[.]146.35.240;C2\ne0eacd72afe39de3b327a164f9c69a78c9c0f672d3ad202271772d816db4fad8;SHA256\n51ab555404b7215af887df3146ead5e44603be9765d39c533c21b5737a88f176;SHA256\nhxxps://videos-share-rozdhan[.]firebaseio.com;URL\nhxxp://ylink[.]cc/fqCV3;URL\nhxxp://d3hdbjtb1686tn.cloudfront[.]net/gpsdk.html;URL\nhxxp://da.anythinktech[.]com;URL\nakankdev2017@gmail[.]com;EMAIL SRC\n"
        }
    },
    {
        "report": {
            "id": "report_0x9ad9d7ae",
            "date": "20220401",
            "title": "Complete dissection of an APK with a suspicious C2 Server",
            "url": "https://lab52.io/blog/complete-dissection-of-an-apk-with-a-suspicious-c2-server"
        },
        "chapter": {
            "id": "chapter_0x9b482267",
            "title": "Complete dissection of an APK with a suspicious C2 Server",
            "text": ""
        }
    }
]