[
    {
        "report": {
            "id": "report_0x1636e3f7",
            "date": "20220324",
            "title": "MS Office Files Involved Again in Recent Emotet Trojan Campaign Part II",
            "url": "https://www.fortinet.com/blog/threat-research/ms-office-files-involved-again-in-recent-emotet-trojan-campaign-part-ii"
        },
        "chapter": {
            "id": "chapter_0x9a84a5cb",
            "title": "MS Office Files Involved Again in Recent Emotet Trojan Campaign Part II",
            "text": "Affected platforms: Microsoft Windows\nImpacted parties: 64-bit Windows Users\nImpact: Controls a victims device and collects sensitive information\nSeverity level: Critical\nFortinets FortiGuard Labs recently captured more than 500 Microsoft Excel files involved in a campaign to deliver a fresh Emotet Trojan onto the victims device.\nEmotet, known as a modular Trojan, was first discovered in the middle of 2014. Since then, it has become very active, continually updating itself. It has also been highlighted in cybersecurity news from time to time. Emotet uses social engineering, like email, to lure recipients into opening attached document files (including Word, Excel, PDF, etc.) or to click links within the content of the email that downloads the latest Emotet variant onto the victims device and then executes it.\nIn Part I of this post, I explained how this variant of Emotet is spread by malicious VBA code in Excel documents, how the downloaded Emotet malware runs within a Rundll32 program, what kind of anti-analysis techniques this variant uses., how it encrypts and submits its victims data to its C2 server., what Emotet does when it receives response data from the C2 server, and what Emotet does to enable persistence on the victims device.\nIn this post, you will learn what the data in response packets with malicious modules look like, what modules have been received from the C2 server for the current Emotet campaign, and how they are deployed in the victims device. You will also discover what sensitive data those modules steal from a victims device."
        }
    },
    {
        "report": {
            "id": "report_0x1636e3f7",
            "date": "20220324",
            "title": "MS Office Files Involved Again in Recent Emotet Trojan Campaign Part II",
            "url": "https://www.fortinet.com/blog/threat-research/ms-office-files-involved-again-in-recent-emotet-trojan-campaign-part-ii"
        },
        "chapter": {
            "id": "chapter_0xa0e7fe9a",
            "title": "When X.dll Receives a Response with a Module",
            "text": "Once the C2 server has processed and detected the first submitted packet that includes critical datasuch as the victims device system version, Windows architecture, etc.it replies with malicious modules for Emotet to execute in the victims device. All the received modules are fileless. That is, they only exist in memory and are processed by the X.dll (the core of Emotet) running in Rundll32.exe.\nFigure 1.1 A decrypted module in the packet\nFigure 1.1 is a screenshot of X.dlls code and memory. The bottom is a C2s response packet, just decrypted in memory by calling a function of 10012371. Referring to Figure 5.3 in part I of this series will help you understand the structure of the packet.\nThe box marked in red is the verification data (99 DE DD A5), a signed hash of the rest data of the packet. The following dword, 0x00000000, marked in yellow, is a flag that tells Emotet how to run the replied module. 0x00 tells it to execute the module in a newly-created thread. The binary block in blue is the module. It starts with the module size, 0x79400 in this example, and the rest part is the module binary data (4D 5A 90 00 ).\nEmotet has to verify the decrypted data, as shown in Figure 1.1, using the 40H verification data.\nIt then deploys the received module into memory and prepares to execute it. It then calls its entry point in a newly created thread. This post will refer to this module as a thread-module. Its primary purposes are to extract and execute the final functional module that steals sensitive data from the victims device and to submit the stolen data to its C2 server, which will be discussed later in this analysis. Figure 1.2 shows where the thread function ASM code calls the entry point of the deployed thread-module.\nFigure 1.2 Emotet thread function to call the thread-modules entry point"
        }
    },
    {
        "report": {
            "id": "report_0x1636e3f7",
            "date": "20220324",
            "title": "MS Office Files Involved Again in Recent Emotet Trojan Campaign Part II",
            "url": "https://www.fortinet.com/blog/threat-research/ms-office-files-involved-again-in-recent-emotet-trojan-campaign-part-ii"
        },
        "chapter": {
            "id": "chapter_0xb1c229a0",
            "title": "Thread-Module Performs Process Hollowing",
            "text": "The thread-module proceeds to decrypt a PE file, the final functional module, from its .text section into memory. To execute this module, it performs process hollowing. It does this by copying a Windows file, certutil.exe, from either %Windir%\\SysWOW64\\certutil.exe or %Windir%\\system32\\certutil.exe into the %temp% folder. It then renames it to a random file name, like uvbubqj.exe. Next, the thread-module creates a suspended process with this file.\nFigure 2.1 Call API CreateProcessW() to create a suspended process\nAs you may see in the command line string in Figure 2.1, uvbubqj.exe is the copied certutil.exe, /scomma and the subsequent temporary file C:\\Users\\Bobs\\AppData\\Local\\Temp\\60B2.tmp are the parameters for the process. The temporary file name is generated by calling the API GetTempFileNameW(). The path of the temporary file 60B2.tmp is read by the functional module and used to save stolen information. The sixth argument to CreateProcessW() is 0x00000004, which is a creation flag indicating CREATE_SUSPENDED with which CreateProcessW() creates a process and enters suspended status.\nIt then calls a group of APIs, like GetThreadContext(), VirtualAllocEx(), ReadProcessMemory(), WriteProcessMemory(), and so on, to inject the final functional module into the new process memory. The API SetThreadContext() is called later to set the new process EIP register pointing to the entry point of the functional module, which is invoked after calling the API ResumeThread().\nAfterward, the thread-module starts to monitor the temporary file in a loop until it is created with the stolen information from the victims device."
        }
    },
    {
        "report": {
            "id": "report_0x1636e3f7",
            "date": "20220324",
            "title": "MS Office Files Involved Again in Recent Emotet Trojan Campaign Part II",
            "url": "https://www.fortinet.com/blog/threat-research/ms-office-files-involved-again-in-recent-emotet-trojan-campaign-part-ii"
        },
        "chapter": {
            "id": "chapter_0xfaa2f72e",
            "title": "Looking at the Functional Modules",
            "text": "In the above analysis, I explained how a C2 module is loaded and executed in the victims device.\nThe C2 server can return many modules, each going through the same process as described above. They will have a thread-module, run in their thread, and perform their own process hollowing.\nI received three C2 modules. I will elaborate on how they work on the victims device in the following sections."
        }
    },
    {
        "report": {
            "id": "report_0x1636e3f7",
            "date": "20220324",
            "title": "MS Office Files Involved Again in Recent Emotet Trojan Campaign Part II",
            "url": "https://www.fortinet.com/blog/threat-research/ms-office-files-involved-again-in-recent-emotet-trojan-campaign-part-ii"
        },
        "chapter": {
            "id": "chapter_0xe1056654",
            "title": "Module1 - Stealing Credentials from a Victims Browsers",
            "text": "A Self-Extracting packer protects this module. It decrypts a PE file when it runs, overrides the existing code of certutil.exe, and then gets it executed.\nThe unpacked PE file is a freeware called WebBrowserPassView developed by NirSoft. It was designed as a password recovery tool but has been abused by malicious actors to steal the victims credentials. A user interface displays the saved credentials stored within several web browsers.\nFigure 3.1 Open the WebBrowserPassView module\nFigure 3.1 shows what this module looks like when I open it in my test environment. This Emotet variant uses WebBrowserPassView v2.06.\nIts thread-module passes command line parameters like /scomma C:\\Users\\Bobs\\AppData\\Local\\Temp\\7B3C.tmp to the process, which can switch WebBrowserPassView to a No-Window mode and save the retrieved credentials to a given temporary file.\nFrom its code, I learned it could collect the credentials from a variety of web browsers:\nMicrosoft IE, Microsoft Edge, Google Chrome, Mozilla Firefox, Opera, Apple Safari, SeaMonkey, Yandex, Vivaldi, Waterfox, and all other Chromium-based browsers.\nThe stolen credentials contain the following information:\nURL: The URLs that credentials are saved for\n Web Browser: The browser name that holds the credentials\n User Name, Password: The credentials\n Password Strength: Strong or weak\n User Name Field: The control name type into the user name field\n Password Field: The string entered in the password field\n Created Time: When it was saved\n Modified Time: Time when credentials were updated\n Filename: What file it has stolen the credentials from\nAll the credentials are saved in a temporary file."
        }
    },
    {
        "report": {
            "id": "report_0x1636e3f7",
            "date": "20220324",
            "title": "MS Office Files Involved Again in Recent Emotet Trojan Campaign Part II",
            "url": "https://www.fortinet.com/blog/threat-research/ms-office-files-involved-again-in-recent-emotet-trojan-campaign-part-ii"
        },
        "chapter": {
            "id": "chapter_0x18dc4d68",
            "title": "Module2 - Stealing Email Contact Information",
            "text": "This module steals its victims email contacts from their email folders inside Microsoft Outlook by going through the victims emails one by one. It keeps the gathered contact information in a doubly-linked chain structure.\nFigure 4.1 shows one email contact obtained from an email within my test Outlook account that was then added into the doubly-linked chain, as shown at the bottom. The collected data shows the Person name and Email address of the email sender. In this example, it collected Outlook and outlook@email2.office.com from the displayed email message.\nFigure 4.1 One stolen contact in a doubly-linked chain\nThis module enumerates all collected emails and puts the unique email contact information into the doubly linked chain. To collect Outlooks data, it has to call several APIs, including MAPIInitialize(), MAPILogonEx(), and MAPIFreeBuffer(), as well as create some COM objects by calling the API CoCreateInstance(), such as OlkAccountManager and OlkMail.\nFinally, it retrieves those email contacts from the linked chain one by one and saves them into the temporary file that comes from the command line parameter. Figure 4.2 shows a screenshot of the temporary file, %temp%\\6827.tmp in this example, along with the collected email contacts.\nFigure 4.2 The temporary file with stolen email contact information"
        }
    },
    {
        "report": {
            "id": "report_0x1636e3f7",
            "date": "20220324",
            "title": "MS Office Files Involved Again in Recent Emotet Trojan Campaign Part II",
            "url": "https://www.fortinet.com/blog/threat-research/ms-office-files-involved-again-in-recent-emotet-trojan-campaign-part-ii"
        },
        "chapter": {
            "id": "chapter_0x13cb986e",
            "title": "Module3 - Stealing Account Settings of Victims Email Clients",
            "text": "This functional module focuses on stealing its victims email account settings and the credentials from their email clients. It is also a packer-protected module, so it does the same thing as Module1 when its entry point is called.\nAccording to my analysis, the unpacked PE file is an EXE file that is another freeware from NirSoft called Mail PassView. It was originally designed as a small password recovery tool for email clients. Emotet is using the latest versionv1.92. Figure 5.1 is a screenshot of this software running on my test environment.\nFigure 5.1 Open Mail PassView in my test environment\nGoing through its code and constant strings, we learned it could obtain email account settings and credentials from the following email clients or other clients that could save email credentials:\nMozilla Thunderbird, Eudora, Microsoft Outlook, Microsoft Outlook Express, Windows Mail, MSNMessenger, Windows Live Mail, Group Mail, IncrediMail, Yahoo! Mail, Yahoo! Messenger, Hotmail, Google Desktop, and Google Talk.\nIt collects the settings and credentials from both the system registry and the local configuration files of these email clients. Figure 5.2 is a segment of the ASM code from a common function that has predefined many value names.\nThe software repeatedly reads User Name, Server Address, Server Port, and similar information from the system registry through these value-names under the subkeys \"HKCU\\Software\\Microsoft\\Internet Account Manager\\Accounts\" and \"HKCU\\Software\\Microsoft\\Office\\Outlook\\OMI Account Manager\\Accounts\", which are the places to save the settings and credentials for Microsoft Outlook and Microsoft Outlook Express.\nFigure 5.2 Defined value-names for reading from the system registry\nThis time, the command line parameter string to this software is \"/scomma C:\\Users\\Bobs\\AppData\\Local\\Temp\\8042.tmp\", where \"/scomma\" allows the process to run without a window and save the retrieved information to the temporary file followed."
        }
    },
    {
        "report": {
            "id": "report_0x1636e3f7",
            "date": "20220324",
            "title": "MS Office Files Involved Again in Recent Emotet Trojan Campaign Part II",
            "url": "https://www.fortinet.com/blog/threat-research/ms-office-files-involved-again-in-recent-emotet-trojan-campaign-part-ii"
        },
        "chapter": {
            "id": "chapter_0xa768e190",
            "title": "Thread-Module Submit Stolen Data",
            "text": "With the functional modules working to steal sensitive data, the thread-module keeps monitoring the temporary file until it is created with the stolen information.\nIt then loads the stolen data from the temporary file to memory and then deletes the file. Before submitting the stolen data to the C2 server, it compresses the data and encrypts it.\nFigure 6.1 Call BCryptEncrypt() to encrypt the stolen data\nThis example, shown in Figure 6.1, is where it was about to call the API BCryptEncrypt() to encrypt the packet, which begins from 4790E0. The section outlined in red is like the packet header. It contains the packet type (0x3EA) that tells the C2 server what kind of data is in the packet, a sha256 hash code (69 35 3C 4A) of the data, a module ID (0x14), as well as the Victims ID. The subsequent data, marked in blue, starts with a data size (0x398) of the following data (from 10 55 52 4C to the end), which are the compressed web browser credentials.\nThis thread-module uses eleven C2 servers to receive data stolen from the victims device. The IP and Ports of these C2 servers are encrypted in memory and get decrypted before submitting the stolen data. The three downloaded modules have the same C2 server list, which can be found in the IOC section at the end of this analysis.\nFigure 6.2 Display of a captured packet to C2 server with encrypted data\nFigure 6.2 is a screenshot of a proxy tool showing how the packet with the stolen victims sensitive data is sent to its C2 server.\nIt uses the HTTP Post method with a randomized URL to submit the stolen data in the body, which consists of a 40H-long exported key at the beginning with the encrypted data following, as shown in Figure 6.2. The C2 server can decrypt the submitted data using the 40H exported key."
        }
    },
    {
        "report": {
            "id": "report_0x1636e3f7",
            "date": "20220324",
            "title": "MS Office Files Involved Again in Recent Emotet Trojan Campaign Part II",
            "url": "https://www.fortinet.com/blog/threat-research/ms-office-files-involved-again-in-recent-emotet-trojan-campaign-part-ii"
        },
        "chapter": {
            "id": "chapter_0x5d2db493",
            "title": "Conclusion",
            "text": "In Part II of this analysis, I started with a received module packet from a C2 server and explained the structure of the packet. Next, I showed how the module (thread-module) is executed in a newly created thread. We then walked through how the thread-module performs process hollowing to execute the functional modules.\nIn discussing the three received modules, I elaborated on what kind of data Emotet can steal from the victims device, such as email contact information from the victims email account, the email accounts settings, credentials from the victims email client, and credentials saved in a wide range of web browsers.\nFinally, going back to the thread-module, Emotet reads the stolen information from the given temporary files. It then compresses and encrypts the data, which is ultimately submitted using the HTTP Post method to the C2 server."
        }
    },
    {
        "report": {
            "id": "report_0x1636e3f7",
            "date": "20220324",
            "title": "MS Office Files Involved Again in Recent Emotet Trojan Campaign Part II",
            "url": "https://www.fortinet.com/blog/threat-research/ms-office-files-involved-again-in-recent-emotet-trojan-campaign-part-ii"
        },
        "chapter": {
            "id": "chapter_0x69a4a059",
            "title": "Fortinet Protections",
            "text": "Fortinet customers are already protected from this malware by FortiGuards Web Filtering, AntiVirus, FortiMail, FortiClient, FortiEDR, and CDR (content disarm and reconstruction) services, as follows:\nThe malicious Macro inside the Excel sample mentioned in Part I of the post can be disarmed by the FortiGuard CDR (content disarm and reconstruction) service.\nAll relevant URLs have been rated as \"Malicious Websites\" by the FortiGuard Web Filtering service.\nThe captured Excel sample and the downloaded Emotet dll file are detected as \"VBA/Emotet.2826!tr.dldr \" and \" W32/Emotet.B185!tr\" and are blocked by the FortiGuard AntiVirus service.\nFortiEDR detects both the Excel file and Emotet dll file as malicious based on its behavior.\nIn addition to these protections, Fortinet also provides multiple solutions designed to help train users in detecting and understanding phishing threats:\nWe encourage organizations to have their end users take our FREE NSE Training: NSE 1 Information Security Awareness. It includes a module on Internet threats designed to help end-users learn how to identify and protect themselves from various types of phishing attacks.\nThis training can then be reinforced using our FortiPhish phishing simulation service. It uses real-world attack scenarios to train users, test awareness and vigilance, and reinforce proper practices for handling phishing incidents."
        }
    },
    {
        "report": {
            "id": "report_0x1636e3f7",
            "date": "20220324",
            "title": "MS Office Files Involved Again in Recent Emotet Trojan Campaign Part II",
            "url": "https://www.fortinet.com/blog/threat-research/ms-office-files-involved-again-in-recent-emotet-trojan-campaign-part-ii"
        },
        "chapter": {
            "id": "chapter_0x4f948367",
            "title": "IOCs",
            "text": "C2 Server List in the three thread-modules:\n144[.]217[.]88[.]125:443\n67[.]205[.]162[.]68:8080\n54[.]36[.]98[.]59:7080\n45[.]184[.]36[.]10:8080\n47[.]110[.]149[.]223:8080\n159[.]65[.]1[.]71:8080\n51[.]178[.]186[.]134:443\n131[.]100[.]24[.]199:8080\n51[.]91[.]142[.]158:80\n51[.]79[.]205[.]117:8080\n176[.]31[.]163[.]17:8080\nLearn more about FortiGuard Labs global threat intelligence and research and the FortiGuard Security Subscriptions and Services portfolio."
        }
    }
]