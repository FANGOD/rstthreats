{
    "id": "<report_0x8366c5e0>",
    "url": "https://www.crowdstrike.com/blog/how-to-hunt-for-decisivearchitect-and-justforfun-implant",
    "title": "Hunting a Global Telecommunications Threat: DecisiveArchitect and Its Custom Implant JustForFun",
    "meta": [],
    "chapters": [
        {
            "id": "<chapter_0xa43b4b17>",
            "title": "Hunting a Global Telecommunications Threat: DecisiveArchitect and Its Custom Implant JustForFun",
            "title_level": 1,
            "sentences": [
                {
                    "id": "<sentence_0x4cb3d038>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "May 25, 2022",
                    "html": "<p>May 25, 2022</p>"
                },
                {
                    "id": "<sentence_0x90663b76>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<a_0x8680b365>": "https://www.crowdstrike.com/blog/author/jamie-harries/"
                    },
                    "text": "Jamie Harries",
                    "html": "<a href=\"https://www.crowdstrike.com/blog/author/jamie-harries/\" rel=\"author\" title=\"Posts by Jamie Harries\">Jamie Harries</a>"
                },
                {
                    "id": "<sentence_0xbc7dc7a7>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<a_0x4482d376>": "https://www.crowdstrike.com/blog/category/from-the-front-lines/"
                    },
                    "text": "From The Front Lines",
                    "html": "<a href=\"https://www.crowdstrike.com/blog/category/from-the-front-lines/\" title=\"From The Front Lines\">From The Front Lines</a>"
                },
                {
                    "id": "<sentence_0xcb4343d6>",
                    "is_empty": true,
                    "have_tags": true,
                    "tags": {
                        "<img_0x38b95fcb>": "https://www.crowdstrike.com/wp-content/uploads/2022/05/0522_10_Hunting-Global-Telecomms-Threat_DecisiveArchitect_JustForFun_Blog_1060x698.jpeg"
                    },
                    "text": "",
                    "html": "<img alt=\"\" class=\"attachment-post-thumbnail size-post-thumbnail wp-post-image\" height=\"698\" src=\"https://www.crowdstrike.com/wp-content/uploads/2022/05/0522_10_Hunting-Global-Telecomms-Threat_DecisiveArchitect_JustForFun_Blog_1060x698.jpeg\" width=\"1060\"/>"
                },
                {
                    "id": "<sentence_0x59a923f4>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<a_0xb44b5d1e>": "https://www.crowdstrike.com/cybersecurity-101/endpoint-security/endpoint-detection-and-response-edr/"
                    },
                    "text": "The security landscape is constantly developing to provide easier ways to establish endpoint visibility across networks through the use of endpoint detection and response (EDR) utilities. However, certain challenges still remain, particularly as a result of many organizations need for systems running legacy or proprietary operating systems, such as Solaris. If such systems are not adequately protected using other security controls or unless they can only be accessed by systems with appropriate endpoint-based detection/prevention capabilities, this can cause a gap in visibility for an organization that an adversary could abuse.",
                    "html": "<p>The security landscape is constantly developing to provide easier ways to establish endpoint visibility across networks through the use of <a href=\"https://www.crowdstrike.com/cybersecurity-101/endpoint-security/endpoint-detection-and-response-edr/\">endpoint detection and response (EDR)</a> utilities. However, certain challenges still remain, particularly as a result of many organizations\u2019 need for systems running legacy or proprietary operating systems, such as Solaris. If such systems are not adequately protected using other security controls or unless they can only be accessed by systems with appropriate endpoint-based detection/prevention capabilities, this can cause a gap in visibility for an organization that an adversary could abuse.</p>"
                },
                {
                    "id": "<sentence_0x20569db7>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "On multiple occasions dating back to 2019, the CrowdStrike Services Incident Response team, CrowdStrike Intelligence team and Falcon OverWatch team have encountered an adversary targeting global entities, in particular telecommunications companies, to obtain targeted personal user information for example, call detail records (CDRs) or information relating to specific phone numbers.",
                    "html": "<p>On multiple occasions dating back to 2019, the CrowdStrike Services Incident Response team, CrowdStrike Intelligence team and Falcon OverWatch\u2122 team have encountered an adversary targeting global entities, in particular telecommunications companies, to obtain targeted personal user information \u2014 for example, call detail records (CDRs) or information relating to specific phone numbers. </p>"
                },
                {
                    "id": "<sentence_0x723cf5e7>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<a_0x1823ec05>": "https://www.crowdstrike.com/blog/an-analysis-of-lightbasin-telecommunications-attacks/"
                    },
                    "text": "Similar to the activity cluster reported as LightBasin, this adversary primarily focuses on Linux and Solaris systems using a custom-built implant tracked by CrowdStrike Intelligence as JustForFun (also publicly known as BPFDoor). While this adversary does interact with Windows systems, mostly during the early stages of an intrusion, CrowdStrike has not yet identified any custom implants geared toward Windows systems. Instead, the adversary relies on publicly available tools, such as ldapdomaindump, or the post-exploitation framework Impacket, to target Windows systems from previously compromised Linux systems.",
                    "html": "<p>Similar to the activity cluster reported as <a href=\"https://www.crowdstrike.com/blog/an-analysis-of-lightbasin-telecommunications-attacks/\">LightBasin</a>, this adversary primarily focuses on Linux and Solaris systems using a custom-built implant tracked by CrowdStrike Intelligence as JustForFun (also publicly known as BPFDoor). While this adversary does interact with Windows systems, mostly during the early stages of an intrusion, CrowdStrike has not yet identified any custom implants geared toward Windows systems. Instead, the adversary relies on publicly available tools, such as ldapdomaindump, or the post-exploitation framework Impacket, to target Windows systems from previously compromised Linux systems.</p>"
                },
                {
                    "id": "<sentence_0x1784ac75>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "CrowdStrike Intelligence is currently tracking these intrusions under the DecisiveArchitect activity cluster (also publicly known as Red Menshen; however, this activity is not currently attributed by CrowdStrike to a specific country-nexus. While CrowdStrike has primarily observed the adversary targeting telecommunications companies, other isolated incidents targeting organizations such as logistics entities have also been observed.",
                    "html": "<p>CrowdStrike Intelligence is currently tracking these intrusions under the DecisiveArchitect activity cluster (also publicly known as Red Menshen; however, this activity is not currently attributed by CrowdStrike to a specific country-nexus. While CrowdStrike has primarily observed the adversary targeting telecommunications companies, other isolated incidents targeting organizations such as logistics entities have also been observed.</p>"
                },
                {
                    "id": "<sentence_0x938de3b8>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "DecisiveArchitect exhibits a high degree of operational security as part of their tactics to make it more difficult for defenders to identify and investigate their activity through the use of various defense evasion techniques. While other publicly available research highlights how the implant operates, this blog focuses on methods to hunt for this implant, or implants that may operate in a similar manner, while also highlighting techniques of interest across Solaris systems.",
                    "html": "<p>DecisiveArchitect exhibits a high degree of operational security as part of their tactics to make it more difficult for defenders to identify and investigate their activity through the use of various defense evasion techniques. While other publicly available research highlights how the implant operates, this blog focuses on methods to hunt for this implant, or implants that may operate in a similar manner, while also highlighting techniques of interest across Solaris systems.</p>"
                }
            ]
        },
        {
            "id": "<chapter_0x983a2f80>",
            "title": "Hunting a Global Telecommunications Threat: DecisiveArchitect and Its Custom Implant JustForFun",
            "title_level": 1,
            "sentences": []
        },
        {
            "id": "<chapter_0xededb08>",
            "title": "Spoofed Command Lines",
            "title_level": 2,
            "sentences": [
                {
                    "id": "<sentence_0x65385d2d>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "DecisiveArchitect utilizes a custom implant tracked by CrowdStrike as JustForFun, which is typically persisted using SysVinit scripts. When executed, the implant overwrites the process command line within the process environment by randomly selecting a new command line from one of ten hard-coded options, listed in Figure 1.",
                    "html": "<p>DecisiveArchitect utilizes a custom implant tracked by CrowdStrike as JustForFun, which is typically persisted using SysVinit scripts. When executed, the implant overwrites the process command line within the process environment by randomly selecting a new command line from one of ten hard-coded options, listed in Figure 1.</p>"
                },
                {
                    "id": "<sentence_0x738bd3fe>",
                    "is_empty": true,
                    "have_tags": true,
                    "tags": {
                        "<code_0x6506651>": "/sbin/udevd -d\n/sbin/mingetty /dev/tty6\n/usr/sbin/console-kit-daemon --no-daemon\nhald-addon-acpi: listening on acpi kernel interface /proc/acpi/event\ndbus-daemon --system\nhald-runner\npickup -l -t fifo -u\navahi-daemon: chroot helper\n/sbin/auditd -n\n/usr/lib/systemd/systemd-journald"
                    },
                    "text": "",
                    "html": "<code>/sbin/udevd -d\n/sbin/mingetty /dev/tty6\n/usr/sbin/console-kit-daemon --no-daemon\nhald-addon-acpi: listening on acpi kernel interface /proc/acpi/event\ndbus-daemon --system\nhald-runner\npickup -l -t fifo -u\navahi-daemon: chroot helper\n/sbin/auditd -n\n/usr/lib/systemd/systemd-journald</code>"
                },
                {
                    "id": "<sentence_0x9f3b678f>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "Figure 1. Hard-coded options for command-line spoofing in JustForFun",
                    "html": "<p>Figure 1. Hard-coded options for command-line spoofing in JustForFun</p>"
                },
                {
                    "id": "<sentence_0xd7dda3f3>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<code_0x58be7c32>": "bash "
                    },
                    "text": "When DecisiveArchitect interacts with the implants to establish an interactive shell on a system, the bash process spawned by the implant process displays the following command line instead. This makes it appear as if the Postfix queue manager is executing as a way to hide itself from analysts and system administrators:",
                    "html": "<p>When DecisiveArchitect interacts with the implants to establish an interactive shell on a system, the <code>bash </code>process spawned by the implant process displays the following command line instead. This makes it appear as if the Postfix queue manager is executing as a way to hide itself from analysts and system administrators:</p>"
                },
                {
                    "id": "<sentence_0x173ada7a>",
                    "is_empty": true,
                    "have_tags": true,
                    "tags": {
                        "<code_0xed64531b>": "qmgr -l -t fifo -u"
                    },
                    "text": "",
                    "html": "<p><code>qmgr -l -t fifo -u</code></p>"
                },
                {
                    "id": "<sentence_0x1aaa1e1e>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<code_0x95cd982e>": "LD_PRELOAD"
                    },
                    "text": "On Solaris systems, though the executable itself exhibits no mechanism for similar command-line spoofing, DecisiveArchitect achieves similar functionality through the use of LD_PRELOAD, such as the following example identified within a SysVinit script:",
                    "html": "<p>On Solaris systems, though the executable itself exhibits no mechanism for similar command-line spoofing, DecisiveArchitect achieves similar functionality through the use of <code>LD_PRELOAD</code>, such as the following example identified within a SysVinit script:</p>"
                },
                {
                    "id": "<sentence_0x6a679792>",
                    "is_empty": true,
                    "have_tags": true,
                    "tags": {
                        "<code_0x236a0656>": "LD_PRELOAD=/lib/librbtinfo.so.1 /usr/lib/vtdaemon -c 16"
                    },
                    "text": "",
                    "html": "<p><code>LD_PRELOAD=/lib/librbtinfo.so.1 /usr/lib/vtdaemon -c 16</code></p>"
                },
                {
                    "id": "<sentence_0x921a6de9>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<code_0x5f1dd566>": "/usr/lib/vtdaemon -c 16",
                        "<code_0x6ca26d3e>": "/lib/librbtinfo.so.1"
                    },
                    "text": "When executed, the process only shows the command line /usr/lib/vtdaemon -c 16, where the actual JustForFun implant is the file /lib/librbtinfo.so.1.",
                    "html": "<p>When executed, the process only shows the command line <code>/usr/lib/vtdaemon -c 16</code>, where the actual JustForFun implant is the file <code>/lib/librbtinfo.so.1</code>.</p>"
                },
                {
                    "id": "<sentence_0xbc50984c>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<code_0x59e9ff6>": "LD_PRELOAD",
                        "<code_0x89345d59>": "/lib64/libcaac.so.1",
                        "<code_0xb709136a>": "/sbin/agetty"
                    },
                    "text": "As recently as April 2022, CrowdStrike observed further variations with regard to DecisiveArchitects tactics, techniques and procedures (TTPs), with the actor using the LD_PRELOAD environment variable across Linux systems as well, loading the JustForFun implant, /lib64/libcaac.so.1, within the legitimate process /sbin/agetty. This highlights a deviation from the standard list of spoofed command lines in Figure 1, likely as part of a further effort to remain undetected and emphasizing the importance of behavioral-based hunting and detection methods.",
                    "html": "<p>As recently as April 2022, CrowdStrike observed further variations with regard to DecisiveArchitect\u2019s tactics, techniques and procedures (TTPs), with the actor using the <code>LD_PRELOAD</code> environment variable across Linux systems as well, loading the JustForFun implant, <code>/lib64/libcaac.so.1</code>, within the legitimate process <code>/sbin/agetty</code>. This highlights a deviation from the standard list of spoofed command lines in Figure 1, likely as part of a further effort to remain undetected and emphasizing the importance of behavioral-based hunting and detection methods.</p>"
                },
                {
                    "id": "<sentence_0x71b6b906>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<code_0x8b30a082>": "ps"
                    },
                    "text": "The spoofed command line appears in commands such as ps that may be used to investigate suspicious activity on the host. The spoofed command line makes it less likely that the process will be treated as suspicious.",
                    "html": "<p>The spoofed command line appears in commands such as <code>ps</code> that may be used to investigate suspicious activity on the host. The spoofed command line makes it less likely that the process will be treated as suspicious.</p>"
                }
            ]
        },
        {
            "id": "<chapter_0x27b0a0dc>",
            "title": "Solaris Privilege Escalation Vulnerability Exploitation",
            "title_level": 2,
            "sentences": [
                {
                    "id": "<sentence_0xa422db33>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<code_0x687d6c4c>": "xscreensaver",
                        "<code_0xddc37612>": "LD_PRELOAD "
                    },
                    "text": "DecisiveArchitect targets Solaris systems via publicly available exploit code for CVE-2019-3010, a vulnerability in xscreensaver. Binaries used to exploit this vulnerability have usually been observed within a few minutes of the JustForFun implant deployment. CVE-2019-3010 is a logic bug that utilizes the LD_PRELOAD technique to facilitate local privilege escalation to the root user on Solaris 11 systems. Proof-of-concept (POC) code is publicly available and was not modified by DecisiveArchitect.1 Table 1 lists two files observed across Solaris systems related to this privilege escalation activity.",
                    "html": "<p>DecisiveArchitect targets Solaris systems via publicly available exploit code for CVE-2019-3010, a vulnerability in <code>xscreensaver</code>. Binaries used to exploit this vulnerability have usually been observed within a few minutes of the JustForFun implant deployment. CVE-2019-3010 is a logic bug that utilizes the <code>LD_PRELOAD </code>technique to facilitate local privilege escalation to the root user on Solaris 11 systems. Proof-of-concept (POC) code is publicly available and was not modified by DecisiveArchitect.1 Table 1 lists two files observed across Solaris systems related to this privilege escalation activity.</p>"
                },
                {
                    "id": "<sentence_0xbbe66f4b>",
                    "is_empty": true,
                    "have_tags": true,
                    "tags": {
                        "<table_0x6b54115c>": {
                            "0": {
                                "0": "File Path",
                                "1": "/tmp/getuid.so",
                                "2": "/usr/lib/secure/getuid.so"
                            },
                            "1": {
                                "0": "Purpose",
                                "1": "CVE-2019-3010 exploit binary",
                                "2": "CVE-2019-3010 exploit binary or log file"
                            }
                        }
                    },
                    "text": "",
                    "html": "<table class=\"orange\" width=\"624\">\n<tbody>\n<tr class=\"top-row bg-orange\">\n<td>File Path</td>\n<td>Purpose</td>\n</tr>\n<tr>\n<td>/tmp/getuid.so</td>\n<td>CVE-2019-3010 exploit binary</td>\n</tr>\n<tr>\n<td>/usr/lib/secure/getuid.so</td>\n<td>CVE-2019-3010 exploit binary or log file</td>\n</tr>\n</tbody>\n</table>"
                },
                {
                    "id": "<sentence_0x26c26cec>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "Table 1. Solaris exploitation file details",
                    "html": "<p>Table 1. Solaris exploitation file details</p>"
                }
            ]
        },
        {
            "id": "<chapter_0xa1f6f775>",
            "title": "Persistence",
            "title_level": 2,
            "sentences": [
                {
                    "id": "<sentence_0x533ac416>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<code_0x10008f2b>": "/etc/rc.d/init.d/pcscd",
                        "<code_0xff9ff097>": "/etc/sysconfig/pcscd",
                        "<code_0xa25e7e97>": "/etc/sysconfig/pcscd.conf"
                    },
                    "text": "The way in which DecisiveArchitect achieves persistence across Linux systems involves the usage of SysVinit scripts (i.e., rc.d/init.d scripts). Instead of simply creating a new script that references the JustForFun implants, DecisiveArchitect uses a more operational security-conscious approach by modifying existing SysVinit scripts to reference a small script file, which then finally references the JustForFun implant. The following highlights an example, including the lines added to the legitimate SysVinit script /etc/rc.d/init.d/pcscd and the script /etc/sysconfig/pcscd referencing the JustForFun implant, /etc/sysconfig/pcscd.conf:",
                    "html": "<p>The way in which DecisiveArchitect achieves persistence across Linux systems involves the usage of SysVinit scripts (i.e., rc.d/init.d scripts). Instead of simply creating a new script that references the JustForFun implants, DecisiveArchitect uses a more operational security-conscious approach by modifying existing SysVinit scripts to reference a small script file, which then finally references the JustForFun implant. The following highlights an example, including the lines added to the legitimate SysVinit script <code>/etc/rc.d/init.d/pcscd</code> and the script <code>/etc/sysconfig/pcscd</code> referencing the JustForFun implant, <code>/etc/sysconfig/pcscd.conf</code>:</p>"
                },
                {
                    "id": "<sentence_0xa3a91e75>",
                    "is_empty": true,
                    "have_tags": true,
                    "tags": {
                        "<code_0x1d5f365f>": "/etc/rc.d/init.d/pcscd:"
                    },
                    "text": "",
                    "html": "<p><code>/etc/rc.d/init.d/pcscd:</code></p>"
                },
                {
                    "id": "<sentence_0x1aeaf9a6>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "Line 41: if [ -f /etc/sysconfig/pcscd ] ; then<crlf>Line 42: /etc/sysconfig/pcscd",
                    "html": "<ul>\n<li>Line 41: <code>if [ -f /etc/sysconfig/pcscd ] ; then</code></li>\n<li>Line 42: <code>/etc/sysconfig/pcscd</code></li>\n</ul>"
                },
                {
                    "id": "<sentence_0x6c861a8c>",
                    "is_empty": true,
                    "have_tags": true,
                    "tags": {
                        "<code_0x465f51fc>": "/etc/sysconfig/pcscd:"
                    },
                    "text": "",
                    "html": "<p><code>/etc/sysconfig/pcscd:</code></p>"
                },
                {
                    "id": "<sentence_0x2ac0f313>",
                    "is_empty": true,
                    "have_tags": true,
                    "tags": {
                        "<code_0xac5d75d3>": "# Source config\nif [ -f /etc/sysconfig/pcscd.conf ] ; then\n /etc/sysconfig/pcscd.conf\nfi"
                    },
                    "text": "",
                    "html": "<code># Source config\nif [ -f /etc/sysconfig/pcscd.conf ] ; then\n /etc/sysconfig/pcscd.conf\nfi</code>"
                },
                {
                    "id": "<sentence_0xb54e85fb>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "With this method of nested persistence, if an analyst simply reviews a set of SysVinit scripts by themselves, identifying the malicious line associated with the JustForFun implant would likely prove difficult without subsequently reviewing all of the files referenced within the scripts. Additionally, as part of DecisiveArchitects continued commitment to operational security, the adversary modifies different legitimate SysVinit scripts across systems, and uses different file names/paths for the implant and associated persistence-related scripts, making it difficult to search across other systems for indicators identified through analysis of a single system.",
                    "html": "<p>With this method of nested persistence, if an analyst simply reviews a set of SysVinit scripts by themselves, identifying the malicious line associated with the JustForFun implant would likely prove difficult without subsequently reviewing all of the files referenced within the scripts. Additionally, as part of DecisiveArchitect\u2019s continued commitment to operational security, the adversary modifies different legitimate SysVinit scripts across systems, and uses different file names/paths for the implant and associated persistence-related scripts, making it difficult to search across other systems for indicators identified through analysis of a single system.</p>"
                }
            ]
        },
        {
            "id": "<chapter_0xea587f46>",
            "title": "Detection and Hunting",
            "title_level": 2,
            "sentences": [
                {
                    "id": "<sentence_0x6296cef3>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<code_0xe7d0b96a>": "bash"
                    },
                    "text": "One of the best ways to detect or hunt for this activity is to utilize EDR technology across supported Linux systems, with machine learning capabilities to detect and prevent the malicious implants, and with hunting capabilities to identify anomalous usage of common Linux system administration utilities or processes running with spoofed command lines (such as the bash process running with the command line showing the Postfix queue manager command line instead). Figures 2 and 3 highlight the CrowdStrike Falcon platforms machine learning capabilities and Falcon OverWatch detections associated with the JustForFun implant and JustForFun command-line tool.",
                    "html": "<p>One of the best ways to detect or hunt for this activity is to utilize EDR technology across supported Linux systems, with machine learning capabilities to detect and prevent the malicious implants, and with hunting capabilities to identify anomalous usage of common Linux system administration utilities or processes running with spoofed command lines (such as the <code>bash</code> process running with the command line showing the Postfix queue manager command line instead). Figures 2 and 3 highlight the CrowdStrike Falcon\u00ae platform\u2019s machine learning capabilities and Falcon OverWatch detections associated with the JustForFun implant and JustForFun command-line tool.</p>"
                },
                {
                    "id": "<sentence_0x4b3db81b>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "Please note: The examples in the following scenario have CrowdStrike Falcon configured with DETECTIONS ONLY and PREVENTIONS off. A properly configured Falcon instance, as noted previously, would prevent the activity presented here.",
                    "html": "<p>Please note: The examples in the following scenario have CrowdStrike Falcon configured with DETECTIONS ONLY and PREVENTIONS off. A properly configured Falcon instance, as noted previously, would prevent the activity presented here.</p>"
                },
                {
                    "id": "<sentence_0x76f33a66>",
                    "is_empty": true,
                    "have_tags": false,
                    "tags": {},
                    "text": "",
                    "html": "<a href=\"https://www.crowdstrike.com/wp-content/uploads/2022/05/Picture1-14.png\" rel=\"noopener\" target=\"_blank\"><img alt=\"\" class=\"wp-image-122000 size-full\" height=\"1102\" src=\"https://www.crowdstrike.com/wp-content/uploads/2022/05/Picture1-14.png\" width=\"4381\"/></a>"
                },
                {
                    "id": "<sentence_0x2124ccf0>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "Figure 2. JustForFun implant detection (Click to enlarge)",
                    "html": "<p class=\"wp-caption-text\" id=\"caption-attachment-122000\">Figure 2. JustForFun implant detection (Click to enlarge)</p>"
                },
                {
                    "id": "<sentence_0xb60a459f>",
                    "is_empty": true,
                    "have_tags": false,
                    "tags": {},
                    "text": "",
                    "html": "<a href=\"https://www.crowdstrike.com/wp-content/uploads/2022/05/Picture1-17.png\" rel=\"noopener\" target=\"_blank\"><img alt=\"\" class=\"wp-image-122003 size-full\" height=\"1141\" src=\"https://www.crowdstrike.com/wp-content/uploads/2022/05/Picture1-17.png\" width=\"2195\"/></a>"
                },
                {
                    "id": "<sentence_0xa7aaad65>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "Figure 3. JustForFun command-line tool detections (Click to enlarge)",
                    "html": "<p class=\"wp-caption-text\" id=\"caption-attachment-122003\">Figure 3. JustForFun command-line tool detections (Click to enlarge)</p>"
                },
                {
                    "id": "<sentence_0x8409ee8c>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "But, even if an organization has a significant number of legacy or proprietary systems, already has the adversary burrowed into their network, or simply does not have EDR software deployed across Linux systems, all is not lost.",
                    "html": "<p>But, even if an organization has a significant number of legacy or proprietary systems, already has the adversary burrowed into their network, or simply does not have EDR software deployed across Linux systems, all is not lost.</p>"
                }
            ]
        },
        {
            "id": "<chapter_0x2f83735f>",
            "title": "Hunting for Traffic Signaling Implants",
            "title_level": 2,
            "sentences": [
                {
                    "id": "<sentence_0x78193bf4>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<code_0x66ab156b>": "lsof"
                    },
                    "text": "Given the fact the JustForFun implant opens a raw socket in order to wait for the magic packet, the built-in Linux utility lsof can be used to identify running processes with a raw socket open:",
                    "html": "<p>Given the fact the JustForFun implant opens a raw socket in order to wait for the magic packet, the built-in Linux utility <code>lsof</code> can be used to identify running processes with a raw socket open:</p>"
                },
                {
                    "id": "<sentence_0xee3402c0>",
                    "is_empty": true,
                    "have_tags": true,
                    "tags": {
                        "<code_0xdb5401ae>": "lsof -RPnl | grep SOCK_RAW | grep IP"
                    },
                    "text": "",
                    "html": "<p><code>lsof -RPnl | grep SOCK_RAW | grep IP</code></p>"
                },
                {
                    "id": "<sentence_0xa81b3700>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<code_0x63b5e9aa>": "lsof ",
                        "<code_0x8b0963>": "lsof ",
                        "<code_0xdcd34a30>": "grep"
                    },
                    "text": "Even though this command alone cannot solely determine whether the implant is present as there are legitimate reasons for processes to have raw sockets open analysts can highlight processes of interest for further investigation. Of particular importance is that DecisiveArchitects use of spoofed command lines means that the lsof command will report the spoofed command line, as opposed to the actual malicious file, which may make it difficult to determine whether the process is malicious or not through this alone. However, by running the lsof command against the process ID without any of the grep filtering, an analyst can list any open files associated with that process, which should reveal the binary. An example of a true positive can be seen below, with the start of the line (i.e., the command line) displaying the start of one of the spoofed command lines listed in Figure 1. It should be noted that DecisiveArchitect can quite easily change these spoofed command lines, so analysts should be conscious of other processes beyond those listed:",
                    "html": "<p>Even though this command alone cannot solely determine whether the implant is present \u2014 as there are legitimate reasons for processes to have raw sockets open \u2014 analysts can highlight processes of interest for further investigation. Of particular importance is that DecisiveArchitect\u2019s use of spoofed command lines means that the <code>lsof </code>command will report the spoofed command line, as opposed to the actual malicious file, which may make it difficult to determine whether the process is malicious or not through this alone. However, by running the <code>lsof </code>command against the process ID without any of the <code>grep</code> filtering, an analyst can list any open files associated with that process, which should reveal the binary. An example of a true positive can be seen below, with the start of the line (i.e., the command line) displaying the start of one of the spoofed command lines listed in Figure 1. It should be noted that DecisiveArchitect can quite easily change these spoofed command lines, so analysts should be conscious of other processes beyond those listed:</p>"
                },
                {
                    "id": "<sentence_0xb72a838a>",
                    "is_empty": true,
                    "have_tags": true,
                    "tags": {
                        "<code_0xdc84b7f6>": "dbus-daem 1215 0 root 3u pack 11912 0t0 IP type=SOCK_RAW"
                    },
                    "text": "",
                    "html": "<p><code>dbus-daem 1215 0 root 3u pack 11912 0t0 IP type=SOCK_RAW</code></p>"
                },
                {
                    "id": "<sentence_0x5307040c>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<code_0x96406028>": "lsof"
                    },
                    "text": "While the lsof command is not part of a default Solaris installation, similar commands exist for obtaining additional details from processes:",
                    "html": "<p>While the <code>lsof</code> command is not part of a default Solaris installation, similar commands exist for obtaining additional details from processes:</p>"
                },
                {
                    "id": "<sentence_0xa175af6e>",
                    "is_empty": true,
                    "have_tags": true,
                    "tags": {
                        "<code_0xb067938f>": "for _PIDno in /proc/*; do line=$(pfiles \"${_PIDno}\"); echo $_PIDno $line | grep bpf; done\nfor _PIDno in /proc/*; do line=$(pmap \"${_PIDno}\"); echo $_PIDno $line | grep libpcap; done\nfor _PIDno in /proc/*; do line=$(pldd \"${_PIDno}\"); echo $_PIDno $line | grep libpcap; done"
                    },
                    "text": "",
                    "html": "<code>for _PIDno in /proc/*; do line=$(pfiles \"${_PIDno}\"); echo $_PIDno $line | grep bpf; done\nfor _PIDno in /proc/*; do line=$(pmap \"${_PIDno}\"); echo $_PIDno $line | grep libpcap; done\nfor _PIDno in /proc/*; do line=$(pldd \"${_PIDno}\"); echo $_PIDno $line | grep libpcap; done</code>"
                },
                {
                    "id": "<sentence_0xd6c38104>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<code_0xa678d23b>": "libpcap",
                        "<code_0xd209131>": "lsof"
                    },
                    "text": "The three commands above loop through every process, with the first command looking for a string indicative of a process running with a packet filter, and the other two searching for processes with the libpcap library loaded. As with the lsof command, this alone cannot solely determine whether the implant is present, so an analyst would need to further investigate the specific process to confirm the presence of the implant. DecisiveArchitects capability to spoof command lines across Solaris systems also needs to be taken into account when investigating these processes.",
                    "html": "<p>The three commands above loop through every process, with the first command looking for a string indicative of a process running with a packet filter, and the other two searching for processes with the <code>libpcap</code> library loaded. As with the <code>lsof</code> command, this alone cannot solely determine whether the implant is present, so an analyst would need to further investigate the specific process to confirm the presence of the implant. DecisiveArchitect\u2019s capability to spoof command lines across Solaris systems also needs to be taken into account when investigating these processes.</p>"
                },
                {
                    "id": "<sentence_0xb76b9948>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<code_0x3a2ca590>": "libpcap",
                        "<code_0x161a9b34>": "tcpdump"
                    },
                    "text": "When investigating any of these entries, one of the key questions to ask is whether the process in question has any reason to have a raw socket open, to be using a packet filter or to be utilizing the libpcap library. One of the most common false positives relates to systems running processes such as tcpdump or other packet capture utilities.",
                    "html": "<p>When investigating any of these entries, one of the key questions to ask is whether the process in question has any reason to have a raw socket open, to be using a packet filter or to be utilizing the <code>libpcap</code> library. One of the most common false positives relates to systems running processes such as <code>tcpdump</code> or other packet capture utilities.</p>"
                },
                {
                    "id": "<sentence_0x7a42ed21>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "While these hunting techniques provide a relatively simple method for identifying DecisiveArchitect activity based on activity observed across multiple intrusions, CrowdStrike expects that DecisiveArchitect will continue development of their implant across both Linux and Solaris platforms, while also improving their techniques regarding operational security of their intrusions to further hinder the ability of a defender to identify or investigate their activity, which might include identifying ways to combat these hunting techniques.",
                    "html": "<p>While these hunting techniques provide a relatively simple method for identifying DecisiveArchitect activity based on activity observed across multiple intrusions, CrowdStrike expects that DecisiveArchitect will continue development of their implant across both Linux and Solaris platforms, while also improving their techniques regarding operational security of their intrusions to further hinder the ability of a defender to identify or investigate their activity, which might include identifying ways to combat these hunting techniques.</p>"
                }
            ]
        },
        {
            "id": "<chapter_0x8b0488b4>",
            "title": "Conclusion",
            "title_level": 2,
            "sentences": [
                {
                    "id": "<sentence_0x539aaf92>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "DecisiveArchitects operations present a clear and present threat to telecommunications companies, as well as other organizations such as logistics entities. This blog highlights important details about DecisiveArchitects implant, their abilities to operate on Solaris systems, and ways to hunt down the adversarys implants to help organizations identify whether they have fallen victim to this campaign.",
                    "html": "<p>DecisiveArchitect\u2019s operations present a clear and present threat to telecommunications companies, as well as other organizations such as logistics entities. This blog highlights important details about DecisiveArchitect\u2019s implant, their abilities to operate on Solaris systems, and ways to hunt down the adversary\u2019s implants to help organizations identify whether they have fallen victim to this campaign.</p>"
                }
            ]
        },
        {
            "id": "<chapter_0xfd612fb8>",
            "title": "Endnotes",
            "title_level": 3,
            "sentences": [
                {
                    "id": "<sentence_0x754f386a>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "https[:]//github[.]com/0xdea/exploits/blob/master/solaris/raptor_xscreensaver",
                    "html": "<ol>\n<li>https[:]//github[.]com/0xdea/exploits/blob/master/solaris/raptor_xscreensaver</li>\n</ol>"
                }
            ]
        },
        {
            "id": "<chapter_0x53f3876>",
            "title": "Indicators of Compromise (IOCs)",
            "title_level": 2,
            "sentences": [
                {
                    "id": "<sentence_0xb945f2ea>",
                    "is_empty": true,
                    "have_tags": true,
                    "tags": {
                        "<table_0x2ae9565>": {
                            "0": {
                                "0": "Indicator",
                                "1": "/run/lock/kdumpflush /run/lock/kdumpcab /var/lock/kdumpcab /var/lock/kdumpcache /dev/shm/kdmtmpflush /dev/shm/kdevtmpfls /dev/shm/ff",
                                "2": "/etc/avahi/avahi.conf /etc/cups/cups /etc/cups/cups.conf /etc/gofer/gofor.conf /etc/gss/gss.conf /etc/jvm/jvm.conf /etc/ntp/ntpd /etc/opt/opt.conf /etc/pm/pm.conf /etc/pulp/agent.conf /etc/ssl/ssl.conf /etc/sysconfig/kdumplog /etc/sysconfig/nfs.conf /etc/sysconfig/pcscd.conf /etc/xdg/xdg.conf /usr/java/jdk1.8.0_181-amd64/.java/init.d/jexecd /usr/local/mysql/bin/myisambug /lib64/libcaac.so.1",
                                "3": "/lib/librbtinfo.so.1 /usr/lib/autofs/mountd /opt/VRTSvcs/bin/IP/online_Agent",
                                "4": "/run/lock/lvv /run/lock/lvm/lv /var/run/lvm/vm /dev/shm/sem",
                                "5": "/tmp/getuid.so /usr/lib/secure/getuid.so",
                                "6": "/usr/local/bin/GetADUsers.py /usr/local/bin/GetNPUsers.py /usr/local/bin/GetUserSPNs.py /usr/local/bin/atexec.py /usr/local/bin/dcomexec.py /usr/local/bin/dpapi.py /usr/local/bin/esentutl.py /usr/local/bin/getArch.py /usr/local/bin/getPac.py /usr/local/bin/getST.py /usr/local/bin/getTGT.py /usr/local/bin/goldenPac.py /usr/local/bin/ifmap.py /usr/local/bin/karmaSMB.py /usr/local/bin/lookupsid.py /usr/local/bin/mimikatz.py /usr/local/bin/mqtt_check.py /usr/local/bin/mssqlclient.py /usr/local/bin/mssqlinstance.py /usr/local/bin/netview.py /usr/local/bin/nmapAnswerMachine.py /usr/local/bin/ntfs-read.py /usr/local/bin/ntlmrelayx.py /usr/local/bin/opdump.py /usr/local/bin/ping.py /usr/local/bin/ping6.py /usr/local/bin/psexec.py /usr/local/bin/raiseChild.py /usr/local/bin/rdp_check.py /usr/local/bin/reg.py /usr/local/bin/registry-read.py /usr/local/bin/rpcdump.py /usr/local/bin/sambaPipe.py /usr/local/bin/samrdump.py /usr/local/bin/secretsdump.py /usr/local/bin/services.py /usr/local/bin/smbclient.py /usr/local/bin/smbexec.py /usr/local/bin/smbrelayx.py /usr/local/bin/smbserver.py /usr/local/bin/sniff.py /usr/local/bin/sniffer.py /usr/local/bin/split.py /usr/local/bin/ticketer.py /usr/local/bin/wmiexec.py /usr/local/bin/wmipersist.py /usr/local/bin/wmiquery.py",
                                "7": "/usr/local/bin/ldapdomaindump /usr/local/bin/ldd2bloodhound",
                                "8": "c:\\users\\use.bat c:\\users\\one.ps1"
                            },
                            "1": {
                                "0": "Platform",
                                "1": "Linux",
                                "2": "Linux",
                                "3": "Solaris",
                                "4": "Linux",
                                "5": "Solaris",
                                "6": "Linux",
                                "7": "Linux",
                                "8": "Windows"
                            },
                            "2": {
                                "0": "Purpose",
                                "1": "JustForFun implant pathnames (temporary \u2013 running process)",
                                "2": "JustForFun implant pathnames (persistent \u2013 on disk)",
                                "3": "JustForFun implant pathnames",
                                "4": "JustForFun CLI utility pathnames",
                                "5": "CVE-2019-3010 exploitation-related files (not unique to DecisiveArchitect)",
                                "6": "Impacket post-exploitation framework scripts (not unique to DecisiveArchitect)",
                                "7": "ldapdomaindump binaries used for Active Directory reconnaissance (not unique to DecisiveArchitect)",
                                "8": "Unknown scripts"
                            }
                        }
                    },
                    "text": "",
                    "html": "<table class=\"orange\">\n<tbody>\n<tr class=\"top-row bg-orange\">\n<td>Indicator</td>\n<td>Platform</td>\n<td>Purpose</td>\n</tr>\n<tr>\n<td><code>/run/lock/kdumpflush\n/run/lock/kdumpcab\n/var/lock/kdumpcab\n/var/lock/kdumpcache\n/dev/shm/kdmtmpflush\n/dev/shm/kdevtmpfls\n/dev/shm/ff</code></td>\n<td>Linux</td>\n<td>JustForFun implant pathnames (temporary \u2013 running process)</td>\n</tr>\n<tr>\n<td><code>/etc/avahi/avahi.conf\n/etc/cups/cups\n/etc/cups/cups.conf\n/etc/gofer/gofor.conf\n/etc/gss/gss.conf\n/etc/jvm/jvm.conf\n/etc/ntp/ntpd\n/etc/opt/opt.conf\n/etc/pm/pm.conf\n/etc/pulp/agent.conf\n/etc/ssl/ssl.conf\n/etc/sysconfig/kdumplog\n/etc/sysconfig/nfs.conf\n/etc/sysconfig/pcscd.conf\n/etc/xdg/xdg.conf\n/usr/java/jdk1.8.0_181-amd64/.java/init.d/jexecd\n/usr/local/mysql/bin/myisambug\n/lib64/libcaac.so.1</code></td>\n<td>Linux</td>\n<td>JustForFun implant pathnames (persistent \u2013 on disk)</td>\n</tr>\n<tr>\n<td><code>/lib/librbtinfo.so.1\n/usr/lib/autofs/mountd\n/opt/VRTSvcs/bin/IP/online_Agent</code></td>\n<td>Solaris</td>\n<td>JustForFun implant pathnames</td>\n</tr>\n<tr>\n<td><code>/run/lock/lvv\n/run/lock/lvm/lv\n/var/run/lvm/vm\n/dev/shm/sem</code></td>\n<td>Linux</td>\n<td>JustForFun CLI utility pathnames</td>\n</tr>\n<tr>\n<td><code>/tmp/getuid.so\n/usr/lib/secure/getuid.so</code></td>\n<td>Solaris</td>\n<td>CVE-2019-3010 exploitation-related files (not unique to DecisiveArchitect)</td>\n</tr>\n<tr>\n<td><code>/usr/local/bin/GetADUsers.py\n/usr/local/bin/GetNPUsers.py\n/usr/local/bin/GetUserSPNs.py\n/usr/local/bin/atexec.py\n/usr/local/bin/dcomexec.py\n/usr/local/bin/dpapi.py\n/usr/local/bin/esentutl.py\n/usr/local/bin/getArch.py\n/usr/local/bin/getPac.py\n/usr/local/bin/getST.py\n/usr/local/bin/getTGT.py\n/usr/local/bin/goldenPac.py\n/usr/local/bin/ifmap.py\n/usr/local/bin/karmaSMB.py\n/usr/local/bin/lookupsid.py\n/usr/local/bin/mimikatz.py\n/usr/local/bin/mqtt_check.py\n/usr/local/bin/mssqlclient.py\n/usr/local/bin/mssqlinstance.py\n/usr/local/bin/netview.py\n/usr/local/bin/nmapAnswerMachine.py\n/usr/local/bin/ntfs-read.py\n/usr/local/bin/ntlmrelayx.py\n/usr/local/bin/opdump.py\n/usr/local/bin/ping.py\n/usr/local/bin/ping6.py\n/usr/local/bin/psexec.py\n/usr/local/bin/raiseChild.py\n/usr/local/bin/rdp_check.py\n/usr/local/bin/reg.py\n/usr/local/bin/registry-read.py\n/usr/local/bin/rpcdump.py\n/usr/local/bin/sambaPipe.py\n/usr/local/bin/samrdump.py\n/usr/local/bin/secretsdump.py\n/usr/local/bin/services.py\n/usr/local/bin/smbclient.py\n/usr/local/bin/smbexec.py\n/usr/local/bin/smbrelayx.py\n/usr/local/bin/smbserver.py\n/usr/local/bin/sniff.py\n/usr/local/bin/sniffer.py\n/usr/local/bin/split.py\n/usr/local/bin/ticketer.py\n/usr/local/bin/wmiexec.py\n/usr/local/bin/wmipersist.py\n/usr/local/bin/wmiquery.py</code></td>\n<td>Linux</td>\n<td>Impacket post-exploitation framework scripts (not unique to DecisiveArchitect)</td>\n</tr>\n<tr>\n<td><code>/usr/local/bin/ldapdomaindump\n/usr/local/bin/ldd2bloodhound</code></td>\n<td>Linux</td>\n<td>ldapdomaindump binaries used for Active Directory reconnaissance (not unique to DecisiveArchitect)</td>\n</tr>\n<tr>\n<td><code>c:\\users\\use.bat\nc:\\users\\one.ps1</code></td>\n<td>Windows</td>\n<td>Unknown scripts</td>\n</tr>\n</tbody>\n</table>"
                }
            ]
        },
        {
            "id": "<chapter_0x4c05020d>",
            "title": "Additional Resources",
            "title_level": 4,
            "sentences": [
                {
                    "id": "<sentence_0x70826275>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<a_0x1823ec05>": "https://www.crowdstrike.com/blog/an-analysis-of-lightbasin-telecommunications-attacks/",
                        "<a_0x7810af80>": "https://www.crowdstrike.com/resources/reports/global-threat-report/",
                        "<a_0x44424b4d>": "https://go.crowdstrike.com/try-falcon-prevent.html"
                    },
                    "text": "Read about another threat that targets the telecommunications sector in this blog: LightBasin: A Roaming Threat to Telecommunications Companies.<crlf>Download the CrowdStrike 2022 Global Threat Report for insights into adversaries tracked by CrowdStrike Intelligence in 2020.<crlf>Get a full-featured free trial of CrowdStrike Falcon Prevent and learn how true next-gen AV performs against todays most sophisticated threats.",
                    "html": "<ul>\n<li>Read about another threat that targets the telecommunications sector in this blog: <a href=\"https://www.crowdstrike.com/blog/an-analysis-of-lightbasin-telecommunications-attacks/\">LightBasin: A Roaming Threat to Telecommunications Companies</a>.</li>\n<li>Download the <a href=\"https://www.crowdstrike.com/resources/reports/global-threat-report/\">CrowdStrike 2022 Global Threat Report</a> for insights into adversaries tracked by CrowdStrike Intelligence in 2020.</li>\n<li><a href=\"https://go.crowdstrike.com/try-falcon-prevent.html\">Get a full-featured free trial of CrowdStrike Falcon Prevent\u2122 </a>and learn how true next-gen AV performs against today\u2019s most sophisticated threats.</li>\n</ul>"
                },
                {
                    "id": "<sentence_0x223bd05a>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<a_0x5f68cfdc>": "https://twitter.com/share?text=Hunting+a+Global+Telecommunications+Threat%3A+DecisiveArchitect+and+Its+Custom+Implant+JustForFun&url=https://www.crowdstrike.com/blog/how-to-hunt-for-decisivearchitect-and-justforfun-implant/",
                        "<a_0x87cbc042>": "https://www.linkedin.com/shareArticle?mini=true&url=https://www.crowdstrike.com/blog/how-to-hunt-for-decisivearchitect-and-justforfun-implant/&title=Hunting+a+Global+Telecommunications+Threat%3A+DecisiveArchitect+and+Its+Custom+Implant+JustForFun"
                    },
                    "text": "Tweet<crlf>Share",
                    "html": "<ul class=\"list-share-buttons\">\n<li class=\"share-button\">\n<a class=\"tweet-btn\" href=\"https://twitter.com/share?text=Hunting+a+Global+Telecommunications+Threat%3A+DecisiveArchitect+and+Its+Custom+Implant+JustForFun&amp;url=https://www.crowdstrike.com/blog/how-to-hunt-for-decisivearchitect-and-justforfun-implant/\" rel=\"noopener noreferrer\" target=\"_blank\">\nTweet\n</a>\n</li>\n<li class=\"share-button\">\n<a class=\"li-btn\" href=\"https://www.linkedin.com/shareArticle?mini=true&amp;url=https://www.crowdstrike.com/blog/how-to-hunt-for-decisivearchitect-and-justforfun-implant/&amp;title=Hunting+a+Global+Telecommunications+Threat%3A+DecisiveArchitect+and+Its+Custom+Implant+JustForFun\" rel=\"noopener noreferrer\" target=\"_blank\">\nShare\n</a>\n</li>\n</ul>"
                },
                {
                    "id": "<sentence_0x58a8e2d6>",
                    "is_empty": true,
                    "have_tags": true,
                    "tags": {
                        "<a_0x44424b4d>": "https://go.crowdstrike.com/try-falcon-prevent.html",
                        "<img_0x18b7f7>": "https://www.crowdstrike.com/wp-content/themes/main-theme/dist/images/blog/breaches-stop-here-post-cta.jpeg"
                    },
                    "text": "",
                    "html": "<a href=\"https://go.crowdstrike.com/try-falcon-prevent.html\">\n<img class=\"post_cta\" src=\"https://www.crowdstrike.com/wp-content/themes/main-theme/dist/images/blog/breaches-stop-here-post-cta.jpeg\"/>\n</a>"
                }
            ]
        }
    ]
}