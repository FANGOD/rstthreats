[
    {
        "report": {
            "id": "report_0xd86a5e4a",
            "date": "20220329",
            "title": "From the Front Lines | Hive Ransomware Deploys Novel IPfuscation Technique To Avoid Detection",
            "url": "https://www.sentinelone.com/blog/hive-ransomware-deploys-novel-ipfuscation-technique"
        },
        "chapter": {
            "id": "chapter_0x453cf816",
            "title": "From the Front Lines | Hive Ransomware Deploys Novel IPfuscation Technique To Avoid Detection",
            "text": "By James Haughom, Antonis Terefos, Jim Walter, Jeff Cavanaugh, Nick Fox, and Shai Tilias"
        }
    },
    {
        "report": {
            "id": "report_0xd86a5e4a",
            "date": "20220329",
            "title": "From the Front Lines | Hive Ransomware Deploys Novel IPfuscation Technique To Avoid Detection",
            "url": "https://www.sentinelone.com/blog/hive-ransomware-deploys-novel-ipfuscation-technique"
        },
        "chapter": {
            "id": "chapter_0x64fd10f4",
            "title": "Overview",
            "text": "In a recent IR engagement, our team happened upon a rather interesting packer (aka crypter or obfuscator) that was ultimately utilized to construct and execute shellcode responsible for downloading a Cobalt Strike Beacon. The sample at the end of this chain is not necessarily sophisticated or particularly novel, but it does leverage an interesting obfuscation technique that we have dubbed IPfuscation.\nIn this post, we describe this novel technique as it is used across several variants of malware. Along with the IPfuscation technique, we have identified a number of markers which have allowed us to pivot into additional discoveries around the actor or group behind this campaign."
        }
    },
    {
        "report": {
            "id": "report_0xd86a5e4a",
            "date": "20220329",
            "title": "From the Front Lines | Hive Ransomware Deploys Novel IPfuscation Technique To Avoid Detection",
            "url": "https://www.sentinelone.com/blog/hive-ransomware-deploys-novel-ipfuscation-technique"
        },
        "chapter": {
            "id": "chapter_0x4bcaa062",
            "title": "Technical Details",
            "text": "The samples in question are 64-bit Windows Portable Executables, each containing an obfuscated payload used to deliver an additional implant. The obfuscated payload masquerades itself as an array of ASCII IPv4 addresses. Each one of these IPs is passed to the RtlIpv4StringToAddressA function, which will translate the ASCII IP string to binary. The binary representation of all of these IPs is combined to form a blob of shellcode.\nThe general flow is:\nIterate through IPs (ASCII strings)\nTranslate IPs to binary to reveal shellcode\nExecute shellcode either by: Proxying execution via callback param passed to EnumUILanguagesA Direct SYSCALLs\nUsing byte sequences, sequences of WinAPI calls, and some hardcoded metadata affiliated with the malware author, we were able to identify a handful of other variants of this loader (hashes provided below with the IOCs), one of which we have dubbed UUIDfuscation and was also recently reported on by Jason Reaves. A Golang Cobalt Strike loader was also discovered during the investigation, which had a hardcoded source code path similar to what we have already seen with the IPfuscated samples, suggesting that the same author may be responsible for both."
        }
    },
    {
        "report": {
            "id": "report_0xd86a5e4a",
            "date": "20220329",
            "title": "From the Front Lines | Hive Ransomware Deploys Novel IPfuscation Technique To Avoid Detection",
            "url": "https://www.sentinelone.com/blog/hive-ransomware-deploys-novel-ipfuscation-technique"
        },
        "chapter": {
            "id": "chapter_0x172567a8",
            "title": "Tools, COTS, LOLBINs and More",
            "text": "The TTPs uncovered during the incident align with previous reporting of the Hive Ransomware Affiliate Program, with the attackers having a preference for publicly available Penetration Testing frameworks and tooling (see TTPs table). Like many other ransomware groups, pre-deployment Powershell and BAT scripts are used to prepare the environment for distribution of the ransomware, while ADFind, SharpView, and BloodHound are used for Active Directory enumeration. Password spraying was performed with SharpHashSpray and SharpDomainSpray, while Rubeus was used to request TGTs. Cobalt Strike remains their implant of choice, and several different Cobalt Strike loaders were identified including: IPfuscated loader, Golang loader, and a vanilla Beacon DLL. Finally, GPOs and Scheduled Tasks are used to deploy digitally signed ransomware across the victims network."
        }
    },
    {
        "report": {
            "id": "report_0xd86a5e4a",
            "date": "20220329",
            "title": "From the Front Lines | Hive Ransomware Deploys Novel IPfuscation Technique To Avoid Detection",
            "url": "https://www.sentinelone.com/blog/hive-ransomware-deploys-novel-ipfuscation-technique"
        },
        "chapter": {
            "id": "chapter_0x8159b734",
            "title": "IPfuscated Cobalt Strike Loader",
            "text": "Our team discovered and analyzed a 64-bit PE (4fcc141c13a4a67e74b9f1372cfb8b722426513a) with a hardcoded PDB path matching the project structure of a Visual Studio project.\nC:\\Users\\Administrator\\source\\repos\\ConsoleApplication1\\x64\\Release\\ConsoleApplication1.pdb\nThis particular sample leverages the IPfuscation technique. Within the binary is what appears to be an array of IP addresses.\nEach of these IP addresses is passed to RtlIpv4StringToAddressA and then written to heap memory.\nWhat is interesting is that these IP addresses are not used for network communication, but instead represent an encoded payload. The binary representation of these IP-formatted strings produced by RtlIpv4StringToAddressA is actually a blob of shellcode.\nFor example, the first hardcoded IP-formatted string is the ASCII string 252.72.131.228, which has a binary representation of 0xE48348FC (big endian), and the next IP to be translated is 240.232.200.0, which has a binary representation of 0xC8E8F0. Together, they create the below sequence of bytes.\nDisassembling these binary representations shows the start of shellcode generated by common pentesting frameworks.\nOnce the shellcode has finished being deobfuscated in this manner, the malware proxies invocation of the shellcode by passing its address to the EnumUILanguagesA WinAPI function. This is achieved by supplying the shellcode address as the UILanguageEnumProc, which is a callback routine to be executed.\nThe shellcode is the common Cobalt Strike stager to download and execute Beacon. Here is a look at the PEB traversal to find one of the modules lists, followed by the ROT13 hash being calculated for target WinAPIs to execute."
        }
    },
    {
        "report": {
            "id": "report_0xd86a5e4a",
            "date": "20220329",
            "title": "From the Front Lines | Hive Ransomware Deploys Novel IPfuscation Technique To Avoid Detection",
            "url": "https://www.sentinelone.com/blog/hive-ransomware-deploys-novel-ipfuscation-technique"
        },
        "chapter": {
            "id": "chapter_0x295ba1cd",
            "title": "Hells Gate Variant",
            "text": "A handful of additional samples were found with a similar sequence of functions and static properties, including the same error message. The Hells Gate variant (d83df37d263fc9201aa4d98ace9ab57efbb90922) is different from the previous sample in that it uses Hells Gate (direct SYSCALLs) rather than EnumUILanguagesA to execute the deobfuscated shellcode. This samples PDB path is:\nE:\\Users\\PC\\source\\repos\\HellsGate+ipv4\\x64\\Release\\HellsGate+ipv4.pdb\nIn this variant, the IP-formatted strings are procedurally placed in local variables, rather than being looped through as seen previously.\nOnce all the IP strings have been defined within the scope of this function, memory is allocated with NtAllocateVirtualMemory via a direct SYSCALL, and the deobfuscation loop commences.\nFollowing the loop, a few SYSCALLs are made to pass control flow to the deobfuscated shellcode."
        }
    },
    {
        "report": {
            "id": "report_0xd86a5e4a",
            "date": "20220329",
            "title": "From the Front Lines | Hive Ransomware Deploys Novel IPfuscation Technique To Avoid Detection",
            "url": "https://www.sentinelone.com/blog/hive-ransomware-deploys-novel-ipfuscation-technique"
        },
        "chapter": {
            "id": "chapter_0x382c2deb",
            "title": "IPfuscation Variants",
            "text": "Among the discovered variants were three additional obfuscation methods using techniques very similar to IPfuscation. Rather than using IPv4 addresses, the following were also found being used to hide the payload:\nIPfuscation IPv6 addresses\nUUIDfuscation UUIDs & base64 encoded UUIDs\nMACfuscation MAC addresses\nHere we can see the original IPfuscated sample versus the UUID variant being translated via UuidFromStringA.\nThe UUID variant stores the obfuscated payload in the same manner as IPfuscated samples.\nThe MAC address variant translates the shellcode via RtlEthernetStringToAdressA and then uses a callback function, a parameter to EnumWindows, to pass control flow to the shellcode. Again, the MAC addresses forming the payload are stored the same as with previous variants.\nThe IPv6 variants operate almost identically to the original IPfuscated sample. The only difference is that IPv6-style address are used, and RtlIpv6StringToAddressA is called to translate the string to binary data."
        }
    },
    {
        "report": {
            "id": "report_0xd86a5e4a",
            "date": "20220329",
            "title": "From the Front Lines | Hive Ransomware Deploys Novel IPfuscation Technique To Avoid Detection",
            "url": "https://www.sentinelone.com/blog/hive-ransomware-deploys-novel-ipfuscation-technique"
        },
        "chapter": {
            "id": "chapter_0xf6ea877e",
            "title": "Golang Cobalt Strike Loader",
            "text": "Among other samples discovered during the incident was a Golang-compiled EXE (3a743e2f63097aa15cec5132ad076b87a9133274) with a reference to a source code Golang file that follows the same syntax as one of the identified IPfuscated samples.\n[0x0045d2c0]> iz~go~Users\n4542 0x000d62e9 0x004d78e9 27 28 .rdata ascii\nC:/Users/76383/tmp/JzkFF.go\nGetProcAddress is called repeatedly, with 8 byte stack strings being used to form the WinAPI names to be located in memory.\nThe shellcode is stored as a cleartext hexadecimal string in the .rdata section.\nThis string is read into a buffer and translated into binary, somewhat similar to the IPfuscated flow.\nBefore translation into binary:\nAfter translation into binary:\nControl flow is then passed to the shellcode, which is yet another Cobalt Strike stager attempting to download Beacon."
        }
    },
    {
        "report": {
            "id": "report_0xd86a5e4a",
            "date": "20220329",
            "title": "From the Front Lines | Hive Ransomware Deploys Novel IPfuscation Technique To Avoid Detection",
            "url": "https://www.sentinelone.com/blog/hive-ransomware-deploys-novel-ipfuscation-technique"
        },
        "chapter": {
            "id": "chapter_0x236f9364",
            "title": "Conclusion",
            "text": "Our incident response team is constantly intercepting early-use tactics, techniques and artifacts, with IPfuscation just the latest such technique deployed by malware authors. Such techniques prove that oftentimes a creative and ingenious approach can be just as effective as a highly sophisticated and advanced one, particularly when enterprise defense is based on security tools that rely on static signatures rather than on behavioral detection.\nIf you would like to learn how SentinelOne can help protect your organization regardless of the attack vector, contact us or request a free demo."
        }
    },
    {
        "report": {
            "id": "report_0xd86a5e4a",
            "date": "20220329",
            "title": "From the Front Lines | Hive Ransomware Deploys Novel IPfuscation Technique To Avoid Detection",
            "url": "https://www.sentinelone.com/blog/hive-ransomware-deploys-novel-ipfuscation-technique"
        },
        "chapter": {
            "id": "chapter_0x10423f31",
            "title": "Indicators of Compromise",
            "text": "",
            "table": "0;1\nC2;Description\n103.146.179.89;Cobalt Strike server\nservice-5inxpk6g-1304905614.gz.apigw.tencentcs[.]com;Cobalt Strike server\nservice-kibkxcw1-1305343709.bj.apigw.tencentcs[.]com:80;Cobalt Strike server\n103.146.179.89;Cobalt Strike server\n1.15.80.102;Cobalt Strike server\n175.178.62.140;Cobalt Strike server\n84.32.188.238;Cobalt Strike server\n"
        }
    },
    {
        "report": {
            "id": "report_0xd86a5e4a",
            "date": "20220329",
            "title": "From the Front Lines | Hive Ransomware Deploys Novel IPfuscation Technique To Avoid Detection",
            "url": "https://www.sentinelone.com/blog/hive-ransomware-deploys-novel-ipfuscation-technique"
        },
        "chapter": {
            "id": "chapter_0xf25fdf5c",
            "title": "YARA Rules",
            "text": "import \"pe\"\nrule IPfuscatedCobaltStrike\n{\nmeta:\ndescription = \"IPfuscated Cobalt Strike shellcode\"\nauthor = \"James Haughom @ SentinelLabs\"\ndate = \"2022-3-24\"\nhash = \"49fa346b81f5470e730219e9ed8ec9db8dd3a7fa\"\nreference = \"https://s1.ai/ipfuscation\"\nstrings:\n/*\nThis rule will detect IPfuscated Cobalt Strike shellcode\nin PEs.\nFor example:\nIPfuscated | binary representation | instruction\n++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\"252.72.131.228\" | 0xE48348FC | CLD ...\n\"240.232.200.0\" | 0xC8E8F0 | CALL ...\n*/\n$ipfuscated_payload_1 = \"252.72.131.228\"\n$ipfuscated_payload_2 = \"240.232.200.0\"\n$ipfuscated_payload_3 = \"0.0.65.81\"\n$ipfuscated_payload_4 = \"65.80.82.81\"\n$ipfuscated_payload_5 = \"86.72.49.210\"\n$ipfuscated_payload_6 = \"101.72.139.82\"\n$ipfuscated_payload_7 = \"96.72.139.82\"\n$ipfuscated_payload_8 = \"24.72.139.82\"\n$ipfuscated_payload_9 = \"32.72.139.114\"\n$ipfuscated_payload_10 = \"80.72.15.183\"\n$ipfuscated_payload_11 = \"74.74.77.49\"\n$ipfuscated_payload_12 = \"201.72.49.192\"\n$ipfuscated_payload_13 = \"172.60.97.124\"\n$ipfuscated_payload_14 = \"2.44.32.65\"\n$ipfuscated_payload_15 = \"193.201.13.65\"\n$ipfuscated_payload_16 = \"1.193.226.237\"\n$ipfuscated_payload_17 = \"82.65.81.72\"\n$ipfuscated_payload_18 = \"139.82.32.139\"\n$ipfuscated_payload_19 = \"66.60.72.1\"\n$ipfuscated_payload_20 = \"208.102.129.120\"\ncondition:\n// sample is a PE\nuint16(0) == 0x5A4D and uint32(uint32(0x3C)) == 0x00004550 and\n5 of ($ipfuscated_payload_*)\n}\nrule IPfuscationEnumUILanguages\n{\nmeta:\ndescription = \"IPfuscation with execution via EnumUILanguagesA\"\nauthor = \"James Haughom @ SentinelLabs\"\ndate = \"2022-3-24\"\nhash = \"49fa346b81f5470e730219e9ed8ec9db8dd3a7fa\"\nreference = \"https://s1.ai/ipfuscation\"\nstrings:\n// hardcoded error string in IPfuscated samples\n$err_msg = \"ERROR!\"\ncondition:\n// sample is a PE\nuint16(0) == 0x5A4D and uint32(uint32(0x3C)) == 0x00004550 and\n$err_msg and\n// IPfuscation deobfuscation\npe.imports(\"ntdll.dll\", \"RtlIpv4StringToAddressA\") and\n// shellcode execution\npe.imports (\"kernel32.dll\", \"EnumUILanguagesA\")\n}\nrule IPfuscationHellsGate\n{\nmeta:\ndescription = \"IPfuscation with execution via Hell's Gate\"\nauthor = \"James Haughom @ SentinelLabs\"\ndate = \"2022-3-24\"\nhash = \"d83df37d263fc9201aa4d98ace9ab57efbb90922\"\nreference = \"https://s1.ai/ipfuscation\"\nstrings:\n$err_msg = \"ERROR!\"\n/*\nHell's Gate / direct SYSCALLs for calling system routines\n4C 8B D1 mov r10, rcx\n8B 05 36 2F 00 00 mov eax, cs:dword_140005000\n0F 05 syscall\nC3 retn\n*/\n$syscall = { 4C 8B D1 8B 05 ?? ?? 00 00 0F 05 C3 }\n/*\nSYSCALL codes are stored in global variable\nC7 05 46 2F 00 00 00 00 00 00 mov cs:dword_140005000, 0\n89 0D 40 2F 00 00 mov cs:dword_140005000, ecx\nC3 retn\n*/\n$set_syscall_code = {C7 05 ?? ?? 00 00 00 00 00 00 89 0D ?? ?? 00 00 C3}\ncondition:\n// sample is a PE\nuint16(0) == 0x5A4D and uint32(uint32(0x3C)) == 0x00004550 and\nall of them and\n// IPfuscation deobfuscation\npe.imports(\"ntdll.dll\", \"RtlIpv4StringToAddressA\")\n}\nrule IPfuscatedVariants\n{\nmeta:\nauthor = \"@Tera0017/@SentinelOne\"\ndescription = \"*fuscation variants\"\ndate = \"2022-3-28\"\nhash = \"2ded066d20c6d64bdaf4919d42a9ac27a8e6f174\"\nreference = \"https://s1.ai/ipfuscation\"\nstrings:\n// x64 Heap Create/Alloc shellcode\n$code1 = {33 D2 48 8B [2-3] FF 15 [4] 3D 0D 00 00 C0}\n// x64 RtlIpv4StringToAddressA to shellcode\n$code2 = {B9 00 00 04 00 FF [9] 41 B8 00 00 10 00}\n\ncondition:\nany of them\n}"
        }
    },
    {
        "report": {
            "id": "report_0xd86a5e4a",
            "date": "20220329",
            "title": "From the Front Lines | Hive Ransomware Deploys Novel IPfuscation Technique To Avoid Detection",
            "url": "https://www.sentinelone.com/blog/hive-ransomware-deploys-novel-ipfuscation-technique"
        },
        "chapter": {
            "id": "chapter_0x9029f556",
            "title": "MITRE ATT&CK Hive Ransomware Gang",
            "text": "",
            "table": "0;1;2\nTTP;Description;MITRE ID\nBAT/Powershell scripts;Automate pre-ransomware deployment actions;T1059\nScheduled Tasks;Execute the ransomware payload;T1053\nCobalt Strike;Primary implant / backdoor;S0154\nADFind;Active Directory enumeration;S0552 / T1087\nSharpHashSpray;Password spraying;T1110.003\nDomainHashSpray;Password spraying;T1110.003\nBloodhound/SharpHound;Active Directory enumeration;S0521 / T1087\nSigned Ransomware;Ransomware payload is digitally signed;T1587.002\nDomain Policy GPO;Deploy ransomware via GPO;T1484\nNet-GPPPassword;Steal cleartext passwords from Group Policy Preferences;T1552.006\nRubeus;Request Kerberos Ticket Granting Tickets;T1558\nSharpview;Active Directory enumeration;T1087\nRDP;Lateral movement via RDP;T1021.001\nSAM Dump;Credential theft;T1003.002\n"
        }
    }
]