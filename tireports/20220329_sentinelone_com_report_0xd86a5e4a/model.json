{
    "id": "<report_0xd86a5e4a>",
    "url": "https://www.sentinelone.com/blog/hive-ransomware-deploys-novel-ipfuscation-technique",
    "title": "From the Front Lines | Hive Ransomware Deploys Novel IPfuscation Technique To Avoid Detection",
    "meta": [
        {
            "id": "<chapter_0xd7c97ff3>",
            "title": "From the Front Lines | Hive Ransomware Deploys Novel IPfuscation Technique To Avoid Detection",
            "title_level": 1,
            "sentences": [
                {
                    "id": "<sentence_0x72689b0>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<a_0x44ae20f3>": "https://www.sentinelone.com/blog/2022/03/"
                    },
                    "text": "March 29, 2022",
                    "html": "<a href=\"https://www.sentinelone.com/blog/2022/03/\" rel=\"bookmark\">\nMarch 29, 2022\n</a>"
                },
                {
                    "id": "<sentence_0xd397b02a>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "by",
                    "html": "\nby \n"
                },
                {
                    "id": "<sentence_0x2cbcdf44>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<a_0xf2f44fd4>": "https://www.sentinelone.com/blog/author/jamesh/"
                    },
                    "text": "James Haughom",
                    "html": "<a href=\"https://www.sentinelone.com/blog/author/jamesh/\">\nJames Haughom </a>"
                },
                {
                    "id": "<sentence_0x95550a26>",
                    "is_empty": true,
                    "have_tags": true,
                    "tags": {
                        "<a_0x60547787>": "https://www.facebook.com/sharer.php?u=https://s1.ai/wPmFHF"
                    },
                    "text": "",
                    "html": "<a class=\"socicon socicon-facebook\" href=\"https://www.facebook.com/sharer.php?u=https://s1.ai/wPmFHF\" rel=\"noopener noreferrer\" target=\"_blank\"></a>"
                },
                {
                    "id": "<sentence_0x3da60f1b>",
                    "is_empty": true,
                    "have_tags": true,
                    "tags": {
                        "<a_0x165871f6>": "https://twitter.com/intent/tweet?url=https://s1.ai/wPmFHF&text=From%20the%20Front%20Lines%20%7C%20%20Hive%20Ransomware%20Deploys%20Novel%20IPfuscation%20Technique%20To%20Avoid%20Detection"
                    },
                    "text": "",
                    "html": "<a class=\"socicon socicon-twitter\" href=\"https://twitter.com/intent/tweet?url=https://s1.ai/wPmFHF&amp;text=From%20the%20Front%20Lines%20%7C%20%20Hive%20Ransomware%20Deploys%20Novel%20IPfuscation%20Technique%20To%20Avoid%20Detection\" rel=\"noopener noreferrer\" target=\"_blank\"></a>"
                },
                {
                    "id": "<sentence_0x118d7acd>",
                    "is_empty": true,
                    "have_tags": true,
                    "tags": {
                        "<a_0x30ed5389>": "https://www.linkedin.com/shareArticle?mini=true&url=https://s1.ai/wPmFHF"
                    },
                    "text": "",
                    "html": "<a class=\"socicon socicon-linkedin\" href=\"https://www.linkedin.com/shareArticle?mini=true&amp;url=https://s1.ai/wPmFHF\" rel=\"noopener noreferrer\" target=\"_blank\"></a>"
                },
                {
                    "id": "<sentence_0xf552e839>",
                    "is_empty": true,
                    "have_tags": true,
                    "tags": {
                        "<a_0x267292d4>": "https://reddit.com/submit?url=https://s1.ai/wPmFHF"
                    },
                    "text": "",
                    "html": "<a class=\"socicon socicon-reddit\" href=\"https://reddit.com/submit?url=https://s1.ai/wPmFHF\" rel=\"noopener noreferrer\" target=\"_blank\"></a>"
                },
                {
                    "id": "<sentence_0x7bb25864>",
                    "is_empty": true,
                    "have_tags": true,
                    "tags": {
                        "<a_0x752f1ae9>": "mailto:?subject=From%20the%20Front%20Lines%20%7C%20%20Hive%20Ransomware%20Deploys%20Novel%20IPfuscation%20Technique%20To%20Avoid%20Detection&body=https%3A%2F%2Fs1.ai%2FwPmFHF"
                    },
                    "text": "",
                    "html": "<a class=\"socicon socicon-mail\" href=\"mailto:?subject=From%20the%20Front%20Lines%20%7C%20%20Hive%20Ransomware%20Deploys%20Novel%20IPfuscation%20Technique%20To%20Avoid%20Detection&amp;body=https%3A%2F%2Fs1.ai%2FwPmFHF\" rel=\"noopener noreferrer\"></a>"
                },
                {
                    "id": "<sentence_0x29892bb7>",
                    "is_empty": true,
                    "have_tags": true,
                    "tags": {
                        "<a_0x69d373b9>": "sms:?body=From%20the%20Front%20Lines%20%7C%20%20Hive%20Ransomware%20Deploys%20Novel%20IPfuscation%20Technique%20To%20Avoid%20Detection%20-%20https%3A%2F%2Fs1.ai%2FwPmFHF"
                    },
                    "text": "",
                    "html": "<a class=\"socicon socicon-sharethis\" href=\"sms:?body=From%20the%20Front%20Lines%20%7C%20%20Hive%20Ransomware%20Deploys%20Novel%20IPfuscation%20Technique%20To%20Avoid%20Detection%20-%20https%3A%2F%2Fs1.ai%2FwPmFHF\" rel=\"noopener noreferrer\"></a>"
                }
            ]
        }
    ],
    "chapters": [
        {
            "id": "<chapter_0x453cf816>",
            "title": "From the Front Lines | Hive Ransomware Deploys Novel IPfuscation Technique To Avoid Detection",
            "title_level": 1,
            "sentences": [
                {
                    "id": "<sentence_0x10ec0b1f>",
                    "is_empty": true,
                    "have_tags": false,
                    "tags": {},
                    "text": "",
                    "html": "<table id=\"amazon-polly-audio-table\">\n<tbody><tr>\n<td id=\"amazon-polly-audio-tab\">\n</td>\n</tr>\n</tbody></table>"
                },
                {
                    "id": "<sentence_0x648fdfa7>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "By James Haughom, Antonis Terefos, Jim Walter, Jeff Cavanaugh, Nick Fox, and Shai Tilias",
                    "html": "<p>By James Haughom, Antonis Terefos, Jim Walter, Jeff Cavanaugh, Nick Fox, and Shai Tilias</p>"
                }
            ]
        },
        {
            "id": "<chapter_0x64fd10f4>",
            "title": "Overview",
            "title_level": 2,
            "sentences": [
                {
                    "id": "<sentence_0xda923e83>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "In a recent IR engagement, our team happened upon a rather interesting packer (aka crypter or obfuscator) that was ultimately utilized to construct and execute shellcode responsible for downloading a Cobalt Strike Beacon. The sample at the end of this chain is not necessarily sophisticated or particularly novel, but it does leverage an interesting obfuscation technique that we have dubbed IPfuscation.",
                    "html": "<p>In a recent IR engagement, our team happened upon a rather interesting packer (aka crypter or obfuscator) that was ultimately utilized to construct and execute shellcode responsible for downloading a Cobalt Strike Beacon. The sample at the end of this chain is not necessarily sophisticated or particularly novel, but it does leverage an interesting obfuscation technique that we have dubbed \u201cIPfuscation\u201d.</p>"
                },
                {
                    "id": "<sentence_0xad52bcfa>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "In this post, we describe this novel technique as it is used across several variants of malware. Along with the IPfuscation technique, we have identified a number of markers which have allowed us to pivot into additional discoveries around the actor or group behind this campaign.",
                    "html": "<p>In this post, we describe this novel technique as it is used across several variants of malware. Along with the IPfuscation technique, we have identified a number of markers which have allowed us to pivot into additional discoveries around the actor or group behind this campaign.</p>"
                },
                {
                    "id": "<sentence_0xc2af6be>",
                    "is_empty": true,
                    "have_tags": true,
                    "tags": {
                        "<img_0xcefd348>": "https://899029.smushcdn.com/2131410/wp-content/uploads/2022/03/Hive-Ransomware-Deploys-Novel-IPfuscation-Technique-To-Avoid-Detection-5.jpg?lossy=0&strip=1&webp=0"
                    },
                    "text": "",
                    "html": "<p><img alt=\"\" class=\"aligncenter size-full wp-image-65270\" height=\"628\" src=\"https://899029.smushcdn.com/2131410/wp-content/uploads/2022/03/Hive-Ransomware-Deploys-Novel-IPfuscation-Technique-To-Avoid-Detection-5.jpg?lossy=0&amp;strip=1&amp;webp=0\" width=\"1200\"/></p>"
                }
            ]
        },
        {
            "id": "<chapter_0x4bcaa062>",
            "title": "Technical Details",
            "title_level": 2,
            "sentences": [
                {
                    "id": "<sentence_0x722a9427>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<a_0xcbeaa8eb>": "https://docs.microsoft.com/en-us/windows/win32/api/ip2string/nf-ip2string-rtlipv4stringtoaddressa"
                    },
                    "text": "The samples in question are 64-bit Windows Portable Executables, each containing an obfuscated payload used to deliver an additional implant. The obfuscated payload masquerades itself as an array of ASCII IPv4 addresses. Each one of these IPs is passed to the RtlIpv4StringToAddressA function, which will translate the ASCII IP string to binary. The binary representation of all of these IPs is combined to form a blob of shellcode.",
                    "html": "<p>The samples in question are 64-bit Windows Portable Executables, each containing an obfuscated payload used to deliver an additional implant. The obfuscated payload masquerades itself as an array of ASCII IPv4 addresses. Each one of these IPs is passed to the <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/ip2string/nf-ip2string-rtlipv4stringtoaddressa\" rel=\"noopener noreferrer\" target=\"_blank\">RtlIpv4StringToAddressA</a> function, which will translate the ASCII IP string to binary. The binary representation of all of these IPs is combined to form a blob of shellcode.</p>"
                },
                {
                    "id": "<sentence_0xa752a44>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "The general flow is:",
                    "html": "<p>The general flow is:</p>"
                },
                {
                    "id": "<sentence_0xf0a9d892>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<a_0x44250f9c>": "https://docs.microsoft.com/en-us/windows/win32/api/winnls/nf-winnls-enumuilanguagesa"
                    },
                    "text": "Iterate through IPs (ASCII strings)<crlf>Translate IPs to binary to reveal shellcode<crlf>Execute shellcode either by: Proxying execution via callback param passed to EnumUILanguagesA Direct SYSCALLs",
                    "html": "<ol>\n<li>Iterate through \u201cIPs\u201d (ASCII strings)</li>\n<li>Translate \u201cIPs\u201d to binary to reveal shellcode</li>\n<li>Execute shellcode either by:\n<ul>\n<li>Proxying execution via callback param passed to <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/winnls/nf-winnls-enumuilanguagesa\" rel=\"noopener noreferrer\" target=\"_blank\">EnumUILanguagesA</a></li>\n<li>Direct SYSCALLs</li>\n</ul>\n</li>\n</ol>"
                },
                {
                    "id": "<sentence_0x797ba757>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<a_0x13d378db>": "https://medium.com/walmartglobaltech/cobaltstrike-uuid-stager-ca7e82f7bb64"
                    },
                    "text": "Using byte sequences, sequences of WinAPI calls, and some hardcoded metadata affiliated with the malware author, we were able to identify a handful of other variants of this loader (hashes provided below with the IOCs), one of which we have dubbed UUIDfuscation and was also recently reported on by Jason Reaves. A Golang Cobalt Strike loader was also discovered during the investigation, which had a hardcoded source code path similar to what we have already seen with the IPfuscated samples, suggesting that the same author may be responsible for both.",
                    "html": "<p>Using byte sequences, sequences of WinAPI calls, and some hardcoded metadata affiliated with the malware author, we were able to identify a handful of other variants of this loader (hashes provided below with the IOCs), one of which we have dubbed \u201cUUIDfuscation\u201d and was also recently reported on by <a href=\"https://medium.com/walmartglobaltech/cobaltstrike-uuid-stager-ca7e82f7bb64\" rel=\"noopener\" target=\"_blank\">Jason Reaves</a>. A Golang Cobalt Strike loader was also discovered during the investigation, which had a hardcoded source code path similar to what we have already seen with the \u2018IPfuscated\u2019 samples, suggesting that the same author may be responsible for both.</p>"
                }
            ]
        },
        {
            "id": "<chapter_0x172567a8>",
            "title": "Tools, COTS, LOLBINs and More",
            "title_level": 2,
            "sentences": [
                {
                    "id": "<sentence_0xafca9003>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "The TTPs uncovered during the incident align with previous reporting of the Hive Ransomware Affiliate Program, with the attackers having a preference for publicly available Penetration Testing frameworks and tooling (see TTPs table). Like many other ransomware groups, pre-deployment Powershell and BAT scripts are used to prepare the environment for distribution of the ransomware, while ADFind, SharpView, and BloodHound are used for Active Directory enumeration. Password spraying was performed with SharpHashSpray and SharpDomainSpray, while Rubeus was used to request TGTs. Cobalt Strike remains their implant of choice, and several different Cobalt Strike loaders were identified including: IPfuscated loader, Golang loader, and a vanilla Beacon DLL. Finally, GPOs and Scheduled Tasks are used to deploy digitally signed ransomware across the victims network.",
                    "html": "<p>The TTPs uncovered during the incident align with previous reporting of the Hive Ransomware Affiliate Program, with the attackers having a preference for publicly available Penetration Testing frameworks and tooling (see TTPs table). Like many other ransomware groups, pre-deployment Powershell and BAT scripts are used to prepare the environment for distribution of the ransomware, while ADFind, SharpView, and BloodHound are used for Active Directory enumeration. Password spraying was performed with SharpHashSpray and SharpDomainSpray, while Rubeus was used to request TGTs. Cobalt Strike remains their implant of choice, and several different Cobalt Strike loaders were identified including: IPfuscated loader, Golang loader, and a vanilla Beacon DLL. Finally, GPOs and Scheduled Tasks are used to deploy digitally signed ransomware across the victim\u2019s network.</p>"
                }
            ]
        },
        {
            "id": "<chapter_0x8159b734>",
            "title": "IPfuscated Cobalt Strike Loader",
            "title_level": 2,
            "sentences": [
                {
                    "id": "<sentence_0x88c5ca69>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "Our team discovered and analyzed a 64-bit PE (4fcc141c13a4a67e74b9f1372cfb8b722426513a) with a hardcoded PDB path matching the project structure of a Visual Studio project.",
                    "html": "<p>Our team discovered and analyzed a 64-bit PE (4fcc141c13a4a67e74b9f1372cfb8b722426513a) with a hardcoded PDB path matching the project structure of a Visual Studio project. </p>"
                },
                {
                    "id": "<sentence_0xa68c8f48>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "C:\\Users\\Administrator\\source\\repos\\ConsoleApplication1\\x64\\Release\\ConsoleApplication1.pdb",
                    "html": "\nC:\\Users\\Administrator\\source\\repos\\ConsoleApplication1\\x64\\Release\\ConsoleApplication1.pdb\n"
                },
                {
                    "id": "<sentence_0x873c5c6b>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "This particular sample leverages the IPfuscation technique. Within the binary is what appears to be an array of IP addresses.",
                    "html": "<p>This particular sample leverages the IPfuscation technique. Within the binary is what appears to be an array of IP addresses.</p>"
                },
                {
                    "id": "<sentence_0xfa160a28>",
                    "is_empty": true,
                    "have_tags": true,
                    "tags": {
                        "<img_0xbe1d17e0>": "https://899029.smushcdn.com/2131410/wp-content/uploads/2022/03/image15-1.jpg?lossy=0&strip=1&webp=0"
                    },
                    "text": "",
                    "html": "<p><img alt=\"\" class=\"aligncenter size-full wp-image-65251\" height=\"1022\" src=\"https://899029.smushcdn.com/2131410/wp-content/uploads/2022/03/image15-1.jpg?lossy=0&amp;strip=1&amp;webp=0\" width=\"1156\"/></p>"
                },
                {
                    "id": "<sentence_0x54b6d80a>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<code_0xff297cc8>": "RtlIpv4StringToAddressA"
                    },
                    "text": "Each of these IP addresses is passed to RtlIpv4StringToAddressA and then written to heap memory.",
                    "html": "<p>Each of these \u201cIP addresses\u201d is passed to <code>RtlIpv4StringToAddressA</code> and then written to heap memory.</p>"
                },
                {
                    "id": "<sentence_0xf0e00919>",
                    "is_empty": true,
                    "have_tags": true,
                    "tags": {
                        "<img_0xc52a8db>": "https://899029.smushcdn.com/2131410/wp-content/uploads/2022/03/image13-1.jpg?lossy=0&strip=1&webp=0"
                    },
                    "text": "",
                    "html": "<p><img alt=\"\" class=\"aligncenter size-full wp-image-65249\" height=\"1232\" src=\"https://899029.smushcdn.com/2131410/wp-content/uploads/2022/03/image13-1.jpg?lossy=0&amp;strip=1&amp;webp=0\" width=\"1474\"/></p>"
                },
                {
                    "id": "<sentence_0x785cc57>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<code_0xfaeacef1>": "RtlIpv4StringToAddressA"
                    },
                    "text": "What is interesting is that these IP addresses are not used for network communication, but instead represent an encoded payload. The binary representation of these IP-formatted strings produced by RtlIpv4StringToAddressA is actually a blob of shellcode.",
                    "html": "<p>What is interesting is that these \u201cIP addresses\u201d are not used for network communication, but instead represent an encoded payload. The binary representation of these IP-formatted strings produced by <code>RtlIpv4StringToAddressA</code> is actually a blob of shellcode.</p>"
                },
                {
                    "id": "<sentence_0xa01293fd>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "For example, the first hardcoded IP-formatted string is the ASCII string 252.72.131.228, which has a binary representation of 0xE48348FC (big endian), and the next IP to be translated is 240.232.200.0, which has a binary representation of 0xC8E8F0. Together, they create the below sequence of bytes.",
                    "html": "<p>For example, the first hardcoded IP-formatted string is the ASCII string \u201c252.72.131.228\u201d, which has a binary representation of 0xE48348FC (big endian), and the next \u201cIP\u201d to be translated is \u201c240.232.200.0\u201d, which has a binary representation of 0xC8E8F0. Together, they create the below sequence of bytes.</p>"
                },
                {
                    "id": "<sentence_0xc6341157>",
                    "is_empty": true,
                    "have_tags": true,
                    "tags": {
                        "<img_0x21dc39d>": "https://899029.smushcdn.com/2131410/wp-content/uploads/2022/03/image7-2.jpg?lossy=0&strip=1&webp=0"
                    },
                    "text": "",
                    "html": "<p><img alt=\"\" class=\"aligncenter size-full wp-image-65243\" height=\"78\" src=\"https://899029.smushcdn.com/2131410/wp-content/uploads/2022/03/image7-2.jpg?lossy=0&amp;strip=1&amp;webp=0\" width=\"916\"/></p>"
                },
                {
                    "id": "<sentence_0xf3483b3d>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "Disassembling these binary representations shows the start of shellcode generated by common pentesting frameworks.",
                    "html": "<p>Disassembling these \u201cbinary representations\u201d shows the start of shellcode generated by common pentesting frameworks.</p>"
                },
                {
                    "id": "<sentence_0x684686cf>",
                    "is_empty": true,
                    "have_tags": true,
                    "tags": {
                        "<img_0xa8b69971>": "https://899029.smushcdn.com/2131410/wp-content/uploads/2022/03/image12-1.jpg?lossy=0&strip=1&webp=0"
                    },
                    "text": "",
                    "html": "<p><img alt=\"\" class=\"aligncenter size-full wp-image-65248\" height=\"68\" src=\"https://899029.smushcdn.com/2131410/wp-content/uploads/2022/03/image12-1.jpg?lossy=0&amp;strip=1&amp;webp=0\" width=\"642\"/></p>"
                },
                {
                    "id": "<sentence_0x5f8e6f9d>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<code_0x3be010e9>": "EnumUILanguagesA",
                        "<code_0xb96dfbfd>": "UILanguageEnumProc"
                    },
                    "text": "Once the shellcode has finished being deobfuscated in this manner, the malware proxies invocation of the shellcode by passing its address to the EnumUILanguagesA WinAPI function. This is achieved by supplying the shellcode address as the UILanguageEnumProc, which is a callback routine to be executed.",
                    "html": "<p>Once the shellcode has finished being deobfuscated in this manner, the malware proxies invocation of the shellcode by passing its address to the <code>EnumUILanguagesA</code> WinAPI function. This is achieved by supplying the shellcode address as the <code>UILanguageEnumProc</code>, which is a callback routine to be executed.</p>"
                },
                {
                    "id": "<sentence_0x209cf69a>",
                    "is_empty": true,
                    "have_tags": true,
                    "tags": {
                        "<img_0x44e76d18>": "https://899029.smushcdn.com/2131410/wp-content/uploads/2022/03/image1-4.jpg?lossy=0&strip=1&webp=0"
                    },
                    "text": "",
                    "html": "<p><img alt=\"\" class=\"aligncenter size-full wp-image-65237\" height=\"328\" src=\"https://899029.smushcdn.com/2131410/wp-content/uploads/2022/03/image1-4.jpg?lossy=0&amp;strip=1&amp;webp=0\" width=\"1206\"/></p>"
                },
                {
                    "id": "<sentence_0xf1254a02>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "The shellcode is the common Cobalt Strike stager to download and execute Beacon. Here is a look at the PEB traversal to find one of the modules lists, followed by the ROT13 hash being calculated for target WinAPIs to execute.",
                    "html": "<p>The shellcode is the common Cobalt Strike stager to download and execute Beacon. Here is a look at the PEB traversal to find one of the modules lists, followed by the ROT13 hash being calculated for target WinAPIs to execute.</p>"
                },
                {
                    "id": "<sentence_0x4e8fbd80>",
                    "is_empty": true,
                    "have_tags": true,
                    "tags": {
                        "<img_0x437e1186>": "https://899029.smushcdn.com/2131410/wp-content/uploads/2022/03/image18-1.jpg?lossy=0&strip=1&webp=0"
                    },
                    "text": "",
                    "html": "<p><img alt=\"\" class=\"aligncenter size-full wp-image-65254\" height=\"790\" src=\"https://899029.smushcdn.com/2131410/wp-content/uploads/2022/03/image18-1.jpg?lossy=0&amp;strip=1&amp;webp=0\" width=\"1466\"/></p>"
                }
            ]
        },
        {
            "id": "<chapter_0x295ba1cd>",
            "title": "Hells Gate Variant",
            "title_level": 2,
            "sentences": [
                {
                    "id": "<sentence_0x3883d54f>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<a_0x5a052dc8>": "https://github.com/am0nsec/HellsGate",
                        "<code_0xc094648e>": "EnumUILanguagesA"
                    },
                    "text": "A handful of additional samples were found with a similar sequence of functions and static properties, including the same error message. The Hells Gate variant (d83df37d263fc9201aa4d98ace9ab57efbb90922) is different from the previous sample in that it uses Hells Gate (direct SYSCALLs) rather than EnumUILanguagesA to execute the deobfuscated shellcode. This samples PDB path is:",
                    "html": "<p>A handful of additional samples were found with a similar sequence of functions and static properties, including the same error message. The Hell\u2019s Gate variant (d83df37d263fc9201aa4d98ace9ab57efbb90922) is different from the previous sample in that it uses <a href=\"https://github.com/am0nsec/HellsGate\" rel=\"noopener noreferrer\" target=\"_blank\">Hell\u2019s Gate</a> (direct SYSCALLs) rather than <code>EnumUILanguagesA</code> to execute the deobfuscated shellcode. This sample\u2019s PDB path is:</p>"
                },
                {
                    "id": "<sentence_0xe53236af>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "E:\\Users\\PC\\source\\repos\\HellsGate+ipv4\\x64\\Release\\HellsGate+ipv4.pdb",
                    "html": "\nE:\\Users\\PC\\source\\repos\\HellsGate+ipv4\\x64\\Release\\HellsGate+ipv4.pdb\n"
                },
                {
                    "id": "<sentence_0x2f23598e>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "In this variant, the IP-formatted strings are procedurally placed in local variables, rather than being looped through as seen previously.",
                    "html": "<p>In this variant, the IP-formatted strings are procedurally placed in local variables, rather than being looped through as seen previously.</p>"
                },
                {
                    "id": "<sentence_0xf595adab>",
                    "is_empty": true,
                    "have_tags": true,
                    "tags": {
                        "<img_0x8435508>": "https://899029.smushcdn.com/2131410/wp-content/uploads/2022/03/image2-3.jpg?lossy=0&strip=1&webp=0"
                    },
                    "text": "",
                    "html": "<p><img alt=\"\" class=\"aligncenter size-full wp-image-65238\" height=\"1246\" src=\"https://899029.smushcdn.com/2131410/wp-content/uploads/2022/03/image2-3.jpg?lossy=0&amp;strip=1&amp;webp=0\" width=\"840\"/></p>"
                },
                {
                    "id": "<sentence_0x3f8bfa3f>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<code_0x934542df>": "NtAllocateVirtualMemory"
                    },
                    "text": "Once all the IP strings have been defined within the scope of this function, memory is allocated with NtAllocateVirtualMemory via a direct SYSCALL, and the deobfuscation loop commences.",
                    "html": "<p>Once all the IP strings have been defined within the scope of this function, memory is allocated with <code>NtAllocateVirtualMemory</code> via a direct SYSCALL, and the deobfuscation loop commences.</p>"
                },
                {
                    "id": "<sentence_0x6131b547>",
                    "is_empty": true,
                    "have_tags": true,
                    "tags": {
                        "<img_0x1cc850c>": "https://899029.smushcdn.com/2131410/wp-content/uploads/2022/03/image14-1.jpg?lossy=0&strip=1&webp=0"
                    },
                    "text": "",
                    "html": "<p><img alt=\"\" class=\"aligncenter size-full wp-image-65250\" height=\"1270\" src=\"https://899029.smushcdn.com/2131410/wp-content/uploads/2022/03/image14-1.jpg?lossy=0&amp;strip=1&amp;webp=0\" width=\"1130\"/></p>"
                },
                {
                    "id": "<sentence_0x5d53e085>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "Following the loop, a few SYSCALLs are made to pass control flow to the deobfuscated shellcode.",
                    "html": "<p>Following the loop, a few SYSCALLs are made to pass control flow to the deobfuscated shellcode.</p>"
                },
                {
                    "id": "<sentence_0x667a318>",
                    "is_empty": true,
                    "have_tags": true,
                    "tags": {
                        "<img_0xe447558a>": "https://899029.smushcdn.com/2131410/wp-content/uploads/2022/03/image10-1.jpg?lossy=0&strip=1&webp=0"
                    },
                    "text": "",
                    "html": "<p><img alt=\"\" class=\"aligncenter size-full wp-image-65246\" height=\"1170\" src=\"https://899029.smushcdn.com/2131410/wp-content/uploads/2022/03/image10-1.jpg?lossy=0&amp;strip=1&amp;webp=0\" width=\"1404\"/></p>"
                }
            ]
        },
        {
            "id": "<chapter_0x382c2deb>",
            "title": "IPfuscation Variants",
            "title_level": 2,
            "sentences": [
                {
                    "id": "<sentence_0x81d20a40>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "Among the discovered variants were three additional obfuscation methods using techniques very similar to IPfuscation. Rather than using IPv4 addresses, the following were also found being used to hide the payload:",
                    "html": "<p>Among the discovered variants were three additional obfuscation methods using techniques very similar to IPfuscation. Rather than using IPv4 addresses, the following were also found being used to hide the payload:</p>"
                },
                {
                    "id": "<sentence_0x2c0f607d>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "IPfuscation IPv6 addresses<crlf>UUIDfuscation UUIDs & base64 encoded UUIDs<crlf>MACfuscation MAC addresses",
                    "html": "<ul>\n<li>IPfuscation \u2013 IPv6 addresses</li>\n<li>UUIDfuscation \u2013 UUIDs &amp; base64 encoded UUIDs</li>\n<li>MACfuscation \u2013 MAC addresses</li>\n</ul>"
                },
                {
                    "id": "<sentence_0x1f26dcbf>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<code_0x56eba233>": "UuidFromStringA"
                    },
                    "text": "Here we can see the original IPfuscated sample versus the UUID variant being translated via UuidFromStringA.",
                    "html": "<p>Here we can see the original IPfuscated sample versus the UUID variant being translated via <code>UuidFromStringA</code>.</p>"
                },
                {
                    "id": "<sentence_0xb2e6e375>",
                    "is_empty": true,
                    "have_tags": true,
                    "tags": {
                        "<img_0xee0921cc>": "https://899029.smushcdn.com/2131410/wp-content/uploads/2022/03/image3-2.jpg?lossy=0&strip=1&webp=0"
                    },
                    "text": "",
                    "html": "<p><img alt=\"\" class=\"aligncenter size-full wp-image-65239\" height=\"270\" src=\"https://899029.smushcdn.com/2131410/wp-content/uploads/2022/03/image3-2.jpg?lossy=0&amp;strip=1&amp;webp=0\" width=\"1229\"/></p>"
                },
                {
                    "id": "<sentence_0x4779aaa3>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "The UUID variant stores the obfuscated payload in the same manner as IPfuscated samples.",
                    "html": "<p>The UUID variant stores the obfuscated payload in the same manner as IPfuscated samples.</p>"
                },
                {
                    "id": "<sentence_0x5d86f996>",
                    "is_empty": true,
                    "have_tags": true,
                    "tags": {
                        "<img_0x1c808e42>": "https://899029.smushcdn.com/2131410/wp-content/uploads/2022/03/image5-2.jpg?lossy=0&strip=1&webp=0"
                    },
                    "text": "",
                    "html": "<p><img alt=\"\" class=\"aligncenter size-full wp-image-65241\" height=\"495\" src=\"https://899029.smushcdn.com/2131410/wp-content/uploads/2022/03/image5-2.jpg?lossy=0&amp;strip=1&amp;webp=0\" width=\"1243\"/></p>"
                },
                {
                    "id": "<sentence_0x4c631c70>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<code_0x9b73838c>": "RtlEthernetStringToAdressA",
                        "<code_0x8e6442b1>": "EnumWindows"
                    },
                    "text": "The MAC address variant translates the shellcode via RtlEthernetStringToAdressA and then uses a callback function, a parameter to EnumWindows, to pass control flow to the shellcode. Again, the MAC addresses forming the payload are stored the same as with previous variants.",
                    "html": "<p>The MAC address variant translates the shellcode via <code>RtlEthernetStringToAdressA</code> and then uses a callback function, a parameter to <code>EnumWindows</code>, to pass control flow to the shellcode. Again, the MAC addresses forming the payload are stored the same as with previous variants.</p>"
                },
                {
                    "id": "<sentence_0x4dc364b1>",
                    "is_empty": true,
                    "have_tags": true,
                    "tags": {
                        "<img_0x4e1715b1>": "https://899029.smushcdn.com/2131410/wp-content/uploads/2022/03/image19-1.jpg?lossy=0&strip=1&webp=0"
                    },
                    "text": "",
                    "html": "<p><img alt=\"\" class=\"aligncenter size-full wp-image-65255\" height=\"346\" src=\"https://899029.smushcdn.com/2131410/wp-content/uploads/2022/03/image19-1.jpg?lossy=0&amp;strip=1&amp;webp=0\" width=\"598\"/></p>"
                },
                {
                    "id": "<sentence_0x50cca07e>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<code_0x236bcb2b>": "RtlIpv6StringToAddressA"
                    },
                    "text": "The IPv6 variants operate almost identically to the original IPfuscated sample. The only difference is that IPv6-style address are used, and RtlIpv6StringToAddressA is called to translate the string to binary data.",
                    "html": "<p>The IPv6 variants operate almost identically to the original IPfuscated sample. The only difference is that IPv6-style address are used, and <code>RtlIpv6StringToAddressA</code> is called to translate the string to binary data.</p>"
                },
                {
                    "id": "<sentence_0xd82b452e>",
                    "is_empty": true,
                    "have_tags": true,
                    "tags": {
                        "<img_0x20f0805f>": "https://899029.smushcdn.com/2131410/wp-content/uploads/2022/03/image11-1.jpg?lossy=0&strip=1&webp=0"
                    },
                    "text": "",
                    "html": "<p><img alt=\"\" class=\"aligncenter size-full wp-image-65247\" height=\"485\" src=\"https://899029.smushcdn.com/2131410/wp-content/uploads/2022/03/image11-1.jpg?lossy=0&amp;strip=1&amp;webp=0\" width=\"1117\"/></p>"
                }
            ]
        },
        {
            "id": "<chapter_0xf6ea877e>",
            "title": "Golang Cobalt Strike Loader",
            "title_level": 2,
            "sentences": [
                {
                    "id": "<sentence_0x6daca9c6>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "Among other samples discovered during the incident was a Golang-compiled EXE (3a743e2f63097aa15cec5132ad076b87a9133274) with a reference to a source code Golang file that follows the same syntax as one of the identified IPfuscated samples.",
                    "html": "<p>Among other samples discovered during the incident was a Golang-compiled EXE (3a743e2f63097aa15cec5132ad076b87a9133274) with a reference to a source code Golang file that follows the same syntax as one of the identified IPfuscated samples.</p>"
                },
                {
                    "id": "<sentence_0x4535f4c0>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "[0x0045d2c0]> iz~go~Users<crlf>4542 0x000d62e9 0x004d78e9 27 28 .rdata ascii<crlf>C:/Users/76383/tmp/JzkFF.go",
                    "html": "\n[0x0045d2c0]> iz~go~Users\n4542 0x000d62e9 0x004d78e9 27 28 .rdata ascii \nC:/Users/76383/tmp/JzkFF.go\n"
                },
                {
                    "id": "<sentence_0x5c718a9a>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<code_0xce0e408f>": "GetProcAddress"
                    },
                    "text": "GetProcAddress is called repeatedly, with 8 byte stack strings being used to form the WinAPI names to be located in memory.",
                    "html": "<p><code>GetProcAddress</code> is called repeatedly, with 8 byte stack strings being used to form the WinAPI names to be located in memory.</p>"
                },
                {
                    "id": "<sentence_0x90fbafa>",
                    "is_empty": true,
                    "have_tags": true,
                    "tags": {
                        "<img_0x28f6b65c>": "https://899029.smushcdn.com/2131410/wp-content/uploads/2022/03/image6-2.jpg?lossy=0&strip=1&webp=0"
                    },
                    "text": "",
                    "html": "<p><img alt=\"\" class=\"aligncenter size-full wp-image-65242\" height=\"1290\" src=\"https://899029.smushcdn.com/2131410/wp-content/uploads/2022/03/image6-2.jpg?lossy=0&amp;strip=1&amp;webp=0\" width=\"892\"/></p>"
                },
                {
                    "id": "<sentence_0xfae81fb9>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<code_0x68ef5b9e>": ".rdata"
                    },
                    "text": "The shellcode is stored as a cleartext hexadecimal string in the .rdata section.",
                    "html": "<p>The shellcode is stored as a cleartext hexadecimal string in the <code>.rdata</code> section.</p>"
                },
                {
                    "id": "<sentence_0xa668a7b3>",
                    "is_empty": true,
                    "have_tags": true,
                    "tags": {
                        "<img_0xd3c5a17c>": "https://899029.smushcdn.com/2131410/wp-content/uploads/2022/03/image8-2.jpg?lossy=0&strip=1&webp=0"
                    },
                    "text": "",
                    "html": "<p><img alt=\"\" class=\"aligncenter size-full wp-image-65244\" height=\"546\" src=\"https://899029.smushcdn.com/2131410/wp-content/uploads/2022/03/image8-2.jpg?lossy=0&amp;strip=1&amp;webp=0\" width=\"1108\"/></p>"
                },
                {
                    "id": "<sentence_0xf83ca436>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "This string is read into a buffer and translated into binary, somewhat similar to the IPfuscated flow.",
                    "html": "<p>This string is read into a buffer and translated into binary, somewhat similar to the IPfuscated flow.</p>"
                },
                {
                    "id": "<sentence_0x6776f606>",
                    "is_empty": true,
                    "have_tags": true,
                    "tags": {
                        "<img_0x6996e3ae>": "https://899029.smushcdn.com/2131410/wp-content/uploads/2022/03/image4-2.jpg?lossy=0&strip=1&webp=0"
                    },
                    "text": "",
                    "html": "<p><img alt=\"\" class=\"aligncenter size-full wp-image-65240\" height=\"1358\" src=\"https://899029.smushcdn.com/2131410/wp-content/uploads/2022/03/image4-2.jpg?lossy=0&amp;strip=1&amp;webp=0\" width=\"938\"/></p>"
                },
                {
                    "id": "<sentence_0xb94d9801>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "Before translation into binary:",
                    "html": "<p>Before translation into binary:</p>"
                },
                {
                    "id": "<sentence_0x9c84fa02>",
                    "is_empty": true,
                    "have_tags": true,
                    "tags": {
                        "<img_0x3e28f6bc>": "https://899029.smushcdn.com/2131410/wp-content/uploads/2022/03/image9-1.jpg?lossy=0&strip=1&webp=0"
                    },
                    "text": "",
                    "html": "<p><img alt=\"\" class=\"aligncenter size-full wp-image-65245\" height=\"408\" src=\"https://899029.smushcdn.com/2131410/wp-content/uploads/2022/03/image9-1.jpg?lossy=0&amp;strip=1&amp;webp=0\" width=\"1152\"/></p>"
                },
                {
                    "id": "<sentence_0x7d4d79f8>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "After translation into binary:",
                    "html": "<p>After translation into binary:</p>"
                },
                {
                    "id": "<sentence_0x94527cf6>",
                    "is_empty": true,
                    "have_tags": true,
                    "tags": {
                        "<img_0xe90dfcea>": "https://899029.smushcdn.com/2131410/wp-content/uploads/2022/03/image17-1.jpg?lossy=0&strip=1&webp=0"
                    },
                    "text": "",
                    "html": "<p><img alt=\"\" class=\"aligncenter size-full wp-image-65253\" height=\"406\" src=\"https://899029.smushcdn.com/2131410/wp-content/uploads/2022/03/image17-1.jpg?lossy=0&amp;strip=1&amp;webp=0\" width=\"1156\"/></p>"
                },
                {
                    "id": "<sentence_0x5713daf7>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "Control flow is then passed to the shellcode, which is yet another Cobalt Strike stager attempting to download Beacon.",
                    "html": "<p>Control flow is then passed to the shellcode, which is yet another Cobalt Strike stager attempting to download Beacon.</p>"
                }
            ]
        },
        {
            "id": "<chapter_0x236f9364>",
            "title": "Conclusion",
            "title_level": 2,
            "sentences": [
                {
                    "id": "<sentence_0xf79d9db6>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<a_0x964fcaa>": "https://www.sentinelone.com/blog/what-is-a-malware-file-signature-and-how-does-it-work/",
                        "<a_0x4cc51882>": "https://www.sentinelone.com/blog/active-edr-feature-spotlight/"
                    },
                    "text": "Our incident response team is constantly intercepting early-use tactics, techniques and artifacts, with IPfuscation just the latest such technique deployed by malware authors. Such techniques prove that oftentimes a creative and ingenious approach can be just as effective as a highly sophisticated and advanced one, particularly when enterprise defense is based on security tools that rely on static signatures rather than on behavioral detection.",
                    "html": "<p>Our incident response team is constantly intercepting early-use tactics, techniques and artifacts, with IPfuscation just the latest such technique deployed by malware authors. Such techniques prove that oftentimes a creative and ingenious approach can be just as effective as a highly sophisticated and advanced one, particularly when enterprise defense is based on security tools that rely on <a href=\"https://www.sentinelone.com/blog/what-is-a-malware-file-signature-and-how-does-it-work/\" rel=\"noopener noreferrer\" target=\"_blank\">static signatures</a> rather than on <a href=\"https://www.sentinelone.com/blog/active-edr-feature-spotlight/\" rel=\"noopener noreferrer\" target=\"_blank\">behavioral detection</a>.</p>"
                },
                {
                    "id": "<sentence_0x102d2315>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<a_0xcbe55877>": "https://www.sentinelone.com/contact/",
                        "<a_0xd3a6453d>": "https://www.sentinelone.com/request-demo/"
                    },
                    "text": "If you would like to learn how SentinelOne can help protect your organization regardless of the attack vector, contact us or request a free demo.",
                    "html": "<p>If you would like to learn how SentinelOne can help protect your organization regardless of the attack vector, <a href=\"https://www.sentinelone.com/contact/\" rel=\"noopener noreferrer\" target=\"_blank\">contact us</a> or request a <a href=\"https://www.sentinelone.com/request-demo/\" rel=\"noopener noreferrer\" target=\"_blank\">free demo</a>.</p>"
                }
            ]
        },
        {
            "id": "<chapter_0x10423f31>",
            "title": "Indicators of Compromise",
            "title_level": 2,
            "sentences": [
                {
                    "id": "<sentence_0x16be180b>",
                    "is_empty": true,
                    "have_tags": true,
                    "tags": {
                        "<table_0x67ac2ed2>": {
                            "0": {
                                "0": "SHA1",
                                "1": "d83df37d263fc9201aa4d98ace9ab57efbb90922",
                                "2": "49fa346b81f5470e730219e9ed8ec9db8dd3a7fa",
                                "3": "fa8795e9a9eb5040842f616119c5ab3153ad71c8",
                                "4": "6b5036bd273d9bd4353905107755416e7a37c441",
                                "5": "8a4408e4d78851bd6ee8d0249768c4d75c5c5f48",
                                "6": "49fa346b81f5470e730219e9ed8ec9db8dd3a7fa",
                                "7": "6e91cea0ec671cde7316df3d39ba6ea6464e60d9",
                                "8": "24c862dc2f67383719460f692722ac91a4ed5a3b",
                                "9": "415dc50927f9cb3dcd9256aef91152bf43b59072",
                                "10": "2ded066d20c6d64bdaf4919d42a9ac27a8e6f174",
                                "11": "27b5d056a789bcc85788dc2e0cc338ff82c57133",
                                "12": ""
                            },
                            "1": {
                                "0": "Description",
                                "1": "IPfuscated Cobalt Strike stager (Hell\u2019s Gate variant)",
                                "2": "IPfuscated Cobalt Strike stager",
                                "3": "IPfuscated Cobalt Strike stager",
                                "4": "IPfuscated Cobalt Strike stager",
                                "5": "IPfuscated Cobalt Strike stager",
                                "6": "IPfuscated Cobalt Strike stager",
                                "7": "IPfuscated Cobalt Strike stager",
                                "8": "IPfuscated Cobalt Strike stager",
                                "9": "IPfuscated Cobalt Strike stager",
                                "10": "IPfuscated Cobalt Strike stager (Hell\u2019s Gate variant)",
                                "11": "IPfuscated Cobalt Strike stager",
                                "12": ""
                            }
                        }
                    },
                    "text": "",
                    "html": "<table>\n<tbody>\n<tr>\n<td>SHA1</td>\n<td>Description</td>\n</tr>\n<tr>\n<td>d83df37d263fc9201aa4d98ace9ab57efbb90922</td>\n<td>IPfuscated Cobalt Strike stager (Hell\u2019s Gate variant)</td>\n</tr>\n<tr>\n<td>49fa346b81f5470e730219e9ed8ec9db8dd3a7fa</td>\n<td>IPfuscated Cobalt Strike stager</td>\n</tr>\n<tr>\n<td>fa8795e9a9eb5040842f616119c5ab3153ad71c8</td>\n<td>IPfuscated Cobalt Strike stager</td>\n</tr>\n<tr>\n<td>6b5036bd273d9bd4353905107755416e7a37c441</td>\n<td>IPfuscated Cobalt Strike stager</td>\n</tr>\n<tr>\n<td>8a4408e4d78851bd6ee8d0249768c4d75c5c5f48</td>\n<td>IPfuscated Cobalt Strike stager</td>\n</tr>\n<tr>\n<td>49fa346b81f5470e730219e9ed8ec9db8dd3a7fa</td>\n<td>IPfuscated Cobalt Strike stager</td>\n</tr>\n<tr>\n<td>6e91cea0ec671cde7316df3d39ba6ea6464e60d9</td>\n<td>IPfuscated Cobalt Strike stager</td>\n</tr>\n<tr>\n<td>24c862dc2f67383719460f692722ac91a4ed5a3b</td>\n<td>IPfuscated Cobalt Strike stager</td>\n</tr>\n<tr>\n<td>415dc50927f9cb3dcd9256aef91152bf43b59072</td>\n<td>IPfuscated Cobalt Strike stager</td>\n</tr>\n<tr>\n<td>2ded066d20c6d64bdaf4919d42a9ac27a8e6f174</td>\n<td>IPfuscated Cobalt Strike stager (Hell\u2019s Gate variant)</td>\n</tr>\n<tr>\n<td>27b5d056a789bcc85788dc2e0cc338ff82c57133</td>\n<td>IPfuscated Cobalt Strike stager</td>\n</tr>\n<tr>\n</tr>\n</tbody>\n</table>"
                },
                {
                    "id": "<sentence_0x69fbd8f8>",
                    "is_empty": true,
                    "have_tags": true,
                    "tags": {
                        "<table_0xc19456f8>": {
                            "0": {
                                "0": "SHA 256",
                                "1": "065de95947fac84003fd1fb9a74123238fdbe37d81ff4bd2bff6e9594aad6d8b",
                                "2": "0809e0be008cb54964e4e7bda42a845a4c618868a1e09cb0250210125c453e65",
                                "3": "12d2d3242dab3deca29e5b31e8a8998f2a62cea29592e3d2ab952fcc61b02088",
                                "4": "130c062e45d3c35ae801eb1140cbf765f350ea91f3d884b8a77ca0059d2a3c54",
                                "5": "39629dc6dc52135cad1d9d6e70e257aa0e55bd0d12da01338306fbef9a738e6b",
                                "6": "5086cc3e871cf99066421010add9d59d321d76ca5a406860497faedbb4453c28",
                                "7": "56c5403e2afe4df8e7f98fd89b0099d0e2f869386759f571de9a807538bad027",
                                "8": "60cfce921a457063569553d9d43c2618f0b1a9ab364deb7e2408a325e3af2f6f",
                                "9": "6240193f7c84723278b9b5e682b0928d4faf22d222a7aa84556c8ee692b954b0",
                                "10": "6a222453b7b3725dcf5a98e746f809e02af3a1bd42215b8a0d606c7ce34b6b2b",
                                "11": "6bdd253f408a09225dee60cc1d92498dac026793fdf2c5c332163c68d0b44efd",
                                "12": "9c90c72367526c798815a9b8d58520704dc5e9052c41d30992a3eb13b6c3dd94",
                                "13": "9cd407ea116da2cda99f7f081c9d39de0252ecd8426e6a4c41481d9113aa523e",
                                "14": "a586efbe8c627f9bb618341e5a1e1cb119a6feb7768be076d056abb21cc3db66",
                                "15": "c384021f8a68462348d89f3f7251e3483a58343577e15907b5146cbd4fa4bd53",
                                "16": "c76671a06fd6dd386af102cf2563386060f870aa8730df0b51b72e79650e5071",
                                "17": "e452371750be3b7c88804ea5320bd6a2ac0a7d2c424b53a39a2da3169e2069e9",
                                "18": "e9bb47f5587b68cd725ab4482ad7538e1a046dd41409661b60acc3e3f177e8c4",
                                "19": "e9da9b5e8ebf0b5d2ea74480e2cdbd591d82cd0bdccbdbe953a57bb5612379b0",
                                "20": "efbdb34f208faeaebf62ef11c026ff877fda4ab8ab31e99b29ff877beb4d4d2b",
                                "21": "f248488eedafbeeb91a6cfcc11f022d8c476bd53083ac26180ec5833e719b844",
                                "22": "e61ecd6f2f8c4ba8c6f135505005cc867e1eea7478a1cbb1b2daf22de25f36ce",
                                "23": "f07a3c6d9ec3aeae5d51638a1067dda23642f702a7ba86fc3df23f0397047f69",
                                "24": "7667d0e90b583da8c2964ba6ca2d3f44dd46b75a434dc2b467249cd16bf439a0",
                                "25": "75244059f912d6d35ddda061a704ef3274aaa7fae41fdea2efc149eba2b742b3",
                                "26": "7e8dd90b84b06fabd9e5290af04c4432da86e631ab6678a8726361fb45bece58",
                                "27": ""
                            },
                            "1": {
                                "0": "Description",
                                "1": "UUID variant",
                                "2": "UUID variant",
                                "3": "UUID variant",
                                "4": "UUID variant",
                                "5": "UUID variant",
                                "6": "UUID variant",
                                "7": "UUID variant",
                                "8": "UUID variant",
                                "9": "UUID variant",
                                "10": "UUID variant",
                                "11": "UUID variant",
                                "12": "UUID variant",
                                "13": "UUID variant",
                                "14": "UUID variant",
                                "15": "UUID variant",
                                "16": "UUID variant",
                                "17": "UUID variant",
                                "18": "UUID variant",
                                "19": "UUID variant",
                                "20": "UUID variant",
                                "21": "UUID variant",
                                "22": "MAC Address Variant",
                                "23": "MAC Address Variant",
                                "24": "IPv6 Variant",
                                "25": "x86 IPv4 Variant",
                                "26": "x86 IPv4 Variant",
                                "27": ""
                            }
                        }
                    },
                    "text": "",
                    "html": "<table>\n<tbody>\n<tr>\n<td>SHA 256</td>\n<td>Description</td>\n</tr>\n<tr>\n<td>065de95947fac84003fd1fb9a74123238fdbe37d81ff4bd2bff6e9594aad6d8b</td>\n<td>UUID variant</td>\n</tr>\n<tr>\n<td>0809e0be008cb54964e4e7bda42a845a4c618868a1e09cb0250210125c453e65</td>\n<td>UUID variant</td>\n</tr>\n<tr>\n<td>12d2d3242dab3deca29e5b31e8a8998f2a62cea29592e3d2ab952fcc61b02088</td>\n<td>UUID variant</td>\n</tr>\n<tr>\n<td>130c062e45d3c35ae801eb1140cbf765f350ea91f3d884b8a77ca0059d2a3c54</td>\n<td>UUID variant</td>\n</tr>\n<tr>\n<td>39629dc6dc52135cad1d9d6e70e257aa0e55bd0d12da01338306fbef9a738e6b</td>\n<td>UUID variant</td>\n</tr>\n<tr>\n<td>5086cc3e871cf99066421010add9d59d321d76ca5a406860497faedbb4453c28</td>\n<td>UUID variant</td>\n</tr>\n<tr>\n<td>56c5403e2afe4df8e7f98fd89b0099d0e2f869386759f571de9a807538bad027</td>\n<td>UUID variant</td>\n</tr>\n<tr>\n<td>60cfce921a457063569553d9d43c2618f0b1a9ab364deb7e2408a325e3af2f6f</td>\n<td>UUID variant</td>\n</tr>\n<tr>\n<td>6240193f7c84723278b9b5e682b0928d4faf22d222a7aa84556c8ee692b954b0</td>\n<td>UUID variant</td>\n</tr>\n<tr>\n<td>6a222453b7b3725dcf5a98e746f809e02af3a1bd42215b8a0d606c7ce34b6b2b</td>\n<td>UUID variant</td>\n</tr>\n<tr>\n<td>6bdd253f408a09225dee60cc1d92498dac026793fdf2c5c332163c68d0b44efd</td>\n<td>UUID variant</td>\n</tr>\n<tr>\n<td>9c90c72367526c798815a9b8d58520704dc5e9052c41d30992a3eb13b6c3dd94</td>\n<td>UUID variant</td>\n</tr>\n<tr>\n<td>9cd407ea116da2cda99f7f081c9d39de0252ecd8426e6a4c41481d9113aa523e</td>\n<td>UUID variant</td>\n</tr>\n<tr>\n<td>a586efbe8c627f9bb618341e5a1e1cb119a6feb7768be076d056abb21cc3db66</td>\n<td>UUID variant</td>\n</tr>\n<tr>\n<td>c384021f8a68462348d89f3f7251e3483a58343577e15907b5146cbd4fa4bd53</td>\n<td>UUID variant</td>\n</tr>\n<tr>\n<td>c76671a06fd6dd386af102cf2563386060f870aa8730df0b51b72e79650e5071</td>\n<td>UUID variant</td>\n</tr>\n<tr>\n<td>e452371750be3b7c88804ea5320bd6a2ac0a7d2c424b53a39a2da3169e2069e9</td>\n<td>UUID variant</td>\n</tr>\n<tr>\n<td>e9bb47f5587b68cd725ab4482ad7538e1a046dd41409661b60acc3e3f177e8c4</td>\n<td>UUID variant</td>\n</tr>\n<tr>\n<td>e9da9b5e8ebf0b5d2ea74480e2cdbd591d82cd0bdccbdbe953a57bb5612379b0</td>\n<td>UUID variant</td>\n</tr>\n<tr>\n<td>efbdb34f208faeaebf62ef11c026ff877fda4ab8ab31e99b29ff877beb4d4d2b</td>\n<td>UUID variant</td>\n</tr>\n<tr>\n<td>f248488eedafbeeb91a6cfcc11f022d8c476bd53083ac26180ec5833e719b844</td>\n<td>UUID variant</td>\n</tr>\n<tr>\n<td>e61ecd6f2f8c4ba8c6f135505005cc867e1eea7478a1cbb1b2daf22de25f36ce</td>\n<td>MAC Address Variant</td>\n</tr>\n<tr>\n<td>f07a3c6d9ec3aeae5d51638a1067dda23642f702a7ba86fc3df23f0397047f69</td>\n<td>MAC Address Variant</td>\n</tr>\n<tr>\n<td>7667d0e90b583da8c2964ba6ca2d3f44dd46b75a434dc2b467249cd16bf439a0</td>\n<td>IPv6 Variant</td>\n</tr>\n<tr>\n<td>75244059f912d6d35ddda061a704ef3274aaa7fae41fdea2efc149eba2b742b3</td>\n<td>x86 IPv4 Variant</td>\n</tr>\n<tr>\n<td>7e8dd90b84b06fabd9e5290af04c4432da86e631ab6678a8726361fb45bece58</td>\n<td>x86 IPv4 Variant</td>\n</tr>\n<tr>\n</tr>\n</tbody>\n</table>"
                },
                {
                    "id": "<sentence_0x778848ba>",
                    "is_empty": true,
                    "have_tags": true,
                    "tags": {
                        "<table_0xe1bd5a4b>": {
                            "0": {
                                "0": "C2",
                                "1": "103.146.179.89",
                                "2": "service-5inxpk6g-1304905614.gz.apigw.tencentcs[.]com",
                                "3": "service-kibkxcw1-1305343709.bj.apigw.tencentcs[.]com:80",
                                "4": "103.146.179.89",
                                "5": "1.15.80.102",
                                "6": "175.178.62.140",
                                "7": "84.32.188.238"
                            },
                            "1": {
                                "0": "Description",
                                "1": "Cobalt Strike server",
                                "2": "Cobalt Strike server",
                                "3": "Cobalt Strike server",
                                "4": "Cobalt Strike server",
                                "5": "Cobalt Strike server",
                                "6": "Cobalt Strike server",
                                "7": "Cobalt Strike server"
                            }
                        }
                    },
                    "text": "",
                    "html": "<table>\n<tbody>\n<tr>\n<td>C2</td>\n<td>Description</td>\n</tr>\n<tr>\n<td>103.146.179.89</td>\n<td>Cobalt Strike server</td>\n</tr>\n<tr>\n<td>service-5inxpk6g-1304905614.gz.apigw.tencentcs[.]com</td>\n<td>Cobalt Strike server</td>\n</tr>\n<tr>\n<td>service-kibkxcw1-1305343709.bj.apigw.tencentcs[.]com:80</td>\n<td>Cobalt Strike server</td>\n</tr>\n<tr>\n<td>103.146.179.89</td>\n<td>Cobalt Strike server</td>\n</tr>\n<tr>\n<td>1.15.80.102</td>\n<td>Cobalt Strike server</td>\n</tr>\n<tr>\n<td>175.178.62.140</td>\n<td>Cobalt Strike server</td>\n</tr>\n<tr>\n<td>84.32.188.238</td>\n<td>Cobalt Strike server</td>\n</tr>\n</tbody>\n</table>"
                }
            ]
        },
        {
            "id": "<chapter_0xf25fdf5c>",
            "title": "YARA Rules",
            "title_level": 2,
            "sentences": [
                {
                    "id": "<sentence_0xaadc9a31>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "import \"pe\"<crlf>rule IPfuscatedCobaltStrike<crlf>{<crlf>meta:<crlf>description = \"IPfuscated Cobalt Strike shellcode\"<crlf>author = \"James Haughom @ SentinelLabs\"<crlf>date = \"2022-3-24\"<crlf>hash = \"49fa346b81f5470e730219e9ed8ec9db8dd3a7fa\"<crlf>reference = \"https://s1.ai/ipfuscation\"<crlf>strings:<crlf>/*<crlf>This rule will detect IPfuscated Cobalt Strike shellcode<crlf>in PEs.<crlf>For example:<crlf>IPfuscated | binary representation | instruction<crlf>++++++++++++++++++++++++++++++++++++++++++++++++++++++<crlf>\"252.72.131.228\" | 0xE48348FC | CLD ...<crlf>\"240.232.200.0\" | 0xC8E8F0 | CALL ...<crlf>*/<crlf>$ipfuscated_payload_1 = \"252.72.131.228\"<crlf>$ipfuscated_payload_2 = \"240.232.200.0\"<crlf>$ipfuscated_payload_3 = \"0.0.65.81\"<crlf>$ipfuscated_payload_4 = \"65.80.82.81\"<crlf>$ipfuscated_payload_5 = \"86.72.49.210\"<crlf>$ipfuscated_payload_6 = \"101.72.139.82\"<crlf>$ipfuscated_payload_7 = \"96.72.139.82\"<crlf>$ipfuscated_payload_8 = \"24.72.139.82\"<crlf>$ipfuscated_payload_9 = \"32.72.139.114\"<crlf>$ipfuscated_payload_10 = \"80.72.15.183\"<crlf>$ipfuscated_payload_11 = \"74.74.77.49\"<crlf>$ipfuscated_payload_12 = \"201.72.49.192\"<crlf>$ipfuscated_payload_13 = \"172.60.97.124\"<crlf>$ipfuscated_payload_14 = \"2.44.32.65\"<crlf>$ipfuscated_payload_15 = \"193.201.13.65\"<crlf>$ipfuscated_payload_16 = \"1.193.226.237\"<crlf>$ipfuscated_payload_17 = \"82.65.81.72\"<crlf>$ipfuscated_payload_18 = \"139.82.32.139\"<crlf>$ipfuscated_payload_19 = \"66.60.72.1\"<crlf>$ipfuscated_payload_20 = \"208.102.129.120\"<crlf>condition:<crlf>// sample is a PE<crlf>uint16(0) == 0x5A4D and uint32(uint32(0x3C)) == 0x00004550 and<crlf>5 of ($ipfuscated_payload_*)<crlf>}<crlf>rule IPfuscationEnumUILanguages<crlf>{<crlf>meta:<crlf>description = \"IPfuscation with execution via EnumUILanguagesA\"<crlf>author = \"James Haughom @ SentinelLabs\"<crlf>date = \"2022-3-24\"<crlf>hash = \"49fa346b81f5470e730219e9ed8ec9db8dd3a7fa\"<crlf>reference = \"https://s1.ai/ipfuscation\"<crlf>strings:<crlf>// hardcoded error string in IPfuscated samples<crlf>$err_msg = \"ERROR!\"<crlf>condition:<crlf>// sample is a PE<crlf>uint16(0) == 0x5A4D and uint32(uint32(0x3C)) == 0x00004550 and<crlf>$err_msg and<crlf>// IPfuscation deobfuscation<crlf>pe.imports(\"ntdll.dll\", \"RtlIpv4StringToAddressA\") and<crlf>// shellcode execution<crlf>pe.imports (\"kernel32.dll\", \"EnumUILanguagesA\")<crlf>}<crlf>rule IPfuscationHellsGate<crlf>{<crlf>meta:<crlf>description = \"IPfuscation with execution via Hell's Gate\"<crlf>author = \"James Haughom @ SentinelLabs\"<crlf>date = \"2022-3-24\"<crlf>hash = \"d83df37d263fc9201aa4d98ace9ab57efbb90922\"<crlf>reference = \"https://s1.ai/ipfuscation\"<crlf>strings:<crlf>$err_msg = \"ERROR!\"<crlf>/*<crlf>Hell's Gate / direct SYSCALLs for calling system routines<crlf>4C 8B D1 mov r10, rcx<crlf>8B 05 36 2F 00 00 mov eax, cs:dword_140005000<crlf>0F 05 syscall<crlf>C3 retn<crlf>*/<crlf>$syscall = { 4C 8B D1 8B 05 ?? ?? 00 00 0F 05 C3 }<crlf>/*<crlf>SYSCALL codes are stored in global variable<crlf>C7 05 46 2F 00 00 00 00 00 00 mov cs:dword_140005000, 0<crlf>89 0D 40 2F 00 00 mov cs:dword_140005000, ecx<crlf>C3 retn<crlf>*/<crlf>$set_syscall_code = {C7 05 ?? ?? 00 00 00 00 00 00 89 0D ?? ?? 00 00 C3}<crlf>condition:<crlf>// sample is a PE<crlf>uint16(0) == 0x5A4D and uint32(uint32(0x3C)) == 0x00004550 and<crlf>all of them and<crlf>// IPfuscation deobfuscation<crlf>pe.imports(\"ntdll.dll\", \"RtlIpv4StringToAddressA\")<crlf>}<crlf>rule IPfuscatedVariants<crlf>{<crlf>meta:<crlf>author = \"@Tera0017/@SentinelOne\"<crlf>description = \"*fuscation variants\"<crlf>date = \"2022-3-28\"<crlf>hash = \"2ded066d20c6d64bdaf4919d42a9ac27a8e6f174\"<crlf>reference = \"https://s1.ai/ipfuscation\"<crlf>strings:<crlf>// x64 Heap Create/Alloc shellcode<crlf>$code1 = {33 D2 48 8B [2-3] FF 15 [4] 3D 0D 00 00 C0}<crlf>// x64 RtlIpv4StringToAddressA to shellcode<crlf>$code2 = {B9 00 00 04 00 FF [9] 41 B8 00 00 10 00}<crlf><crlf>condition:<crlf>any of them<crlf>}",
                    "html": "\nimport \"pe\"\nrule IPfuscatedCobaltStrike\n{\n\tmeta:\n\t\tdescription = \"IPfuscated Cobalt Strike shellcode\" \n\t\tauthor = \"James Haughom @ SentinelLabs\"\n\t\tdate = \"2022-3-24\"\n\t\thash = \"49fa346b81f5470e730219e9ed8ec9db8dd3a7fa\"\n\t\treference = \"https://s1.ai/ipfuscation\"\n\tstrings:\n\t\t/*\n\t\t\tThis rule will detect IPfuscated Cobalt Strike shellcode\n\t\t\tin PEs.\n\t\t\tFor example:\n\t\t\t\tIPfuscated | binary representation | instruction\n\t\t\t\t++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\t\t\t\t\"252.72.131.228\" | 0xE48348FC | CLD ...\n\t\t\t\t\"240.232.200.0\" | 0xC8E8F0 | CALL ... \n\t\t*/\n\t\t$ipfuscated_payload_1 = \"252.72.131.228\"\n\t\t$ipfuscated_payload_2 = \"240.232.200.0\"\n\t\t$ipfuscated_payload_3 = \"0.0.65.81\"\n\t\t$ipfuscated_payload_4 = \"65.80.82.81\"\n\t\t$ipfuscated_payload_5 = \"86.72.49.210\"\n\t\t$ipfuscated_payload_6 = \"101.72.139.82\"\n\t\t$ipfuscated_payload_7 = \"96.72.139.82\"\n\t\t$ipfuscated_payload_8 = \"24.72.139.82\"\n\t\t$ipfuscated_payload_9 = \"32.72.139.114\"\n\t\t$ipfuscated_payload_10 = \"80.72.15.183\"\n\t\t$ipfuscated_payload_11 = \"74.74.77.49\"\n\t\t$ipfuscated_payload_12 = \"201.72.49.192\"\n\t\t$ipfuscated_payload_13 = \"172.60.97.124\"\n\t\t$ipfuscated_payload_14 = \"2.44.32.65\"\n\t\t$ipfuscated_payload_15 = \"193.201.13.65\"\n\t\t$ipfuscated_payload_16 = \"1.193.226.237\"\n\t\t$ipfuscated_payload_17 = \"82.65.81.72\"\n\t\t$ipfuscated_payload_18 = \"139.82.32.139\"\n\t\t$ipfuscated_payload_19 = \"66.60.72.1\"\n\t\t$ipfuscated_payload_20 = \"208.102.129.120\"\n\tcondition:\n\t\t// sample is a PE\n\t\tuint16(0) == 0x5A4D and uint32(uint32(0x3C)) == 0x00004550 and\n\t\t5 of ($ipfuscated_payload_*)\n}\nrule IPfuscationEnumUILanguages\n{\n\tmeta:\n\t\tdescription = \"IPfuscation with execution via EnumUILanguagesA\"\n\t\tauthor = \"James Haughom @ SentinelLabs\"\n\t\tdate = \"2022-3-24\"\n\t\thash = \"49fa346b81f5470e730219e9ed8ec9db8dd3a7fa\"\n\t\treference = \"https://s1.ai/ipfuscation\"\n\tstrings:\n\t\t// hardcoded error string in IPfuscated samples\n\t\t$err_msg = \"ERROR!\"\n\tcondition:\n\t\t// sample is a PE\n\t\tuint16(0) == 0x5A4D and uint32(uint32(0x3C)) == 0x00004550 and\n\t\t$err_msg and\n\t\t// IPfuscation deobfuscation\n\t\tpe.imports(\"ntdll.dll\", \"RtlIpv4StringToAddressA\") and\n\t\t// shellcode execution\n\t\tpe.imports (\"kernel32.dll\", \"EnumUILanguagesA\")\n}\nrule IPfuscationHellsGate\n{\n\tmeta:\n\t\tdescription = \"IPfuscation with execution via Hell's Gate\"\n\t\tauthor = \"James Haughom @ SentinelLabs\"\n\t\tdate = \"2022-3-24\"\n\t\thash = \"d83df37d263fc9201aa4d98ace9ab57efbb90922\"\n\t\treference = \"https://s1.ai/ipfuscation\"\n\tstrings:\n\t\t$err_msg = \"ERROR!\"\n\t\t/*\n\t\t\tHell's Gate / direct SYSCALLs for calling system routines\n\t\t\t4C 8B D1 mov r10, rcx\n\t\t\t8B 05 36 2F 00 00 mov eax, cs:dword_140005000\n\t\t\t0F 05 syscall \n\t\t\tC3 retn\n\t\t*/\n\t\t$syscall = { 4C 8B D1 8B 05 ?? ?? 00 00 0F 05 C3 }\n\t\t/*\n\t\t\tSYSCALL codes are stored in global variable\n\t\t\tC7 05 46 2F 00 00 00 00 00 00 mov cs:dword_140005000, 0\n\t\t\t89 0D 40 2F 00 00 mov cs:dword_140005000, ecx\n\t\t\tC3 retn\n\t\t*/\n\t\t$set_syscall_code = {C7 05 ?? ?? 00 00 00 00 00 00 89 0D ?? ?? 00 00 C3}\n\tcondition:\n\t\t// sample is a PE\n\t\tuint16(0) == 0x5A4D and uint32(uint32(0x3C)) == 0x00004550 and\n\t\tall of them and\n\t\t// IPfuscation deobfuscation\n\t\tpe.imports(\"ntdll.dll\", \"RtlIpv4StringToAddressA\")\n}\nrule IPfuscatedVariants\n{\n meta:\n \tauthor = \"@Tera0017/@SentinelOne\"\n \tdescription = \"*fuscation variants\"\n \tdate = \"2022-3-28\"\n\thash = \"2ded066d20c6d64bdaf4919d42a9ac27a8e6f174\"\n\treference = \"https://s1.ai/ipfuscation\"\n strings:\n \t// x64 Heap Create/Alloc shellcode\n \t$code1 = {33 D2 48 8B [2-3] FF 15 [4] 3D 0D 00 00 C0}\n \t// x64 RtlIpv4StringToAddressA to shellcode\n \t$code2 = {B9 00 00 04 00 FF [9] 41 B8 00 00 10 00}\n \n condition:\n \tany of them\n}\n"
                }
            ]
        },
        {
            "id": "<chapter_0x9029f556>",
            "title": "MITRE ATT&CK Hive Ransomware Gang",
            "title_level": 2,
            "sentences": [
                {
                    "id": "<sentence_0xd45a3a6a>",
                    "is_empty": true,
                    "have_tags": true,
                    "tags": {
                        "<table_0x55b341f3>": {
                            "0": {
                                "0": "TTP",
                                "1": "BAT/Powershell scripts",
                                "2": "Scheduled Tasks",
                                "3": "Cobalt Strike",
                                "4": "ADFind",
                                "5": "SharpHashSpray",
                                "6": "DomainHashSpray",
                                "7": "Bloodhound/SharpHound",
                                "8": "Signed Ransomware",
                                "9": "Domain Policy GPO",
                                "10": "Net-GPPPassword",
                                "11": "Rubeus",
                                "12": "Sharpview",
                                "13": "RDP",
                                "14": "SAM Dump"
                            },
                            "1": {
                                "0": "Description",
                                "1": "Automate pre-ransomware deployment actions",
                                "2": "Execute the ransomware payload",
                                "3": "Primary implant / backdoor",
                                "4": "Active Directory enumeration",
                                "5": "Password spraying",
                                "6": "Password spraying",
                                "7": "Active Directory enumeration",
                                "8": "Ransomware payload is digitally signed",
                                "9": "Deploy ransomware via GPO",
                                "10": "Steal cleartext passwords from Group Policy Preferences",
                                "11": "Request Kerberos Ticket Granting Tickets",
                                "12": "Active Directory enumeration",
                                "13": "Lateral movement via RDP",
                                "14": "Credential theft"
                            },
                            "2": {
                                "0": "MITRE ID",
                                "1": "T1059",
                                "2": "T1053",
                                "3": "S0154",
                                "4": "S0552 / T1087",
                                "5": "T1110.003",
                                "6": "T1110.003",
                                "7": "S0521 / T1087",
                                "8": "T1587.002",
                                "9": "T1484",
                                "10": "T1552.006",
                                "11": "T1558",
                                "12": "T1087",
                                "13": "T1021.001",
                                "14": "T1003.002"
                            }
                        }
                    },
                    "text": "",
                    "html": "<table>\n<tbody>\n<tr>\n<td>TTP</td>\n<td>Description</td>\n<td>MITRE ID</td>\n</tr>\n<tr>\n<td>BAT/Powershell scripts</td>\n<td>Automate pre-ransomware deployment actions</td>\n<td>T1059</td>\n</tr>\n<tr>\n<td>Scheduled Tasks</td>\n<td>Execute the ransomware payload</td>\n<td>T1053</td>\n</tr>\n<tr>\n<td>Cobalt Strike</td>\n<td>Primary implant / backdoor</td>\n<td>S0154</td>\n</tr>\n<tr>\n<td>ADFind</td>\n<td>Active Directory enumeration</td>\n<td>S0552 / T1087</td>\n</tr>\n<tr>\n<td>SharpHashSpray</td>\n<td>Password spraying</td>\n<td>T1110.003</td>\n</tr>\n<tr>\n<td>DomainHashSpray</td>\n<td>Password spraying </td>\n<td>T1110.003</td>\n</tr>\n<tr>\n<td>Bloodhound/SharpHound</td>\n<td>Active Directory enumeration</td>\n<td>S0521 / T1087</td>\n</tr>\n<tr>\n<td>Signed Ransomware</td>\n<td>Ransomware payload is digitally signed</td>\n<td>T1587.002</td>\n</tr>\n<tr>\n<td>Domain Policy GPO</td>\n<td>Deploy ransomware via GPO</td>\n<td>T1484</td>\n</tr>\n<tr>\n<td>Net-GPPPassword</td>\n<td>Steal cleartext passwords from Group Policy Preferences</td>\n<td>T1552.006</td>\n</tr>\n<tr>\n<td>Rubeus</td>\n<td>Request Kerberos Ticket Granting Tickets</td>\n<td>T1558</td>\n</tr>\n<tr>\n<td>Sharpview</td>\n<td>Active Directory enumeration</td>\n<td>T1087</td>\n</tr>\n<tr>\n<td>RDP</td>\n<td>Lateral movement via RDP</td>\n<td>T1021.001</td>\n</tr>\n<tr>\n<td>SAM Dump</td>\n<td>Credential theft</td>\n<td>T1003.002</td>\n</tr>\n</tbody>\n</table>"
                },
                {
                    "id": "<sentence_0xaf6ad22c>",
                    "is_empty": true,
                    "have_tags": false,
                    "tags": {},
                    "text": "",
                    "html": "<p> </p>"
                }
            ]
        }
    ]
}