{
    "title": "Analysis of Spring Cloud Framework Vulnerabilities",
    "url": "https://www.zscaler.com/blogs/security-research/analysis-spring-cloud-framework-vulnerabilities",
    "threats": {
        "Threat": [
            {
                "token": {
                    "id": "<THREAT_0xead7da89>",
                    "type": "Threat",
                    "value": "spring4shell"
                },
                "references": {
                    "sentences": [
                        "HTML.Exploit.CVE-2022-22963<crlf>HTML.Exploit.Spring4Shell",
                        "HTML.Exploit.Spring4Shell<crlf>HTML.Exploit.CVE-2022-22963",
                        "CVE-2022-22963 Users of affected versions should upgrade to 3.1.7, 3.2.3. Releases that have fixed this issue include: Spring Cloud Function - 3.1.7 - 3.2.3<crlf>CVE-2022-22965 Users of affected versions should apply the following mitigation: 5.3.x users should upgrade to 5.3.18+, 5.2.x users should upgrade to 5.2.20+. There are other mitigation steps for applications that cannot upgrade to the above versions. Releases that have fixed this issue include: Spring Framework - 5.3.18+ - 5.2.20+",
                        "Zsclaer strongly recommends upgrading to these versions depending on what current version of Spring Foundation is deployed.<crlf>2. CVE-2022-22965 [Spring4Shell OR SpringShell]",
                        "CVE-2022-22963 - Spring Expression Resource Access Vulnerability which can provide access to the critical systems/resources to the unauthenticated adversary. At the moment it is categorized as a medium severity issue.<crlf>CVE-2022-22965 aka Spring4Shell or SpringShell - Spring Framework RCE via Data Binding on JDK 9+. This vulnerability is categorized as Critical."
                    ],
                    "titles": [
                        "Analysis of Spring Cloud Framework Vulnerabilities"
                    ]
                },
                "links": [
                    {
                        "src": {
                            "id": "<CVE_0x80089c24>",
                            "type": "CVE",
                            "value": "cve-2022-22965"
                        },
                        "relation": "use_cve",
                        "dst": {
                            "id": "<THREAT_0xead7da89>",
                            "type": "Threat",
                            "value": "spring4shell"
                        }
                    }
                ]
            }
        ]
    },
    "ttps": {},
    "meanings": {
        "CVE": [
            {
                "token": {
                    "id": "<CVE_0xc3f56334>",
                    "type": "CVE",
                    "value": "cve-2022-22963"
                },
                "references": {
                    "sentences": [
                        "HTML.Exploit.CVE-2022-22963<crlf>HTML.Exploit.Spring4Shell",
                        "HTML.Exploit.Spring4Shell<crlf>HTML.Exploit.CVE-2022-22963",
                        "CVE-2022-22963 Users of affected versions should upgrade to 3.1.7, 3.2.3. Releases that have fixed this issue include: Spring Cloud Function - 3.1.7 - 3.2.3<crlf>CVE-2022-22965 Users of affected versions should apply the following mitigation: 5.3.x users should upgrade to 5.3.18+, 5.2.x users should upgrade to 5.2.20+. There are other mitigation steps for applications that cannot upgrade to the above versions. Releases that have fixed this issue include: Spring Framework - 5.3.18+ - 5.2.20+",
                        "1. CVE-2022-22963",
                        "Vulnerable versions for CVE-2022-22963:<crlf>Spring Cloud Function versions between 3.1.6 or prior and 3.2.2 or prior seem to be vulnerable to the Expression Resource Access Vulnerability.",
                        "Spring Foundation Version Patched for CVE-2022-22963:<crlf>The Spring Foundation version 3.1.7 and 3.2.3 have been released to patch this critical vulnerability.",
                        "CVE-2022-22963 - Spring Expression Resource Access Vulnerability which can provide access to the critical systems/resources to the unauthenticated adversary. At the moment it is categorized as a medium severity issue.<crlf>CVE-2022-22965 aka Spring4Shell or SpringShell - Spring Framework RCE via Data Binding on JDK 9+. This vulnerability is categorized as Critical."
                    ],
                    "titles": [
                        "Analysis of Spring Cloud Framework Vulnerabilities"
                    ]
                },
                "info": {
                    "vulners_score": "PENDING",
                    "cvss_score": "Unknown",
                    "exploit": "Unknown",
                    "softs": {},
                    "patch": ""
                }
            },
            {
                "token": {
                    "id": "<CVE_0x80089c24>",
                    "type": "CVE",
                    "value": "cve-2022-22965"
                },
                "references": {
                    "sentences": [
                        "CVE-2022-22963 Users of affected versions should upgrade to 3.1.7, 3.2.3. Releases that have fixed this issue include: Spring Cloud Function - 3.1.7 - 3.2.3<crlf>CVE-2022-22965 Users of affected versions should apply the following mitigation: 5.3.x users should upgrade to 5.3.18+, 5.2.x users should upgrade to 5.2.20+. There are other mitigation steps for applications that cannot upgrade to the above versions. Releases that have fixed this issue include: Spring Framework - 5.3.18+ - 5.2.20+",
                        "Zsclaer strongly recommends upgrading to these versions depending on what current version of Spring Foundation is deployed.<crlf>2. CVE-2022-22965 [Spring4Shell OR SpringShell]",
                        "CVE-2022-22963 - Spring Expression Resource Access Vulnerability which can provide access to the critical systems/resources to the unauthenticated adversary. At the moment it is categorized as a medium severity issue.<crlf>CVE-2022-22965 aka Spring4Shell or SpringShell - Spring Framework RCE via Data Binding on JDK 9+. This vulnerability is categorized as Critical."
                    ],
                    "titles": [
                        "Analysis of Spring Cloud Framework Vulnerabilities"
                    ]
                },
                "links": [
                    {
                        "src": {
                            "id": "<CVE_0x80089c24>",
                            "type": "CVE",
                            "value": "cve-2022-22965"
                        },
                        "relation": "use_cve",
                        "dst": {
                            "id": "<THREAT_0xead7da89>",
                            "type": "Threat",
                            "value": "spring4shell"
                        }
                    }
                ],
                "info": {
                    "vulners_score": "PENDING",
                    "cvss_score": "Unknown",
                    "exploit": "Unknown",
                    "softs": {},
                    "patch": ""
                }
            }
        ],
        "Category": [
            {
                "token": {
                    "id": "<CATEGORY_0xf1a480bb>",
                    "type": "Category",
                    "value": "malware"
                },
                "references": {
                    "sentences": [
                        "About ThreatLabz<crlf>ThreatLabz is the security research arm of Zscaler. This world-class team is responsible for hunting new threats and ensuring that the thousands of organizations using the global Zscaler platform are always protected. In addition to malware research and behavioral analysis, team members are involved in the research and development of new prototype modules for advanced threat protection on the Zscaler platform, and regularly conduct internal security audits to ensure that Zscaler products and infrastructure meet security compliance standards. ThreatLabz regularly publishes in-depth analyses of new and emerging threats on its portal, research.zscaler.com.",
                        "To exploit this vulnerability, the vulnerable system should have DataBinder enabled, and exploitation depends majorly on the Servlet container of the application. As per the researcher who confirmed the exploitation, when Spring is deployed to Apache Tomcat, the WebAppClassLoader is accessible, which allows an attacker to call getters and setters and can write a malicious file to disk. However, if Spring is deployed using the Embedded Tomcat Servlet Container, the classloader is a LaunchedURLClassLoader which has limited access.",
                        "Spring Expression Resource Access Vulnerability was found in Spring Cloud Function versions 3.1.6 and 3.2.2 or prior. The adversaries can exploit this vulnerability by sending a crafted HTTP request packet with the specific HTTP header named, spring.cloud.function.routing-expression, in the HTTP request packet. This parameter is treated as SpEL expression when the routing is in use. Vulnerable version of the Spring Cloud Function, while parsing this specific HTTP header, spring.cloud.function.routing-expression, along with the malformed SpEL expression, can allow an adversary to gain access to the critical resources on servers, systems which can allow adversary to perform further malicious activities. The vulnerability has been classified as medium at the moment. However, the actual impact of exploiting this vulnerability is unknown.",
                        "Limit the impact from a potential compromise by restricting lateral movement with identity-based micro-segmentation (Zscaler Workload Segmentation) and a Zero Trust architecture.<crlf>Safeguard crown jewel applications by limiting lateral movement using Zscaler Private Access, especially with application security modules turned on.<crlf>Route all server traffic through Zscaler Private Access with additional application security module enabled and Zscaler Internet Access, which will provide the right visibility to identify and stop malicious activity from compromised systems/servers.<crlf>Restrict traffic to the critical infrastructure from the allowed list of known-good destinations.<crlf>Ensure you are inspecting all SSL traffic.<crlf>Turn on Advanced Threat Protection to block all known command-and-control domains. This will provide additional protection in case the adversary exploits this vulnerability to implant malware.<crlf>Extend command-and-control protection to all ports and protocols with the Advanced Cloud Firewall (Cloud IPS module), including emerging C2 destinations. Again, this will provide additional protection in case if the adversary exploits this vulnerability to implant malware.<crlf>Use Advanced Cloud Sandbox to prevent unknown malware delivered as part of a second stage payload."
                    ],
                    "titles": [
                        "Analysis of Spring Cloud Framework Vulnerabilities"
                    ]
                }
            },
            {
                "token": {
                    "id": "<CATEGORY_0xc8ecca29>",
                    "type": "Category",
                    "value": "c2"
                },
                "references": {
                    "sentences": [
                        "Limit the impact from a potential compromise by restricting lateral movement with identity-based micro-segmentation (Zscaler Workload Segmentation) and a Zero Trust architecture.<crlf>Safeguard crown jewel applications by limiting lateral movement using Zscaler Private Access, especially with application security modules turned on.<crlf>Route all server traffic through Zscaler Private Access with additional application security module enabled and Zscaler Internet Access, which will provide the right visibility to identify and stop malicious activity from compromised systems/servers.<crlf>Restrict traffic to the critical infrastructure from the allowed list of known-good destinations.<crlf>Ensure you are inspecting all SSL traffic.<crlf>Turn on Advanced Threat Protection to block all known command-and-control domains. This will provide additional protection in case the adversary exploits this vulnerability to implant malware.<crlf>Extend command-and-control protection to all ports and protocols with the Advanced Cloud Firewall (Cloud IPS module), including emerging C2 destinations. Again, this will provide additional protection in case if the adversary exploits this vulnerability to implant malware.<crlf>Use Advanced Cloud Sandbox to prevent unknown malware delivered as part of a second stage payload."
                    ],
                    "titles": [
                        "Analysis of Spring Cloud Framework Vulnerabilities"
                    ]
                }
            }
        ],
        "Industry": [
            {
                "token": {
                    "id": "<INDUSTRY_0xf74966f7>",
                    "type": "Industry",
                    "value": "financial"
                },
                "references": {
                    "sentences": [],
                    "titles": [
                        "Amit Banker"
                    ]
                }
            }
        ]
    },
    "iocs": {},
    "unknownwords": {
        "UnknownWord": [
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x9de91505>",
                    "type": "UnknownWord",
                    "value": "spring"
                },
                "references": {
                    "sentences": [
                        "To exploit this vulnerability, the vulnerable system should have DataBinder enabled, and exploitation depends majorly on the Servlet container of the application. As per the researcher who confirmed the exploitation, when Spring is deployed to Apache Tomcat, the WebAppClassLoader is accessible, which allows an attacker to call getters and setters and can write a malicious file to disk. However, if Spring is deployed using the Embedded Tomcat Servlet Container, the classloader is a LaunchedURLClassLoader which has limited access.",
                        "Spring is an open-source lightweight Java platform which many developers use as their application development framework. As part of the Spring echo system, Spring Cloud is a component using which one can write cloud agnostics code or develop applications and make them working on well known cloud services such as AWS, Azure, Alibaba etc. The Spring Cloud Function is one of the subcomponents of Spring Cloud Function which enables developers to do serverless programming.",
                        "CVE-2022-22963 Users of affected versions should upgrade to 3.1.7, 3.2.3. Releases that have fixed this issue include: Spring Cloud Function - 3.1.7 - 3.2.3<crlf>CVE-2022-22965 Users of affected versions should apply the following mitigation: 5.3.x users should upgrade to 5.3.18+, 5.2.x users should upgrade to 5.2.20+. There are other mitigation steps for applications that cannot upgrade to the above versions. Releases that have fixed this issue include: Spring Framework - 5.3.18+ - 5.2.20+",
                        "There is a severe Remote Code Execution vulnerability in Spring Core JDK9+. This vulnerability can allow an unauthenticated attacker to execute arbitrary code on the target system. As per the sources available publicly, exploiting this vulnerability in certain configurations is relatively easier because it can be exploited with just simple crafted HTTP requests when sent to a vulnerable server. While in other configurations, it may not be that easy for an adversary to exploit and may require him/her to perform additional research.",
                        "Spring Expression Resource Access Vulnerability was found in Spring Cloud Function versions 3.1.6 and 3.2.2 or prior. The adversaries can exploit this vulnerability by sending a crafted HTTP request packet with the specific HTTP header named, spring.cloud.function.routing-expression, in the HTTP request packet. This parameter is treated as SpEL expression when the routing is in use. Vulnerable version of the Spring Cloud Function, while parsing this specific HTTP header, spring.cloud.function.routing-expression, along with the malformed SpEL expression, can allow an adversary to gain access to the critical resources on servers, systems which can allow adversary to perform further malicious activities. The vulnerability has been classified as medium at the moment. However, the actual impact of exploiting this vulnerability is unknown.",
                        "Vulnerable versions for CVE-2022-22963:<crlf>Spring Cloud Function versions between 3.1.6 or prior and 3.2.2 or prior seem to be vulnerable to the Expression Resource Access Vulnerability.",
                        "Over the past few days, the Zscaler ThreatLabz team has been closely monitoring the reports of potential RCEs in Spring Cloud Framework and Spring Cloud Function.",
                        "Spring Foundation Version Patched for CVE-2022-22963:<crlf>The Spring Foundation version 3.1.7 and 3.2.3 have been released to patch this critical vulnerability.",
                        "Leveraging from our internal research and the published articles, github posts and POCs, at the moment our understanding is that there could potentially be more than one issue in Spring Cloud Framework and sub-component Spring Cloud Function.",
                        "Zsclaer strongly recommends upgrading to these versions depending on what current version of Spring Foundation is deployed.<crlf>2. CVE-2022-22965 [Spring4Shell OR SpringShell]",
                        "CVE-2022-22963 - Spring Expression Resource Access Vulnerability which can provide access to the critical systems/resources to the unauthenticated adversary. At the moment it is categorized as a medium severity issue.<crlf>CVE-2022-22965 aka Spring4Shell or SpringShell - Spring Framework RCE via Data Binding on JDK 9+. This vulnerability is categorized as Critical."
                    ],
                    "titles": [
                        "Analysis of Spring Cloud Framework Vulnerabilities"
                    ]
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x171efd41>",
                    "type": "UnknownWord",
                    "value": "rces"
                },
                "references": {
                    "sentences": [
                        "Over the past few days, the Zscaler ThreatLabz team has been closely monitoring the reports of potential RCEs in Spring Cloud Framework and Spring Cloud Function."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x556509e0>",
                    "type": "UnknownWord",
                    "value": "echo"
                },
                "references": {
                    "sentences": [
                        "Spring is an open-source lightweight Java platform which many developers use as their application development framework. As part of the Spring echo system, Spring Cloud is a component using which one can write cloud agnostics code or develop applications and make them working on well known cloud services such as AWS, Azure, Alibaba etc. The Spring Cloud Function is one of the subcomponents of Spring Cloud Function which enables developers to do serverless programming."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x2390c58b>",
                    "type": "UnknownWord",
                    "value": "agnostics"
                },
                "references": {
                    "sentences": [
                        "Spring is an open-source lightweight Java platform which many developers use as their application development framework. As part of the Spring echo system, Spring Cloud is a component using which one can write cloud agnostics code or develop applications and make them working on well known cloud services such as AWS, Azure, Alibaba etc. The Spring Cloud Function is one of the subcomponents of Spring Cloud Function which enables developers to do serverless programming."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xd3b0db58>",
                    "type": "UnknownWord",
                    "value": "subcomponents"
                },
                "references": {
                    "sentences": [
                        "Spring is an open-source lightweight Java platform which many developers use as their application development framework. As part of the Spring echo system, Spring Cloud is a component using which one can write cloud agnostics code or develop applications and make them working on well known cloud services such as AWS, Azure, Alibaba etc. The Spring Cloud Function is one of the subcomponents of Spring Cloud Function which enables developers to do serverless programming."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xcaa89357>",
                    "type": "UnknownWord",
                    "value": "moment"
                },
                "references": {
                    "sentences": [
                        "Spring Expression Resource Access Vulnerability was found in Spring Cloud Function versions 3.1.6 and 3.2.2 or prior. The adversaries can exploit this vulnerability by sending a crafted HTTP request packet with the specific HTTP header named, spring.cloud.function.routing-expression, in the HTTP request packet. This parameter is treated as SpEL expression when the routing is in use. Vulnerable version of the Spring Cloud Function, while parsing this specific HTTP header, spring.cloud.function.routing-expression, along with the malformed SpEL expression, can allow an adversary to gain access to the critical resources on servers, systems which can allow adversary to perform further malicious activities. The vulnerability has been classified as medium at the moment. However, the actual impact of exploiting this vulnerability is unknown.",
                        "At the moment, we are discussing two issues/vulnerabilities here.",
                        "Leveraging from our internal research and the published articles, github posts and POCs, at the moment our understanding is that there could potentially be more than one issue in Spring Cloud Framework and sub-component Spring Cloud Function."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x5677fde4>",
                    "type": "UnknownWord",
                    "value": "sub-component"
                },
                "references": {
                    "sentences": [
                        "Leveraging from our internal research and the published articles, github posts and POCs, at the moment our understanding is that there could potentially be more than one issue in Spring Cloud Framework and sub-component Spring Cloud Function."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x243e225a>",
                    "type": "UnknownWord",
                    "value": "binding"
                },
                "references": {
                    "sentences": [
                        "CVE-2022-22963 - Spring Expression Resource Access Vulnerability which can provide access to the critical systems/resources to the unauthenticated adversary. At the moment it is categorized as a medium severity issue.<crlf>CVE-2022-22965 aka Spring4Shell or SpringShell - Spring Framework RCE via Data Binding on JDK 9+. This vulnerability is categorized as Critical."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xc9d1c1d9>",
                    "type": "UnknownWord",
                    "value": "jdk"
                },
                "references": {
                    "sentences": [
                        "CVE-2022-22963 - Spring Expression Resource Access Vulnerability which can provide access to the critical systems/resources to the unauthenticated adversary. At the moment it is categorized as a medium severity issue.<crlf>CVE-2022-22965 aka Spring4Shell or SpringShell - Spring Framework RCE via Data Binding on JDK 9+. This vulnerability is categorized as Critical."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xe695297>",
                    "type": "UnknownWord",
                    "value": "routing-expression"
                },
                "references": {
                    "sentences": [
                        "Spring Expression Resource Access Vulnerability was found in Spring Cloud Function versions 3.1.6 and 3.2.2 or prior. The adversaries can exploit this vulnerability by sending a crafted HTTP request packet with the specific HTTP header named, spring.cloud.function.routing-expression, in the HTTP request packet. This parameter is treated as SpEL expression when the routing is in use. Vulnerable version of the Spring Cloud Function, while parsing this specific HTTP header, spring.cloud.function.routing-expression, along with the malformed SpEL expression, can allow an adversary to gain access to the critical resources on servers, systems which can allow adversary to perform further malicious activities. The vulnerability has been classified as medium at the moment. However, the actual impact of exploiting this vulnerability is unknown."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x8381a588>",
                    "type": "UnknownWord",
                    "value": "spel"
                },
                "references": {
                    "sentences": [
                        "Spring Expression Resource Access Vulnerability was found in Spring Cloud Function versions 3.1.6 and 3.2.2 or prior. The adversaries can exploit this vulnerability by sending a crafted HTTP request packet with the specific HTTP header named, spring.cloud.function.routing-expression, in the HTTP request packet. This parameter is treated as SpEL expression when the routing is in use. Vulnerable version of the Spring Cloud Function, while parsing this specific HTTP header, spring.cloud.function.routing-expression, along with the malformed SpEL expression, can allow an adversary to gain access to the critical resources on servers, systems which can allow adversary to perform further malicious activities. The vulnerability has been classified as medium at the moment. However, the actual impact of exploiting this vulnerability is unknown."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x22e5f3b4>",
                    "type": "UnknownWord",
                    "value": "routing"
                },
                "references": {
                    "sentences": [
                        "Spring Expression Resource Access Vulnerability was found in Spring Cloud Function versions 3.1.6 and 3.2.2 or prior. The adversaries can exploit this vulnerability by sending a crafted HTTP request packet with the specific HTTP header named, spring.cloud.function.routing-expression, in the HTTP request packet. This parameter is treated as SpEL expression when the routing is in use. Vulnerable version of the Spring Cloud Function, while parsing this specific HTTP header, spring.cloud.function.routing-expression, along with the malformed SpEL expression, can allow an adversary to gain access to the critical resources on servers, systems which can allow adversary to perform further malicious activities. The vulnerability has been classified as medium at the moment. However, the actual impact of exploiting this vulnerability is unknown."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x6fa924bb>",
                    "type": "UnknownWord",
                    "value": "foundation"
                },
                "references": {
                    "sentences": [
                        "Spring Foundation Version Patched for CVE-2022-22963:<crlf>The Spring Foundation version 3.1.7 and 3.2.3 have been released to patch this critical vulnerability.",
                        "Zsclaer strongly recommends upgrading to these versions depending on what current version of Spring Foundation is deployed.<crlf>2. CVE-2022-22965 [Spring4Shell OR SpringShell]"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xe02892f5>",
                    "type": "UnknownWord",
                    "value": "zsclaer"
                },
                "references": {
                    "sentences": [
                        "Zsclaer strongly recommends upgrading to these versions depending on what current version of Spring Foundation is deployed.<crlf>2. CVE-2022-22965 [Spring4Shell OR SpringShell]"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xd98dcedc>",
                    "type": "UnknownWord",
                    "value": "strongly"
                },
                "references": {
                    "sentences": [
                        "Zsclaer strongly recommends upgrading to these versions depending on what current version of Spring Foundation is deployed.<crlf>2. CVE-2022-22965 [Spring4Shell OR SpringShell]"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xf3a801fb>",
                    "type": "UnknownWord",
                    "value": "jdk9"
                },
                "references": {
                    "sentences": [
                        "There is a severe Remote Code Execution vulnerability in Spring Core JDK9+. This vulnerability can allow an unauthenticated attacker to execute arbitrary code on the target system. As per the sources available publicly, exploiting this vulnerability in certain configurations is relatively easier because it can be exploited with just simple crafted HTTP requests when sent to a vulnerable server. While in other configurations, it may not be that easy for an adversary to exploit and may require him/her to perform additional research."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xe6eb8971>",
                    "type": "UnknownWord",
                    "value": "him"
                },
                "references": {
                    "sentences": [
                        "There is a severe Remote Code Execution vulnerability in Spring Core JDK9+. This vulnerability can allow an unauthenticated attacker to execute arbitrary code on the target system. As per the sources available publicly, exploiting this vulnerability in certain configurations is relatively easier because it can be exploited with just simple crafted HTTP requests when sent to a vulnerable server. While in other configurations, it may not be that easy for an adversary to exploit and may require him/her to perform additional research."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xf3e7c2d9>",
                    "type": "UnknownWord",
                    "value": "her"
                },
                "references": {
                    "sentences": [
                        "There is a severe Remote Code Execution vulnerability in Spring Core JDK9+. This vulnerability can allow an unauthenticated attacker to execute arbitrary code on the target system. As per the sources available publicly, exploiting this vulnerability in certain configurations is relatively easier because it can be exploited with just simple crafted HTTP requests when sent to a vulnerable server. While in other configurations, it may not be that easy for an adversary to exploit and may require him/her to perform additional research."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x99bed101>",
                    "type": "UnknownWord",
                    "value": "databinder"
                },
                "references": {
                    "sentences": [
                        "To exploit this vulnerability, the vulnerable system should have DataBinder enabled, and exploitation depends majorly on the Servlet container of the application. As per the researcher who confirmed the exploitation, when Spring is deployed to Apache Tomcat, the WebAppClassLoader is accessible, which allows an attacker to call getters and setters and can write a malicious file to disk. However, if Spring is deployed using the Embedded Tomcat Servlet Container, the classloader is a LaunchedURLClassLoader which has limited access."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xb800a768>",
                    "type": "UnknownWord",
                    "value": "majorly"
                },
                "references": {
                    "sentences": [
                        "To exploit this vulnerability, the vulnerable system should have DataBinder enabled, and exploitation depends majorly on the Servlet container of the application. As per the researcher who confirmed the exploitation, when Spring is deployed to Apache Tomcat, the WebAppClassLoader is accessible, which allows an attacker to call getters and setters and can write a malicious file to disk. However, if Spring is deployed using the Embedded Tomcat Servlet Container, the classloader is a LaunchedURLClassLoader which has limited access."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x9ba69b6e>",
                    "type": "UnknownWord",
                    "value": "servlet"
                },
                "references": {
                    "sentences": [
                        "To exploit this vulnerability, the vulnerable system should have DataBinder enabled, and exploitation depends majorly on the Servlet container of the application. As per the researcher who confirmed the exploitation, when Spring is deployed to Apache Tomcat, the WebAppClassLoader is accessible, which allows an attacker to call getters and setters and can write a malicious file to disk. However, if Spring is deployed using the Embedded Tomcat Servlet Container, the classloader is a LaunchedURLClassLoader which has limited access."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xbf11ef7e>",
                    "type": "UnknownWord",
                    "value": "webappclassloader"
                },
                "references": {
                    "sentences": [
                        "To exploit this vulnerability, the vulnerable system should have DataBinder enabled, and exploitation depends majorly on the Servlet container of the application. As per the researcher who confirmed the exploitation, when Spring is deployed to Apache Tomcat, the WebAppClassLoader is accessible, which allows an attacker to call getters and setters and can write a malicious file to disk. However, if Spring is deployed using the Embedded Tomcat Servlet Container, the classloader is a LaunchedURLClassLoader which has limited access."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x2c744611>",
                    "type": "UnknownWord",
                    "value": "getters"
                },
                "references": {
                    "sentences": [
                        "To exploit this vulnerability, the vulnerable system should have DataBinder enabled, and exploitation depends majorly on the Servlet container of the application. As per the researcher who confirmed the exploitation, when Spring is deployed to Apache Tomcat, the WebAppClassLoader is accessible, which allows an attacker to call getters and setters and can write a malicious file to disk. However, if Spring is deployed using the Embedded Tomcat Servlet Container, the classloader is a LaunchedURLClassLoader which has limited access."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xbff2442f>",
                    "type": "UnknownWord",
                    "value": "setters"
                },
                "references": {
                    "sentences": [
                        "To exploit this vulnerability, the vulnerable system should have DataBinder enabled, and exploitation depends majorly on the Servlet container of the application. As per the researcher who confirmed the exploitation, when Spring is deployed to Apache Tomcat, the WebAppClassLoader is accessible, which allows an attacker to call getters and setters and can write a malicious file to disk. However, if Spring is deployed using the Embedded Tomcat Servlet Container, the classloader is a LaunchedURLClassLoader which has limited access."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x3fb55bcc>",
                    "type": "UnknownWord",
                    "value": "classloader"
                },
                "references": {
                    "sentences": [
                        "To exploit this vulnerability, the vulnerable system should have DataBinder enabled, and exploitation depends majorly on the Servlet container of the application. As per the researcher who confirmed the exploitation, when Spring is deployed to Apache Tomcat, the WebAppClassLoader is accessible, which allows an attacker to call getters and setters and can write a malicious file to disk. However, if Spring is deployed using the Embedded Tomcat Servlet Container, the classloader is a LaunchedURLClassLoader which has limited access."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x5c69b209>",
                    "type": "UnknownWord",
                    "value": "launchedurlclassloader"
                },
                "references": {
                    "sentences": [
                        "To exploit this vulnerability, the vulnerable system should have DataBinder enabled, and exploitation depends majorly on the Servlet container of the application. As per the researcher who confirmed the exploitation, when Spring is deployed to Apache Tomcat, the WebAppClassLoader is accessible, which allows an attacker to call getters and setters and can write a malicious file to disk. However, if Spring is deployed using the Embedded Tomcat Servlet Container, the classloader is a LaunchedURLClassLoader which has limited access."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xb302e210>",
                    "type": "UnknownWord",
                    "value": "proof-of-concept"
                },
                "references": {
                    "sentences": [
                        "The details on the vulnerability and possible exploitation through a proof-of-concept is described here."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x3f605ff7>",
                    "type": "UnknownWord",
                    "value": "fixed"
                },
                "references": {
                    "sentences": [
                        "CVE-2022-22963 Users of affected versions should upgrade to 3.1.7, 3.2.3. Releases that have fixed this issue include: Spring Cloud Function - 3.1.7 - 3.2.3<crlf>CVE-2022-22965 Users of affected versions should apply the following mitigation: 5.3.x users should upgrade to 5.3.18+, 5.2.x users should upgrade to 5.2.20+. There are other mitigation steps for applications that cannot upgrade to the above versions. Releases that have fixed this issue include: Spring Framework - 5.3.18+ - 5.2.20+"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x28ed3314>",
                    "type": "UnknownWord",
                    "value": "cannot"
                },
                "references": {
                    "sentences": [
                        "CVE-2022-22963 Users of affected versions should upgrade to 3.1.7, 3.2.3. Releases that have fixed this issue include: Spring Cloud Function - 3.1.7 - 3.2.3<crlf>CVE-2022-22965 Users of affected versions should apply the following mitigation: 5.3.x users should upgrade to 5.3.18+, 5.2.x users should upgrade to 5.2.20+. There are other mitigation steps for applications that cannot upgrade to the above versions. Releases that have fixed this issue include: Spring Framework - 5.3.18+ - 5.2.20+"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x5da64440>",
                    "type": "UnknownWord",
                    "value": "restricting"
                },
                "references": {
                    "sentences": [
                        "Limit the impact from a potential compromise by restricting lateral movement with identity-based micro-segmentation (Zscaler Workload Segmentation) and a Zero Trust architecture.<crlf>Safeguard crown jewel applications by limiting lateral movement using Zscaler Private Access, especially with application security modules turned on.<crlf>Route all server traffic through Zscaler Private Access with additional application security module enabled and Zscaler Internet Access, which will provide the right visibility to identify and stop malicious activity from compromised systems/servers.<crlf>Restrict traffic to the critical infrastructure from the allowed list of known-good destinations.<crlf>Ensure you are inspecting all SSL traffic.<crlf>Turn on Advanced Threat Protection to block all known command-and-control domains. This will provide additional protection in case the adversary exploits this vulnerability to implant malware.<crlf>Extend command-and-control protection to all ports and protocols with the Advanced Cloud Firewall (Cloud IPS module), including emerging C2 destinations. Again, this will provide additional protection in case if the adversary exploits this vulnerability to implant malware.<crlf>Use Advanced Cloud Sandbox to prevent unknown malware delivered as part of a second stage payload."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xadf51f3f>",
                    "type": "UnknownWord",
                    "value": "identity-based"
                },
                "references": {
                    "sentences": [
                        "Limit the impact from a potential compromise by restricting lateral movement with identity-based micro-segmentation (Zscaler Workload Segmentation) and a Zero Trust architecture.<crlf>Safeguard crown jewel applications by limiting lateral movement using Zscaler Private Access, especially with application security modules turned on.<crlf>Route all server traffic through Zscaler Private Access with additional application security module enabled and Zscaler Internet Access, which will provide the right visibility to identify and stop malicious activity from compromised systems/servers.<crlf>Restrict traffic to the critical infrastructure from the allowed list of known-good destinations.<crlf>Ensure you are inspecting all SSL traffic.<crlf>Turn on Advanced Threat Protection to block all known command-and-control domains. This will provide additional protection in case the adversary exploits this vulnerability to implant malware.<crlf>Extend command-and-control protection to all ports and protocols with the Advanced Cloud Firewall (Cloud IPS module), including emerging C2 destinations. Again, this will provide additional protection in case if the adversary exploits this vulnerability to implant malware.<crlf>Use Advanced Cloud Sandbox to prevent unknown malware delivered as part of a second stage payload."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x538e760b>",
                    "type": "UnknownWord",
                    "value": "micro-segmentation"
                },
                "references": {
                    "sentences": [
                        "Limit the impact from a potential compromise by restricting lateral movement with identity-based micro-segmentation (Zscaler Workload Segmentation) and a Zero Trust architecture.<crlf>Safeguard crown jewel applications by limiting lateral movement using Zscaler Private Access, especially with application security modules turned on.<crlf>Route all server traffic through Zscaler Private Access with additional application security module enabled and Zscaler Internet Access, which will provide the right visibility to identify and stop malicious activity from compromised systems/servers.<crlf>Restrict traffic to the critical infrastructure from the allowed list of known-good destinations.<crlf>Ensure you are inspecting all SSL traffic.<crlf>Turn on Advanced Threat Protection to block all known command-and-control domains. This will provide additional protection in case the adversary exploits this vulnerability to implant malware.<crlf>Extend command-and-control protection to all ports and protocols with the Advanced Cloud Firewall (Cloud IPS module), including emerging C2 destinations. Again, this will provide additional protection in case if the adversary exploits this vulnerability to implant malware.<crlf>Use Advanced Cloud Sandbox to prevent unknown malware delivered as part of a second stage payload."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xfc7043b1>",
                    "type": "UnknownWord",
                    "value": "workload"
                },
                "references": {
                    "sentences": [
                        "Limit the impact from a potential compromise by restricting lateral movement with identity-based micro-segmentation (Zscaler Workload Segmentation) and a Zero Trust architecture.<crlf>Safeguard crown jewel applications by limiting lateral movement using Zscaler Private Access, especially with application security modules turned on.<crlf>Route all server traffic through Zscaler Private Access with additional application security module enabled and Zscaler Internet Access, which will provide the right visibility to identify and stop malicious activity from compromised systems/servers.<crlf>Restrict traffic to the critical infrastructure from the allowed list of known-good destinations.<crlf>Ensure you are inspecting all SSL traffic.<crlf>Turn on Advanced Threat Protection to block all known command-and-control domains. This will provide additional protection in case the adversary exploits this vulnerability to implant malware.<crlf>Extend command-and-control protection to all ports and protocols with the Advanced Cloud Firewall (Cloud IPS module), including emerging C2 destinations. Again, this will provide additional protection in case if the adversary exploits this vulnerability to implant malware.<crlf>Use Advanced Cloud Sandbox to prevent unknown malware delivered as part of a second stage payload."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x32d2febc>",
                    "type": "UnknownWord",
                    "value": "segmentation"
                },
                "references": {
                    "sentences": [
                        "Limit the impact from a potential compromise by restricting lateral movement with identity-based micro-segmentation (Zscaler Workload Segmentation) and a Zero Trust architecture.<crlf>Safeguard crown jewel applications by limiting lateral movement using Zscaler Private Access, especially with application security modules turned on.<crlf>Route all server traffic through Zscaler Private Access with additional application security module enabled and Zscaler Internet Access, which will provide the right visibility to identify and stop malicious activity from compromised systems/servers.<crlf>Restrict traffic to the critical infrastructure from the allowed list of known-good destinations.<crlf>Ensure you are inspecting all SSL traffic.<crlf>Turn on Advanced Threat Protection to block all known command-and-control domains. This will provide additional protection in case the adversary exploits this vulnerability to implant malware.<crlf>Extend command-and-control protection to all ports and protocols with the Advanced Cloud Firewall (Cloud IPS module), including emerging C2 destinations. Again, this will provide additional protection in case if the adversary exploits this vulnerability to implant malware.<crlf>Use Advanced Cloud Sandbox to prevent unknown malware delivered as part of a second stage payload."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xc4c33b9e>",
                    "type": "UnknownWord",
                    "value": "crown"
                },
                "references": {
                    "sentences": [
                        "Limit the impact from a potential compromise by restricting lateral movement with identity-based micro-segmentation (Zscaler Workload Segmentation) and a Zero Trust architecture.<crlf>Safeguard crown jewel applications by limiting lateral movement using Zscaler Private Access, especially with application security modules turned on.<crlf>Route all server traffic through Zscaler Private Access with additional application security module enabled and Zscaler Internet Access, which will provide the right visibility to identify and stop malicious activity from compromised systems/servers.<crlf>Restrict traffic to the critical infrastructure from the allowed list of known-good destinations.<crlf>Ensure you are inspecting all SSL traffic.<crlf>Turn on Advanced Threat Protection to block all known command-and-control domains. This will provide additional protection in case the adversary exploits this vulnerability to implant malware.<crlf>Extend command-and-control protection to all ports and protocols with the Advanced Cloud Firewall (Cloud IPS module), including emerging C2 destinations. Again, this will provide additional protection in case if the adversary exploits this vulnerability to implant malware.<crlf>Use Advanced Cloud Sandbox to prevent unknown malware delivered as part of a second stage payload."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x2c1a511e>",
                    "type": "UnknownWord",
                    "value": "jewel"
                },
                "references": {
                    "sentences": [
                        "Limit the impact from a potential compromise by restricting lateral movement with identity-based micro-segmentation (Zscaler Workload Segmentation) and a Zero Trust architecture.<crlf>Safeguard crown jewel applications by limiting lateral movement using Zscaler Private Access, especially with application security modules turned on.<crlf>Route all server traffic through Zscaler Private Access with additional application security module enabled and Zscaler Internet Access, which will provide the right visibility to identify and stop malicious activity from compromised systems/servers.<crlf>Restrict traffic to the critical infrastructure from the allowed list of known-good destinations.<crlf>Ensure you are inspecting all SSL traffic.<crlf>Turn on Advanced Threat Protection to block all known command-and-control domains. This will provide additional protection in case the adversary exploits this vulnerability to implant malware.<crlf>Extend command-and-control protection to all ports and protocols with the Advanced Cloud Firewall (Cloud IPS module), including emerging C2 destinations. Again, this will provide additional protection in case if the adversary exploits this vulnerability to implant malware.<crlf>Use Advanced Cloud Sandbox to prevent unknown malware delivered as part of a second stage payload."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xa6d88e03>",
                    "type": "UnknownWord",
                    "value": "route"
                },
                "references": {
                    "sentences": [
                        "Limit the impact from a potential compromise by restricting lateral movement with identity-based micro-segmentation (Zscaler Workload Segmentation) and a Zero Trust architecture.<crlf>Safeguard crown jewel applications by limiting lateral movement using Zscaler Private Access, especially with application security modules turned on.<crlf>Route all server traffic through Zscaler Private Access with additional application security module enabled and Zscaler Internet Access, which will provide the right visibility to identify and stop malicious activity from compromised systems/servers.<crlf>Restrict traffic to the critical infrastructure from the allowed list of known-good destinations.<crlf>Ensure you are inspecting all SSL traffic.<crlf>Turn on Advanced Threat Protection to block all known command-and-control domains. This will provide additional protection in case the adversary exploits this vulnerability to implant malware.<crlf>Extend command-and-control protection to all ports and protocols with the Advanced Cloud Firewall (Cloud IPS module), including emerging C2 destinations. Again, this will provide additional protection in case if the adversary exploits this vulnerability to implant malware.<crlf>Use Advanced Cloud Sandbox to prevent unknown malware delivered as part of a second stage payload."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x360cad49>",
                    "type": "UnknownWord",
                    "value": "known-good"
                },
                "references": {
                    "sentences": [
                        "Limit the impact from a potential compromise by restricting lateral movement with identity-based micro-segmentation (Zscaler Workload Segmentation) and a Zero Trust architecture.<crlf>Safeguard crown jewel applications by limiting lateral movement using Zscaler Private Access, especially with application security modules turned on.<crlf>Route all server traffic through Zscaler Private Access with additional application security module enabled and Zscaler Internet Access, which will provide the right visibility to identify and stop malicious activity from compromised systems/servers.<crlf>Restrict traffic to the critical infrastructure from the allowed list of known-good destinations.<crlf>Ensure you are inspecting all SSL traffic.<crlf>Turn on Advanced Threat Protection to block all known command-and-control domains. This will provide additional protection in case the adversary exploits this vulnerability to implant malware.<crlf>Extend command-and-control protection to all ports and protocols with the Advanced Cloud Firewall (Cloud IPS module), including emerging C2 destinations. Again, this will provide additional protection in case if the adversary exploits this vulnerability to implant malware.<crlf>Use Advanced Cloud Sandbox to prevent unknown malware delivered as part of a second stage payload."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xa3f46e0b>",
                    "type": "UnknownWord",
                    "value": "inspecting"
                },
                "references": {
                    "sentences": [
                        "Limit the impact from a potential compromise by restricting lateral movement with identity-based micro-segmentation (Zscaler Workload Segmentation) and a Zero Trust architecture.<crlf>Safeguard crown jewel applications by limiting lateral movement using Zscaler Private Access, especially with application security modules turned on.<crlf>Route all server traffic through Zscaler Private Access with additional application security module enabled and Zscaler Internet Access, which will provide the right visibility to identify and stop malicious activity from compromised systems/servers.<crlf>Restrict traffic to the critical infrastructure from the allowed list of known-good destinations.<crlf>Ensure you are inspecting all SSL traffic.<crlf>Turn on Advanced Threat Protection to block all known command-and-control domains. This will provide additional protection in case the adversary exploits this vulnerability to implant malware.<crlf>Extend command-and-control protection to all ports and protocols with the Advanced Cloud Firewall (Cloud IPS module), including emerging C2 destinations. Again, this will provide additional protection in case if the adversary exploits this vulnerability to implant malware.<crlf>Use Advanced Cloud Sandbox to prevent unknown malware delivered as part of a second stage payload."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x453b4cc0>",
                    "type": "UnknownWord",
                    "value": "coverage"
                },
                "references": {
                    "sentences": [
                        "Zscaler Coverage:"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xf7c6e763>",
                    "type": "UnknownWord",
                    "value": "html"
                },
                "references": {
                    "sentences": [
                        "HTML.Exploit.CVE-2022-22963<crlf>HTML.Exploit.Spring4Shell",
                        "HTML.Exploit.Spring4Shell<crlf>HTML.Exploit.CVE-2022-22963"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x88f309dc>",
                    "type": "UnknownWord",
                    "value": "world-class"
                },
                "references": {
                    "sentences": [
                        "About ThreatLabz<crlf>ThreatLabz is the security research arm of Zscaler. This world-class team is responsible for hunting new threats and ensuring that the thousands of organizations using the global Zscaler platform are always protected. In addition to malware research and behavioral analysis, team members are involved in the research and development of new prototype modules for advanced threat protection on the Zscaler platform, and regularly conduct internal security audits to ensure that Zscaler products and infrastructure meet security compliance standards. ThreatLabz regularly publishes in-depth analyses of new and emerging threats on its portal, research.zscaler.com."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x28f425fe>",
                    "type": "UnknownWord",
                    "value": "prototype"
                },
                "references": {
                    "sentences": [
                        "About ThreatLabz<crlf>ThreatLabz is the security research arm of Zscaler. This world-class team is responsible for hunting new threats and ensuring that the thousands of organizations using the global Zscaler platform are always protected. In addition to malware research and behavioral analysis, team members are involved in the research and development of new prototype modules for advanced threat protection on the Zscaler platform, and regularly conduct internal security audits to ensure that Zscaler products and infrastructure meet security compliance standards. ThreatLabz regularly publishes in-depth analyses of new and emerging threats on its portal, research.zscaler.com."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x1d302c3e>",
                    "type": "UnknownWord",
                    "value": "compliance"
                },
                "references": {
                    "sentences": [
                        "About ThreatLabz<crlf>ThreatLabz is the security research arm of Zscaler. This world-class team is responsible for hunting new threats and ensuring that the thousands of organizations using the global Zscaler platform are always protected. In addition to malware research and behavioral analysis, team members are involved in the research and development of new prototype modules for advanced threat protection on the Zscaler platform, and regularly conduct internal security audits to ensure that Zscaler products and infrastructure meet security compliance standards. ThreatLabz regularly publishes in-depth analyses of new and emerging threats on its portal, research.zscaler.com."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xb9dabb3b>",
                    "type": "UnknownWord",
                    "value": "publishes"
                },
                "references": {
                    "sentences": [
                        "About ThreatLabz<crlf>ThreatLabz is the security research arm of Zscaler. This world-class team is responsible for hunting new threats and ensuring that the thousands of organizations using the global Zscaler platform are always protected. In addition to malware research and behavioral analysis, team members are involved in the research and development of new prototype modules for advanced threat protection on the Zscaler platform, and regularly conduct internal security audits to ensure that Zscaler products and infrastructure meet security compliance standards. ThreatLabz regularly publishes in-depth analyses of new and emerging threats on its portal, research.zscaler.com."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x4c21e06d>",
                    "type": "UnknownWord",
                    "value": "portal"
                },
                "references": {
                    "sentences": [
                        "About ThreatLabz<crlf>ThreatLabz is the security research arm of Zscaler. This world-class team is responsible for hunting new threats and ensuring that the thousands of organizations using the global Zscaler platform are always protected. In addition to malware research and behavioral analysis, team members are involved in the research and development of new prototype modules for advanced threat protection on the Zscaler platform, and regularly conduct internal security audits to ensure that Zscaler products and infrastructure meet security compliance standards. ThreatLabz regularly publishes in-depth analyses of new and emerging threats on its portal, research.zscaler.com."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xf35e1b77>",
                    "type": "UnknownWord",
                    "value": "jithin nair"
                },
                "references": {
                    "sentences": [],
                    "titles": [
                        "Jithin Nair"
                    ]
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x352d9392>",
                    "type": "UnknownWord",
                    "value": "amit"
                },
                "references": {
                    "sentences": [],
                    "titles": [
                        "Amit Banker"
                    ]
                }
            }
        ]
    },
    "other_links": [],
    "info": {
        "potential_threats": {},
        "sigma": false,
        "yara": false
    },
    "keywords": {
        "classified": [],
        "dubbed": [],
        "associated": [],
        "targets": [],
        "attributed": []
    },
    "resources": {
        "links": {
            "github": [
                "https://github.com/spring-projects/spring-framework/commit/7f7fb58dd0dae86d22268a4b59ac7c72a6c22529"
            ],
            "pastebin": [],
            "text_files": [],
            "other": [
                "https://spring.io/blog/2022/03/29/cve-report-published-for-spring-cloud-function",
                "https://spring.io/blog/2022/03/31/spring-framework-rce-early-announcement",
                "https://www.lunasec.io/docs/blog/spring-rce-vulnerabilities/#exploit-scenario-overview",
                "https://spring.io/blog/2022/03/31/spring-framework-rce-early-announcement",
                "https://www.lunasec.io/docs/blog/spring-rce-vulnerabilities/#exploit-scenario-overview",
                "https://www.praetorian.com/blog/spring-core-jdk9-rce/",
                "https://spring.io/blog/2022/03/29/cve-report-published-for-spring-cloud-function",
                "https://tanzu.vmware.com/security/cve-2022-22963",
                "https://www.cyberkendra.com/2022/03/rce-0-day-exploit-found-in-spring-cloud.html",
                "https://www.cyberkendra.com/2022/03/springshell-rce-0-day-vulnerability.html",
                "https://research.zscaler.com/",
                "https://www.zscaler.com/blogs/security-research",
                "https://www.zscaler.com/blogs/insights-and-research",
                "mailto:?subject=Security%20Advisory:%20Spring%20Cloud%20Framework%20Vulnerabilities&body=https://bit.ly/3qSdaT4",
                "https://www.facebook.com/sharer/sharer.php?u=https://bit.ly/3qSdaT4",
                "https://www.linkedin.com/sharing/share-offsite/?title=Security%20Advisory:%20Spring%20Cloud%20Framework%20Vulnerabilities&url=https://bit.ly/3qSdaT4",
                "https://twitter.com/intent/tweet?text=https://bit.ly/3qSdaT4%20%E2%80%94%20Security%20Advisory:%20Spring%20Cloud%20Framework%20Vulnerabilities",
                "https://www.zscaler.com/blogs/feeds/security-research"
            ]
        },
        "images": [
            "https://www.zscaler.com/cdn-cgi/image/format%3Dauto/sites/default/files/images/blogs/shutterstock_488465749_2.jpg"
        ]
    }
}