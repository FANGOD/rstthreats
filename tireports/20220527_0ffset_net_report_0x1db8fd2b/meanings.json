{
    "title": "BAZARLOADER: Analysing The Main Loader. Step 1: Checking System Languages",
    "url": "https://www.0ffset.net/reverse-engineering/analysing-the-main-bazarloader/?utm_source=rss&utm_medium=rss&utm_campaign=analysing-the-main-bazarloader",
    "threats": {
        "Threat": [
            {
                "token": {
                    "id": "<THREAT_0xf4f1f185>",
                    "type": "Threat",
                    "value": "bazarbackdoor"
                },
                "references": {
                    "sentences": [
                        "First, BAZARLOADER calls InitializeCriticalSection to initialize the structures critical section object, which is later used to protect accesses to the creation_flag field.",
                        "To check for multiple running instances of itself, BAZARLOADER first extracts the subauthority of a SID from its process. It does this by calling GetTokenInformation to retrieve the processs token integrity level and calling GetSidSubAuthorityCount and GetSidSubAuthority to access the subauthority of a SID.",
                        "Prior to communicating with C2 servers, BAZARLOADER first resolves a list of raw IP addresses and writes them into the C2_addr_list field in the main structure.",
                        "After successfully downloading the next stage executable, BAZARLOADER begins the injection functionality to launch it from another process.",
                        "Finally, it calls BCryptGetProperty to retrieve the length of the RSA public and private cipher blocks. With this structure fully populated, BAZARLOADER can now perform RSA encryption/decryption as well as SHA384 hashing.",
                        "This post is a follow up on the last one on BAZARLOADER. If youre interested in how to unpack the initial stages of this malware, you can check it out here.",
                        "For each of these custom domains, BAZARLOADER calls DnsQuery_A to query a DNS Resource Record from OpenNICs servers to resolve the C2 servers IP address.",
                        "By examining OpenNICs APIs, we can break down this object name to see what BAZARLOADER is requesting. The bare parameter requests to only list the DNS server IP address, the ipv parameter requests to only list IPv4 servers, the wl parameter requests to only list whitelisted servers, and the res parameter requests to list 8 servers only.",
                        "The bitmask that BAZARLOADER uses is 0xD8080190C03, which is 11011000000010000000000110010000110000000011 in binary. The first bit in the bitmask is checked if the language ID is 0x18. The second bit is checked if the language ID is 0x19, and so on",
                        "BAZARLOADERs HTTP Header",
                        "For this functionality, BAZARLOADER populates the following structure.",
                        "With the process parameter RTL_USER_PROCESS_PARAMETERS structure, BAZARLOADER reads the processs command line and full path to populate the injection structure.",
                        "Similar to a lot of malware, BAZARLOADER manually checks the systems languages to avoid executing on machines in Russia and nearby countries.",
                        "Next, BAZARLOADER signs the generated hash with its RSA private by calling BCryptSignHash and uses this hash signature to randomly generate the HTTP header.",
                        "BAZARLOADER then generates the HTTP header to be appended to the request. It does this by calling GetSystemTime to populate the curr_system_time and the datetime_string field of the main structure with the current date and time.",
                        "For each DNS server IP address, BAZARLOADER parses it from string to int and populates the opennic_server_struct field in the main structure. Below is the structure used to store OpenNIC IP addresses.",
                        "If the status code is HTTP_STATUS_OK, BAZARLOADER calls InternetQueryDataAvailable to determine the size of data to read, allocates the memory buffer according to the size, and calls InternetReadFile to read the next-stage payload until everything is written into memory.",
                        "If the SIDs subauthority is SECURITY_MANDATORY_SYSTEM_RID or SECURITY_MANDATORY_PROTECTED_PROCESS_RID, BAZARLOADER checks if the mutex {b837ef4f-10ee-4821-ac76-2331eb32a23f} is currently owned by any other process by calling CreateMutexA.",
                        "BAZARLOADER mainly uses the following structure for communication with C2 servers. The fields of the structure will be explained as we go along analyzing the code.",
                        "To generate Internet activities to hide its communication with C2 servers, BAZARLOADER first calls InternetOpenA to initialize the use of WinINet functions with the following string as the HTTP user agent.",
                        "If the language identifier is greater than 0x43 or less than 0x18, its treated as valid and BAZARLOADER proceeds with its execution.",
                        "Next, the thread enters an infinite loop to start generating the traffic noises. For random number generation, BAZARLOADER uses different functions that call the Windows API BCryptGenRandom to generate a set number of random bytes.",
                        "Similarly, BAZARLOADER populates the structure below to create an HTTP request to C2. The requests object name and HTTP verb are resolved to be /data/service and GET.",
                        "If the SIDs subauthority is not SECURITY_MANDATORY_SYSTEM_RID or SECURITY_MANDATORY_PROTECTED_PROCESS_RID, BAZARLOADER still uses these two mutex names but adds the string Global\\ in front of them. This checks for the mutexes in the global namespace instead of the per-session namespace, which allows the malware to check if it has instances running in other users sessions.",
                        "And with that, we have analyzed how BAZARLOADER downloads a remote executable and executes it using process hollowing! If you have any questions regarding the analysis, feel free to reach out to me via Twitter.",
                        "To populate the full_exec_command and thread_curr_directory fields which contain the processs command line and full path, BAZARLOADER first extracts the process parameters from the Process Environment Block (PEB).",
                        "The requests HTTP version is resolved to be HTTP/1.1, and BAZARLOADER calls HttpOpenRequestA to create this request for the C2 server using the connection handle retrieved above.",
                        "If BAZARLOADER fails to download the next stage executable from the IP addresses listed above, it attempts to resolve custom C2 domains using OpenNIC, a user-owned DNS community service.",
                        "With the generated HTTP header and the request handle, BAZARLOADER calls HttpSendRequestA to send the request to the C2 server and calls HttpQueryInfoA to retrieve the status code.",
                        "If BAZARLOADER has admin privilege, instead of a browsers process, it tries to populate the injection structure with a svchost.exe process from the following command line.",
                        "Finally, BAZARLOADER calls SetThreadContext to set the new entry point for the parent process and calls ResumeThread to resume the parents process again, which will execute the injected executable."
                    ],
                    "titles": [
                        "Step 1: Checking System Languages",
                        "BAZARLOADER: Analysing The Main Loader",
                        "Step 4: Cryptographic Structure Population",
                        "Step 2: Run-Once Mutex",
                        "Step 5: Injection Through Process Hollowing",
                        "Step 4: Generating Random Internet Traffic",
                        "Step 5: C2 Connection Through Raw IP Addresses",
                        "Step 6: C2 Connection Through Custom URLs",
                        "BAZARLOADER: Analysing The Main Loader. Step 1: Checking System Languages"
                    ]
                },
                "links": [
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x62d583cc>",
                            "type": "FunctionName",
                            "value": "HttpQueryInfoA"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<THREAT_0xf4f1f185>",
                            "type": "Threat",
                            "value": "bazarbackdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x517f7fa9>",
                            "type": "FunctionName",
                            "value": "BCryptDecrypt"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<THREAT_0xf4f1f185>",
                            "type": "Threat",
                            "value": "bazarbackdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0xcf09f42e>",
                            "type": "FunctionName",
                            "value": "HTTPQueryInfoA"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<THREAT_0xf4f1f185>",
                            "type": "Threat",
                            "value": "bazarbackdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0xaace989b>",
                            "type": "FunctionName",
                            "value": "InternetSetOptionA"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<THREAT_0xf4f1f185>",
                            "type": "Threat",
                            "value": "bazarbackdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0xe493915a>",
                            "type": "FunctionName",
                            "value": "OpenProcessToken"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<THREAT_0xf4f1f185>",
                            "type": "Threat",
                            "value": "bazarbackdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0xaaeb9b14>",
                            "type": "FunctionName",
                            "value": "InternetQueryDataAvailable"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<THREAT_0xf4f1f185>",
                            "type": "Threat",
                            "value": "bazarbackdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0xe4c6c241>",
                            "type": "FunctionName",
                            "value": "NtQueryInformationProcess"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<THREAT_0xf4f1f185>",
                            "type": "Threat",
                            "value": "bazarbackdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0xa8776200>",
                            "type": "FunctionName",
                            "value": "InternetOpenURLA"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<THREAT_0xf4f1f185>",
                            "type": "Threat",
                            "value": "bazarbackdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x96ed5f10>",
                            "type": "FunctionName",
                            "value": "ReadProcessMemory"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<THREAT_0xf4f1f185>",
                            "type": "Threat",
                            "value": "bazarbackdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x1efd163f>",
                            "type": "FunctionName",
                            "value": "InitializeCriticalSection"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<THREAT_0xf4f1f185>",
                            "type": "Threat",
                            "value": "bazarbackdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0xc7d50cdc>",
                            "type": "FunctionName",
                            "value": "HttpOpenRequestA"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<THREAT_0xf4f1f185>",
                            "type": "Threat",
                            "value": "bazarbackdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0xe3bf2aeb>",
                            "type": "FunctionName",
                            "value": "BCryptSignHash"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<THREAT_0xf4f1f185>",
                            "type": "Threat",
                            "value": "bazarbackdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0xb4d7e32e>",
                            "type": "FunctionName",
                            "value": "BCryptImportKeyPair"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<THREAT_0xf4f1f185>",
                            "type": "Threat",
                            "value": "bazarbackdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x472f07b5>",
                            "type": "FunctionName",
                            "value": "InternetReadFile"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<THREAT_0xf4f1f185>",
                            "type": "Threat",
                            "value": "bazarbackdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x45343c4f>",
                            "type": "FunctionName",
                            "value": "InternetConnectA"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<THREAT_0xf4f1f185>",
                            "type": "Threat",
                            "value": "bazarbackdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x72b763a>",
                            "type": "FunctionName",
                            "value": "ResumeThread"
                        },
                        "relation": "use_threat",
                        "dst": {
                            "id": "<THREAT_0xf4f1f185>",
                            "type": "Threat",
                            "value": "bazarbackdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x87765c4d>",
                            "type": "FunctionName",
                            "value": "OpenNIC"
                        },
                        "relation": "use_threat",
                        "dst": {
                            "id": "<THREAT_0xf4f1f185>",
                            "type": "Threat",
                            "value": "bazarbackdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x69f89450>",
                            "type": "FunctionName",
                            "value": "HttpSendRequestA"
                        },
                        "relation": "use_threat",
                        "dst": {
                            "id": "<THREAT_0xf4f1f185>",
                            "type": "Threat",
                            "value": "bazarbackdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x74014373>",
                            "type": "FunctionName",
                            "value": "BCryptGetProperty"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<THREAT_0xf4f1f185>",
                            "type": "Threat",
                            "value": "bazarbackdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<GEO_0xcdb3bd3>",
                            "type": "Geo",
                            "value": "russia"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<THREAT_0xf4f1f185>",
                            "type": "Threat",
                            "value": "bazarbackdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<CATEGORY_0xf1a480bb>",
                            "type": "Category",
                            "value": "malware"
                        },
                        "relation": "has_category",
                        "dst": {
                            "id": "<THREAT_0xf4f1f185>",
                            "type": "Threat",
                            "value": "bazarbackdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<THREAT_0x25e6074e>",
                            "type": "Threat",
                            "value": "conti"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<THREAT_0xf4f1f185>",
                            "type": "Threat",
                            "value": "bazarbackdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x62d583cc>",
                            "type": "FunctionName",
                            "value": "HttpQueryInfoA"
                        },
                        "relation": "use_threat",
                        "dst": {
                            "id": "<THREAT_0xf4f1f185>",
                            "type": "Threat",
                            "value": "bazarbackdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<CATEGORY_0xe42cc34c>",
                            "type": "Category",
                            "value": "dns"
                        },
                        "relation": "has_category",
                        "dst": {
                            "id": "<THREAT_0xf4f1f185>",
                            "type": "Threat",
                            "value": "bazarbackdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x356d1a8f>",
                            "type": "FunctionName",
                            "value": "OpenNICs"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<THREAT_0xf4f1f185>",
                            "type": "Threat",
                            "value": "bazarbackdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0xeaa99cf2>",
                            "type": "FunctionName",
                            "value": "GetSidSubAuthority"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<THREAT_0xf4f1f185>",
                            "type": "Threat",
                            "value": "bazarbackdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0xbace2fe9>",
                            "type": "FunctionName",
                            "value": "SetThreadContext"
                        },
                        "relation": "use_threat",
                        "dst": {
                            "id": "<THREAT_0xf4f1f185>",
                            "type": "Threat",
                            "value": "bazarbackdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x75c00b06>",
                            "type": "FunctionName",
                            "value": "DnsQuery_A"
                        },
                        "relation": "use_threat",
                        "dst": {
                            "id": "<THREAT_0xf4f1f185>",
                            "type": "Threat",
                            "value": "bazarbackdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x70f6527d>",
                            "type": "FunctionName",
                            "value": "InternetOpenA"
                        },
                        "relation": "use_threat",
                        "dst": {
                            "id": "<THREAT_0xf4f1f185>",
                            "type": "Threat",
                            "value": "bazarbackdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0xa576b2e6>",
                            "type": "FunctionName",
                            "value": "GetSystemDefaultLangID"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<THREAT_0xf4f1f185>",
                            "type": "Threat",
                            "value": "bazarbackdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x472f07b5>",
                            "type": "FunctionName",
                            "value": "InternetReadFile"
                        },
                        "relation": "use_threat",
                        "dst": {
                            "id": "<THREAT_0xf4f1f185>",
                            "type": "Threat",
                            "value": "bazarbackdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x6ff17045>",
                            "type": "FunctionName",
                            "value": "WriteProcessMemory"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<THREAT_0xf4f1f185>",
                            "type": "Threat",
                            "value": "bazarbackdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x90b3cd31>",
                            "type": "FunctionName",
                            "value": "GetSidSubAuthorityCount"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<THREAT_0xf4f1f185>",
                            "type": "Threat",
                            "value": "bazarbackdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0xe3bf2aeb>",
                            "type": "FunctionName",
                            "value": "BCryptSignHash"
                        },
                        "relation": "use_threat",
                        "dst": {
                            "id": "<THREAT_0xf4f1f185>",
                            "type": "Threat",
                            "value": "bazarbackdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x70f6527d>",
                            "type": "FunctionName",
                            "value": "InternetOpenA"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<THREAT_0xf4f1f185>",
                            "type": "Threat",
                            "value": "bazarbackdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0xe480ea86>",
                            "type": "FunctionName",
                            "value": "GetKeyboardLayoutList"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<THREAT_0xf4f1f185>",
                            "type": "Threat",
                            "value": "bazarbackdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x241a1a65>",
                            "type": "FunctionName",
                            "value": "GetTokenInformation"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<THREAT_0xf4f1f185>",
                            "type": "Threat",
                            "value": "bazarbackdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x356d1a8f>",
                            "type": "FunctionName",
                            "value": "OpenNICs"
                        },
                        "relation": "use_threat",
                        "dst": {
                            "id": "<THREAT_0xf4f1f185>",
                            "type": "Threat",
                            "value": "bazarbackdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x9bf022>",
                            "type": "FunctionName",
                            "value": "InternetCrackUrlA"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<THREAT_0xf4f1f185>",
                            "type": "Threat",
                            "value": "bazarbackdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<THREAT_0xff6ba3c2>",
                            "type": "Threat",
                            "value": "cobalt_strike"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<THREAT_0xf4f1f185>",
                            "type": "Threat",
                            "value": "bazarbackdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x3b840b8c>",
                            "type": "FunctionName",
                            "value": "GetCurrentProcess"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<THREAT_0xf4f1f185>",
                            "type": "Threat",
                            "value": "bazarbackdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0xaaeb9b14>",
                            "type": "FunctionName",
                            "value": "InternetQueryDataAvailable"
                        },
                        "relation": "use_threat",
                        "dst": {
                            "id": "<THREAT_0xf4f1f185>",
                            "type": "Threat",
                            "value": "bazarbackdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x8de4827f>",
                            "type": "FunctionName",
                            "value": "GetSystemTime"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<THREAT_0xf4f1f185>",
                            "type": "Threat",
                            "value": "bazarbackdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x75c00b06>",
                            "type": "FunctionName",
                            "value": "DnsQuery_A"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<THREAT_0xf4f1f185>",
                            "type": "Threat",
                            "value": "bazarbackdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0xbace2fe9>",
                            "type": "FunctionName",
                            "value": "SetThreadContext"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<THREAT_0xf4f1f185>",
                            "type": "Threat",
                            "value": "bazarbackdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x87765c4d>",
                            "type": "FunctionName",
                            "value": "OpenNIC"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<THREAT_0xf4f1f185>",
                            "type": "Threat",
                            "value": "bazarbackdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x69f89450>",
                            "type": "FunctionName",
                            "value": "HttpSendRequestA"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<THREAT_0xf4f1f185>",
                            "type": "Threat",
                            "value": "bazarbackdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x72b763a>",
                            "type": "FunctionName",
                            "value": "ResumeThread"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<THREAT_0xf4f1f185>",
                            "type": "Threat",
                            "value": "bazarbackdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<FILE_0x418c22ac>",
                            "type": "File",
                            "value": "svchost.exe"
                        },
                        "relation": "use_threat",
                        "dst": {
                            "id": "<THREAT_0xf4f1f185>",
                            "type": "Threat",
                            "value": "bazarbackdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x1efd163f>",
                            "type": "FunctionName",
                            "value": "InitializeCriticalSection"
                        },
                        "relation": "use_threat",
                        "dst": {
                            "id": "<THREAT_0xf4f1f185>",
                            "type": "Threat",
                            "value": "bazarbackdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x4cf9da98>",
                            "type": "FunctionName",
                            "value": "OpenProcess"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<THREAT_0xf4f1f185>",
                            "type": "Threat",
                            "value": "bazarbackdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x32fd35e9>",
                            "type": "FunctionName",
                            "value": "CreateMutexA"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<THREAT_0xf4f1f185>",
                            "type": "Threat",
                            "value": "bazarbackdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x4d4ac8b3>",
                            "type": "FunctionName",
                            "value": "CreateThread"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<THREAT_0xf4f1f185>",
                            "type": "Threat",
                            "value": "bazarbackdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x32fd35e9>",
                            "type": "FunctionName",
                            "value": "CreateMutexA"
                        },
                        "relation": "use_threat",
                        "dst": {
                            "id": "<THREAT_0xf4f1f185>",
                            "type": "Threat",
                            "value": "bazarbackdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0xca3b22b9>",
                            "type": "FunctionName",
                            "value": "BCryptOpenAlgorithmProvider"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<THREAT_0xf4f1f185>",
                            "type": "Threat",
                            "value": "bazarbackdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<GEO_0xcdb3bd3>",
                            "type": "Geo",
                            "value": "russia"
                        },
                        "relation": "use_geo",
                        "dst": {
                            "id": "<THREAT_0xf4f1f185>",
                            "type": "Threat",
                            "value": "bazarbackdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0xc7d50cdc>",
                            "type": "FunctionName",
                            "value": "HttpOpenRequestA"
                        },
                        "relation": "use_threat",
                        "dst": {
                            "id": "<THREAT_0xf4f1f185>",
                            "type": "Threat",
                            "value": "bazarbackdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0xa28f3aae>",
                            "type": "FunctionName",
                            "value": "CreateProcessA"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<THREAT_0xf4f1f185>",
                            "type": "Threat",
                            "value": "bazarbackdoor"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<THREAT_0xff6ba3c2>",
                    "type": "Threat",
                    "value": "cobalt_strike"
                },
                "references": {
                    "sentences": [
                        "In this post, well cover the final stage of this loader, which has the capability to download and executes remote payloads such as Cobalt Strike and Conti ransomware. To follow along, you can grab the sample as well as the PCAP files for it on Malware-Traffic-Analysis.net."
                    ],
                    "titles": [
                        "BAZARLOADER: Analysing The Main Loader"
                    ]
                },
                "links": [
                    {
                        "src": {
                            "id": "<THREAT_0xff6ba3c2>",
                            "type": "Threat",
                            "value": "cobalt_strike"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<THREAT_0xf4f1f185>",
                            "type": "Threat",
                            "value": "bazarbackdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<THREAT_0xff6ba3c2>",
                            "type": "Threat",
                            "value": "cobalt_strike"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<THREAT_0x25e6074e>",
                            "type": "Threat",
                            "value": "conti"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<THREAT_0x25e6074e>",
                    "type": "Threat",
                    "value": "conti"
                },
                "references": {
                    "sentences": [
                        "In this post, well cover the final stage of this loader, which has the capability to download and executes remote payloads such as Cobalt Strike and Conti ransomware. To follow along, you can grab the sample as well as the PCAP files for it on Malware-Traffic-Analysis.net."
                    ],
                    "titles": [
                        "BAZARLOADER: Analysing The Main Loader"
                    ]
                },
                "links": [
                    {
                        "src": {
                            "id": "<THREAT_0x25e6074e>",
                            "type": "Threat",
                            "value": "conti"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<THREAT_0xf4f1f185>",
                            "type": "Threat",
                            "value": "bazarbackdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<THREAT_0xff6ba3c2>",
                            "type": "Threat",
                            "value": "cobalt_strike"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<THREAT_0x25e6074e>",
                            "type": "Threat",
                            "value": "conti"
                        }
                    }
                ]
            }
        ]
    },
    "ttps": {},
    "meanings": {
        "Category": [
            {
                "token": {
                    "id": "<CATEGORY_0xf1a480bb>",
                    "type": "Category",
                    "value": "malware"
                },
                "references": {
                    "sentences": [
                        "If the status code is not HTTP_STATUS_OK, the malware moves on to another C2 address.",
                        "This post is a follow up on the last one on BAZARLOADER. If youre interested in how to unpack the initial stages of this malware, you can check it out here.",
                        "After checking if the IP address is valid, the malware tries connecting to it and requests to download the next stage executable similar to what we have seen in the previous step.",
                        "It generates a count for the path segments randomly in the given range. For each of the segments, the malware randomly generates a string with a random length in the given range that contains numbers and uppercase/lowercase letters.",
                        "The thread first tries to obtain ownership of the critical section object and check if the creation flag is enabled. If it is, the malware resolves the following URLs as stack strings.",
                        "For each process name, the malware enumerates the processs snapshot to retrieve its ID and calls OpenProcess to get its handle.",
                        "Below is the list of all languages from the bitmask that the malware avoids.",
                        "Similar to a lot of malware, BAZARLOADER manually checks the systems languages to avoid executing on machines in Russia and nearby countries.",
                        "If it is, the malware terminates itself. However, there is a small bug with the condition to check if the mutex object exists, which assumes it fails to open the mutex when it actually succeeds.",
                        "We can also see that the malware iterates through the parents section header to find the .reloc section and performs relocation on the injected image in memory.",
                        "To begin querying OpenNICs API, the malware first resolves the URL api.opennicproject.org and calls InternetConnectA to establish a connection to the site.",
                        "Finally, the malware decodes the following custom C2 domains, attempts to resolve them using the DNS servers, and downloads the next-stage executable.",
                        "Finally, the malware calls InternetOpenURLA to establish a connection with the generated URL. It calls HTTPQueryInfoA with the HTTP_QUERY_CONTENT_LENGTH flag to retrieve the contents length, allocates a buffer with that size, and calls InternetReadFile to read data from that URL.",
                        "Next, using the injection struct, the malware calls CreateProcessA to create the target process in the suspended state to perform process hollowing.",
                        "The malware calls InternetCrackUrlA to retrieve the C2s URL components and InternetConnectA to connect to the server.",
                        "For each blob, the malware resolves one of the strings RSAFULLPRIVATEBLOB or RSAPUBLICBLOB and uses it to specify the blobs type when calling BCryptImportKeyPair to import the corresponding key handle.",
                        "We can quickly spot that process hollowing is taking place through the Windows APIs being called. NtUnmapViewOfSection is called to unmap and carve out the parents memory. VirtualAllocEx and WriteProcessMemory are then called to allocate virtual memory in the parents process and write the malicious payload into it.",
                        "After this, the malware resolves the string {0caa6ebb-cf78-4b01-9b0b-51032c9120ce} and tries to create a mutex with that name.",
                        "The malware then enters a loop to call InternetQueryDataAvailable and InternetReadFile to read the 8 OpenNICs DNS servers into memory.",
                        "For each of these addresses, the malware attempts to communicate with the corresponding server and download the next stage executable.",
                        "The malware resolves the strings RSA and SHA384 and calls BCryptOpenAlgorithmProvider to retrieve handles for these two algorithms. The handles are stored in the corresponding fields in the crypto_struct structure.",
                        "If the SIDs subauthority is not SECURITY_MANDATORY_SYSTEM_RID or SECURITY_MANDATORY_PROTECTED_PROCESS_RID, BAZARLOADER still uses these two mutex names but adds the string Global\\ in front of them. This checks for the mutexes in the global namespace instead of the per-session namespace, which allows the malware to check if it has instances running in other users sessions.",
                        "For each of these languages, the malware checks if its valid using a bitmask.",
                        "If this mutex object already exists, the malware also terminates itself.",
                        "The malware then spawns a thread to periodically connect to random URLs and generate noises to hide the main C2 traffic by utilizing the following structure.",
                        "To access the PEB, the malware calls NtQueryInformationProcess to retrieve the PEBs adress and calls ReadProcessMemory to read the PEB into memory.",
                        "Finally, the malware decrypts the payload with its RSA public key by calling BCryptDecrypt and checks to make sure the payloads size is greater than 64 bytes and that it contains an MZ header."
                    ],
                    "titles": [
                        "Step 2: Run-Once Mutex",
                        "Step 4: Cryptographic Structure Population",
                        "BAZARLOADER: Analysing The Main Loader",
                        "Step 5: Injection Through Process Hollowing",
                        "Step 4: Generating Random Internet Traffic",
                        "Step 5: C2 Connection Through Raw IP Addresses",
                        "Step 6: C2 Connection Through Custom URLs",
                        "Step 1: Checking System Languages"
                    ]
                },
                "links": [
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x96ed5f10>",
                            "type": "FunctionName",
                            "value": "ReadProcessMemory"
                        },
                        "relation": "has_category",
                        "dst": {
                            "id": "<CATEGORY_0xf1a480bb>",
                            "type": "Category",
                            "value": "malware"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0xaaeb9b14>",
                            "type": "FunctionName",
                            "value": "InternetQueryDataAvailable"
                        },
                        "relation": "has_category",
                        "dst": {
                            "id": "<CATEGORY_0xf1a480bb>",
                            "type": "Category",
                            "value": "malware"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0xe4c6c241>",
                            "type": "FunctionName",
                            "value": "NtQueryInformationProcess"
                        },
                        "relation": "has_category",
                        "dst": {
                            "id": "<CATEGORY_0xf1a480bb>",
                            "type": "Category",
                            "value": "malware"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0xb4d7e32e>",
                            "type": "FunctionName",
                            "value": "BCryptImportKeyPair"
                        },
                        "relation": "has_category",
                        "dst": {
                            "id": "<CATEGORY_0xf1a480bb>",
                            "type": "Category",
                            "value": "malware"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x4cf9da98>",
                            "type": "FunctionName",
                            "value": "OpenProcess"
                        },
                        "relation": "has_category",
                        "dst": {
                            "id": "<CATEGORY_0xf1a480bb>",
                            "type": "Category",
                            "value": "malware"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0xa28f3aae>",
                            "type": "FunctionName",
                            "value": "CreateProcessA"
                        },
                        "relation": "has_category",
                        "dst": {
                            "id": "<CATEGORY_0xf1a480bb>",
                            "type": "Category",
                            "value": "malware"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0xca3b22b9>",
                            "type": "FunctionName",
                            "value": "BCryptOpenAlgorithmProvider"
                        },
                        "relation": "has_category",
                        "dst": {
                            "id": "<CATEGORY_0xf1a480bb>",
                            "type": "Category",
                            "value": "malware"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x6ff17045>",
                            "type": "FunctionName",
                            "value": "WriteProcessMemory"
                        },
                        "relation": "has_category",
                        "dst": {
                            "id": "<CATEGORY_0xf1a480bb>",
                            "type": "Category",
                            "value": "malware"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x9bf022>",
                            "type": "FunctionName",
                            "value": "InternetCrackUrlA"
                        },
                        "relation": "has_category",
                        "dst": {
                            "id": "<CATEGORY_0xf1a480bb>",
                            "type": "Category",
                            "value": "malware"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x356d1a8f>",
                            "type": "FunctionName",
                            "value": "OpenNICs"
                        },
                        "relation": "has_category",
                        "dst": {
                            "id": "<CATEGORY_0xf1a480bb>",
                            "type": "Category",
                            "value": "malware"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x45343c4f>",
                            "type": "FunctionName",
                            "value": "InternetConnectA"
                        },
                        "relation": "has_category",
                        "dst": {
                            "id": "<CATEGORY_0xf1a480bb>",
                            "type": "Category",
                            "value": "malware"
                        }
                    },
                    {
                        "src": {
                            "id": "<CATEGORY_0xf1a480bb>",
                            "type": "Category",
                            "value": "malware"
                        },
                        "relation": "has_category",
                        "dst": {
                            "id": "<THREAT_0xf4f1f185>",
                            "type": "Threat",
                            "value": "bazarbackdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0xa8776200>",
                            "type": "FunctionName",
                            "value": "InternetOpenURLA"
                        },
                        "relation": "has_category",
                        "dst": {
                            "id": "<CATEGORY_0xf1a480bb>",
                            "type": "Category",
                            "value": "malware"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x517f7fa9>",
                            "type": "FunctionName",
                            "value": "BCryptDecrypt"
                        },
                        "relation": "has_category",
                        "dst": {
                            "id": "<CATEGORY_0xf1a480bb>",
                            "type": "Category",
                            "value": "malware"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x472f07b5>",
                            "type": "FunctionName",
                            "value": "InternetReadFile"
                        },
                        "relation": "has_category",
                        "dst": {
                            "id": "<CATEGORY_0xf1a480bb>",
                            "type": "Category",
                            "value": "malware"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<CATEGORY_0xc8ecca29>",
                    "type": "Category",
                    "value": "c2"
                },
                "references": {
                    "sentences": [
                        "It also calls InternetSetOptionA to set the timeout for receiving a response and sending the request to 300 seconds and the timeout for connecting to C2s to 120 seconds.",
                        "Finally, the malware decodes the following custom C2 domains, attempts to resolve them using the DNS servers, and downloads the next-stage executable.",
                        "This connection structures fields are then copied into the main structures C2_connection_struct. Here, Im not entirely sure why they dont just populate the main structure directly instead.",
                        "If the status code is not HTTP_STATUS_OK, the malware moves on to another C2 address.",
                        "The requests HTTP version is resolved to be HTTP/1.1, and BAZARLOADER calls HttpOpenRequestA to create this request for the C2 server using the connection handle retrieved above.",
                        "This is done repeatedly until C2 communication and payload injection are finished, which generates a lot of noise to mask the main traffic coming to and from C2 servers.",
                        "If BAZARLOADER fails to download the next stage executable from the IP addresses listed above, it attempts to resolve custom C2 domains using OpenNIC, a user-owned DNS community service.",
                        "Prior to communicating with C2 servers, BAZARLOADER first resolves a list of raw IP addresses and writes them into the C2_addr_list field in the main structure.",
                        "With the generated HTTP header and the request handle, BAZARLOADER calls HttpSendRequestA to send the request to the C2 server and calls HttpQueryInfoA to retrieve the status code.",
                        "The malware calls InternetCrackUrlA to retrieve the C2s URL components and InternetConnectA to connect to the server.",
                        "The malware then spawns a thread to periodically connect to random URLs and generate noises to hide the main C2 traffic by utilizing the following structure.",
                        "Similarly, BAZARLOADER populates the structure below to create an HTTP request to C2. The requests object name and HTTP verb are resolved to be /data/service and GET.",
                        "For each of these custom domains, BAZARLOADER calls DnsQuery_A to query a DNS Resource Record from OpenNICs servers to resolve the C2 servers IP address.",
                        "Below is the list of all IP addresses for the C2 servers used in this sample.",
                        "First, it populates the crypto_struct field in the main structure. This structure contains cryptographic handles that are later used to decrypt executables being sent from C2 servers.",
                        "BAZARLOADER mainly uses the following structure for communication with C2 servers. The fields of the structure will be explained as we go along analyzing the code.",
                        "To generate Internet activities to hide its communication with C2 servers, BAZARLOADER first calls InternetOpenA to initialize the use of WinINet functions with the following string as the HTTP user agent."
                    ],
                    "titles": [
                        "Step 4: Generating Random Internet Traffic",
                        "Step 4: Cryptographic Structure Population",
                        "Step 5: C2 Connection Through Raw IP Addresses",
                        "Step 6: C2 Connection Through Custom URLs"
                    ]
                }
            },
            {
                "token": {
                    "id": "<CATEGORY_0xe42cc34c>",
                    "type": "Category",
                    "value": "dns"
                },
                "references": {
                    "sentences": [
                        "For each DNS server IP address, BAZARLOADER parses it from string to int and populates the opennic_server_struct field in the main structure. Below is the structure used to store OpenNIC IP addresses.",
                        "Finally, the malware decodes the following custom C2 domains, attempts to resolve them using the DNS servers, and downloads the next-stage executable.",
                        "If BAZARLOADER fails to download the next stage executable from the IP addresses listed above, it attempts to resolve custom C2 domains using OpenNIC, a user-owned DNS community service.",
                        "By examining OpenNICs APIs, we can break down this object name to see what BAZARLOADER is requesting. The bare parameter requests to only list the DNS server IP address, the ipv parameter requests to only list IPv4 servers, the wl parameter requests to only list whitelisted servers, and the res parameter requests to list 8 servers only.",
                        "For each of these custom domains, BAZARLOADER calls DnsQuery_A to query a DNS Resource Record from OpenNICs servers to resolve the C2 servers IP address.",
                        "The malware then enters a loop to call InternetQueryDataAvailable and InternetReadFile to read the 8 OpenNICs DNS servers into memory."
                    ],
                    "titles": [
                        "Step 6: C2 Connection Through Custom URLs"
                    ]
                },
                "links": [
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x472f07b5>",
                            "type": "FunctionName",
                            "value": "InternetReadFile"
                        },
                        "relation": "has_category",
                        "dst": {
                            "id": "<CATEGORY_0xe42cc34c>",
                            "type": "Category",
                            "value": "dns"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0xaaeb9b14>",
                            "type": "FunctionName",
                            "value": "InternetQueryDataAvailable"
                        },
                        "relation": "has_category",
                        "dst": {
                            "id": "<CATEGORY_0xe42cc34c>",
                            "type": "Category",
                            "value": "dns"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x75c00b06>",
                            "type": "FunctionName",
                            "value": "DnsQuery_A"
                        },
                        "relation": "has_category",
                        "dst": {
                            "id": "<CATEGORY_0xe42cc34c>",
                            "type": "Category",
                            "value": "dns"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x356d1a8f>",
                            "type": "FunctionName",
                            "value": "OpenNICs"
                        },
                        "relation": "has_category",
                        "dst": {
                            "id": "<CATEGORY_0xe42cc34c>",
                            "type": "Category",
                            "value": "dns"
                        }
                    },
                    {
                        "src": {
                            "id": "<CATEGORY_0xe42cc34c>",
                            "type": "Category",
                            "value": "dns"
                        },
                        "relation": "has_category",
                        "dst": {
                            "id": "<THREAT_0xf4f1f185>",
                            "type": "Threat",
                            "value": "bazarbackdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x87765c4d>",
                            "type": "FunctionName",
                            "value": "OpenNIC"
                        },
                        "relation": "has_category",
                        "dst": {
                            "id": "<CATEGORY_0xe42cc34c>",
                            "type": "Category",
                            "value": "dns"
                        }
                    }
                ]
            }
        ],
        "Geo": [
            {
                "token": {
                    "id": "<GEO_0xcdb3bd3>",
                    "type": "Geo",
                    "value": "russia"
                },
                "references": {
                    "sentences": [
                        "Similar to a lot of malware, BAZARLOADER manually checks the systems languages to avoid executing on machines in Russia and nearby countries."
                    ],
                    "titles": [
                        "Step 1: Checking System Languages"
                    ]
                },
                "links": [
                    {
                        "src": {
                            "id": "<GEO_0xcdb3bd3>",
                            "type": "Geo",
                            "value": "russia"
                        },
                        "relation": "use_geo",
                        "dst": {
                            "id": "<THREAT_0xf4f1f185>",
                            "type": "Threat",
                            "value": "bazarbackdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<GEO_0xcdb3bd3>",
                            "type": "Geo",
                            "value": "russia"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<THREAT_0xf4f1f185>",
                            "type": "Threat",
                            "value": "bazarbackdoor"
                        }
                    }
                ]
            }
        ],
        "FunctionName": [
            {
                "token": {
                    "id": "<FUNCTIONNAME_0xa576b2e6>",
                    "type": "FunctionName",
                    "value": "GetSystemDefaultLangID"
                },
                "references": {
                    "sentences": [
                        "It calls GetSystemDefaultLangID to retrieve the systems default language and GetKeyboardLayoutList to iterate through the systems keyboard layouts."
                    ],
                    "titles": [
                        "Step 1: Checking System Languages"
                    ]
                },
                "links": [
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0xa576b2e6>",
                            "type": "FunctionName",
                            "value": "GetSystemDefaultLangID"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<THREAT_0xf4f1f185>",
                            "type": "Threat",
                            "value": "bazarbackdoor"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<FUNCTIONNAME_0xe480ea86>",
                    "type": "FunctionName",
                    "value": "GetKeyboardLayoutList"
                },
                "references": {
                    "sentences": [
                        "It calls GetSystemDefaultLangID to retrieve the systems default language and GetKeyboardLayoutList to iterate through the systems keyboard layouts."
                    ],
                    "titles": [
                        "Step 1: Checking System Languages"
                    ]
                },
                "links": [
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0xe480ea86>",
                            "type": "FunctionName",
                            "value": "GetKeyboardLayoutList"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<THREAT_0xf4f1f185>",
                            "type": "Threat",
                            "value": "bazarbackdoor"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<FUNCTIONNAME_0x241a1a65>",
                    "type": "FunctionName",
                    "value": "GetTokenInformation"
                },
                "references": {
                    "sentences": [
                        "First, it checks if its process is elevated with admin privileges. It calls GetCurrentProcess and OpenProcessToken to retrieve its own process token handle and GetTokenInformation to get the tokens elevation information.",
                        "To check for multiple running instances of itself, BAZARLOADER first extracts the subauthority of a SID from its process. It does this by calling GetTokenInformation to retrieve the processs token integrity level and calling GetSidSubAuthorityCount and GetSidSubAuthority to access the subauthority of a SID."
                    ],
                    "titles": [
                        "Step 2: Run-Once Mutex",
                        "Step 5: Injection Through Process Hollowing"
                    ]
                },
                "links": [
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x241a1a65>",
                            "type": "FunctionName",
                            "value": "GetTokenInformation"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0xc0a61056>",
                            "type": "UnknownWord",
                            "value": "subauthority"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x241a1a65>",
                            "type": "FunctionName",
                            "value": "GetTokenInformation"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<THREAT_0xf4f1f185>",
                            "type": "Threat",
                            "value": "bazarbackdoor"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<FUNCTIONNAME_0x90b3cd31>",
                    "type": "FunctionName",
                    "value": "GetSidSubAuthorityCount"
                },
                "references": {
                    "sentences": [
                        "To check for multiple running instances of itself, BAZARLOADER first extracts the subauthority of a SID from its process. It does this by calling GetTokenInformation to retrieve the processs token integrity level and calling GetSidSubAuthorityCount and GetSidSubAuthority to access the subauthority of a SID."
                    ],
                    "titles": [
                        "Step 2: Run-Once Mutex"
                    ]
                },
                "links": [
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x90b3cd31>",
                            "type": "FunctionName",
                            "value": "GetSidSubAuthorityCount"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<THREAT_0xf4f1f185>",
                            "type": "Threat",
                            "value": "bazarbackdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x90b3cd31>",
                            "type": "FunctionName",
                            "value": "GetSidSubAuthorityCount"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0xc0a61056>",
                            "type": "UnknownWord",
                            "value": "subauthority"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<FUNCTIONNAME_0xeaa99cf2>",
                    "type": "FunctionName",
                    "value": "GetSidSubAuthority"
                },
                "references": {
                    "sentences": [
                        "To check for multiple running instances of itself, BAZARLOADER first extracts the subauthority of a SID from its process. It does this by calling GetTokenInformation to retrieve the processs token integrity level and calling GetSidSubAuthorityCount and GetSidSubAuthority to access the subauthority of a SID."
                    ],
                    "titles": [
                        "Step 2: Run-Once Mutex"
                    ]
                },
                "links": [
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0xeaa99cf2>",
                            "type": "FunctionName",
                            "value": "GetSidSubAuthority"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<THREAT_0xf4f1f185>",
                            "type": "Threat",
                            "value": "bazarbackdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0xeaa99cf2>",
                            "type": "FunctionName",
                            "value": "GetSidSubAuthority"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0xc0a61056>",
                            "type": "UnknownWord",
                            "value": "subauthority"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<FUNCTIONNAME_0x32fd35e9>",
                    "type": "FunctionName",
                    "value": "CreateMutexA"
                },
                "references": {
                    "sentences": [
                        "If the SIDs subauthority is SECURITY_MANDATORY_SYSTEM_RID or SECURITY_MANDATORY_PROTECTED_PROCESS_RID, BAZARLOADER checks if the mutex {b837ef4f-10ee-4821-ac76-2331eb32a23f} is currently owned by any other process by calling CreateMutexA."
                    ],
                    "titles": [
                        "Step 2: Run-Once Mutex"
                    ]
                },
                "links": [
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x32fd35e9>",
                            "type": "FunctionName",
                            "value": "CreateMutexA"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0x8f09160f>",
                            "type": "UnknownWord",
                            "value": "security_mandatory_system_rid"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x32fd35e9>",
                            "type": "FunctionName",
                            "value": "CreateMutexA"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0x975f0e4f>",
                            "type": "UnknownWord",
                            "value": "security_mandatory_protected_process_rid"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x32fd35e9>",
                            "type": "FunctionName",
                            "value": "CreateMutexA"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<THREAT_0xf4f1f185>",
                            "type": "Threat",
                            "value": "bazarbackdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x32fd35e9>",
                            "type": "FunctionName",
                            "value": "CreateMutexA"
                        },
                        "relation": "use_threat",
                        "dst": {
                            "id": "<THREAT_0xf4f1f185>",
                            "type": "Threat",
                            "value": "bazarbackdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x32fd35e9>",
                            "type": "FunctionName",
                            "value": "CreateMutexA"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0xc0a61056>",
                            "type": "UnknownWord",
                            "value": "subauthority"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<FUNCTIONNAME_0x70f6527d>",
                    "type": "FunctionName",
                    "value": "InternetOpenA"
                },
                "references": {
                    "sentences": [
                        "To generate Internet activities to hide its communication with C2 servers, BAZARLOADER first calls InternetOpenA to initialize the use of WinINet functions with the following string as the HTTP user agent."
                    ],
                    "titles": [
                        "Step 4: Generating Random Internet Traffic"
                    ]
                },
                "links": [
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x70f6527d>",
                            "type": "FunctionName",
                            "value": "InternetOpenA"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<THREAT_0xf4f1f185>",
                            "type": "Threat",
                            "value": "bazarbackdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x70f6527d>",
                            "type": "FunctionName",
                            "value": "InternetOpenA"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0xadfa770d>",
                            "type": "UnknownWord",
                            "value": "initialize"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x70f6527d>",
                            "type": "FunctionName",
                            "value": "InternetOpenA"
                        },
                        "relation": "use_threat",
                        "dst": {
                            "id": "<THREAT_0xf4f1f185>",
                            "type": "Threat",
                            "value": "bazarbackdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x70f6527d>",
                            "type": "FunctionName",
                            "value": "InternetOpenA"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0x95a76c53>",
                            "type": "UnknownWord",
                            "value": "wininet"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<FUNCTIONNAME_0x1efd163f>",
                    "type": "FunctionName",
                    "value": "InitializeCriticalSection"
                },
                "references": {
                    "sentences": [
                        "First, BAZARLOADER calls InitializeCriticalSection to initialize the structures critical section object, which is later used to protect accesses to the creation_flag field."
                    ],
                    "titles": [
                        "Step 4: Generating Random Internet Traffic"
                    ]
                },
                "links": [
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x1efd163f>",
                            "type": "FunctionName",
                            "value": "InitializeCriticalSection"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0x56a98b99>",
                            "type": "UnknownWord",
                            "value": "creation_flag"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x1efd163f>",
                            "type": "FunctionName",
                            "value": "InitializeCriticalSection"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<THREAT_0xf4f1f185>",
                            "type": "Threat",
                            "value": "bazarbackdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x1efd163f>",
                            "type": "FunctionName",
                            "value": "InitializeCriticalSection"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0xadfa770d>",
                            "type": "UnknownWord",
                            "value": "initialize"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x1efd163f>",
                            "type": "FunctionName",
                            "value": "InitializeCriticalSection"
                        },
                        "relation": "use_threat",
                        "dst": {
                            "id": "<THREAT_0xf4f1f185>",
                            "type": "Threat",
                            "value": "bazarbackdoor"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<FUNCTIONNAME_0x4d4ac8b3>",
                    "type": "FunctionName",
                    "value": "CreateThread"
                },
                "references": {
                    "sentences": [
                        "Next, it sets the self field to point to the structure, the creation_flag field to TRUE, and calls CreateThread to spawn a thread to perform these random Internet operations. If it fails to create a thread, the creation_flag field is set to FALSE."
                    ],
                    "titles": [
                        "Step 4: Generating Random Internet Traffic"
                    ]
                },
                "links": [
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x4d4ac8b3>",
                            "type": "FunctionName",
                            "value": "CreateThread"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0x56a98b99>",
                            "type": "UnknownWord",
                            "value": "creation_flag"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x4d4ac8b3>",
                            "type": "FunctionName",
                            "value": "CreateThread"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<THREAT_0xf4f1f185>",
                            "type": "Threat",
                            "value": "bazarbackdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x4d4ac8b3>",
                            "type": "FunctionName",
                            "value": "CreateThread"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0x653dddfa>",
                            "type": "UnknownWord",
                            "value": "self"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<FUNCTIONNAME_0xa8776200>",
                    "type": "FunctionName",
                    "value": "InternetOpenURLA"
                },
                "references": {
                    "sentences": [
                        "Finally, the malware calls InternetOpenURLA to establish a connection with the generated URL. It calls HTTPQueryInfoA with the HTTP_QUERY_CONTENT_LENGTH flag to retrieve the contents length, allocates a buffer with that size, and calls InternetReadFile to read data from that URL."
                    ],
                    "titles": [
                        "Step 4: Generating Random Internet Traffic"
                    ]
                },
                "links": [
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0xa8776200>",
                            "type": "FunctionName",
                            "value": "InternetOpenURLA"
                        },
                        "relation": "has_category",
                        "dst": {
                            "id": "<CATEGORY_0xf1a480bb>",
                            "type": "Category",
                            "value": "malware"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0xa8776200>",
                            "type": "FunctionName",
                            "value": "InternetOpenURLA"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<THREAT_0xf4f1f185>",
                            "type": "Threat",
                            "value": "bazarbackdoor"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<FUNCTIONNAME_0xcf09f42e>",
                    "type": "FunctionName",
                    "value": "HTTPQueryInfoA"
                },
                "references": {
                    "sentences": [
                        "Finally, the malware calls InternetOpenURLA to establish a connection with the generated URL. It calls HTTPQueryInfoA with the HTTP_QUERY_CONTENT_LENGTH flag to retrieve the contents length, allocates a buffer with that size, and calls InternetReadFile to read data from that URL."
                    ],
                    "titles": [
                        "Step 4: Generating Random Internet Traffic"
                    ]
                },
                "links": [
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0xcf09f42e>",
                            "type": "FunctionName",
                            "value": "HTTPQueryInfoA"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0x8387fba9>",
                            "type": "UnknownWord",
                            "value": "http_query_content_length"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0xcf09f42e>",
                            "type": "FunctionName",
                            "value": "HTTPQueryInfoA"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<THREAT_0xf4f1f185>",
                            "type": "Threat",
                            "value": "bazarbackdoor"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<FUNCTIONNAME_0x472f07b5>",
                    "type": "FunctionName",
                    "value": "InternetReadFile"
                },
                "references": {
                    "sentences": [
                        "If the status code is HTTP_STATUS_OK, BAZARLOADER calls InternetQueryDataAvailable to determine the size of data to read, allocates the memory buffer according to the size, and calls InternetReadFile to read the next-stage payload until everything is written into memory.",
                        "The malware then enters a loop to call InternetQueryDataAvailable and InternetReadFile to read the 8 OpenNICs DNS servers into memory.",
                        "Finally, the malware calls InternetOpenURLA to establish a connection with the generated URL. It calls HTTPQueryInfoA with the HTTP_QUERY_CONTENT_LENGTH flag to retrieve the contents length, allocates a buffer with that size, and calls InternetReadFile to read data from that URL."
                    ],
                    "titles": [
                        "Step 4: Generating Random Internet Traffic",
                        "Step 5: C2 Connection Through Raw IP Addresses",
                        "Step 6: C2 Connection Through Custom URLs"
                    ]
                },
                "links": [
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x472f07b5>",
                            "type": "FunctionName",
                            "value": "InternetReadFile"
                        },
                        "relation": "use_threat",
                        "dst": {
                            "id": "<THREAT_0xf4f1f185>",
                            "type": "Threat",
                            "value": "bazarbackdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x472f07b5>",
                            "type": "FunctionName",
                            "value": "InternetReadFile"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0x8387fba9>",
                            "type": "UnknownWord",
                            "value": "http_query_content_length"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x472f07b5>",
                            "type": "FunctionName",
                            "value": "InternetReadFile"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0x8a440e0b>",
                            "type": "UnknownWord",
                            "value": "http_status_ok"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x472f07b5>",
                            "type": "FunctionName",
                            "value": "InternetReadFile"
                        },
                        "relation": "has_category",
                        "dst": {
                            "id": "<CATEGORY_0xe42cc34c>",
                            "type": "Category",
                            "value": "dns"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x472f07b5>",
                            "type": "FunctionName",
                            "value": "InternetReadFile"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<THREAT_0xf4f1f185>",
                            "type": "Threat",
                            "value": "bazarbackdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x472f07b5>",
                            "type": "FunctionName",
                            "value": "InternetReadFile"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0x9a669b68>",
                            "type": "UnknownWord",
                            "value": "next-stage"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x472f07b5>",
                            "type": "FunctionName",
                            "value": "InternetReadFile"
                        },
                        "relation": "has_category",
                        "dst": {
                            "id": "<CATEGORY_0xf1a480bb>",
                            "type": "Category",
                            "value": "malware"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<FUNCTIONNAME_0xca3b22b9>",
                    "type": "FunctionName",
                    "value": "BCryptOpenAlgorithmProvider"
                },
                "references": {
                    "sentences": [
                        "The malware resolves the strings RSA and SHA384 and calls BCryptOpenAlgorithmProvider to retrieve handles for these two algorithms. The handles are stored in the corresponding fields in the crypto_struct structure."
                    ],
                    "titles": [
                        "Step 4: Cryptographic Structure Population"
                    ]
                },
                "links": [
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0xca3b22b9>",
                            "type": "FunctionName",
                            "value": "BCryptOpenAlgorithmProvider"
                        },
                        "relation": "has_category",
                        "dst": {
                            "id": "<CATEGORY_0xf1a480bb>",
                            "type": "Category",
                            "value": "malware"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0xca3b22b9>",
                            "type": "FunctionName",
                            "value": "BCryptOpenAlgorithmProvider"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<THREAT_0xf4f1f185>",
                            "type": "Threat",
                            "value": "bazarbackdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0xca3b22b9>",
                            "type": "FunctionName",
                            "value": "BCryptOpenAlgorithmProvider"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0xf6e507cb>",
                            "type": "UnknownWord",
                            "value": "sha384"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<FUNCTIONNAME_0xb4d7e32e>",
                    "type": "FunctionName",
                    "value": "BCryptImportKeyPair"
                },
                "references": {
                    "sentences": [
                        "For each blob, the malware resolves one of the strings RSAFULLPRIVATEBLOB or RSAPUBLICBLOB and uses it to specify the blobs type when calling BCryptImportKeyPair to import the corresponding key handle."
                    ],
                    "titles": [
                        "Step 4: Cryptographic Structure Population"
                    ]
                },
                "links": [
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0xb4d7e32e>",
                            "type": "FunctionName",
                            "value": "BCryptImportKeyPair"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<THREAT_0xf4f1f185>",
                            "type": "Threat",
                            "value": "bazarbackdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0xb4d7e32e>",
                            "type": "FunctionName",
                            "value": "BCryptImportKeyPair"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0xbb71aefe>",
                            "type": "UnknownWord",
                            "value": "rsapublicblob"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0xb4d7e32e>",
                            "type": "FunctionName",
                            "value": "BCryptImportKeyPair"
                        },
                        "relation": "has_category",
                        "dst": {
                            "id": "<CATEGORY_0xf1a480bb>",
                            "type": "Category",
                            "value": "malware"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0xb4d7e32e>",
                            "type": "FunctionName",
                            "value": "BCryptImportKeyPair"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0x275a64d3>",
                            "type": "UnknownWord",
                            "value": "specify"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0xb4d7e32e>",
                            "type": "FunctionName",
                            "value": "BCryptImportKeyPair"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0xa38fe6f>",
                            "type": "UnknownWord",
                            "value": "rsafullprivateblob"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<FUNCTIONNAME_0x74014373>",
                    "type": "FunctionName",
                    "value": "BCryptGetProperty"
                },
                "references": {
                    "sentences": [
                        "Finally, it calls BCryptGetProperty to retrieve the length of the RSA public and private cipher blocks. With this structure fully populated, BAZARLOADER can now perform RSA encryption/decryption as well as SHA384 hashing."
                    ],
                    "titles": [
                        "Step 4: Cryptographic Structure Population"
                    ]
                },
                "links": [
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x74014373>",
                            "type": "FunctionName",
                            "value": "BCryptGetProperty"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<THREAT_0xf4f1f185>",
                            "type": "Threat",
                            "value": "bazarbackdoor"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<FUNCTIONNAME_0x9bf022>",
                    "type": "FunctionName",
                    "value": "InternetCrackUrlA"
                },
                "references": {
                    "sentences": [
                        "The malware calls InternetCrackUrlA to retrieve the C2s URL components and InternetConnectA to connect to the server."
                    ],
                    "titles": [
                        "Step 5: C2 Connection Through Raw IP Addresses"
                    ]
                },
                "links": [
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x9bf022>",
                            "type": "FunctionName",
                            "value": "InternetCrackUrlA"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<THREAT_0xf4f1f185>",
                            "type": "Threat",
                            "value": "bazarbackdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x9bf022>",
                            "type": "FunctionName",
                            "value": "InternetCrackUrlA"
                        },
                        "relation": "has_category",
                        "dst": {
                            "id": "<CATEGORY_0xf1a480bb>",
                            "type": "Category",
                            "value": "malware"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<FUNCTIONNAME_0x45343c4f>",
                    "type": "FunctionName",
                    "value": "InternetConnectA"
                },
                "references": {
                    "sentences": [
                        "To begin querying OpenNICs API, the malware first resolves the URL api.opennicproject.org and calls InternetConnectA to establish a connection to the site.",
                        "The malware calls InternetCrackUrlA to retrieve the C2s URL components and InternetConnectA to connect to the server."
                    ],
                    "titles": [
                        "Step 5: C2 Connection Through Raw IP Addresses",
                        "Step 6: C2 Connection Through Custom URLs"
                    ]
                },
                "links": [
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x45343c4f>",
                            "type": "FunctionName",
                            "value": "InternetConnectA"
                        },
                        "relation": "has_category",
                        "dst": {
                            "id": "<CATEGORY_0xf1a480bb>",
                            "type": "Category",
                            "value": "malware"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x45343c4f>",
                            "type": "FunctionName",
                            "value": "InternetConnectA"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<THREAT_0xf4f1f185>",
                            "type": "Threat",
                            "value": "bazarbackdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x45343c4f>",
                            "type": "FunctionName",
                            "value": "InternetConnectA"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0xd04412ad>",
                            "type": "UnknownWord",
                            "value": "querying"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<FUNCTIONNAME_0xc7d50cdc>",
                    "type": "FunctionName",
                    "value": "HttpOpenRequestA"
                },
                "references": {
                    "sentences": [
                        "The requests HTTP version is resolved to be HTTP/1.1, and BAZARLOADER calls HttpOpenRequestA to create this request for the C2 server using the connection handle retrieved above.",
                        "Next, it calls HttpOpenRequestA to create a GET request handle with the object name /geoip/?bare&ipv=4&wl=all&res=8 and send the request using HttpSendRequestA."
                    ],
                    "titles": [
                        "Step 5: C2 Connection Through Raw IP Addresses",
                        "Step 6: C2 Connection Through Custom URLs"
                    ]
                },
                "links": [
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0xc7d50cdc>",
                            "type": "FunctionName",
                            "value": "HttpOpenRequestA"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0x294be5e1>",
                            "type": "UnknownWord",
                            "value": "bare"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0xc7d50cdc>",
                            "type": "FunctionName",
                            "value": "HttpOpenRequestA"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<THREAT_0xf4f1f185>",
                            "type": "Threat",
                            "value": "bazarbackdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0xc7d50cdc>",
                            "type": "FunctionName",
                            "value": "HttpOpenRequestA"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0x384cf21f>",
                            "type": "UnknownWord",
                            "value": "ipv"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0xc7d50cdc>",
                            "type": "FunctionName",
                            "value": "HttpOpenRequestA"
                        },
                        "relation": "use_threat",
                        "dst": {
                            "id": "<THREAT_0xf4f1f185>",
                            "type": "Threat",
                            "value": "bazarbackdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0xc7d50cdc>",
                            "type": "FunctionName",
                            "value": "HttpOpenRequestA"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0xb4d51f5d>",
                            "type": "UnknownWord",
                            "value": "res"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<FUNCTIONNAME_0xaace989b>",
                    "type": "FunctionName",
                    "value": "InternetSetOptionA"
                },
                "references": {
                    "sentences": [
                        "It also calls InternetSetOptionA to set the timeout for receiving a response and sending the request to 300 seconds and the timeout for connecting to C2s to 120 seconds."
                    ],
                    "titles": [
                        "Step 5: C2 Connection Through Raw IP Addresses"
                    ]
                },
                "links": [
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0xaace989b>",
                            "type": "FunctionName",
                            "value": "InternetSetOptionA"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<THREAT_0xf4f1f185>",
                            "type": "Threat",
                            "value": "bazarbackdoor"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<FUNCTIONNAME_0x8de4827f>",
                    "type": "FunctionName",
                    "value": "GetSystemTime"
                },
                "references": {
                    "sentences": [
                        "BAZARLOADER then generates the HTTP header to be appended to the request. It does this by calling GetSystemTime to populate the curr_system_time and the datetime_string field of the main structure with the current date and time."
                    ],
                    "titles": [
                        "Step 5: C2 Connection Through Raw IP Addresses"
                    ]
                },
                "links": [
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x8de4827f>",
                            "type": "FunctionName",
                            "value": "GetSystemTime"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0x895c71b4>",
                            "type": "UnknownWord",
                            "value": "curr_system_time"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x8de4827f>",
                            "type": "FunctionName",
                            "value": "GetSystemTime"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0xd102c9eb>",
                            "type": "UnknownWord",
                            "value": "datetime_string"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x8de4827f>",
                            "type": "FunctionName",
                            "value": "GetSystemTime"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<THREAT_0xf4f1f185>",
                            "type": "Threat",
                            "value": "bazarbackdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x8de4827f>",
                            "type": "FunctionName",
                            "value": "GetSystemTime"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0xd673e668>",
                            "type": "UnknownWord",
                            "value": "populate"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<FUNCTIONNAME_0xe3bf2aeb>",
                    "type": "FunctionName",
                    "value": "BCryptSignHash"
                },
                "references": {
                    "sentences": [
                        "Next, BAZARLOADER signs the generated hash with its RSA private by calling BCryptSignHash and uses this hash signature to randomly generate the HTTP header."
                    ],
                    "titles": [
                        "Step 5: C2 Connection Through Raw IP Addresses"
                    ]
                },
                "links": [
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0xe3bf2aeb>",
                            "type": "FunctionName",
                            "value": "BCryptSignHash"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<THREAT_0xf4f1f185>",
                            "type": "Threat",
                            "value": "bazarbackdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0xe3bf2aeb>",
                            "type": "FunctionName",
                            "value": "BCryptSignHash"
                        },
                        "relation": "use_threat",
                        "dst": {
                            "id": "<THREAT_0xf4f1f185>",
                            "type": "Threat",
                            "value": "bazarbackdoor"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<FUNCTIONNAME_0x69f89450>",
                    "type": "FunctionName",
                    "value": "HttpSendRequestA"
                },
                "references": {
                    "sentences": [
                        "Next, it calls HttpOpenRequestA to create a GET request handle with the object name /geoip/?bare&ipv=4&wl=all&res=8 and send the request using HttpSendRequestA.",
                        "With the generated HTTP header and the request handle, BAZARLOADER calls HttpSendRequestA to send the request to the C2 server and calls HttpQueryInfoA to retrieve the status code."
                    ],
                    "titles": [
                        "Step 5: C2 Connection Through Raw IP Addresses",
                        "Step 6: C2 Connection Through Custom URLs"
                    ]
                },
                "links": [
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x69f89450>",
                            "type": "FunctionName",
                            "value": "HttpSendRequestA"
                        },
                        "relation": "use_threat",
                        "dst": {
                            "id": "<THREAT_0xf4f1f185>",
                            "type": "Threat",
                            "value": "bazarbackdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x69f89450>",
                            "type": "FunctionName",
                            "value": "HttpSendRequestA"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0x294be5e1>",
                            "type": "UnknownWord",
                            "value": "bare"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x69f89450>",
                            "type": "FunctionName",
                            "value": "HttpSendRequestA"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0xb4d51f5d>",
                            "type": "UnknownWord",
                            "value": "res"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x69f89450>",
                            "type": "FunctionName",
                            "value": "HttpSendRequestA"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0x384cf21f>",
                            "type": "UnknownWord",
                            "value": "ipv"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x69f89450>",
                            "type": "FunctionName",
                            "value": "HttpSendRequestA"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<THREAT_0xf4f1f185>",
                            "type": "Threat",
                            "value": "bazarbackdoor"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<FUNCTIONNAME_0x62d583cc>",
                    "type": "FunctionName",
                    "value": "HttpQueryInfoA"
                },
                "references": {
                    "sentences": [
                        "With the generated HTTP header and the request handle, BAZARLOADER calls HttpSendRequestA to send the request to the C2 server and calls HttpQueryInfoA to retrieve the status code."
                    ],
                    "titles": [
                        "Step 5: C2 Connection Through Raw IP Addresses"
                    ]
                },
                "links": [
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x62d583cc>",
                            "type": "FunctionName",
                            "value": "HttpQueryInfoA"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<THREAT_0xf4f1f185>",
                            "type": "Threat",
                            "value": "bazarbackdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x62d583cc>",
                            "type": "FunctionName",
                            "value": "HttpQueryInfoA"
                        },
                        "relation": "use_threat",
                        "dst": {
                            "id": "<THREAT_0xf4f1f185>",
                            "type": "Threat",
                            "value": "bazarbackdoor"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<FUNCTIONNAME_0xaaeb9b14>",
                    "type": "FunctionName",
                    "value": "InternetQueryDataAvailable"
                },
                "references": {
                    "sentences": [
                        "If the status code is HTTP_STATUS_OK, BAZARLOADER calls InternetQueryDataAvailable to determine the size of data to read, allocates the memory buffer according to the size, and calls InternetReadFile to read the next-stage payload until everything is written into memory.",
                        "The malware then enters a loop to call InternetQueryDataAvailable and InternetReadFile to read the 8 OpenNICs DNS servers into memory."
                    ],
                    "titles": [
                        "Step 5: C2 Connection Through Raw IP Addresses",
                        "Step 6: C2 Connection Through Custom URLs"
                    ]
                },
                "links": [
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0xaaeb9b14>",
                            "type": "FunctionName",
                            "value": "InternetQueryDataAvailable"
                        },
                        "relation": "has_category",
                        "dst": {
                            "id": "<CATEGORY_0xf1a480bb>",
                            "type": "Category",
                            "value": "malware"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0xaaeb9b14>",
                            "type": "FunctionName",
                            "value": "InternetQueryDataAvailable"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0x9a669b68>",
                            "type": "UnknownWord",
                            "value": "next-stage"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0xaaeb9b14>",
                            "type": "FunctionName",
                            "value": "InternetQueryDataAvailable"
                        },
                        "relation": "has_category",
                        "dst": {
                            "id": "<CATEGORY_0xe42cc34c>",
                            "type": "Category",
                            "value": "dns"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0xaaeb9b14>",
                            "type": "FunctionName",
                            "value": "InternetQueryDataAvailable"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<THREAT_0xf4f1f185>",
                            "type": "Threat",
                            "value": "bazarbackdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0xaaeb9b14>",
                            "type": "FunctionName",
                            "value": "InternetQueryDataAvailable"
                        },
                        "relation": "use_threat",
                        "dst": {
                            "id": "<THREAT_0xf4f1f185>",
                            "type": "Threat",
                            "value": "bazarbackdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0xaaeb9b14>",
                            "type": "FunctionName",
                            "value": "InternetQueryDataAvailable"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0x8a440e0b>",
                            "type": "UnknownWord",
                            "value": "http_status_ok"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<FUNCTIONNAME_0x517f7fa9>",
                    "type": "FunctionName",
                    "value": "BCryptDecrypt"
                },
                "references": {
                    "sentences": [
                        "Finally, the malware decrypts the payload with its RSA public key by calling BCryptDecrypt and checks to make sure the payloads size is greater than 64 bytes and that it contains an MZ header."
                    ],
                    "titles": [
                        "Step 5: C2 Connection Through Raw IP Addresses"
                    ]
                },
                "links": [
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x517f7fa9>",
                            "type": "FunctionName",
                            "value": "BCryptDecrypt"
                        },
                        "relation": "has_category",
                        "dst": {
                            "id": "<CATEGORY_0xf1a480bb>",
                            "type": "Category",
                            "value": "malware"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x517f7fa9>",
                            "type": "FunctionName",
                            "value": "BCryptDecrypt"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<THREAT_0xf4f1f185>",
                            "type": "Threat",
                            "value": "bazarbackdoor"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<FUNCTIONNAME_0x87765c4d>",
                    "type": "FunctionName",
                    "value": "OpenNIC"
                },
                "references": {
                    "sentences": [
                        "If BAZARLOADER fails to download the next stage executable from the IP addresses listed above, it attempts to resolve custom C2 domains using OpenNIC, a user-owned DNS community service.",
                        "For each DNS server IP address, BAZARLOADER parses it from string to int and populates the opennic_server_struct field in the main structure. Below is the structure used to store OpenNIC IP addresses."
                    ],
                    "titles": [
                        "Step 6: C2 Connection Through Custom URLs"
                    ]
                },
                "links": [
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x87765c4d>",
                            "type": "FunctionName",
                            "value": "OpenNIC"
                        },
                        "relation": "use_threat",
                        "dst": {
                            "id": "<THREAT_0xf4f1f185>",
                            "type": "Threat",
                            "value": "bazarbackdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x87765c4d>",
                            "type": "FunctionName",
                            "value": "OpenNIC"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0x47495188>",
                            "type": "UnknownWord",
                            "value": "user-owned"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x87765c4d>",
                            "type": "FunctionName",
                            "value": "OpenNIC"
                        },
                        "relation": "has_category",
                        "dst": {
                            "id": "<CATEGORY_0xe42cc34c>",
                            "type": "Category",
                            "value": "dns"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x87765c4d>",
                            "type": "FunctionName",
                            "value": "OpenNIC"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<THREAT_0xf4f1f185>",
                            "type": "Threat",
                            "value": "bazarbackdoor"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<FUNCTIONNAME_0x356d1a8f>",
                    "type": "FunctionName",
                    "value": "OpenNICs"
                },
                "references": {
                    "sentences": [
                        "To begin querying OpenNICs API, the malware first resolves the URL api.opennicproject.org and calls InternetConnectA to establish a connection to the site.",
                        "The malware then enters a loop to call InternetQueryDataAvailable and InternetReadFile to read the 8 OpenNICs DNS servers into memory.",
                        "For each of these custom domains, BAZARLOADER calls DnsQuery_A to query a DNS Resource Record from OpenNICs servers to resolve the C2 servers IP address.",
                        "By examining OpenNICs APIs, we can break down this object name to see what BAZARLOADER is requesting. The bare parameter requests to only list the DNS server IP address, the ipv parameter requests to only list IPv4 servers, the wl parameter requests to only list whitelisted servers, and the res parameter requests to list 8 servers only."
                    ],
                    "titles": [
                        "Step 6: C2 Connection Through Custom URLs"
                    ]
                },
                "links": [
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x356d1a8f>",
                            "type": "FunctionName",
                            "value": "OpenNICs"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0xd04412ad>",
                            "type": "UnknownWord",
                            "value": "querying"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x356d1a8f>",
                            "type": "FunctionName",
                            "value": "OpenNICs"
                        },
                        "relation": "use_threat",
                        "dst": {
                            "id": "<THREAT_0xf4f1f185>",
                            "type": "Threat",
                            "value": "bazarbackdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x356d1a8f>",
                            "type": "FunctionName",
                            "value": "OpenNICs"
                        },
                        "relation": "has_category",
                        "dst": {
                            "id": "<CATEGORY_0xf1a480bb>",
                            "type": "Category",
                            "value": "malware"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x356d1a8f>",
                            "type": "FunctionName",
                            "value": "OpenNICs"
                        },
                        "relation": "has_category",
                        "dst": {
                            "id": "<CATEGORY_0xe42cc34c>",
                            "type": "Category",
                            "value": "dns"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x356d1a8f>",
                            "type": "FunctionName",
                            "value": "OpenNICs"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<THREAT_0xf4f1f185>",
                            "type": "Threat",
                            "value": "bazarbackdoor"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<FUNCTIONNAME_0x75c00b06>",
                    "type": "FunctionName",
                    "value": "DnsQuery_A"
                },
                "references": {
                    "sentences": [
                        "For each of these custom domains, BAZARLOADER calls DnsQuery_A to query a DNS Resource Record from OpenNICs servers to resolve the C2 servers IP address."
                    ],
                    "titles": [
                        "Step 6: C2 Connection Through Custom URLs"
                    ]
                },
                "links": [
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x75c00b06>",
                            "type": "FunctionName",
                            "value": "DnsQuery_A"
                        },
                        "relation": "has_category",
                        "dst": {
                            "id": "<CATEGORY_0xe42cc34c>",
                            "type": "Category",
                            "value": "dns"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x75c00b06>",
                            "type": "FunctionName",
                            "value": "DnsQuery_A"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<THREAT_0xf4f1f185>",
                            "type": "Threat",
                            "value": "bazarbackdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x75c00b06>",
                            "type": "FunctionName",
                            "value": "DnsQuery_A"
                        },
                        "relation": "use_threat",
                        "dst": {
                            "id": "<THREAT_0xf4f1f185>",
                            "type": "Threat",
                            "value": "bazarbackdoor"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<FUNCTIONNAME_0x3b840b8c>",
                    "type": "FunctionName",
                    "value": "GetCurrentProcess"
                },
                "references": {
                    "sentences": [
                        "First, it checks if its process is elevated with admin privileges. It calls GetCurrentProcess and OpenProcessToken to retrieve its own process token handle and GetTokenInformation to get the tokens elevation information."
                    ],
                    "titles": [
                        "Step 5: Injection Through Process Hollowing"
                    ]
                },
                "links": [
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x3b840b8c>",
                            "type": "FunctionName",
                            "value": "GetCurrentProcess"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<THREAT_0xf4f1f185>",
                            "type": "Threat",
                            "value": "bazarbackdoor"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<FUNCTIONNAME_0xe493915a>",
                    "type": "FunctionName",
                    "value": "OpenProcessToken"
                },
                "references": {
                    "sentences": [
                        "First, it checks if its process is elevated with admin privileges. It calls GetCurrentProcess and OpenProcessToken to retrieve its own process token handle and GetTokenInformation to get the tokens elevation information."
                    ],
                    "titles": [
                        "Step 5: Injection Through Process Hollowing"
                    ]
                },
                "links": [
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0xe493915a>",
                            "type": "FunctionName",
                            "value": "OpenProcessToken"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<THREAT_0xf4f1f185>",
                            "type": "Threat",
                            "value": "bazarbackdoor"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<FUNCTIONNAME_0x4cf9da98>",
                    "type": "FunctionName",
                    "value": "OpenProcess"
                },
                "references": {
                    "sentences": [
                        "For each process name, the malware enumerates the processs snapshot to retrieve its ID and calls OpenProcess to get its handle."
                    ],
                    "titles": [
                        "Step 5: Injection Through Process Hollowing"
                    ]
                },
                "links": [
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x4cf9da98>",
                            "type": "FunctionName",
                            "value": "OpenProcess"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<THREAT_0xf4f1f185>",
                            "type": "Threat",
                            "value": "bazarbackdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x4cf9da98>",
                            "type": "FunctionName",
                            "value": "OpenProcess"
                        },
                        "relation": "has_category",
                        "dst": {
                            "id": "<CATEGORY_0xf1a480bb>",
                            "type": "Category",
                            "value": "malware"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<FUNCTIONNAME_0xe4c6c241>",
                    "type": "FunctionName",
                    "value": "NtQueryInformationProcess"
                },
                "references": {
                    "sentences": [
                        "To access the PEB, the malware calls NtQueryInformationProcess to retrieve the PEBs adress and calls ReadProcessMemory to read the PEB into memory."
                    ],
                    "titles": [
                        "Step 5: Injection Through Process Hollowing"
                    ]
                },
                "links": [
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0xe4c6c241>",
                            "type": "FunctionName",
                            "value": "NtQueryInformationProcess"
                        },
                        "relation": "has_category",
                        "dst": {
                            "id": "<CATEGORY_0xf1a480bb>",
                            "type": "Category",
                            "value": "malware"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0xe4c6c241>",
                            "type": "FunctionName",
                            "value": "NtQueryInformationProcess"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0x42baf8c0>",
                            "type": "UnknownWord",
                            "value": "adress"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0xe4c6c241>",
                            "type": "FunctionName",
                            "value": "NtQueryInformationProcess"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<THREAT_0xf4f1f185>",
                            "type": "Threat",
                            "value": "bazarbackdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0xe4c6c241>",
                            "type": "FunctionName",
                            "value": "NtQueryInformationProcess"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0x662195eb>",
                            "type": "UnknownWord",
                            "value": "pebs"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0xe4c6c241>",
                            "type": "FunctionName",
                            "value": "NtQueryInformationProcess"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0xf9ccb8cf>",
                            "type": "UnknownWord",
                            "value": "peb"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<FUNCTIONNAME_0x96ed5f10>",
                    "type": "FunctionName",
                    "value": "ReadProcessMemory"
                },
                "references": {
                    "sentences": [
                        "To access the PEB, the malware calls NtQueryInformationProcess to retrieve the PEBs adress and calls ReadProcessMemory to read the PEB into memory.",
                        "Next, it calls ReadProcessMemory to read the process parameters from the processs memory."
                    ],
                    "titles": [
                        "Step 5: Injection Through Process Hollowing"
                    ]
                },
                "links": [
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x96ed5f10>",
                            "type": "FunctionName",
                            "value": "ReadProcessMemory"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0x42baf8c0>",
                            "type": "UnknownWord",
                            "value": "adress"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x96ed5f10>",
                            "type": "FunctionName",
                            "value": "ReadProcessMemory"
                        },
                        "relation": "has_category",
                        "dst": {
                            "id": "<CATEGORY_0xf1a480bb>",
                            "type": "Category",
                            "value": "malware"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x96ed5f10>",
                            "type": "FunctionName",
                            "value": "ReadProcessMemory"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0xf9ccb8cf>",
                            "type": "UnknownWord",
                            "value": "peb"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x96ed5f10>",
                            "type": "FunctionName",
                            "value": "ReadProcessMemory"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0x662195eb>",
                            "type": "UnknownWord",
                            "value": "pebs"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x96ed5f10>",
                            "type": "FunctionName",
                            "value": "ReadProcessMemory"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<THREAT_0xf4f1f185>",
                            "type": "Threat",
                            "value": "bazarbackdoor"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<FUNCTIONNAME_0xa28f3aae>",
                    "type": "FunctionName",
                    "value": "CreateProcessA"
                },
                "references": {
                    "sentences": [
                        "Next, using the injection struct, the malware calls CreateProcessA to create the target process in the suspended state to perform process hollowing."
                    ],
                    "titles": [
                        "Step 5: Injection Through Process Hollowing"
                    ]
                },
                "links": [
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0xa28f3aae>",
                            "type": "FunctionName",
                            "value": "CreateProcessA"
                        },
                        "relation": "has_category",
                        "dst": {
                            "id": "<CATEGORY_0xf1a480bb>",
                            "type": "Category",
                            "value": "malware"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0xa28f3aae>",
                            "type": "FunctionName",
                            "value": "CreateProcessA"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0x160b77de>",
                            "type": "UnknownWord",
                            "value": "struct"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0xa28f3aae>",
                            "type": "FunctionName",
                            "value": "CreateProcessA"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<THREAT_0xf4f1f185>",
                            "type": "Threat",
                            "value": "bazarbackdoor"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<FUNCTIONNAME_0x6ff17045>",
                    "type": "FunctionName",
                    "value": "WriteProcessMemory"
                },
                "references": {
                    "sentences": [
                        "We can quickly spot that process hollowing is taking place through the Windows APIs being called. NtUnmapViewOfSection is called to unmap and carve out the parents memory. VirtualAllocEx and WriteProcessMemory are then called to allocate virtual memory in the parents process and write the malicious payload into it."
                    ],
                    "titles": [
                        "Step 5: Injection Through Process Hollowing"
                    ]
                },
                "links": [
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x6ff17045>",
                            "type": "FunctionName",
                            "value": "WriteProcessMemory"
                        },
                        "relation": "has_category",
                        "dst": {
                            "id": "<CATEGORY_0xf1a480bb>",
                            "type": "Category",
                            "value": "malware"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x6ff17045>",
                            "type": "FunctionName",
                            "value": "WriteProcessMemory"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<THREAT_0xf4f1f185>",
                            "type": "Threat",
                            "value": "bazarbackdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x6ff17045>",
                            "type": "FunctionName",
                            "value": "WriteProcessMemory"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0x87f5f8df>",
                            "type": "UnknownWord",
                            "value": "virtualallocex"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<FUNCTIONNAME_0xbace2fe9>",
                    "type": "FunctionName",
                    "value": "SetThreadContext"
                },
                "references": {
                    "sentences": [
                        "Finally, BAZARLOADER calls SetThreadContext to set the new entry point for the parent process and calls ResumeThread to resume the parents process again, which will execute the injected executable."
                    ],
                    "titles": [
                        "Step 5: Injection Through Process Hollowing"
                    ]
                },
                "links": [
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0xbace2fe9>",
                            "type": "FunctionName",
                            "value": "SetThreadContext"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<THREAT_0xf4f1f185>",
                            "type": "Threat",
                            "value": "bazarbackdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0xbace2fe9>",
                            "type": "FunctionName",
                            "value": "SetThreadContext"
                        },
                        "relation": "use_threat",
                        "dst": {
                            "id": "<THREAT_0xf4f1f185>",
                            "type": "Threat",
                            "value": "bazarbackdoor"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<FUNCTIONNAME_0x72b763a>",
                    "type": "FunctionName",
                    "value": "ResumeThread"
                },
                "references": {
                    "sentences": [
                        "Finally, BAZARLOADER calls SetThreadContext to set the new entry point for the parent process and calls ResumeThread to resume the parents process again, which will execute the injected executable."
                    ],
                    "titles": [
                        "Step 5: Injection Through Process Hollowing"
                    ]
                },
                "links": [
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x72b763a>",
                            "type": "FunctionName",
                            "value": "ResumeThread"
                        },
                        "relation": "use_threat",
                        "dst": {
                            "id": "<THREAT_0xf4f1f185>",
                            "type": "Threat",
                            "value": "bazarbackdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x72b763a>",
                            "type": "FunctionName",
                            "value": "ResumeThread"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<THREAT_0xf4f1f185>",
                            "type": "Threat",
                            "value": "bazarbackdoor"
                        }
                    }
                ]
            }
        ]
    },
    "iocs": {
        "File": [
            {
                "token": {
                    "id": "<FILE_0x418c22ac>",
                    "type": "File",
                    "value": "svchost.exe"
                },
                "references": {
                    "sentences": [
                        "If BAZARLOADER has admin privilege, instead of a browsers process, it tries to populate the injection structure with a svchost.exe process from the following command line."
                    ],
                    "titles": [
                        "Step 5: Injection Through Process Hollowing"
                    ]
                },
                "links": [
                    {
                        "src": {
                            "id": "<FILE_0x418c22ac>",
                            "type": "File",
                            "value": "svchost.exe"
                        },
                        "relation": "use_threat",
                        "dst": {
                            "id": "<THREAT_0xf4f1f185>",
                            "type": "Threat",
                            "value": "bazarbackdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<FILE_0x418c22ac>",
                            "type": "File",
                            "value": "svchost.exe"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0xd673e668>",
                            "type": "UnknownWord",
                            "value": "populate"
                        }
                    }
                ]
            }
        ]
    },
    "unknownwords": {
        "UnknownWord": [
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x93332bec>",
                    "type": "UnknownWord",
                    "value": "nearby"
                },
                "references": {
                    "sentences": [
                        "Similar to a lot of malware, BAZARLOADER manually checks the systems languages to avoid executing on machines in Russia and nearby countries."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x901f8bb6>",
                    "type": "UnknownWord",
                    "value": "bitmask"
                },
                "references": {
                    "sentences": [
                        "For each of these languages, the malware checks if its valid using a bitmask.",
                        "The bitmask that BAZARLOADER uses is 0xD8080190C03, which is 11011000000010000000000110010000110000000011 in binary. The first bit in the bitmask is checked if the language ID is 0x18. The second bit is checked if the language ID is 0x19, and so on",
                        "Below is the list of all languages from the bitmask that the malware avoids.",
                        "If its in the range between 0x18 and 0x43, the difference between the language identifier and 0x18 is used as the index of the bit to be checked in the bitmask."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x8d5cc8e8>",
                    "type": "UnknownWord",
                    "value": "0x19"
                },
                "references": {
                    "sentences": [
                        "The bitmask that BAZARLOADER uses is 0xD8080190C03, which is 11011000000010000000000110010000110000000011 in binary. The first bit in the bitmask is checked if the language ID is 0x18. The second bit is checked if the language ID is 0x19, and so on"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xaab4191a>",
                    "type": "UnknownWord",
                    "value": "run-once"
                },
                "references": {
                    "sentences": [],
                    "titles": [
                        "Step 2: Run-Once Mutex"
                    ]
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xc0a61056>",
                    "type": "UnknownWord",
                    "value": "subauthority"
                },
                "references": {
                    "sentences": [
                        "If the SIDs subauthority is SECURITY_MANDATORY_SYSTEM_RID or SECURITY_MANDATORY_PROTECTED_PROCESS_RID, BAZARLOADER checks if the mutex {b837ef4f-10ee-4821-ac76-2331eb32a23f} is currently owned by any other process by calling CreateMutexA.",
                        "To check for multiple running instances of itself, BAZARLOADER first extracts the subauthority of a SID from its process. It does this by calling GetTokenInformation to retrieve the processs token integrity level and calling GetSidSubAuthorityCount and GetSidSubAuthority to access the subauthority of a SID.",
                        "If the SIDs subauthority is not SECURITY_MANDATORY_SYSTEM_RID or SECURITY_MANDATORY_PROTECTED_PROCESS_RID, BAZARLOADER still uses these two mutex names but adds the string Global\\ in front of them. This checks for the mutexes in the global namespace instead of the per-session namespace, which allows the malware to check if it has instances running in other users sessions."
                    ],
                    "titles": []
                },
                "links": [
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x241a1a65>",
                            "type": "FunctionName",
                            "value": "GetTokenInformation"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0xc0a61056>",
                            "type": "UnknownWord",
                            "value": "subauthority"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x90b3cd31>",
                            "type": "FunctionName",
                            "value": "GetSidSubAuthorityCount"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0xc0a61056>",
                            "type": "UnknownWord",
                            "value": "subauthority"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x32fd35e9>",
                            "type": "FunctionName",
                            "value": "CreateMutexA"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0xc0a61056>",
                            "type": "UnknownWord",
                            "value": "subauthority"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0xeaa99cf2>",
                            "type": "FunctionName",
                            "value": "GetSidSubAuthority"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0xc0a61056>",
                            "type": "UnknownWord",
                            "value": "subauthority"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x8f09160f>",
                    "type": "UnknownWord",
                    "value": "security_mandatory_system_rid"
                },
                "references": {
                    "sentences": [
                        "If the SIDs subauthority is not SECURITY_MANDATORY_SYSTEM_RID or SECURITY_MANDATORY_PROTECTED_PROCESS_RID, BAZARLOADER still uses these two mutex names but adds the string Global\\ in front of them. This checks for the mutexes in the global namespace instead of the per-session namespace, which allows the malware to check if it has instances running in other users sessions.",
                        "If the SIDs subauthority is SECURITY_MANDATORY_SYSTEM_RID or SECURITY_MANDATORY_PROTECTED_PROCESS_RID, BAZARLOADER checks if the mutex {b837ef4f-10ee-4821-ac76-2331eb32a23f} is currently owned by any other process by calling CreateMutexA."
                    ],
                    "titles": []
                },
                "links": [
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x32fd35e9>",
                            "type": "FunctionName",
                            "value": "CreateMutexA"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0x8f09160f>",
                            "type": "UnknownWord",
                            "value": "security_mandatory_system_rid"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x975f0e4f>",
                    "type": "UnknownWord",
                    "value": "security_mandatory_protected_process_rid"
                },
                "references": {
                    "sentences": [
                        "If the SIDs subauthority is SECURITY_MANDATORY_SYSTEM_RID or SECURITY_MANDATORY_PROTECTED_PROCESS_RID, BAZARLOADER checks if the mutex {b837ef4f-10ee-4821-ac76-2331eb32a23f} is currently owned by any other process by calling CreateMutexA.",
                        "If the SIDs subauthority is not SECURITY_MANDATORY_SYSTEM_RID or SECURITY_MANDATORY_PROTECTED_PROCESS_RID, BAZARLOADER still uses these two mutex names but adds the string Global\\ in front of them. This checks for the mutexes in the global namespace instead of the per-session namespace, which allows the malware to check if it has instances running in other users sessions."
                    ],
                    "titles": []
                },
                "links": [
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x32fd35e9>",
                            "type": "FunctionName",
                            "value": "CreateMutexA"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0x975f0e4f>",
                            "type": "UnknownWord",
                            "value": "security_mandatory_protected_process_rid"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x3f8eb014>",
                    "type": "UnknownWord",
                    "value": "mutexes"
                },
                "references": {
                    "sentences": [
                        "If the SIDs subauthority is not SECURITY_MANDATORY_SYSTEM_RID or SECURITY_MANDATORY_PROTECTED_PROCESS_RID, BAZARLOADER still uses these two mutex names but adds the string Global\\ in front of them. This checks for the mutexes in the global namespace instead of the per-session namespace, which allows the malware to check if it has instances running in other users sessions."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xfb05f48>",
                    "type": "UnknownWord",
                    "value": "namespace"
                },
                "references": {
                    "sentences": [
                        "If the SIDs subauthority is not SECURITY_MANDATORY_SYSTEM_RID or SECURITY_MANDATORY_PROTECTED_PROCESS_RID, BAZARLOADER still uses these two mutex names but adds the string Global\\ in front of them. This checks for the mutexes in the global namespace instead of the per-session namespace, which allows the malware to check if it has instances running in other users sessions."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x3d7c0a8d>",
                    "type": "UnknownWord",
                    "value": "per-session"
                },
                "references": {
                    "sentences": [
                        "If the SIDs subauthority is not SECURITY_MANDATORY_SYSTEM_RID or SECURITY_MANDATORY_PROTECTED_PROCESS_RID, BAZARLOADER still uses these two mutex names but adds the string Global\\ in front of them. This checks for the mutexes in the global namespace instead of the per-session namespace, which allows the malware to check if it has instances running in other users sessions."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xadfa770d>",
                    "type": "UnknownWord",
                    "value": "initialize"
                },
                "references": {
                    "sentences": [
                        "First, BAZARLOADER calls InitializeCriticalSection to initialize the structures critical section object, which is later used to protect accesses to the creation_flag field.",
                        "To generate Internet activities to hide its communication with C2 servers, BAZARLOADER first calls InternetOpenA to initialize the use of WinINet functions with the following string as the HTTP user agent."
                    ],
                    "titles": []
                },
                "links": [
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x1efd163f>",
                            "type": "FunctionName",
                            "value": "InitializeCriticalSection"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0xadfa770d>",
                            "type": "UnknownWord",
                            "value": "initialize"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x70f6527d>",
                            "type": "FunctionName",
                            "value": "InternetOpenA"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0xadfa770d>",
                            "type": "UnknownWord",
                            "value": "initialize"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x95a76c53>",
                    "type": "UnknownWord",
                    "value": "wininet"
                },
                "references": {
                    "sentences": [
                        "To generate Internet activities to hide its communication with C2 servers, BAZARLOADER first calls InternetOpenA to initialize the use of WinINet functions with the following string as the HTTP user agent."
                    ],
                    "titles": []
                },
                "links": [
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x70f6527d>",
                            "type": "FunctionName",
                            "value": "InternetOpenA"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0x95a76c53>",
                            "type": "UnknownWord",
                            "value": "wininet"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xac5e9e7b>",
                    "type": "UnknownWord",
                    "value": "noises"
                },
                "references": {
                    "sentences": [
                        "The malware then spawns a thread to periodically connect to random URLs and generate noises to hide the main C2 traffic by utilizing the following structure.",
                        "Next, the thread enters an infinite loop to start generating the traffic noises. For random number generation, BAZARLOADER uses different functions that call the Windows API BCryptGenRandom to generate a set number of random bytes."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x56a98b99>",
                    "type": "UnknownWord",
                    "value": "creation_flag"
                },
                "references": {
                    "sentences": [
                        "First, BAZARLOADER calls InitializeCriticalSection to initialize the structures critical section object, which is later used to protect accesses to the creation_flag field.",
                        "Next, it sets the self field to point to the structure, the creation_flag field to TRUE, and calls CreateThread to spawn a thread to perform these random Internet operations. If it fails to create a thread, the creation_flag field is set to FALSE."
                    ],
                    "titles": []
                },
                "links": [
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x4d4ac8b3>",
                            "type": "FunctionName",
                            "value": "CreateThread"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0x56a98b99>",
                            "type": "UnknownWord",
                            "value": "creation_flag"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x1efd163f>",
                            "type": "FunctionName",
                            "value": "InitializeCriticalSection"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0x56a98b99>",
                            "type": "UnknownWord",
                            "value": "creation_flag"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x653dddfa>",
                    "type": "UnknownWord",
                    "value": "self"
                },
                "references": {
                    "sentences": [
                        "Next, it sets the self field to point to the structure, the creation_flag field to TRUE, and calls CreateThread to spawn a thread to perform these random Internet operations. If it fails to create a thread, the creation_flag field is set to FALSE."
                    ],
                    "titles": []
                },
                "links": [
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x4d4ac8b3>",
                            "type": "FunctionName",
                            "value": "CreateThread"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0x653dddfa>",
                            "type": "UnknownWord",
                            "value": "self"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x1525fafe>",
                    "type": "UnknownWord",
                    "value": "stack"
                },
                "references": {
                    "sentences": [
                        "The thread first tries to obtain ownership of the critical section object and check if the creation flag is enabled. If it is, the malware resolves the following URLs as stack strings."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xe8138151>",
                    "type": "UnknownWord",
                    "value": "bcryptgenrandom"
                },
                "references": {
                    "sentences": [
                        "Next, the thread enters an infinite loop to start generating the traffic noises. For random number generation, BAZARLOADER uses different functions that call the Windows API BCryptGenRandom to generate a set number of random bytes."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x7d8a441>",
                    "type": "UnknownWord",
                    "value": "uppercase"
                },
                "references": {
                    "sentences": [
                        "It generates a count for the path segments randomly in the given range. For each of the segments, the malware randomly generates a string with a random length in the given range that contains numbers and uppercase/lowercase letters."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xbdcec253>",
                    "type": "UnknownWord",
                    "value": "lowercase"
                },
                "references": {
                    "sentences": [
                        "It generates a count for the path segments randomly in the given range. For each of the segments, the malware randomly generates a string with a random length in the given range that contains numbers and uppercase/lowercase letters."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x8387fba9>",
                    "type": "UnknownWord",
                    "value": "http_query_content_length"
                },
                "references": {
                    "sentences": [
                        "Finally, the malware calls InternetOpenURLA to establish a connection with the generated URL. It calls HTTPQueryInfoA with the HTTP_QUERY_CONTENT_LENGTH flag to retrieve the contents length, allocates a buffer with that size, and calls InternetReadFile to read data from that URL."
                    ],
                    "titles": []
                },
                "links": [
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x472f07b5>",
                            "type": "FunctionName",
                            "value": "InternetReadFile"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0x8387fba9>",
                            "type": "UnknownWord",
                            "value": "http_query_content_length"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0xcf09f42e>",
                            "type": "FunctionName",
                            "value": "HTTPQueryInfoA"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0x8387fba9>",
                            "type": "UnknownWord",
                            "value": "http_query_content_length"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x56e065d0>",
                    "type": "UnknownWord",
                    "value": "finished"
                },
                "references": {
                    "sentences": [
                        "This is done repeatedly until C2 communication and payload injection are finished, which generates a lot of noise to mask the main traffic coming to and from C2 servers."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x47c935e6>",
                    "type": "UnknownWord",
                    "value": "noise"
                },
                "references": {
                    "sentences": [
                        "This is done repeatedly until C2 communication and payload injection are finished, which generates a lot of noise to mask the main traffic coming to and from C2 servers."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x6941e8fe>",
                    "type": "UnknownWord",
                    "value": "mask"
                },
                "references": {
                    "sentences": [
                        "This is done repeatedly until C2 communication and payload injection are finished, which generates a lot of noise to mask the main traffic coming to and from C2 servers."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x69f89f19>",
                    "type": "UnknownWord",
                    "value": "cryptographic"
                },
                "references": {
                    "sentences": [
                        "First, it populates the crypto_struct field in the main structure. This structure contains cryptographic handles that are later used to decrypt executables being sent from C2 servers."
                    ],
                    "titles": [
                        "Step 4: Cryptographic Structure Population"
                    ]
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x9ef2176>",
                    "type": "UnknownWord",
                    "value": "population"
                },
                "references": {
                    "sentences": [],
                    "titles": [
                        "Step 4: Cryptographic Structure Population"
                    ]
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x1705d2ec>",
                    "type": "UnknownWord",
                    "value": "populates"
                },
                "references": {
                    "sentences": [
                        "To establish a connection, it populates the following structure.",
                        "Similarly, BAZARLOADER populates the structure below to create an HTTP request to C2. The requests object name and HTTP verb are resolved to be /data/service and GET.",
                        "For each DNS server IP address, BAZARLOADER parses it from string to int and populates the opennic_server_struct field in the main structure. Below is the structure used to store OpenNIC IP addresses.",
                        "First, it populates the crypto_struct field in the main structure. This structure contains cryptographic handles that are later used to decrypt executables being sent from C2 servers.",
                        "For this functionality, BAZARLOADER populates the following structure."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x4ce5d516>",
                    "type": "UnknownWord",
                    "value": "crypto_struct"
                },
                "references": {
                    "sentences": [
                        "The malware resolves the strings RSA and SHA384 and calls BCryptOpenAlgorithmProvider to retrieve handles for these two algorithms. The handles are stored in the corresponding fields in the crypto_struct structure.",
                        "First, it populates the crypto_struct field in the main structure. This structure contains cryptographic handles that are later used to decrypt executables being sent from C2 servers."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x327d3086>",
                    "type": "UnknownWord",
                    "value": "reconstructed"
                },
                "references": {
                    "sentences": [
                        "This field is a structure representing a list of string structures, both of which can be reconstructed as below.",
                        "The structure can be reconstructed as below."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xf6e507cb>",
                    "type": "UnknownWord",
                    "value": "sha384"
                },
                "references": {
                    "sentences": [
                        "Finally, it calls BCryptGetProperty to retrieve the length of the RSA public and private cipher blocks. With this structure fully populated, BAZARLOADER can now perform RSA encryption/decryption as well as SHA384 hashing.",
                        "The malware resolves the strings RSA and SHA384 and calls BCryptOpenAlgorithmProvider to retrieve handles for these two algorithms. The handles are stored in the corresponding fields in the crypto_struct structure.",
                        "It also generates the SHA384 hash of the datetime string to populate the structures datetime_string_hash and datetime_string_hash_len fields."
                    ],
                    "titles": []
                },
                "links": [
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0xca3b22b9>",
                            "type": "FunctionName",
                            "value": "BCryptOpenAlgorithmProvider"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0xf6e507cb>",
                            "type": "UnknownWord",
                            "value": "sha384"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xa38fe6f>",
                    "type": "UnknownWord",
                    "value": "rsafullprivateblob"
                },
                "references": {
                    "sentences": [
                        "For each blob, the malware resolves one of the strings RSAFULLPRIVATEBLOB or RSAPUBLICBLOB and uses it to specify the blobs type when calling BCryptImportKeyPair to import the corresponding key handle."
                    ],
                    "titles": []
                },
                "links": [
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0xb4d7e32e>",
                            "type": "FunctionName",
                            "value": "BCryptImportKeyPair"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0xa38fe6f>",
                            "type": "UnknownWord",
                            "value": "rsafullprivateblob"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xbb71aefe>",
                    "type": "UnknownWord",
                    "value": "rsapublicblob"
                },
                "references": {
                    "sentences": [
                        "For each blob, the malware resolves one of the strings RSAFULLPRIVATEBLOB or RSAPUBLICBLOB and uses it to specify the blobs type when calling BCryptImportKeyPair to import the corresponding key handle."
                    ],
                    "titles": []
                },
                "links": [
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0xb4d7e32e>",
                            "type": "FunctionName",
                            "value": "BCryptImportKeyPair"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0xbb71aefe>",
                            "type": "UnknownWord",
                            "value": "rsapublicblob"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x275a64d3>",
                    "type": "UnknownWord",
                    "value": "specify"
                },
                "references": {
                    "sentences": [
                        "For each blob, the malware resolves one of the strings RSAFULLPRIVATEBLOB or RSAPUBLICBLOB and uses it to specify the blobs type when calling BCryptImportKeyPair to import the corresponding key handle."
                    ],
                    "titles": []
                },
                "links": [
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0xb4d7e32e>",
                            "type": "FunctionName",
                            "value": "BCryptImportKeyPair"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0x275a64d3>",
                            "type": "UnknownWord",
                            "value": "specify"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xf35638a1>",
                    "type": "UnknownWord",
                    "value": "representing"
                },
                "references": {
                    "sentences": [
                        "This field is a structure representing a list of string structures, both of which can be reconstructed as below."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xd673e668>",
                    "type": "UnknownWord",
                    "value": "populate"
                },
                "references": {
                    "sentences": [
                        "This connection structures fields are then copied into the main structures C2_connection_struct. Here, Im not entirely sure why they dont just populate the main structure directly instead.",
                        "It also generates the SHA384 hash of the datetime string to populate the structures datetime_string_hash and datetime_string_hash_len fields.",
                        "To populate the full_exec_command and thread_curr_directory fields which contain the processs command line and full path, BAZARLOADER first extracts the process parameters from the Process Environment Block (PEB).",
                        "With the process parameter RTL_USER_PROCESS_PARAMETERS structure, BAZARLOADER reads the processs command line and full path to populate the injection structure.",
                        "If BAZARLOADER has admin privilege, instead of a browsers process, it tries to populate the injection structure with a svchost.exe process from the following command line.",
                        "If the process is not elevated, it resolves the following processes names and tries to populate the injection structures fields.",
                        "BAZARLOADER then generates the HTTP header to be appended to the request. It does this by calling GetSystemTime to populate the curr_system_time and the datetime_string field of the main structure with the current date and time."
                    ],
                    "titles": []
                },
                "links": [
                    {
                        "src": {
                            "id": "<FILE_0x418c22ac>",
                            "type": "File",
                            "value": "svchost.exe"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0xd673e668>",
                            "type": "UnknownWord",
                            "value": "populate"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x8de4827f>",
                            "type": "FunctionName",
                            "value": "GetSystemTime"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0xd673e668>",
                            "type": "UnknownWord",
                            "value": "populate"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xa92ce46c>",
                    "type": "UnknownWord",
                    "value": "verb"
                },
                "references": {
                    "sentences": [
                        "Similarly, BAZARLOADER populates the structure below to create an HTTP request to C2. The requests object name and HTTP verb are resolved to be /data/service and GET."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x895c71b4>",
                    "type": "UnknownWord",
                    "value": "curr_system_time"
                },
                "references": {
                    "sentences": [
                        "BAZARLOADER then generates the HTTP header to be appended to the request. It does this by calling GetSystemTime to populate the curr_system_time and the datetime_string field of the main structure with the current date and time."
                    ],
                    "titles": []
                },
                "links": [
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x8de4827f>",
                            "type": "FunctionName",
                            "value": "GetSystemTime"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0x895c71b4>",
                            "type": "UnknownWord",
                            "value": "curr_system_time"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xd102c9eb>",
                    "type": "UnknownWord",
                    "value": "datetime_string"
                },
                "references": {
                    "sentences": [
                        "BAZARLOADER then generates the HTTP header to be appended to the request. It does this by calling GetSystemTime to populate the curr_system_time and the datetime_string field of the main structure with the current date and time."
                    ],
                    "titles": []
                },
                "links": [
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x8de4827f>",
                            "type": "FunctionName",
                            "value": "GetSystemTime"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0xd102c9eb>",
                            "type": "UnknownWord",
                            "value": "datetime_string"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xe7b0dbf3>",
                    "type": "UnknownWord",
                    "value": "datetime"
                },
                "references": {
                    "sentences": [
                        "It also generates the SHA384 hash of the datetime string to populate the structures datetime_string_hash and datetime_string_hash_len fields."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xcfe40af1>",
                    "type": "UnknownWord",
                    "value": "datetime_string_hash"
                },
                "references": {
                    "sentences": [
                        "It also generates the SHA384 hash of the datetime string to populate the structures datetime_string_hash and datetime_string_hash_len fields."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x878570ab>",
                    "type": "UnknownWord",
                    "value": "datetime_string_hash_len"
                },
                "references": {
                    "sentences": [
                        "It also generates the SHA384 hash of the datetime string to populate the structures datetime_string_hash and datetime_string_hash_len fields."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x7bb82a2c>",
                    "type": "UnknownWord",
                    "value": "tue"
                },
                "references": {
                    "sentences": [
                        "Date: Tue, 17 May 2022 20:18:27 GMT"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xc9c34278>",
                    "type": "UnknownWord",
                    "value": "gmt"
                },
                "references": {
                    "sentences": [
                        "Date: Tue, 17 May 2022 20:18:27 GMT"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x2b455054>",
                    "type": "UnknownWord",
                    "value": "cgic"
                },
                "references": {
                    "sentences": [
                        "Cookie: CGIC=YKK%2BIFrld%2FC5FqKj%2Fq1F9a06T0WgC4cOvCqqo3cfsyww1EwAb2TNFWqy8wBcDtObrgkjKtmIBSnsD%2Bmn2eR6MzQeUvHqOBJqA%2FqYS3KEkUQoKUgpOfuW%2BTtuz2OjhVeOJ1oMWnellOIJ4IuNBO5aVtzV8AI3CD4H8Z9tgjhG7i6cXrsAh5EUwKjHqbeEBszHmUhSsCNx0vypRWWd6MkM1HBeENiww7W8GjhoXvX8AwZ5VDTRSX3QSr9jpUuWYXHmJDhOtdG%2FW9UAWEHYkv6IpRsGPKWtAdR%2FzHNzWmZRC3HsMP4LyIOXCs5O8lvUZH2Bv2gtZ1SGZOD0Kd7Oi4nFwA%3D%3D;HSID=gbN30kmxz%2BKKygRK6DJjGJ%2FzGQcMDOSmyQoYi9p2ITFNy6zMnfCERvugTwb5O%2FZyAJ5lGvveYZlNK3N%2BRoNPqCThC%2Fwr2OQbPA3aFJeXZerPSF7bWmhHVGGunlw8HqV3dcjs67tLT7irrJLctXzonzWE%2B6Ukd9kdFTNWW5j7s2JEEAcW9Dp6x6WIdRemz6HC3BifjKQ%2BmwvryFaI%2BsLRi9T042hwKQqV7ikOLOsHOOCqlCKs0vcpFS5vUXzdGwSWdONWLHMEkuApe5B%2BUC7bULbJvnoqnT1jFFEE3vm5gSU%2BGKIbVqBCseLx42av7mxWCmJfB1mpDH3K6tJof0YKpQ%3D%3D;DV=arPk%2BRhtodeAHMzW%2FqoqfkfCFpUR1CYM5oW%2FK7onqCf46Xqk2OR0LjLK%2BQL7jCS5yrcZA2r2hYulBxnpVa%2B8tO%2BJImuPOM9B8JkIbEAMHp%2BvNq8vcSj78wA%2FoW0Wgx8Sw9lSMno4CgPoNgF1mrkm9m9cd7U6wQS7WGKR6Wufxuvjlyt6zf5xtU2gq9WtsxOglu%2BXOYApwXiTIEO853sEnzlVNopwMbYkBm5Mu2LSEycyBm4A9nWKVCr9r0xisHCGzde3sBO4hY7WyykPK6vsU3Ds36FVNH3Kv7jx1Kf6tCVe9ukypCd8j%2FXJWAgPwv%2BsWcyA6ky9skKq1GDuoMJQ5A%3D%3D;ANID=modcr%2B3xO4FT10Fb3jE3afiK3eFqJCs1ylPBjge%2F6lgEM3Li5i5UZ%2BviQCBS1cuiaiQ%2F9Cj62z%2BapXfRMVWSFEeZTv9rkmPKmp5FZHUq5VLHNyhrBtjScNXwDZVakrx9ZYt1uzzh2X93c6Z6YQsyNWlkfdmlZS1FCGOf0aaVZfIRiUW%2FXX6zNVph%2FBpYTicXqZ1qaiPAWb5FNF%2BfJylCjmVDOFCZHJ4E6M0Pph%2BvvgjuCO9bRHWjI2Ouz%2B8ETyMBoQOkSDGzzInMeapRKmXYNDhdcEogwNmRkJqoRJjBhHzvbIYgCXGNJFWVnxywcZSaHfQwGonWClY3vT3PSlEnHg%3D%3D;"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x559b978c>",
                    "type": "UnknownWord",
                    "value": "ykk"
                },
                "references": {
                    "sentences": [
                        "Cookie: CGIC=YKK%2BIFrld%2FC5FqKj%2Fq1F9a06T0WgC4cOvCqqo3cfsyww1EwAb2TNFWqy8wBcDtObrgkjKtmIBSnsD%2Bmn2eR6MzQeUvHqOBJqA%2FqYS3KEkUQoKUgpOfuW%2BTtuz2OjhVeOJ1oMWnellOIJ4IuNBO5aVtzV8AI3CD4H8Z9tgjhG7i6cXrsAh5EUwKjHqbeEBszHmUhSsCNx0vypRWWd6MkM1HBeENiww7W8GjhoXvX8AwZ5VDTRSX3QSr9jpUuWYXHmJDhOtdG%2FW9UAWEHYkv6IpRsGPKWtAdR%2FzHNzWmZRC3HsMP4LyIOXCs5O8lvUZH2Bv2gtZ1SGZOD0Kd7Oi4nFwA%3D%3D;HSID=gbN30kmxz%2BKKygRK6DJjGJ%2FzGQcMDOSmyQoYi9p2ITFNy6zMnfCERvugTwb5O%2FZyAJ5lGvveYZlNK3N%2BRoNPqCThC%2Fwr2OQbPA3aFJeXZerPSF7bWmhHVGGunlw8HqV3dcjs67tLT7irrJLctXzonzWE%2B6Ukd9kdFTNWW5j7s2JEEAcW9Dp6x6WIdRemz6HC3BifjKQ%2BmwvryFaI%2BsLRi9T042hwKQqV7ikOLOsHOOCqlCKs0vcpFS5vUXzdGwSWdONWLHMEkuApe5B%2BUC7bULbJvnoqnT1jFFEE3vm5gSU%2BGKIbVqBCseLx42av7mxWCmJfB1mpDH3K6tJof0YKpQ%3D%3D;DV=arPk%2BRhtodeAHMzW%2FqoqfkfCFpUR1CYM5oW%2FK7onqCf46Xqk2OR0LjLK%2BQL7jCS5yrcZA2r2hYulBxnpVa%2B8tO%2BJImuPOM9B8JkIbEAMHp%2BvNq8vcSj78wA%2FoW0Wgx8Sw9lSMno4CgPoNgF1mrkm9m9cd7U6wQS7WGKR6Wufxuvjlyt6zf5xtU2gq9WtsxOglu%2BXOYApwXiTIEO853sEnzlVNopwMbYkBm5Mu2LSEycyBm4A9nWKVCr9r0xisHCGzde3sBO4hY7WyykPK6vsU3Ds36FVNH3Kv7jx1Kf6tCVe9ukypCd8j%2FXJWAgPwv%2BsWcyA6ky9skKq1GDuoMJQ5A%3D%3D;ANID=modcr%2B3xO4FT10Fb3jE3afiK3eFqJCs1ylPBjge%2F6lgEM3Li5i5UZ%2BviQCBS1cuiaiQ%2F9Cj62z%2BapXfRMVWSFEeZTv9rkmPKmp5FZHUq5VLHNyhrBtjScNXwDZVakrx9ZYt1uzzh2X93c6Z6YQsyNWlkfdmlZS1FCGOf0aaVZfIRiUW%2FXX6zNVph%2FBpYTicXqZ1qaiPAWb5FNF%2BfJylCjmVDOFCZHJ4E6M0Pph%2BvvgjuCO9bRHWjI2Ouz%2B8ETyMBoQOkSDGzzInMeapRKmXYNDhdcEogwNmRkJqoRJjBhHzvbIYgCXGNJFWVnxywcZSaHfQwGonWClY3vT3PSlEnHg%3D%3D;"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xfc45f323>",
                    "type": "UnknownWord",
                    "value": "2bifrld"
                },
                "references": {
                    "sentences": [
                        "Cookie: CGIC=YKK%2BIFrld%2FC5FqKj%2Fq1F9a06T0WgC4cOvCqqo3cfsyww1EwAb2TNFWqy8wBcDtObrgkjKtmIBSnsD%2Bmn2eR6MzQeUvHqOBJqA%2FqYS3KEkUQoKUgpOfuW%2BTtuz2OjhVeOJ1oMWnellOIJ4IuNBO5aVtzV8AI3CD4H8Z9tgjhG7i6cXrsAh5EUwKjHqbeEBszHmUhSsCNx0vypRWWd6MkM1HBeENiww7W8GjhoXvX8AwZ5VDTRSX3QSr9jpUuWYXHmJDhOtdG%2FW9UAWEHYkv6IpRsGPKWtAdR%2FzHNzWmZRC3HsMP4LyIOXCs5O8lvUZH2Bv2gtZ1SGZOD0Kd7Oi4nFwA%3D%3D;HSID=gbN30kmxz%2BKKygRK6DJjGJ%2FzGQcMDOSmyQoYi9p2ITFNy6zMnfCERvugTwb5O%2FZyAJ5lGvveYZlNK3N%2BRoNPqCThC%2Fwr2OQbPA3aFJeXZerPSF7bWmhHVGGunlw8HqV3dcjs67tLT7irrJLctXzonzWE%2B6Ukd9kdFTNWW5j7s2JEEAcW9Dp6x6WIdRemz6HC3BifjKQ%2BmwvryFaI%2BsLRi9T042hwKQqV7ikOLOsHOOCqlCKs0vcpFS5vUXzdGwSWdONWLHMEkuApe5B%2BUC7bULbJvnoqnT1jFFEE3vm5gSU%2BGKIbVqBCseLx42av7mxWCmJfB1mpDH3K6tJof0YKpQ%3D%3D;DV=arPk%2BRhtodeAHMzW%2FqoqfkfCFpUR1CYM5oW%2FK7onqCf46Xqk2OR0LjLK%2BQL7jCS5yrcZA2r2hYulBxnpVa%2B8tO%2BJImuPOM9B8JkIbEAMHp%2BvNq8vcSj78wA%2FoW0Wgx8Sw9lSMno4CgPoNgF1mrkm9m9cd7U6wQS7WGKR6Wufxuvjlyt6zf5xtU2gq9WtsxOglu%2BXOYApwXiTIEO853sEnzlVNopwMbYkBm5Mu2LSEycyBm4A9nWKVCr9r0xisHCGzde3sBO4hY7WyykPK6vsU3Ds36FVNH3Kv7jx1Kf6tCVe9ukypCd8j%2FXJWAgPwv%2BsWcyA6ky9skKq1GDuoMJQ5A%3D%3D;ANID=modcr%2B3xO4FT10Fb3jE3afiK3eFqJCs1ylPBjge%2F6lgEM3Li5i5UZ%2BviQCBS1cuiaiQ%2F9Cj62z%2BapXfRMVWSFEeZTv9rkmPKmp5FZHUq5VLHNyhrBtjScNXwDZVakrx9ZYt1uzzh2X93c6Z6YQsyNWlkfdmlZS1FCGOf0aaVZfIRiUW%2FXX6zNVph%2FBpYTicXqZ1qaiPAWb5FNF%2BfJylCjmVDOFCZHJ4E6M0Pph%2BvvgjuCO9bRHWjI2Ouz%2B8ETyMBoQOkSDGzzInMeapRKmXYNDhdcEogwNmRkJqoRJjBhHzvbIYgCXGNJFWVnxywcZSaHfQwGonWClY3vT3PSlEnHg%3D%3D;"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xf7af6fae>",
                    "type": "UnknownWord",
                    "value": "2fc5fqkj"
                },
                "references": {
                    "sentences": [
                        "Cookie: CGIC=YKK%2BIFrld%2FC5FqKj%2Fq1F9a06T0WgC4cOvCqqo3cfsyww1EwAb2TNFWqy8wBcDtObrgkjKtmIBSnsD%2Bmn2eR6MzQeUvHqOBJqA%2FqYS3KEkUQoKUgpOfuW%2BTtuz2OjhVeOJ1oMWnellOIJ4IuNBO5aVtzV8AI3CD4H8Z9tgjhG7i6cXrsAh5EUwKjHqbeEBszHmUhSsCNx0vypRWWd6MkM1HBeENiww7W8GjhoXvX8AwZ5VDTRSX3QSr9jpUuWYXHmJDhOtdG%2FW9UAWEHYkv6IpRsGPKWtAdR%2FzHNzWmZRC3HsMP4LyIOXCs5O8lvUZH2Bv2gtZ1SGZOD0Kd7Oi4nFwA%3D%3D;HSID=gbN30kmxz%2BKKygRK6DJjGJ%2FzGQcMDOSmyQoYi9p2ITFNy6zMnfCERvugTwb5O%2FZyAJ5lGvveYZlNK3N%2BRoNPqCThC%2Fwr2OQbPA3aFJeXZerPSF7bWmhHVGGunlw8HqV3dcjs67tLT7irrJLctXzonzWE%2B6Ukd9kdFTNWW5j7s2JEEAcW9Dp6x6WIdRemz6HC3BifjKQ%2BmwvryFaI%2BsLRi9T042hwKQqV7ikOLOsHOOCqlCKs0vcpFS5vUXzdGwSWdONWLHMEkuApe5B%2BUC7bULbJvnoqnT1jFFEE3vm5gSU%2BGKIbVqBCseLx42av7mxWCmJfB1mpDH3K6tJof0YKpQ%3D%3D;DV=arPk%2BRhtodeAHMzW%2FqoqfkfCFpUR1CYM5oW%2FK7onqCf46Xqk2OR0LjLK%2BQL7jCS5yrcZA2r2hYulBxnpVa%2B8tO%2BJImuPOM9B8JkIbEAMHp%2BvNq8vcSj78wA%2FoW0Wgx8Sw9lSMno4CgPoNgF1mrkm9m9cd7U6wQS7WGKR6Wufxuvjlyt6zf5xtU2gq9WtsxOglu%2BXOYApwXiTIEO853sEnzlVNopwMbYkBm5Mu2LSEycyBm4A9nWKVCr9r0xisHCGzde3sBO4hY7WyykPK6vsU3Ds36FVNH3Kv7jx1Kf6tCVe9ukypCd8j%2FXJWAgPwv%2BsWcyA6ky9skKq1GDuoMJQ5A%3D%3D;ANID=modcr%2B3xO4FT10Fb3jE3afiK3eFqJCs1ylPBjge%2F6lgEM3Li5i5UZ%2BviQCBS1cuiaiQ%2F9Cj62z%2BapXfRMVWSFEeZTv9rkmPKmp5FZHUq5VLHNyhrBtjScNXwDZVakrx9ZYt1uzzh2X93c6Z6YQsyNWlkfdmlZS1FCGOf0aaVZfIRiUW%2FXX6zNVph%2FBpYTicXqZ1qaiPAWb5FNF%2BfJylCjmVDOFCZHJ4E6M0Pph%2BvvgjuCO9bRHWjI2Ouz%2B8ETyMBoQOkSDGzzInMeapRKmXYNDhdcEogwNmRkJqoRJjBhHzvbIYgCXGNJFWVnxywcZSaHfQwGonWClY3vT3PSlEnHg%3D%3D;"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x67f0d1db>",
                    "type": "UnknownWord",
                    "value": "2fq1f9a06t0wgc4covcqqo3cfsyww1ewab2tnfwqy8wbcdtobrgkjktmibsnsd"
                },
                "references": {
                    "sentences": [
                        "Cookie: CGIC=YKK%2BIFrld%2FC5FqKj%2Fq1F9a06T0WgC4cOvCqqo3cfsyww1EwAb2TNFWqy8wBcDtObrgkjKtmIBSnsD%2Bmn2eR6MzQeUvHqOBJqA%2FqYS3KEkUQoKUgpOfuW%2BTtuz2OjhVeOJ1oMWnellOIJ4IuNBO5aVtzV8AI3CD4H8Z9tgjhG7i6cXrsAh5EUwKjHqbeEBszHmUhSsCNx0vypRWWd6MkM1HBeENiww7W8GjhoXvX8AwZ5VDTRSX3QSr9jpUuWYXHmJDhOtdG%2FW9UAWEHYkv6IpRsGPKWtAdR%2FzHNzWmZRC3HsMP4LyIOXCs5O8lvUZH2Bv2gtZ1SGZOD0Kd7Oi4nFwA%3D%3D;HSID=gbN30kmxz%2BKKygRK6DJjGJ%2FzGQcMDOSmyQoYi9p2ITFNy6zMnfCERvugTwb5O%2FZyAJ5lGvveYZlNK3N%2BRoNPqCThC%2Fwr2OQbPA3aFJeXZerPSF7bWmhHVGGunlw8HqV3dcjs67tLT7irrJLctXzonzWE%2B6Ukd9kdFTNWW5j7s2JEEAcW9Dp6x6WIdRemz6HC3BifjKQ%2BmwvryFaI%2BsLRi9T042hwKQqV7ikOLOsHOOCqlCKs0vcpFS5vUXzdGwSWdONWLHMEkuApe5B%2BUC7bULbJvnoqnT1jFFEE3vm5gSU%2BGKIbVqBCseLx42av7mxWCmJfB1mpDH3K6tJof0YKpQ%3D%3D;DV=arPk%2BRhtodeAHMzW%2FqoqfkfCFpUR1CYM5oW%2FK7onqCf46Xqk2OR0LjLK%2BQL7jCS5yrcZA2r2hYulBxnpVa%2B8tO%2BJImuPOM9B8JkIbEAMHp%2BvNq8vcSj78wA%2FoW0Wgx8Sw9lSMno4CgPoNgF1mrkm9m9cd7U6wQS7WGKR6Wufxuvjlyt6zf5xtU2gq9WtsxOglu%2BXOYApwXiTIEO853sEnzlVNopwMbYkBm5Mu2LSEycyBm4A9nWKVCr9r0xisHCGzde3sBO4hY7WyykPK6vsU3Ds36FVNH3Kv7jx1Kf6tCVe9ukypCd8j%2FXJWAgPwv%2BsWcyA6ky9skKq1GDuoMJQ5A%3D%3D;ANID=modcr%2B3xO4FT10Fb3jE3afiK3eFqJCs1ylPBjge%2F6lgEM3Li5i5UZ%2BviQCBS1cuiaiQ%2F9Cj62z%2BapXfRMVWSFEeZTv9rkmPKmp5FZHUq5VLHNyhrBtjScNXwDZVakrx9ZYt1uzzh2X93c6Z6YQsyNWlkfdmlZS1FCGOf0aaVZfIRiUW%2FXX6zNVph%2FBpYTicXqZ1qaiPAWb5FNF%2BfJylCjmVDOFCZHJ4E6M0Pph%2BvvgjuCO9bRHWjI2Ouz%2B8ETyMBoQOkSDGzzInMeapRKmXYNDhdcEogwNmRkJqoRJjBhHzvbIYgCXGNJFWVnxywcZSaHfQwGonWClY3vT3PSlEnHg%3D%3D;"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x3bf9c599>",
                    "type": "UnknownWord",
                    "value": "2bmn2er6mzqeuvhqobjqa"
                },
                "references": {
                    "sentences": [
                        "Cookie: CGIC=YKK%2BIFrld%2FC5FqKj%2Fq1F9a06T0WgC4cOvCqqo3cfsyww1EwAb2TNFWqy8wBcDtObrgkjKtmIBSnsD%2Bmn2eR6MzQeUvHqOBJqA%2FqYS3KEkUQoKUgpOfuW%2BTtuz2OjhVeOJ1oMWnellOIJ4IuNBO5aVtzV8AI3CD4H8Z9tgjhG7i6cXrsAh5EUwKjHqbeEBszHmUhSsCNx0vypRWWd6MkM1HBeENiww7W8GjhoXvX8AwZ5VDTRSX3QSr9jpUuWYXHmJDhOtdG%2FW9UAWEHYkv6IpRsGPKWtAdR%2FzHNzWmZRC3HsMP4LyIOXCs5O8lvUZH2Bv2gtZ1SGZOD0Kd7Oi4nFwA%3D%3D;HSID=gbN30kmxz%2BKKygRK6DJjGJ%2FzGQcMDOSmyQoYi9p2ITFNy6zMnfCERvugTwb5O%2FZyAJ5lGvveYZlNK3N%2BRoNPqCThC%2Fwr2OQbPA3aFJeXZerPSF7bWmhHVGGunlw8HqV3dcjs67tLT7irrJLctXzonzWE%2B6Ukd9kdFTNWW5j7s2JEEAcW9Dp6x6WIdRemz6HC3BifjKQ%2BmwvryFaI%2BsLRi9T042hwKQqV7ikOLOsHOOCqlCKs0vcpFS5vUXzdGwSWdONWLHMEkuApe5B%2BUC7bULbJvnoqnT1jFFEE3vm5gSU%2BGKIbVqBCseLx42av7mxWCmJfB1mpDH3K6tJof0YKpQ%3D%3D;DV=arPk%2BRhtodeAHMzW%2FqoqfkfCFpUR1CYM5oW%2FK7onqCf46Xqk2OR0LjLK%2BQL7jCS5yrcZA2r2hYulBxnpVa%2B8tO%2BJImuPOM9B8JkIbEAMHp%2BvNq8vcSj78wA%2FoW0Wgx8Sw9lSMno4CgPoNgF1mrkm9m9cd7U6wQS7WGKR6Wufxuvjlyt6zf5xtU2gq9WtsxOglu%2BXOYApwXiTIEO853sEnzlVNopwMbYkBm5Mu2LSEycyBm4A9nWKVCr9r0xisHCGzde3sBO4hY7WyykPK6vsU3Ds36FVNH3Kv7jx1Kf6tCVe9ukypCd8j%2FXJWAgPwv%2BsWcyA6ky9skKq1GDuoMJQ5A%3D%3D;ANID=modcr%2B3xO4FT10Fb3jE3afiK3eFqJCs1ylPBjge%2F6lgEM3Li5i5UZ%2BviQCBS1cuiaiQ%2F9Cj62z%2BapXfRMVWSFEeZTv9rkmPKmp5FZHUq5VLHNyhrBtjScNXwDZVakrx9ZYt1uzzh2X93c6Z6YQsyNWlkfdmlZS1FCGOf0aaVZfIRiUW%2FXX6zNVph%2FBpYTicXqZ1qaiPAWb5FNF%2BfJylCjmVDOFCZHJ4E6M0Pph%2BvvgjuCO9bRHWjI2Ouz%2B8ETyMBoQOkSDGzzInMeapRKmXYNDhdcEogwNmRkJqoRJjBhHzvbIYgCXGNJFWVnxywcZSaHfQwGonWClY3vT3PSlEnHg%3D%3D;"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x7a7a7cf2>",
                    "type": "UnknownWord",
                    "value": "2fqys3kekuqokugpofuw"
                },
                "references": {
                    "sentences": [
                        "Cookie: CGIC=YKK%2BIFrld%2FC5FqKj%2Fq1F9a06T0WgC4cOvCqqo3cfsyww1EwAb2TNFWqy8wBcDtObrgkjKtmIBSnsD%2Bmn2eR6MzQeUvHqOBJqA%2FqYS3KEkUQoKUgpOfuW%2BTtuz2OjhVeOJ1oMWnellOIJ4IuNBO5aVtzV8AI3CD4H8Z9tgjhG7i6cXrsAh5EUwKjHqbeEBszHmUhSsCNx0vypRWWd6MkM1HBeENiww7W8GjhoXvX8AwZ5VDTRSX3QSr9jpUuWYXHmJDhOtdG%2FW9UAWEHYkv6IpRsGPKWtAdR%2FzHNzWmZRC3HsMP4LyIOXCs5O8lvUZH2Bv2gtZ1SGZOD0Kd7Oi4nFwA%3D%3D;HSID=gbN30kmxz%2BKKygRK6DJjGJ%2FzGQcMDOSmyQoYi9p2ITFNy6zMnfCERvugTwb5O%2FZyAJ5lGvveYZlNK3N%2BRoNPqCThC%2Fwr2OQbPA3aFJeXZerPSF7bWmhHVGGunlw8HqV3dcjs67tLT7irrJLctXzonzWE%2B6Ukd9kdFTNWW5j7s2JEEAcW9Dp6x6WIdRemz6HC3BifjKQ%2BmwvryFaI%2BsLRi9T042hwKQqV7ikOLOsHOOCqlCKs0vcpFS5vUXzdGwSWdONWLHMEkuApe5B%2BUC7bULbJvnoqnT1jFFEE3vm5gSU%2BGKIbVqBCseLx42av7mxWCmJfB1mpDH3K6tJof0YKpQ%3D%3D;DV=arPk%2BRhtodeAHMzW%2FqoqfkfCFpUR1CYM5oW%2FK7onqCf46Xqk2OR0LjLK%2BQL7jCS5yrcZA2r2hYulBxnpVa%2B8tO%2BJImuPOM9B8JkIbEAMHp%2BvNq8vcSj78wA%2FoW0Wgx8Sw9lSMno4CgPoNgF1mrkm9m9cd7U6wQS7WGKR6Wufxuvjlyt6zf5xtU2gq9WtsxOglu%2BXOYApwXiTIEO853sEnzlVNopwMbYkBm5Mu2LSEycyBm4A9nWKVCr9r0xisHCGzde3sBO4hY7WyykPK6vsU3Ds36FVNH3Kv7jx1Kf6tCVe9ukypCd8j%2FXJWAgPwv%2BsWcyA6ky9skKq1GDuoMJQ5A%3D%3D;ANID=modcr%2B3xO4FT10Fb3jE3afiK3eFqJCs1ylPBjge%2F6lgEM3Li5i5UZ%2BviQCBS1cuiaiQ%2F9Cj62z%2BapXfRMVWSFEeZTv9rkmPKmp5FZHUq5VLHNyhrBtjScNXwDZVakrx9ZYt1uzzh2X93c6Z6YQsyNWlkfdmlZS1FCGOf0aaVZfIRiUW%2FXX6zNVph%2FBpYTicXqZ1qaiPAWb5FNF%2BfJylCjmVDOFCZHJ4E6M0Pph%2BvvgjuCO9bRHWjI2Ouz%2B8ETyMBoQOkSDGzzInMeapRKmXYNDhdcEogwNmRkJqoRJjBhHzvbIYgCXGNJFWVnxywcZSaHfQwGonWClY3vT3PSlEnHg%3D%3D;"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x939d8a0f>",
                    "type": "UnknownWord",
                    "value": "2bttuz2ojhveoj1omwnelloij4iunbo5avtzv8ai3cd4h8z9tgjhg7i6cxrsah5euwkjhqbeebszhmuhsscnx0vyprwwd6mkm1hbeeniww7w8gjhoxvx8awz5vdtrsx3qsr9jpuuwyxhmjdhotdg"
                },
                "references": {
                    "sentences": [
                        "Cookie: CGIC=YKK%2BIFrld%2FC5FqKj%2Fq1F9a06T0WgC4cOvCqqo3cfsyww1EwAb2TNFWqy8wBcDtObrgkjKtmIBSnsD%2Bmn2eR6MzQeUvHqOBJqA%2FqYS3KEkUQoKUgpOfuW%2BTtuz2OjhVeOJ1oMWnellOIJ4IuNBO5aVtzV8AI3CD4H8Z9tgjhG7i6cXrsAh5EUwKjHqbeEBszHmUhSsCNx0vypRWWd6MkM1HBeENiww7W8GjhoXvX8AwZ5VDTRSX3QSr9jpUuWYXHmJDhOtdG%2FW9UAWEHYkv6IpRsGPKWtAdR%2FzHNzWmZRC3HsMP4LyIOXCs5O8lvUZH2Bv2gtZ1SGZOD0Kd7Oi4nFwA%3D%3D;HSID=gbN30kmxz%2BKKygRK6DJjGJ%2FzGQcMDOSmyQoYi9p2ITFNy6zMnfCERvugTwb5O%2FZyAJ5lGvveYZlNK3N%2BRoNPqCThC%2Fwr2OQbPA3aFJeXZerPSF7bWmhHVGGunlw8HqV3dcjs67tLT7irrJLctXzonzWE%2B6Ukd9kdFTNWW5j7s2JEEAcW9Dp6x6WIdRemz6HC3BifjKQ%2BmwvryFaI%2BsLRi9T042hwKQqV7ikOLOsHOOCqlCKs0vcpFS5vUXzdGwSWdONWLHMEkuApe5B%2BUC7bULbJvnoqnT1jFFEE3vm5gSU%2BGKIbVqBCseLx42av7mxWCmJfB1mpDH3K6tJof0YKpQ%3D%3D;DV=arPk%2BRhtodeAHMzW%2FqoqfkfCFpUR1CYM5oW%2FK7onqCf46Xqk2OR0LjLK%2BQL7jCS5yrcZA2r2hYulBxnpVa%2B8tO%2BJImuPOM9B8JkIbEAMHp%2BvNq8vcSj78wA%2FoW0Wgx8Sw9lSMno4CgPoNgF1mrkm9m9cd7U6wQS7WGKR6Wufxuvjlyt6zf5xtU2gq9WtsxOglu%2BXOYApwXiTIEO853sEnzlVNopwMbYkBm5Mu2LSEycyBm4A9nWKVCr9r0xisHCGzde3sBO4hY7WyykPK6vsU3Ds36FVNH3Kv7jx1Kf6tCVe9ukypCd8j%2FXJWAgPwv%2BsWcyA6ky9skKq1GDuoMJQ5A%3D%3D;ANID=modcr%2B3xO4FT10Fb3jE3afiK3eFqJCs1ylPBjge%2F6lgEM3Li5i5UZ%2BviQCBS1cuiaiQ%2F9Cj62z%2BapXfRMVWSFEeZTv9rkmPKmp5FZHUq5VLHNyhrBtjScNXwDZVakrx9ZYt1uzzh2X93c6Z6YQsyNWlkfdmlZS1FCGOf0aaVZfIRiUW%2FXX6zNVph%2FBpYTicXqZ1qaiPAWb5FNF%2BfJylCjmVDOFCZHJ4E6M0Pph%2BvvgjuCO9bRHWjI2Ouz%2B8ETyMBoQOkSDGzzInMeapRKmXYNDhdcEogwNmRkJqoRJjBhHzvbIYgCXGNJFWVnxywcZSaHfQwGonWClY3vT3PSlEnHg%3D%3D;"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xbb709656>",
                    "type": "UnknownWord",
                    "value": "2fw9uawehykv6iprsgpkwtadr"
                },
                "references": {
                    "sentences": [
                        "Cookie: CGIC=YKK%2BIFrld%2FC5FqKj%2Fq1F9a06T0WgC4cOvCqqo3cfsyww1EwAb2TNFWqy8wBcDtObrgkjKtmIBSnsD%2Bmn2eR6MzQeUvHqOBJqA%2FqYS3KEkUQoKUgpOfuW%2BTtuz2OjhVeOJ1oMWnellOIJ4IuNBO5aVtzV8AI3CD4H8Z9tgjhG7i6cXrsAh5EUwKjHqbeEBszHmUhSsCNx0vypRWWd6MkM1HBeENiww7W8GjhoXvX8AwZ5VDTRSX3QSr9jpUuWYXHmJDhOtdG%2FW9UAWEHYkv6IpRsGPKWtAdR%2FzHNzWmZRC3HsMP4LyIOXCs5O8lvUZH2Bv2gtZ1SGZOD0Kd7Oi4nFwA%3D%3D;HSID=gbN30kmxz%2BKKygRK6DJjGJ%2FzGQcMDOSmyQoYi9p2ITFNy6zMnfCERvugTwb5O%2FZyAJ5lGvveYZlNK3N%2BRoNPqCThC%2Fwr2OQbPA3aFJeXZerPSF7bWmhHVGGunlw8HqV3dcjs67tLT7irrJLctXzonzWE%2B6Ukd9kdFTNWW5j7s2JEEAcW9Dp6x6WIdRemz6HC3BifjKQ%2BmwvryFaI%2BsLRi9T042hwKQqV7ikOLOsHOOCqlCKs0vcpFS5vUXzdGwSWdONWLHMEkuApe5B%2BUC7bULbJvnoqnT1jFFEE3vm5gSU%2BGKIbVqBCseLx42av7mxWCmJfB1mpDH3K6tJof0YKpQ%3D%3D;DV=arPk%2BRhtodeAHMzW%2FqoqfkfCFpUR1CYM5oW%2FK7onqCf46Xqk2OR0LjLK%2BQL7jCS5yrcZA2r2hYulBxnpVa%2B8tO%2BJImuPOM9B8JkIbEAMHp%2BvNq8vcSj78wA%2FoW0Wgx8Sw9lSMno4CgPoNgF1mrkm9m9cd7U6wQS7WGKR6Wufxuvjlyt6zf5xtU2gq9WtsxOglu%2BXOYApwXiTIEO853sEnzlVNopwMbYkBm5Mu2LSEycyBm4A9nWKVCr9r0xisHCGzde3sBO4hY7WyykPK6vsU3Ds36FVNH3Kv7jx1Kf6tCVe9ukypCd8j%2FXJWAgPwv%2BsWcyA6ky9skKq1GDuoMJQ5A%3D%3D;ANID=modcr%2B3xO4FT10Fb3jE3afiK3eFqJCs1ylPBjge%2F6lgEM3Li5i5UZ%2BviQCBS1cuiaiQ%2F9Cj62z%2BapXfRMVWSFEeZTv9rkmPKmp5FZHUq5VLHNyhrBtjScNXwDZVakrx9ZYt1uzzh2X93c6Z6YQsyNWlkfdmlZS1FCGOf0aaVZfIRiUW%2FXX6zNVph%2FBpYTicXqZ1qaiPAWb5FNF%2BfJylCjmVDOFCZHJ4E6M0Pph%2BvvgjuCO9bRHWjI2Ouz%2B8ETyMBoQOkSDGzzInMeapRKmXYNDhdcEogwNmRkJqoRJjBhHzvbIYgCXGNJFWVnxywcZSaHfQwGonWClY3vT3PSlEnHg%3D%3D;"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x6a36ffc4>",
                    "type": "UnknownWord",
                    "value": "2fzhnzwmzrc3hsmp4lyioxcs5o8lvuzh2bv2gtz1sgzod0kd7oi4nfwa"
                },
                "references": {
                    "sentences": [
                        "Cookie: CGIC=YKK%2BIFrld%2FC5FqKj%2Fq1F9a06T0WgC4cOvCqqo3cfsyww1EwAb2TNFWqy8wBcDtObrgkjKtmIBSnsD%2Bmn2eR6MzQeUvHqOBJqA%2FqYS3KEkUQoKUgpOfuW%2BTtuz2OjhVeOJ1oMWnellOIJ4IuNBO5aVtzV8AI3CD4H8Z9tgjhG7i6cXrsAh5EUwKjHqbeEBszHmUhSsCNx0vypRWWd6MkM1HBeENiww7W8GjhoXvX8AwZ5VDTRSX3QSr9jpUuWYXHmJDhOtdG%2FW9UAWEHYkv6IpRsGPKWtAdR%2FzHNzWmZRC3HsMP4LyIOXCs5O8lvUZH2Bv2gtZ1SGZOD0Kd7Oi4nFwA%3D%3D;HSID=gbN30kmxz%2BKKygRK6DJjGJ%2FzGQcMDOSmyQoYi9p2ITFNy6zMnfCERvugTwb5O%2FZyAJ5lGvveYZlNK3N%2BRoNPqCThC%2Fwr2OQbPA3aFJeXZerPSF7bWmhHVGGunlw8HqV3dcjs67tLT7irrJLctXzonzWE%2B6Ukd9kdFTNWW5j7s2JEEAcW9Dp6x6WIdRemz6HC3BifjKQ%2BmwvryFaI%2BsLRi9T042hwKQqV7ikOLOsHOOCqlCKs0vcpFS5vUXzdGwSWdONWLHMEkuApe5B%2BUC7bULbJvnoqnT1jFFEE3vm5gSU%2BGKIbVqBCseLx42av7mxWCmJfB1mpDH3K6tJof0YKpQ%3D%3D;DV=arPk%2BRhtodeAHMzW%2FqoqfkfCFpUR1CYM5oW%2FK7onqCf46Xqk2OR0LjLK%2BQL7jCS5yrcZA2r2hYulBxnpVa%2B8tO%2BJImuPOM9B8JkIbEAMHp%2BvNq8vcSj78wA%2FoW0Wgx8Sw9lSMno4CgPoNgF1mrkm9m9cd7U6wQS7WGKR6Wufxuvjlyt6zf5xtU2gq9WtsxOglu%2BXOYApwXiTIEO853sEnzlVNopwMbYkBm5Mu2LSEycyBm4A9nWKVCr9r0xisHCGzde3sBO4hY7WyykPK6vsU3Ds36FVNH3Kv7jx1Kf6tCVe9ukypCd8j%2FXJWAgPwv%2BsWcyA6ky9skKq1GDuoMJQ5A%3D%3D;ANID=modcr%2B3xO4FT10Fb3jE3afiK3eFqJCs1ylPBjge%2F6lgEM3Li5i5UZ%2BviQCBS1cuiaiQ%2F9Cj62z%2BapXfRMVWSFEeZTv9rkmPKmp5FZHUq5VLHNyhrBtjScNXwDZVakrx9ZYt1uzzh2X93c6Z6YQsyNWlkfdmlZS1FCGOf0aaVZfIRiUW%2FXX6zNVph%2FBpYTicXqZ1qaiPAWb5FNF%2BfJylCjmVDOFCZHJ4E6M0Pph%2BvvgjuCO9bRHWjI2Ouz%2B8ETyMBoQOkSDGzzInMeapRKmXYNDhdcEogwNmRkJqoRJjBhHzvbIYgCXGNJFWVnxywcZSaHfQwGonWClY3vT3PSlEnHg%3D%3D;"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x4d4c954b>",
                    "type": "UnknownWord",
                    "value": "hsid"
                },
                "references": {
                    "sentences": [
                        "Cookie: CGIC=YKK%2BIFrld%2FC5FqKj%2Fq1F9a06T0WgC4cOvCqqo3cfsyww1EwAb2TNFWqy8wBcDtObrgkjKtmIBSnsD%2Bmn2eR6MzQeUvHqOBJqA%2FqYS3KEkUQoKUgpOfuW%2BTtuz2OjhVeOJ1oMWnellOIJ4IuNBO5aVtzV8AI3CD4H8Z9tgjhG7i6cXrsAh5EUwKjHqbeEBszHmUhSsCNx0vypRWWd6MkM1HBeENiww7W8GjhoXvX8AwZ5VDTRSX3QSr9jpUuWYXHmJDhOtdG%2FW9UAWEHYkv6IpRsGPKWtAdR%2FzHNzWmZRC3HsMP4LyIOXCs5O8lvUZH2Bv2gtZ1SGZOD0Kd7Oi4nFwA%3D%3D;HSID=gbN30kmxz%2BKKygRK6DJjGJ%2FzGQcMDOSmyQoYi9p2ITFNy6zMnfCERvugTwb5O%2FZyAJ5lGvveYZlNK3N%2BRoNPqCThC%2Fwr2OQbPA3aFJeXZerPSF7bWmhHVGGunlw8HqV3dcjs67tLT7irrJLctXzonzWE%2B6Ukd9kdFTNWW5j7s2JEEAcW9Dp6x6WIdRemz6HC3BifjKQ%2BmwvryFaI%2BsLRi9T042hwKQqV7ikOLOsHOOCqlCKs0vcpFS5vUXzdGwSWdONWLHMEkuApe5B%2BUC7bULbJvnoqnT1jFFEE3vm5gSU%2BGKIbVqBCseLx42av7mxWCmJfB1mpDH3K6tJof0YKpQ%3D%3D;DV=arPk%2BRhtodeAHMzW%2FqoqfkfCFpUR1CYM5oW%2FK7onqCf46Xqk2OR0LjLK%2BQL7jCS5yrcZA2r2hYulBxnpVa%2B8tO%2BJImuPOM9B8JkIbEAMHp%2BvNq8vcSj78wA%2FoW0Wgx8Sw9lSMno4CgPoNgF1mrkm9m9cd7U6wQS7WGKR6Wufxuvjlyt6zf5xtU2gq9WtsxOglu%2BXOYApwXiTIEO853sEnzlVNopwMbYkBm5Mu2LSEycyBm4A9nWKVCr9r0xisHCGzde3sBO4hY7WyykPK6vsU3Ds36FVNH3Kv7jx1Kf6tCVe9ukypCd8j%2FXJWAgPwv%2BsWcyA6ky9skKq1GDuoMJQ5A%3D%3D;ANID=modcr%2B3xO4FT10Fb3jE3afiK3eFqJCs1ylPBjge%2F6lgEM3Li5i5UZ%2BviQCBS1cuiaiQ%2F9Cj62z%2BapXfRMVWSFEeZTv9rkmPKmp5FZHUq5VLHNyhrBtjScNXwDZVakrx9ZYt1uzzh2X93c6Z6YQsyNWlkfdmlZS1FCGOf0aaVZfIRiUW%2FXX6zNVph%2FBpYTicXqZ1qaiPAWb5FNF%2BfJylCjmVDOFCZHJ4E6M0Pph%2BvvgjuCO9bRHWjI2Ouz%2B8ETyMBoQOkSDGzzInMeapRKmXYNDhdcEogwNmRkJqoRJjBhHzvbIYgCXGNJFWVnxywcZSaHfQwGonWClY3vT3PSlEnHg%3D%3D;"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xf01e3290>",
                    "type": "UnknownWord",
                    "value": "gbn30kmxz"
                },
                "references": {
                    "sentences": [
                        "Cookie: CGIC=YKK%2BIFrld%2FC5FqKj%2Fq1F9a06T0WgC4cOvCqqo3cfsyww1EwAb2TNFWqy8wBcDtObrgkjKtmIBSnsD%2Bmn2eR6MzQeUvHqOBJqA%2FqYS3KEkUQoKUgpOfuW%2BTtuz2OjhVeOJ1oMWnellOIJ4IuNBO5aVtzV8AI3CD4H8Z9tgjhG7i6cXrsAh5EUwKjHqbeEBszHmUhSsCNx0vypRWWd6MkM1HBeENiww7W8GjhoXvX8AwZ5VDTRSX3QSr9jpUuWYXHmJDhOtdG%2FW9UAWEHYkv6IpRsGPKWtAdR%2FzHNzWmZRC3HsMP4LyIOXCs5O8lvUZH2Bv2gtZ1SGZOD0Kd7Oi4nFwA%3D%3D;HSID=gbN30kmxz%2BKKygRK6DJjGJ%2FzGQcMDOSmyQoYi9p2ITFNy6zMnfCERvugTwb5O%2FZyAJ5lGvveYZlNK3N%2BRoNPqCThC%2Fwr2OQbPA3aFJeXZerPSF7bWmhHVGGunlw8HqV3dcjs67tLT7irrJLctXzonzWE%2B6Ukd9kdFTNWW5j7s2JEEAcW9Dp6x6WIdRemz6HC3BifjKQ%2BmwvryFaI%2BsLRi9T042hwKQqV7ikOLOsHOOCqlCKs0vcpFS5vUXzdGwSWdONWLHMEkuApe5B%2BUC7bULbJvnoqnT1jFFEE3vm5gSU%2BGKIbVqBCseLx42av7mxWCmJfB1mpDH3K6tJof0YKpQ%3D%3D;DV=arPk%2BRhtodeAHMzW%2FqoqfkfCFpUR1CYM5oW%2FK7onqCf46Xqk2OR0LjLK%2BQL7jCS5yrcZA2r2hYulBxnpVa%2B8tO%2BJImuPOM9B8JkIbEAMHp%2BvNq8vcSj78wA%2FoW0Wgx8Sw9lSMno4CgPoNgF1mrkm9m9cd7U6wQS7WGKR6Wufxuvjlyt6zf5xtU2gq9WtsxOglu%2BXOYApwXiTIEO853sEnzlVNopwMbYkBm5Mu2LSEycyBm4A9nWKVCr9r0xisHCGzde3sBO4hY7WyykPK6vsU3Ds36FVNH3Kv7jx1Kf6tCVe9ukypCd8j%2FXJWAgPwv%2BsWcyA6ky9skKq1GDuoMJQ5A%3D%3D;ANID=modcr%2B3xO4FT10Fb3jE3afiK3eFqJCs1ylPBjge%2F6lgEM3Li5i5UZ%2BviQCBS1cuiaiQ%2F9Cj62z%2BapXfRMVWSFEeZTv9rkmPKmp5FZHUq5VLHNyhrBtjScNXwDZVakrx9ZYt1uzzh2X93c6Z6YQsyNWlkfdmlZS1FCGOf0aaVZfIRiUW%2FXX6zNVph%2FBpYTicXqZ1qaiPAWb5FNF%2BfJylCjmVDOFCZHJ4E6M0Pph%2BvvgjuCO9bRHWjI2Ouz%2B8ETyMBoQOkSDGzzInMeapRKmXYNDhdcEogwNmRkJqoRJjBhHzvbIYgCXGNJFWVnxywcZSaHfQwGonWClY3vT3PSlEnHg%3D%3D;"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xd6dc92fb>",
                    "type": "UnknownWord",
                    "value": "2bkkygrk6djjgj"
                },
                "references": {
                    "sentences": [
                        "Cookie: CGIC=YKK%2BIFrld%2FC5FqKj%2Fq1F9a06T0WgC4cOvCqqo3cfsyww1EwAb2TNFWqy8wBcDtObrgkjKtmIBSnsD%2Bmn2eR6MzQeUvHqOBJqA%2FqYS3KEkUQoKUgpOfuW%2BTtuz2OjhVeOJ1oMWnellOIJ4IuNBO5aVtzV8AI3CD4H8Z9tgjhG7i6cXrsAh5EUwKjHqbeEBszHmUhSsCNx0vypRWWd6MkM1HBeENiww7W8GjhoXvX8AwZ5VDTRSX3QSr9jpUuWYXHmJDhOtdG%2FW9UAWEHYkv6IpRsGPKWtAdR%2FzHNzWmZRC3HsMP4LyIOXCs5O8lvUZH2Bv2gtZ1SGZOD0Kd7Oi4nFwA%3D%3D;HSID=gbN30kmxz%2BKKygRK6DJjGJ%2FzGQcMDOSmyQoYi9p2ITFNy6zMnfCERvugTwb5O%2FZyAJ5lGvveYZlNK3N%2BRoNPqCThC%2Fwr2OQbPA3aFJeXZerPSF7bWmhHVGGunlw8HqV3dcjs67tLT7irrJLctXzonzWE%2B6Ukd9kdFTNWW5j7s2JEEAcW9Dp6x6WIdRemz6HC3BifjKQ%2BmwvryFaI%2BsLRi9T042hwKQqV7ikOLOsHOOCqlCKs0vcpFS5vUXzdGwSWdONWLHMEkuApe5B%2BUC7bULbJvnoqnT1jFFEE3vm5gSU%2BGKIbVqBCseLx42av7mxWCmJfB1mpDH3K6tJof0YKpQ%3D%3D;DV=arPk%2BRhtodeAHMzW%2FqoqfkfCFpUR1CYM5oW%2FK7onqCf46Xqk2OR0LjLK%2BQL7jCS5yrcZA2r2hYulBxnpVa%2B8tO%2BJImuPOM9B8JkIbEAMHp%2BvNq8vcSj78wA%2FoW0Wgx8Sw9lSMno4CgPoNgF1mrkm9m9cd7U6wQS7WGKR6Wufxuvjlyt6zf5xtU2gq9WtsxOglu%2BXOYApwXiTIEO853sEnzlVNopwMbYkBm5Mu2LSEycyBm4A9nWKVCr9r0xisHCGzde3sBO4hY7WyykPK6vsU3Ds36FVNH3Kv7jx1Kf6tCVe9ukypCd8j%2FXJWAgPwv%2BsWcyA6ky9skKq1GDuoMJQ5A%3D%3D;ANID=modcr%2B3xO4FT10Fb3jE3afiK3eFqJCs1ylPBjge%2F6lgEM3Li5i5UZ%2BviQCBS1cuiaiQ%2F9Cj62z%2BapXfRMVWSFEeZTv9rkmPKmp5FZHUq5VLHNyhrBtjScNXwDZVakrx9ZYt1uzzh2X93c6Z6YQsyNWlkfdmlZS1FCGOf0aaVZfIRiUW%2FXX6zNVph%2FBpYTicXqZ1qaiPAWb5FNF%2BfJylCjmVDOFCZHJ4E6M0Pph%2BvvgjuCO9bRHWjI2Ouz%2B8ETyMBoQOkSDGzzInMeapRKmXYNDhdcEogwNmRkJqoRJjBhHzvbIYgCXGNJFWVnxywcZSaHfQwGonWClY3vT3PSlEnHg%3D%3D;"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x9c54bed3>",
                    "type": "UnknownWord",
                    "value": "2fzgqcmdosmyqoyi9p2itfny6zmnfcervugtwb5o"
                },
                "references": {
                    "sentences": [
                        "Cookie: CGIC=YKK%2BIFrld%2FC5FqKj%2Fq1F9a06T0WgC4cOvCqqo3cfsyww1EwAb2TNFWqy8wBcDtObrgkjKtmIBSnsD%2Bmn2eR6MzQeUvHqOBJqA%2FqYS3KEkUQoKUgpOfuW%2BTtuz2OjhVeOJ1oMWnellOIJ4IuNBO5aVtzV8AI3CD4H8Z9tgjhG7i6cXrsAh5EUwKjHqbeEBszHmUhSsCNx0vypRWWd6MkM1HBeENiww7W8GjhoXvX8AwZ5VDTRSX3QSr9jpUuWYXHmJDhOtdG%2FW9UAWEHYkv6IpRsGPKWtAdR%2FzHNzWmZRC3HsMP4LyIOXCs5O8lvUZH2Bv2gtZ1SGZOD0Kd7Oi4nFwA%3D%3D;HSID=gbN30kmxz%2BKKygRK6DJjGJ%2FzGQcMDOSmyQoYi9p2ITFNy6zMnfCERvugTwb5O%2FZyAJ5lGvveYZlNK3N%2BRoNPqCThC%2Fwr2OQbPA3aFJeXZerPSF7bWmhHVGGunlw8HqV3dcjs67tLT7irrJLctXzonzWE%2B6Ukd9kdFTNWW5j7s2JEEAcW9Dp6x6WIdRemz6HC3BifjKQ%2BmwvryFaI%2BsLRi9T042hwKQqV7ikOLOsHOOCqlCKs0vcpFS5vUXzdGwSWdONWLHMEkuApe5B%2BUC7bULbJvnoqnT1jFFEE3vm5gSU%2BGKIbVqBCseLx42av7mxWCmJfB1mpDH3K6tJof0YKpQ%3D%3D;DV=arPk%2BRhtodeAHMzW%2FqoqfkfCFpUR1CYM5oW%2FK7onqCf46Xqk2OR0LjLK%2BQL7jCS5yrcZA2r2hYulBxnpVa%2B8tO%2BJImuPOM9B8JkIbEAMHp%2BvNq8vcSj78wA%2FoW0Wgx8Sw9lSMno4CgPoNgF1mrkm9m9cd7U6wQS7WGKR6Wufxuvjlyt6zf5xtU2gq9WtsxOglu%2BXOYApwXiTIEO853sEnzlVNopwMbYkBm5Mu2LSEycyBm4A9nWKVCr9r0xisHCGzde3sBO4hY7WyykPK6vsU3Ds36FVNH3Kv7jx1Kf6tCVe9ukypCd8j%2FXJWAgPwv%2BsWcyA6ky9skKq1GDuoMJQ5A%3D%3D;ANID=modcr%2B3xO4FT10Fb3jE3afiK3eFqJCs1ylPBjge%2F6lgEM3Li5i5UZ%2BviQCBS1cuiaiQ%2F9Cj62z%2BapXfRMVWSFEeZTv9rkmPKmp5FZHUq5VLHNyhrBtjScNXwDZVakrx9ZYt1uzzh2X93c6Z6YQsyNWlkfdmlZS1FCGOf0aaVZfIRiUW%2FXX6zNVph%2FBpYTicXqZ1qaiPAWb5FNF%2BfJylCjmVDOFCZHJ4E6M0Pph%2BvvgjuCO9bRHWjI2Ouz%2B8ETyMBoQOkSDGzzInMeapRKmXYNDhdcEogwNmRkJqoRJjBhHzvbIYgCXGNJFWVnxywcZSaHfQwGonWClY3vT3PSlEnHg%3D%3D;"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x1d8b33e7>",
                    "type": "UnknownWord",
                    "value": "2fzyaj5lgvveyzlnk3n"
                },
                "references": {
                    "sentences": [
                        "Cookie: CGIC=YKK%2BIFrld%2FC5FqKj%2Fq1F9a06T0WgC4cOvCqqo3cfsyww1EwAb2TNFWqy8wBcDtObrgkjKtmIBSnsD%2Bmn2eR6MzQeUvHqOBJqA%2FqYS3KEkUQoKUgpOfuW%2BTtuz2OjhVeOJ1oMWnellOIJ4IuNBO5aVtzV8AI3CD4H8Z9tgjhG7i6cXrsAh5EUwKjHqbeEBszHmUhSsCNx0vypRWWd6MkM1HBeENiww7W8GjhoXvX8AwZ5VDTRSX3QSr9jpUuWYXHmJDhOtdG%2FW9UAWEHYkv6IpRsGPKWtAdR%2FzHNzWmZRC3HsMP4LyIOXCs5O8lvUZH2Bv2gtZ1SGZOD0Kd7Oi4nFwA%3D%3D;HSID=gbN30kmxz%2BKKygRK6DJjGJ%2FzGQcMDOSmyQoYi9p2ITFNy6zMnfCERvugTwb5O%2FZyAJ5lGvveYZlNK3N%2BRoNPqCThC%2Fwr2OQbPA3aFJeXZerPSF7bWmhHVGGunlw8HqV3dcjs67tLT7irrJLctXzonzWE%2B6Ukd9kdFTNWW5j7s2JEEAcW9Dp6x6WIdRemz6HC3BifjKQ%2BmwvryFaI%2BsLRi9T042hwKQqV7ikOLOsHOOCqlCKs0vcpFS5vUXzdGwSWdONWLHMEkuApe5B%2BUC7bULbJvnoqnT1jFFEE3vm5gSU%2BGKIbVqBCseLx42av7mxWCmJfB1mpDH3K6tJof0YKpQ%3D%3D;DV=arPk%2BRhtodeAHMzW%2FqoqfkfCFpUR1CYM5oW%2FK7onqCf46Xqk2OR0LjLK%2BQL7jCS5yrcZA2r2hYulBxnpVa%2B8tO%2BJImuPOM9B8JkIbEAMHp%2BvNq8vcSj78wA%2FoW0Wgx8Sw9lSMno4CgPoNgF1mrkm9m9cd7U6wQS7WGKR6Wufxuvjlyt6zf5xtU2gq9WtsxOglu%2BXOYApwXiTIEO853sEnzlVNopwMbYkBm5Mu2LSEycyBm4A9nWKVCr9r0xisHCGzde3sBO4hY7WyykPK6vsU3Ds36FVNH3Kv7jx1Kf6tCVe9ukypCd8j%2FXJWAgPwv%2BsWcyA6ky9skKq1GDuoMJQ5A%3D%3D;ANID=modcr%2B3xO4FT10Fb3jE3afiK3eFqJCs1ylPBjge%2F6lgEM3Li5i5UZ%2BviQCBS1cuiaiQ%2F9Cj62z%2BapXfRMVWSFEeZTv9rkmPKmp5FZHUq5VLHNyhrBtjScNXwDZVakrx9ZYt1uzzh2X93c6Z6YQsyNWlkfdmlZS1FCGOf0aaVZfIRiUW%2FXX6zNVph%2FBpYTicXqZ1qaiPAWb5FNF%2BfJylCjmVDOFCZHJ4E6M0Pph%2BvvgjuCO9bRHWjI2Ouz%2B8ETyMBoQOkSDGzzInMeapRKmXYNDhdcEogwNmRkJqoRJjBhHzvbIYgCXGNJFWVnxywcZSaHfQwGonWClY3vT3PSlEnHg%3D%3D;"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x333ab51f>",
                    "type": "UnknownWord",
                    "value": "2bronpqcthc"
                },
                "references": {
                    "sentences": [
                        "Cookie: CGIC=YKK%2BIFrld%2FC5FqKj%2Fq1F9a06T0WgC4cOvCqqo3cfsyww1EwAb2TNFWqy8wBcDtObrgkjKtmIBSnsD%2Bmn2eR6MzQeUvHqOBJqA%2FqYS3KEkUQoKUgpOfuW%2BTtuz2OjhVeOJ1oMWnellOIJ4IuNBO5aVtzV8AI3CD4H8Z9tgjhG7i6cXrsAh5EUwKjHqbeEBszHmUhSsCNx0vypRWWd6MkM1HBeENiww7W8GjhoXvX8AwZ5VDTRSX3QSr9jpUuWYXHmJDhOtdG%2FW9UAWEHYkv6IpRsGPKWtAdR%2FzHNzWmZRC3HsMP4LyIOXCs5O8lvUZH2Bv2gtZ1SGZOD0Kd7Oi4nFwA%3D%3D;HSID=gbN30kmxz%2BKKygRK6DJjGJ%2FzGQcMDOSmyQoYi9p2ITFNy6zMnfCERvugTwb5O%2FZyAJ5lGvveYZlNK3N%2BRoNPqCThC%2Fwr2OQbPA3aFJeXZerPSF7bWmhHVGGunlw8HqV3dcjs67tLT7irrJLctXzonzWE%2B6Ukd9kdFTNWW5j7s2JEEAcW9Dp6x6WIdRemz6HC3BifjKQ%2BmwvryFaI%2BsLRi9T042hwKQqV7ikOLOsHOOCqlCKs0vcpFS5vUXzdGwSWdONWLHMEkuApe5B%2BUC7bULbJvnoqnT1jFFEE3vm5gSU%2BGKIbVqBCseLx42av7mxWCmJfB1mpDH3K6tJof0YKpQ%3D%3D;DV=arPk%2BRhtodeAHMzW%2FqoqfkfCFpUR1CYM5oW%2FK7onqCf46Xqk2OR0LjLK%2BQL7jCS5yrcZA2r2hYulBxnpVa%2B8tO%2BJImuPOM9B8JkIbEAMHp%2BvNq8vcSj78wA%2FoW0Wgx8Sw9lSMno4CgPoNgF1mrkm9m9cd7U6wQS7WGKR6Wufxuvjlyt6zf5xtU2gq9WtsxOglu%2BXOYApwXiTIEO853sEnzlVNopwMbYkBm5Mu2LSEycyBm4A9nWKVCr9r0xisHCGzde3sBO4hY7WyykPK6vsU3Ds36FVNH3Kv7jx1Kf6tCVe9ukypCd8j%2FXJWAgPwv%2BsWcyA6ky9skKq1GDuoMJQ5A%3D%3D;ANID=modcr%2B3xO4FT10Fb3jE3afiK3eFqJCs1ylPBjge%2F6lgEM3Li5i5UZ%2BviQCBS1cuiaiQ%2F9Cj62z%2BapXfRMVWSFEeZTv9rkmPKmp5FZHUq5VLHNyhrBtjScNXwDZVakrx9ZYt1uzzh2X93c6Z6YQsyNWlkfdmlZS1FCGOf0aaVZfIRiUW%2FXX6zNVph%2FBpYTicXqZ1qaiPAWb5FNF%2BfJylCjmVDOFCZHJ4E6M0Pph%2BvvgjuCO9bRHWjI2Ouz%2B8ETyMBoQOkSDGzzInMeapRKmXYNDhdcEogwNmRkJqoRJjBhHzvbIYgCXGNJFWVnxywcZSaHfQwGonWClY3vT3PSlEnHg%3D%3D;"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x4c1eaaf1>",
                    "type": "UnknownWord",
                    "value": "2fwr2oqbpa3afjexzerpsf7bwmhhvggunlw8hqv3dcjs67tlt7irrjlctxzonzwe"
                },
                "references": {
                    "sentences": [
                        "Cookie: CGIC=YKK%2BIFrld%2FC5FqKj%2Fq1F9a06T0WgC4cOvCqqo3cfsyww1EwAb2TNFWqy8wBcDtObrgkjKtmIBSnsD%2Bmn2eR6MzQeUvHqOBJqA%2FqYS3KEkUQoKUgpOfuW%2BTtuz2OjhVeOJ1oMWnellOIJ4IuNBO5aVtzV8AI3CD4H8Z9tgjhG7i6cXrsAh5EUwKjHqbeEBszHmUhSsCNx0vypRWWd6MkM1HBeENiww7W8GjhoXvX8AwZ5VDTRSX3QSr9jpUuWYXHmJDhOtdG%2FW9UAWEHYkv6IpRsGPKWtAdR%2FzHNzWmZRC3HsMP4LyIOXCs5O8lvUZH2Bv2gtZ1SGZOD0Kd7Oi4nFwA%3D%3D;HSID=gbN30kmxz%2BKKygRK6DJjGJ%2FzGQcMDOSmyQoYi9p2ITFNy6zMnfCERvugTwb5O%2FZyAJ5lGvveYZlNK3N%2BRoNPqCThC%2Fwr2OQbPA3aFJeXZerPSF7bWmhHVGGunlw8HqV3dcjs67tLT7irrJLctXzonzWE%2B6Ukd9kdFTNWW5j7s2JEEAcW9Dp6x6WIdRemz6HC3BifjKQ%2BmwvryFaI%2BsLRi9T042hwKQqV7ikOLOsHOOCqlCKs0vcpFS5vUXzdGwSWdONWLHMEkuApe5B%2BUC7bULbJvnoqnT1jFFEE3vm5gSU%2BGKIbVqBCseLx42av7mxWCmJfB1mpDH3K6tJof0YKpQ%3D%3D;DV=arPk%2BRhtodeAHMzW%2FqoqfkfCFpUR1CYM5oW%2FK7onqCf46Xqk2OR0LjLK%2BQL7jCS5yrcZA2r2hYulBxnpVa%2B8tO%2BJImuPOM9B8JkIbEAMHp%2BvNq8vcSj78wA%2FoW0Wgx8Sw9lSMno4CgPoNgF1mrkm9m9cd7U6wQS7WGKR6Wufxuvjlyt6zf5xtU2gq9WtsxOglu%2BXOYApwXiTIEO853sEnzlVNopwMbYkBm5Mu2LSEycyBm4A9nWKVCr9r0xisHCGzde3sBO4hY7WyykPK6vsU3Ds36FVNH3Kv7jx1Kf6tCVe9ukypCd8j%2FXJWAgPwv%2BsWcyA6ky9skKq1GDuoMJQ5A%3D%3D;ANID=modcr%2B3xO4FT10Fb3jE3afiK3eFqJCs1ylPBjge%2F6lgEM3Li5i5UZ%2BviQCBS1cuiaiQ%2F9Cj62z%2BapXfRMVWSFEeZTv9rkmPKmp5FZHUq5VLHNyhrBtjScNXwDZVakrx9ZYt1uzzh2X93c6Z6YQsyNWlkfdmlZS1FCGOf0aaVZfIRiUW%2FXX6zNVph%2FBpYTicXqZ1qaiPAWb5FNF%2BfJylCjmVDOFCZHJ4E6M0Pph%2BvvgjuCO9bRHWjI2Ouz%2B8ETyMBoQOkSDGzzInMeapRKmXYNDhdcEogwNmRkJqoRJjBhHzvbIYgCXGNJFWVnxywcZSaHfQwGonWClY3vT3PSlEnHg%3D%3D;"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xeaece97>",
                    "type": "UnknownWord",
                    "value": "2b6ukd9kdftnww5j7s2jeeacw9dp6x6widremz6hc3bifjkq"
                },
                "references": {
                    "sentences": [
                        "Cookie: CGIC=YKK%2BIFrld%2FC5FqKj%2Fq1F9a06T0WgC4cOvCqqo3cfsyww1EwAb2TNFWqy8wBcDtObrgkjKtmIBSnsD%2Bmn2eR6MzQeUvHqOBJqA%2FqYS3KEkUQoKUgpOfuW%2BTtuz2OjhVeOJ1oMWnellOIJ4IuNBO5aVtzV8AI3CD4H8Z9tgjhG7i6cXrsAh5EUwKjHqbeEBszHmUhSsCNx0vypRWWd6MkM1HBeENiww7W8GjhoXvX8AwZ5VDTRSX3QSr9jpUuWYXHmJDhOtdG%2FW9UAWEHYkv6IpRsGPKWtAdR%2FzHNzWmZRC3HsMP4LyIOXCs5O8lvUZH2Bv2gtZ1SGZOD0Kd7Oi4nFwA%3D%3D;HSID=gbN30kmxz%2BKKygRK6DJjGJ%2FzGQcMDOSmyQoYi9p2ITFNy6zMnfCERvugTwb5O%2FZyAJ5lGvveYZlNK3N%2BRoNPqCThC%2Fwr2OQbPA3aFJeXZerPSF7bWmhHVGGunlw8HqV3dcjs67tLT7irrJLctXzonzWE%2B6Ukd9kdFTNWW5j7s2JEEAcW9Dp6x6WIdRemz6HC3BifjKQ%2BmwvryFaI%2BsLRi9T042hwKQqV7ikOLOsHOOCqlCKs0vcpFS5vUXzdGwSWdONWLHMEkuApe5B%2BUC7bULbJvnoqnT1jFFEE3vm5gSU%2BGKIbVqBCseLx42av7mxWCmJfB1mpDH3K6tJof0YKpQ%3D%3D;DV=arPk%2BRhtodeAHMzW%2FqoqfkfCFpUR1CYM5oW%2FK7onqCf46Xqk2OR0LjLK%2BQL7jCS5yrcZA2r2hYulBxnpVa%2B8tO%2BJImuPOM9B8JkIbEAMHp%2BvNq8vcSj78wA%2FoW0Wgx8Sw9lSMno4CgPoNgF1mrkm9m9cd7U6wQS7WGKR6Wufxuvjlyt6zf5xtU2gq9WtsxOglu%2BXOYApwXiTIEO853sEnzlVNopwMbYkBm5Mu2LSEycyBm4A9nWKVCr9r0xisHCGzde3sBO4hY7WyykPK6vsU3Ds36FVNH3Kv7jx1Kf6tCVe9ukypCd8j%2FXJWAgPwv%2BsWcyA6ky9skKq1GDuoMJQ5A%3D%3D;ANID=modcr%2B3xO4FT10Fb3jE3afiK3eFqJCs1ylPBjge%2F6lgEM3Li5i5UZ%2BviQCBS1cuiaiQ%2F9Cj62z%2BapXfRMVWSFEeZTv9rkmPKmp5FZHUq5VLHNyhrBtjScNXwDZVakrx9ZYt1uzzh2X93c6Z6YQsyNWlkfdmlZS1FCGOf0aaVZfIRiUW%2FXX6zNVph%2FBpYTicXqZ1qaiPAWb5FNF%2BfJylCjmVDOFCZHJ4E6M0Pph%2BvvgjuCO9bRHWjI2Ouz%2B8ETyMBoQOkSDGzzInMeapRKmXYNDhdcEogwNmRkJqoRJjBhHzvbIYgCXGNJFWVnxywcZSaHfQwGonWClY3vT3PSlEnHg%3D%3D;"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x110d1b7c>",
                    "type": "UnknownWord",
                    "value": "2bmwvryfai"
                },
                "references": {
                    "sentences": [
                        "Cookie: CGIC=YKK%2BIFrld%2FC5FqKj%2Fq1F9a06T0WgC4cOvCqqo3cfsyww1EwAb2TNFWqy8wBcDtObrgkjKtmIBSnsD%2Bmn2eR6MzQeUvHqOBJqA%2FqYS3KEkUQoKUgpOfuW%2BTtuz2OjhVeOJ1oMWnellOIJ4IuNBO5aVtzV8AI3CD4H8Z9tgjhG7i6cXrsAh5EUwKjHqbeEBszHmUhSsCNx0vypRWWd6MkM1HBeENiww7W8GjhoXvX8AwZ5VDTRSX3QSr9jpUuWYXHmJDhOtdG%2FW9UAWEHYkv6IpRsGPKWtAdR%2FzHNzWmZRC3HsMP4LyIOXCs5O8lvUZH2Bv2gtZ1SGZOD0Kd7Oi4nFwA%3D%3D;HSID=gbN30kmxz%2BKKygRK6DJjGJ%2FzGQcMDOSmyQoYi9p2ITFNy6zMnfCERvugTwb5O%2FZyAJ5lGvveYZlNK3N%2BRoNPqCThC%2Fwr2OQbPA3aFJeXZerPSF7bWmhHVGGunlw8HqV3dcjs67tLT7irrJLctXzonzWE%2B6Ukd9kdFTNWW5j7s2JEEAcW9Dp6x6WIdRemz6HC3BifjKQ%2BmwvryFaI%2BsLRi9T042hwKQqV7ikOLOsHOOCqlCKs0vcpFS5vUXzdGwSWdONWLHMEkuApe5B%2BUC7bULbJvnoqnT1jFFEE3vm5gSU%2BGKIbVqBCseLx42av7mxWCmJfB1mpDH3K6tJof0YKpQ%3D%3D;DV=arPk%2BRhtodeAHMzW%2FqoqfkfCFpUR1CYM5oW%2FK7onqCf46Xqk2OR0LjLK%2BQL7jCS5yrcZA2r2hYulBxnpVa%2B8tO%2BJImuPOM9B8JkIbEAMHp%2BvNq8vcSj78wA%2FoW0Wgx8Sw9lSMno4CgPoNgF1mrkm9m9cd7U6wQS7WGKR6Wufxuvjlyt6zf5xtU2gq9WtsxOglu%2BXOYApwXiTIEO853sEnzlVNopwMbYkBm5Mu2LSEycyBm4A9nWKVCr9r0xisHCGzde3sBO4hY7WyykPK6vsU3Ds36FVNH3Kv7jx1Kf6tCVe9ukypCd8j%2FXJWAgPwv%2BsWcyA6ky9skKq1GDuoMJQ5A%3D%3D;ANID=modcr%2B3xO4FT10Fb3jE3afiK3eFqJCs1ylPBjge%2F6lgEM3Li5i5UZ%2BviQCBS1cuiaiQ%2F9Cj62z%2BapXfRMVWSFEeZTv9rkmPKmp5FZHUq5VLHNyhrBtjScNXwDZVakrx9ZYt1uzzh2X93c6Z6YQsyNWlkfdmlZS1FCGOf0aaVZfIRiUW%2FXX6zNVph%2FBpYTicXqZ1qaiPAWb5FNF%2BfJylCjmVDOFCZHJ4E6M0Pph%2BvvgjuCO9bRHWjI2Ouz%2B8ETyMBoQOkSDGzzInMeapRKmXYNDhdcEogwNmRkJqoRJjBhHzvbIYgCXGNJFWVnxywcZSaHfQwGonWClY3vT3PSlEnHg%3D%3D;"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x1e7e9c77>",
                    "type": "UnknownWord",
                    "value": "2bslri9t042hwkqqv7ikoloshoocqlcks0vcpfs5vuxzdgwswdonwlhmekuape5b"
                },
                "references": {
                    "sentences": [
                        "Cookie: CGIC=YKK%2BIFrld%2FC5FqKj%2Fq1F9a06T0WgC4cOvCqqo3cfsyww1EwAb2TNFWqy8wBcDtObrgkjKtmIBSnsD%2Bmn2eR6MzQeUvHqOBJqA%2FqYS3KEkUQoKUgpOfuW%2BTtuz2OjhVeOJ1oMWnellOIJ4IuNBO5aVtzV8AI3CD4H8Z9tgjhG7i6cXrsAh5EUwKjHqbeEBszHmUhSsCNx0vypRWWd6MkM1HBeENiww7W8GjhoXvX8AwZ5VDTRSX3QSr9jpUuWYXHmJDhOtdG%2FW9UAWEHYkv6IpRsGPKWtAdR%2FzHNzWmZRC3HsMP4LyIOXCs5O8lvUZH2Bv2gtZ1SGZOD0Kd7Oi4nFwA%3D%3D;HSID=gbN30kmxz%2BKKygRK6DJjGJ%2FzGQcMDOSmyQoYi9p2ITFNy6zMnfCERvugTwb5O%2FZyAJ5lGvveYZlNK3N%2BRoNPqCThC%2Fwr2OQbPA3aFJeXZerPSF7bWmhHVGGunlw8HqV3dcjs67tLT7irrJLctXzonzWE%2B6Ukd9kdFTNWW5j7s2JEEAcW9Dp6x6WIdRemz6HC3BifjKQ%2BmwvryFaI%2BsLRi9T042hwKQqV7ikOLOsHOOCqlCKs0vcpFS5vUXzdGwSWdONWLHMEkuApe5B%2BUC7bULbJvnoqnT1jFFEE3vm5gSU%2BGKIbVqBCseLx42av7mxWCmJfB1mpDH3K6tJof0YKpQ%3D%3D;DV=arPk%2BRhtodeAHMzW%2FqoqfkfCFpUR1CYM5oW%2FK7onqCf46Xqk2OR0LjLK%2BQL7jCS5yrcZA2r2hYulBxnpVa%2B8tO%2BJImuPOM9B8JkIbEAMHp%2BvNq8vcSj78wA%2FoW0Wgx8Sw9lSMno4CgPoNgF1mrkm9m9cd7U6wQS7WGKR6Wufxuvjlyt6zf5xtU2gq9WtsxOglu%2BXOYApwXiTIEO853sEnzlVNopwMbYkBm5Mu2LSEycyBm4A9nWKVCr9r0xisHCGzde3sBO4hY7WyykPK6vsU3Ds36FVNH3Kv7jx1Kf6tCVe9ukypCd8j%2FXJWAgPwv%2BsWcyA6ky9skKq1GDuoMJQ5A%3D%3D;ANID=modcr%2B3xO4FT10Fb3jE3afiK3eFqJCs1ylPBjge%2F6lgEM3Li5i5UZ%2BviQCBS1cuiaiQ%2F9Cj62z%2BapXfRMVWSFEeZTv9rkmPKmp5FZHUq5VLHNyhrBtjScNXwDZVakrx9ZYt1uzzh2X93c6Z6YQsyNWlkfdmlZS1FCGOf0aaVZfIRiUW%2FXX6zNVph%2FBpYTicXqZ1qaiPAWb5FNF%2BfJylCjmVDOFCZHJ4E6M0Pph%2BvvgjuCO9bRHWjI2Ouz%2B8ETyMBoQOkSDGzzInMeapRKmXYNDhdcEogwNmRkJqoRJjBhHzvbIYgCXGNJFWVnxywcZSaHfQwGonWClY3vT3PSlEnHg%3D%3D;"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x773e2495>",
                    "type": "UnknownWord",
                    "value": "2buc7bulbjvnoqnt1jffee3vm5gsu"
                },
                "references": {
                    "sentences": [
                        "Cookie: CGIC=YKK%2BIFrld%2FC5FqKj%2Fq1F9a06T0WgC4cOvCqqo3cfsyww1EwAb2TNFWqy8wBcDtObrgkjKtmIBSnsD%2Bmn2eR6MzQeUvHqOBJqA%2FqYS3KEkUQoKUgpOfuW%2BTtuz2OjhVeOJ1oMWnellOIJ4IuNBO5aVtzV8AI3CD4H8Z9tgjhG7i6cXrsAh5EUwKjHqbeEBszHmUhSsCNx0vypRWWd6MkM1HBeENiww7W8GjhoXvX8AwZ5VDTRSX3QSr9jpUuWYXHmJDhOtdG%2FW9UAWEHYkv6IpRsGPKWtAdR%2FzHNzWmZRC3HsMP4LyIOXCs5O8lvUZH2Bv2gtZ1SGZOD0Kd7Oi4nFwA%3D%3D;HSID=gbN30kmxz%2BKKygRK6DJjGJ%2FzGQcMDOSmyQoYi9p2ITFNy6zMnfCERvugTwb5O%2FZyAJ5lGvveYZlNK3N%2BRoNPqCThC%2Fwr2OQbPA3aFJeXZerPSF7bWmhHVGGunlw8HqV3dcjs67tLT7irrJLctXzonzWE%2B6Ukd9kdFTNWW5j7s2JEEAcW9Dp6x6WIdRemz6HC3BifjKQ%2BmwvryFaI%2BsLRi9T042hwKQqV7ikOLOsHOOCqlCKs0vcpFS5vUXzdGwSWdONWLHMEkuApe5B%2BUC7bULbJvnoqnT1jFFEE3vm5gSU%2BGKIbVqBCseLx42av7mxWCmJfB1mpDH3K6tJof0YKpQ%3D%3D;DV=arPk%2BRhtodeAHMzW%2FqoqfkfCFpUR1CYM5oW%2FK7onqCf46Xqk2OR0LjLK%2BQL7jCS5yrcZA2r2hYulBxnpVa%2B8tO%2BJImuPOM9B8JkIbEAMHp%2BvNq8vcSj78wA%2FoW0Wgx8Sw9lSMno4CgPoNgF1mrkm9m9cd7U6wQS7WGKR6Wufxuvjlyt6zf5xtU2gq9WtsxOglu%2BXOYApwXiTIEO853sEnzlVNopwMbYkBm5Mu2LSEycyBm4A9nWKVCr9r0xisHCGzde3sBO4hY7WyykPK6vsU3Ds36FVNH3Kv7jx1Kf6tCVe9ukypCd8j%2FXJWAgPwv%2BsWcyA6ky9skKq1GDuoMJQ5A%3D%3D;ANID=modcr%2B3xO4FT10Fb3jE3afiK3eFqJCs1ylPBjge%2F6lgEM3Li5i5UZ%2BviQCBS1cuiaiQ%2F9Cj62z%2BapXfRMVWSFEeZTv9rkmPKmp5FZHUq5VLHNyhrBtjScNXwDZVakrx9ZYt1uzzh2X93c6Z6YQsyNWlkfdmlZS1FCGOf0aaVZfIRiUW%2FXX6zNVph%2FBpYTicXqZ1qaiPAWb5FNF%2BfJylCjmVDOFCZHJ4E6M0Pph%2BvvgjuCO9bRHWjI2Ouz%2B8ETyMBoQOkSDGzzInMeapRKmXYNDhdcEogwNmRkJqoRJjBhHzvbIYgCXGNJFWVnxywcZSaHfQwGonWClY3vT3PSlEnHg%3D%3D;"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x99e2426a>",
                    "type": "UnknownWord",
                    "value": "2bgkibvqbcselx42av7mxwcmjfb1mpdh3k6tjof0ykpq"
                },
                "references": {
                    "sentences": [
                        "Cookie: CGIC=YKK%2BIFrld%2FC5FqKj%2Fq1F9a06T0WgC4cOvCqqo3cfsyww1EwAb2TNFWqy8wBcDtObrgkjKtmIBSnsD%2Bmn2eR6MzQeUvHqOBJqA%2FqYS3KEkUQoKUgpOfuW%2BTtuz2OjhVeOJ1oMWnellOIJ4IuNBO5aVtzV8AI3CD4H8Z9tgjhG7i6cXrsAh5EUwKjHqbeEBszHmUhSsCNx0vypRWWd6MkM1HBeENiww7W8GjhoXvX8AwZ5VDTRSX3QSr9jpUuWYXHmJDhOtdG%2FW9UAWEHYkv6IpRsGPKWtAdR%2FzHNzWmZRC3HsMP4LyIOXCs5O8lvUZH2Bv2gtZ1SGZOD0Kd7Oi4nFwA%3D%3D;HSID=gbN30kmxz%2BKKygRK6DJjGJ%2FzGQcMDOSmyQoYi9p2ITFNy6zMnfCERvugTwb5O%2FZyAJ5lGvveYZlNK3N%2BRoNPqCThC%2Fwr2OQbPA3aFJeXZerPSF7bWmhHVGGunlw8HqV3dcjs67tLT7irrJLctXzonzWE%2B6Ukd9kdFTNWW5j7s2JEEAcW9Dp6x6WIdRemz6HC3BifjKQ%2BmwvryFaI%2BsLRi9T042hwKQqV7ikOLOsHOOCqlCKs0vcpFS5vUXzdGwSWdONWLHMEkuApe5B%2BUC7bULbJvnoqnT1jFFEE3vm5gSU%2BGKIbVqBCseLx42av7mxWCmJfB1mpDH3K6tJof0YKpQ%3D%3D;DV=arPk%2BRhtodeAHMzW%2FqoqfkfCFpUR1CYM5oW%2FK7onqCf46Xqk2OR0LjLK%2BQL7jCS5yrcZA2r2hYulBxnpVa%2B8tO%2BJImuPOM9B8JkIbEAMHp%2BvNq8vcSj78wA%2FoW0Wgx8Sw9lSMno4CgPoNgF1mrkm9m9cd7U6wQS7WGKR6Wufxuvjlyt6zf5xtU2gq9WtsxOglu%2BXOYApwXiTIEO853sEnzlVNopwMbYkBm5Mu2LSEycyBm4A9nWKVCr9r0xisHCGzde3sBO4hY7WyykPK6vsU3Ds36FVNH3Kv7jx1Kf6tCVe9ukypCd8j%2FXJWAgPwv%2BsWcyA6ky9skKq1GDuoMJQ5A%3D%3D;ANID=modcr%2B3xO4FT10Fb3jE3afiK3eFqJCs1ylPBjge%2F6lgEM3Li5i5UZ%2BviQCBS1cuiaiQ%2F9Cj62z%2BapXfRMVWSFEeZTv9rkmPKmp5FZHUq5VLHNyhrBtjScNXwDZVakrx9ZYt1uzzh2X93c6Z6YQsyNWlkfdmlZS1FCGOf0aaVZfIRiUW%2FXX6zNVph%2FBpYTicXqZ1qaiPAWb5FNF%2BfJylCjmVDOFCZHJ4E6M0Pph%2BvvgjuCO9bRHWjI2Ouz%2B8ETyMBoQOkSDGzzInMeapRKmXYNDhdcEogwNmRkJqoRJjBhHzvbIYgCXGNJFWVnxywcZSaHfQwGonWClY3vT3PSlEnHg%3D%3D;"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xe7be62fd>",
                    "type": "UnknownWord",
                    "value": "arpk"
                },
                "references": {
                    "sentences": [
                        "Cookie: CGIC=YKK%2BIFrld%2FC5FqKj%2Fq1F9a06T0WgC4cOvCqqo3cfsyww1EwAb2TNFWqy8wBcDtObrgkjKtmIBSnsD%2Bmn2eR6MzQeUvHqOBJqA%2FqYS3KEkUQoKUgpOfuW%2BTtuz2OjhVeOJ1oMWnellOIJ4IuNBO5aVtzV8AI3CD4H8Z9tgjhG7i6cXrsAh5EUwKjHqbeEBszHmUhSsCNx0vypRWWd6MkM1HBeENiww7W8GjhoXvX8AwZ5VDTRSX3QSr9jpUuWYXHmJDhOtdG%2FW9UAWEHYkv6IpRsGPKWtAdR%2FzHNzWmZRC3HsMP4LyIOXCs5O8lvUZH2Bv2gtZ1SGZOD0Kd7Oi4nFwA%3D%3D;HSID=gbN30kmxz%2BKKygRK6DJjGJ%2FzGQcMDOSmyQoYi9p2ITFNy6zMnfCERvugTwb5O%2FZyAJ5lGvveYZlNK3N%2BRoNPqCThC%2Fwr2OQbPA3aFJeXZerPSF7bWmhHVGGunlw8HqV3dcjs67tLT7irrJLctXzonzWE%2B6Ukd9kdFTNWW5j7s2JEEAcW9Dp6x6WIdRemz6HC3BifjKQ%2BmwvryFaI%2BsLRi9T042hwKQqV7ikOLOsHOOCqlCKs0vcpFS5vUXzdGwSWdONWLHMEkuApe5B%2BUC7bULbJvnoqnT1jFFEE3vm5gSU%2BGKIbVqBCseLx42av7mxWCmJfB1mpDH3K6tJof0YKpQ%3D%3D;DV=arPk%2BRhtodeAHMzW%2FqoqfkfCFpUR1CYM5oW%2FK7onqCf46Xqk2OR0LjLK%2BQL7jCS5yrcZA2r2hYulBxnpVa%2B8tO%2BJImuPOM9B8JkIbEAMHp%2BvNq8vcSj78wA%2FoW0Wgx8Sw9lSMno4CgPoNgF1mrkm9m9cd7U6wQS7WGKR6Wufxuvjlyt6zf5xtU2gq9WtsxOglu%2BXOYApwXiTIEO853sEnzlVNopwMbYkBm5Mu2LSEycyBm4A9nWKVCr9r0xisHCGzde3sBO4hY7WyykPK6vsU3Ds36FVNH3Kv7jx1Kf6tCVe9ukypCd8j%2FXJWAgPwv%2BsWcyA6ky9skKq1GDuoMJQ5A%3D%3D;ANID=modcr%2B3xO4FT10Fb3jE3afiK3eFqJCs1ylPBjge%2F6lgEM3Li5i5UZ%2BviQCBS1cuiaiQ%2F9Cj62z%2BapXfRMVWSFEeZTv9rkmPKmp5FZHUq5VLHNyhrBtjScNXwDZVakrx9ZYt1uzzh2X93c6Z6YQsyNWlkfdmlZS1FCGOf0aaVZfIRiUW%2FXX6zNVph%2FBpYTicXqZ1qaiPAWb5FNF%2BfJylCjmVDOFCZHJ4E6M0Pph%2BvvgjuCO9bRHWjI2Ouz%2B8ETyMBoQOkSDGzzInMeapRKmXYNDhdcEogwNmRkJqoRJjBhHzvbIYgCXGNJFWVnxywcZSaHfQwGonWClY3vT3PSlEnHg%3D%3D;"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xb54b7730>",
                    "type": "UnknownWord",
                    "value": "2brhtodeahmzw"
                },
                "references": {
                    "sentences": [
                        "Cookie: CGIC=YKK%2BIFrld%2FC5FqKj%2Fq1F9a06T0WgC4cOvCqqo3cfsyww1EwAb2TNFWqy8wBcDtObrgkjKtmIBSnsD%2Bmn2eR6MzQeUvHqOBJqA%2FqYS3KEkUQoKUgpOfuW%2BTtuz2OjhVeOJ1oMWnellOIJ4IuNBO5aVtzV8AI3CD4H8Z9tgjhG7i6cXrsAh5EUwKjHqbeEBszHmUhSsCNx0vypRWWd6MkM1HBeENiww7W8GjhoXvX8AwZ5VDTRSX3QSr9jpUuWYXHmJDhOtdG%2FW9UAWEHYkv6IpRsGPKWtAdR%2FzHNzWmZRC3HsMP4LyIOXCs5O8lvUZH2Bv2gtZ1SGZOD0Kd7Oi4nFwA%3D%3D;HSID=gbN30kmxz%2BKKygRK6DJjGJ%2FzGQcMDOSmyQoYi9p2ITFNy6zMnfCERvugTwb5O%2FZyAJ5lGvveYZlNK3N%2BRoNPqCThC%2Fwr2OQbPA3aFJeXZerPSF7bWmhHVGGunlw8HqV3dcjs67tLT7irrJLctXzonzWE%2B6Ukd9kdFTNWW5j7s2JEEAcW9Dp6x6WIdRemz6HC3BifjKQ%2BmwvryFaI%2BsLRi9T042hwKQqV7ikOLOsHOOCqlCKs0vcpFS5vUXzdGwSWdONWLHMEkuApe5B%2BUC7bULbJvnoqnT1jFFEE3vm5gSU%2BGKIbVqBCseLx42av7mxWCmJfB1mpDH3K6tJof0YKpQ%3D%3D;DV=arPk%2BRhtodeAHMzW%2FqoqfkfCFpUR1CYM5oW%2FK7onqCf46Xqk2OR0LjLK%2BQL7jCS5yrcZA2r2hYulBxnpVa%2B8tO%2BJImuPOM9B8JkIbEAMHp%2BvNq8vcSj78wA%2FoW0Wgx8Sw9lSMno4CgPoNgF1mrkm9m9cd7U6wQS7WGKR6Wufxuvjlyt6zf5xtU2gq9WtsxOglu%2BXOYApwXiTIEO853sEnzlVNopwMbYkBm5Mu2LSEycyBm4A9nWKVCr9r0xisHCGzde3sBO4hY7WyykPK6vsU3Ds36FVNH3Kv7jx1Kf6tCVe9ukypCd8j%2FXJWAgPwv%2BsWcyA6ky9skKq1GDuoMJQ5A%3D%3D;ANID=modcr%2B3xO4FT10Fb3jE3afiK3eFqJCs1ylPBjge%2F6lgEM3Li5i5UZ%2BviQCBS1cuiaiQ%2F9Cj62z%2BapXfRMVWSFEeZTv9rkmPKmp5FZHUq5VLHNyhrBtjScNXwDZVakrx9ZYt1uzzh2X93c6Z6YQsyNWlkfdmlZS1FCGOf0aaVZfIRiUW%2FXX6zNVph%2FBpYTicXqZ1qaiPAWb5FNF%2BfJylCjmVDOFCZHJ4E6M0Pph%2BvvgjuCO9bRHWjI2Ouz%2B8ETyMBoQOkSDGzzInMeapRKmXYNDhdcEogwNmRkJqoRJjBhHzvbIYgCXGNJFWVnxywcZSaHfQwGonWClY3vT3PSlEnHg%3D%3D;"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xe2ac4acf>",
                    "type": "UnknownWord",
                    "value": "2fqoqfkfcfpur1cym5ow"
                },
                "references": {
                    "sentences": [
                        "Cookie: CGIC=YKK%2BIFrld%2FC5FqKj%2Fq1F9a06T0WgC4cOvCqqo3cfsyww1EwAb2TNFWqy8wBcDtObrgkjKtmIBSnsD%2Bmn2eR6MzQeUvHqOBJqA%2FqYS3KEkUQoKUgpOfuW%2BTtuz2OjhVeOJ1oMWnellOIJ4IuNBO5aVtzV8AI3CD4H8Z9tgjhG7i6cXrsAh5EUwKjHqbeEBszHmUhSsCNx0vypRWWd6MkM1HBeENiww7W8GjhoXvX8AwZ5VDTRSX3QSr9jpUuWYXHmJDhOtdG%2FW9UAWEHYkv6IpRsGPKWtAdR%2FzHNzWmZRC3HsMP4LyIOXCs5O8lvUZH2Bv2gtZ1SGZOD0Kd7Oi4nFwA%3D%3D;HSID=gbN30kmxz%2BKKygRK6DJjGJ%2FzGQcMDOSmyQoYi9p2ITFNy6zMnfCERvugTwb5O%2FZyAJ5lGvveYZlNK3N%2BRoNPqCThC%2Fwr2OQbPA3aFJeXZerPSF7bWmhHVGGunlw8HqV3dcjs67tLT7irrJLctXzonzWE%2B6Ukd9kdFTNWW5j7s2JEEAcW9Dp6x6WIdRemz6HC3BifjKQ%2BmwvryFaI%2BsLRi9T042hwKQqV7ikOLOsHOOCqlCKs0vcpFS5vUXzdGwSWdONWLHMEkuApe5B%2BUC7bULbJvnoqnT1jFFEE3vm5gSU%2BGKIbVqBCseLx42av7mxWCmJfB1mpDH3K6tJof0YKpQ%3D%3D;DV=arPk%2BRhtodeAHMzW%2FqoqfkfCFpUR1CYM5oW%2FK7onqCf46Xqk2OR0LjLK%2BQL7jCS5yrcZA2r2hYulBxnpVa%2B8tO%2BJImuPOM9B8JkIbEAMHp%2BvNq8vcSj78wA%2FoW0Wgx8Sw9lSMno4CgPoNgF1mrkm9m9cd7U6wQS7WGKR6Wufxuvjlyt6zf5xtU2gq9WtsxOglu%2BXOYApwXiTIEO853sEnzlVNopwMbYkBm5Mu2LSEycyBm4A9nWKVCr9r0xisHCGzde3sBO4hY7WyykPK6vsU3Ds36FVNH3Kv7jx1Kf6tCVe9ukypCd8j%2FXJWAgPwv%2BsWcyA6ky9skKq1GDuoMJQ5A%3D%3D;ANID=modcr%2B3xO4FT10Fb3jE3afiK3eFqJCs1ylPBjge%2F6lgEM3Li5i5UZ%2BviQCBS1cuiaiQ%2F9Cj62z%2BapXfRMVWSFEeZTv9rkmPKmp5FZHUq5VLHNyhrBtjScNXwDZVakrx9ZYt1uzzh2X93c6Z6YQsyNWlkfdmlZS1FCGOf0aaVZfIRiUW%2FXX6zNVph%2FBpYTicXqZ1qaiPAWb5FNF%2BfJylCjmVDOFCZHJ4E6M0Pph%2BvvgjuCO9bRHWjI2Ouz%2B8ETyMBoQOkSDGzzInMeapRKmXYNDhdcEogwNmRkJqoRJjBhHzvbIYgCXGNJFWVnxywcZSaHfQwGonWClY3vT3PSlEnHg%3D%3D;"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xa2dbceea>",
                    "type": "UnknownWord",
                    "value": "2fk7onqcf46xqk2or0ljlk"
                },
                "references": {
                    "sentences": [
                        "Cookie: CGIC=YKK%2BIFrld%2FC5FqKj%2Fq1F9a06T0WgC4cOvCqqo3cfsyww1EwAb2TNFWqy8wBcDtObrgkjKtmIBSnsD%2Bmn2eR6MzQeUvHqOBJqA%2FqYS3KEkUQoKUgpOfuW%2BTtuz2OjhVeOJ1oMWnellOIJ4IuNBO5aVtzV8AI3CD4H8Z9tgjhG7i6cXrsAh5EUwKjHqbeEBszHmUhSsCNx0vypRWWd6MkM1HBeENiww7W8GjhoXvX8AwZ5VDTRSX3QSr9jpUuWYXHmJDhOtdG%2FW9UAWEHYkv6IpRsGPKWtAdR%2FzHNzWmZRC3HsMP4LyIOXCs5O8lvUZH2Bv2gtZ1SGZOD0Kd7Oi4nFwA%3D%3D;HSID=gbN30kmxz%2BKKygRK6DJjGJ%2FzGQcMDOSmyQoYi9p2ITFNy6zMnfCERvugTwb5O%2FZyAJ5lGvveYZlNK3N%2BRoNPqCThC%2Fwr2OQbPA3aFJeXZerPSF7bWmhHVGGunlw8HqV3dcjs67tLT7irrJLctXzonzWE%2B6Ukd9kdFTNWW5j7s2JEEAcW9Dp6x6WIdRemz6HC3BifjKQ%2BmwvryFaI%2BsLRi9T042hwKQqV7ikOLOsHOOCqlCKs0vcpFS5vUXzdGwSWdONWLHMEkuApe5B%2BUC7bULbJvnoqnT1jFFEE3vm5gSU%2BGKIbVqBCseLx42av7mxWCmJfB1mpDH3K6tJof0YKpQ%3D%3D;DV=arPk%2BRhtodeAHMzW%2FqoqfkfCFpUR1CYM5oW%2FK7onqCf46Xqk2OR0LjLK%2BQL7jCS5yrcZA2r2hYulBxnpVa%2B8tO%2BJImuPOM9B8JkIbEAMHp%2BvNq8vcSj78wA%2FoW0Wgx8Sw9lSMno4CgPoNgF1mrkm9m9cd7U6wQS7WGKR6Wufxuvjlyt6zf5xtU2gq9WtsxOglu%2BXOYApwXiTIEO853sEnzlVNopwMbYkBm5Mu2LSEycyBm4A9nWKVCr9r0xisHCGzde3sBO4hY7WyykPK6vsU3Ds36FVNH3Kv7jx1Kf6tCVe9ukypCd8j%2FXJWAgPwv%2BsWcyA6ky9skKq1GDuoMJQ5A%3D%3D;ANID=modcr%2B3xO4FT10Fb3jE3afiK3eFqJCs1ylPBjge%2F6lgEM3Li5i5UZ%2BviQCBS1cuiaiQ%2F9Cj62z%2BapXfRMVWSFEeZTv9rkmPKmp5FZHUq5VLHNyhrBtjScNXwDZVakrx9ZYt1uzzh2X93c6Z6YQsyNWlkfdmlZS1FCGOf0aaVZfIRiUW%2FXX6zNVph%2FBpYTicXqZ1qaiPAWb5FNF%2BfJylCjmVDOFCZHJ4E6M0Pph%2BvvgjuCO9bRHWjI2Ouz%2B8ETyMBoQOkSDGzzInMeapRKmXYNDhdcEogwNmRkJqoRJjBhHzvbIYgCXGNJFWVnxywcZSaHfQwGonWClY3vT3PSlEnHg%3D%3D;"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x41cfe12f>",
                    "type": "UnknownWord",
                    "value": "2bql7jcs5yrcza2r2hyulbxnpva"
                },
                "references": {
                    "sentences": [
                        "Cookie: CGIC=YKK%2BIFrld%2FC5FqKj%2Fq1F9a06T0WgC4cOvCqqo3cfsyww1EwAb2TNFWqy8wBcDtObrgkjKtmIBSnsD%2Bmn2eR6MzQeUvHqOBJqA%2FqYS3KEkUQoKUgpOfuW%2BTtuz2OjhVeOJ1oMWnellOIJ4IuNBO5aVtzV8AI3CD4H8Z9tgjhG7i6cXrsAh5EUwKjHqbeEBszHmUhSsCNx0vypRWWd6MkM1HBeENiww7W8GjhoXvX8AwZ5VDTRSX3QSr9jpUuWYXHmJDhOtdG%2FW9UAWEHYkv6IpRsGPKWtAdR%2FzHNzWmZRC3HsMP4LyIOXCs5O8lvUZH2Bv2gtZ1SGZOD0Kd7Oi4nFwA%3D%3D;HSID=gbN30kmxz%2BKKygRK6DJjGJ%2FzGQcMDOSmyQoYi9p2ITFNy6zMnfCERvugTwb5O%2FZyAJ5lGvveYZlNK3N%2BRoNPqCThC%2Fwr2OQbPA3aFJeXZerPSF7bWmhHVGGunlw8HqV3dcjs67tLT7irrJLctXzonzWE%2B6Ukd9kdFTNWW5j7s2JEEAcW9Dp6x6WIdRemz6HC3BifjKQ%2BmwvryFaI%2BsLRi9T042hwKQqV7ikOLOsHOOCqlCKs0vcpFS5vUXzdGwSWdONWLHMEkuApe5B%2BUC7bULbJvnoqnT1jFFEE3vm5gSU%2BGKIbVqBCseLx42av7mxWCmJfB1mpDH3K6tJof0YKpQ%3D%3D;DV=arPk%2BRhtodeAHMzW%2FqoqfkfCFpUR1CYM5oW%2FK7onqCf46Xqk2OR0LjLK%2BQL7jCS5yrcZA2r2hYulBxnpVa%2B8tO%2BJImuPOM9B8JkIbEAMHp%2BvNq8vcSj78wA%2FoW0Wgx8Sw9lSMno4CgPoNgF1mrkm9m9cd7U6wQS7WGKR6Wufxuvjlyt6zf5xtU2gq9WtsxOglu%2BXOYApwXiTIEO853sEnzlVNopwMbYkBm5Mu2LSEycyBm4A9nWKVCr9r0xisHCGzde3sBO4hY7WyykPK6vsU3Ds36FVNH3Kv7jx1Kf6tCVe9ukypCd8j%2FXJWAgPwv%2BsWcyA6ky9skKq1GDuoMJQ5A%3D%3D;ANID=modcr%2B3xO4FT10Fb3jE3afiK3eFqJCs1ylPBjge%2F6lgEM3Li5i5UZ%2BviQCBS1cuiaiQ%2F9Cj62z%2BapXfRMVWSFEeZTv9rkmPKmp5FZHUq5VLHNyhrBtjScNXwDZVakrx9ZYt1uzzh2X93c6Z6YQsyNWlkfdmlZS1FCGOf0aaVZfIRiUW%2FXX6zNVph%2FBpYTicXqZ1qaiPAWb5FNF%2BfJylCjmVDOFCZHJ4E6M0Pph%2BvvgjuCO9bRHWjI2Ouz%2B8ETyMBoQOkSDGzzInMeapRKmXYNDhdcEogwNmRkJqoRJjBhHzvbIYgCXGNJFWVnxywcZSaHfQwGonWClY3vT3PSlEnHg%3D%3D;"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xa5c7c0a4>",
                    "type": "UnknownWord",
                    "value": "2b8to"
                },
                "references": {
                    "sentences": [
                        "Cookie: CGIC=YKK%2BIFrld%2FC5FqKj%2Fq1F9a06T0WgC4cOvCqqo3cfsyww1EwAb2TNFWqy8wBcDtObrgkjKtmIBSnsD%2Bmn2eR6MzQeUvHqOBJqA%2FqYS3KEkUQoKUgpOfuW%2BTtuz2OjhVeOJ1oMWnellOIJ4IuNBO5aVtzV8AI3CD4H8Z9tgjhG7i6cXrsAh5EUwKjHqbeEBszHmUhSsCNx0vypRWWd6MkM1HBeENiww7W8GjhoXvX8AwZ5VDTRSX3QSr9jpUuWYXHmJDhOtdG%2FW9UAWEHYkv6IpRsGPKWtAdR%2FzHNzWmZRC3HsMP4LyIOXCs5O8lvUZH2Bv2gtZ1SGZOD0Kd7Oi4nFwA%3D%3D;HSID=gbN30kmxz%2BKKygRK6DJjGJ%2FzGQcMDOSmyQoYi9p2ITFNy6zMnfCERvugTwb5O%2FZyAJ5lGvveYZlNK3N%2BRoNPqCThC%2Fwr2OQbPA3aFJeXZerPSF7bWmhHVGGunlw8HqV3dcjs67tLT7irrJLctXzonzWE%2B6Ukd9kdFTNWW5j7s2JEEAcW9Dp6x6WIdRemz6HC3BifjKQ%2BmwvryFaI%2BsLRi9T042hwKQqV7ikOLOsHOOCqlCKs0vcpFS5vUXzdGwSWdONWLHMEkuApe5B%2BUC7bULbJvnoqnT1jFFEE3vm5gSU%2BGKIbVqBCseLx42av7mxWCmJfB1mpDH3K6tJof0YKpQ%3D%3D;DV=arPk%2BRhtodeAHMzW%2FqoqfkfCFpUR1CYM5oW%2FK7onqCf46Xqk2OR0LjLK%2BQL7jCS5yrcZA2r2hYulBxnpVa%2B8tO%2BJImuPOM9B8JkIbEAMHp%2BvNq8vcSj78wA%2FoW0Wgx8Sw9lSMno4CgPoNgF1mrkm9m9cd7U6wQS7WGKR6Wufxuvjlyt6zf5xtU2gq9WtsxOglu%2BXOYApwXiTIEO853sEnzlVNopwMbYkBm5Mu2LSEycyBm4A9nWKVCr9r0xisHCGzde3sBO4hY7WyykPK6vsU3Ds36FVNH3Kv7jx1Kf6tCVe9ukypCd8j%2FXJWAgPwv%2BsWcyA6ky9skKq1GDuoMJQ5A%3D%3D;ANID=modcr%2B3xO4FT10Fb3jE3afiK3eFqJCs1ylPBjge%2F6lgEM3Li5i5UZ%2BviQCBS1cuiaiQ%2F9Cj62z%2BapXfRMVWSFEeZTv9rkmPKmp5FZHUq5VLHNyhrBtjScNXwDZVakrx9ZYt1uzzh2X93c6Z6YQsyNWlkfdmlZS1FCGOf0aaVZfIRiUW%2FXX6zNVph%2FBpYTicXqZ1qaiPAWb5FNF%2BfJylCjmVDOFCZHJ4E6M0Pph%2BvvgjuCO9bRHWjI2Ouz%2B8ETyMBoQOkSDGzzInMeapRKmXYNDhdcEogwNmRkJqoRJjBhHzvbIYgCXGNJFWVnxywcZSaHfQwGonWClY3vT3PSlEnHg%3D%3D;"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xd95dd3f9>",
                    "type": "UnknownWord",
                    "value": "2bjimupom9b8jkibeamhp"
                },
                "references": {
                    "sentences": [
                        "Cookie: CGIC=YKK%2BIFrld%2FC5FqKj%2Fq1F9a06T0WgC4cOvCqqo3cfsyww1EwAb2TNFWqy8wBcDtObrgkjKtmIBSnsD%2Bmn2eR6MzQeUvHqOBJqA%2FqYS3KEkUQoKUgpOfuW%2BTtuz2OjhVeOJ1oMWnellOIJ4IuNBO5aVtzV8AI3CD4H8Z9tgjhG7i6cXrsAh5EUwKjHqbeEBszHmUhSsCNx0vypRWWd6MkM1HBeENiww7W8GjhoXvX8AwZ5VDTRSX3QSr9jpUuWYXHmJDhOtdG%2FW9UAWEHYkv6IpRsGPKWtAdR%2FzHNzWmZRC3HsMP4LyIOXCs5O8lvUZH2Bv2gtZ1SGZOD0Kd7Oi4nFwA%3D%3D;HSID=gbN30kmxz%2BKKygRK6DJjGJ%2FzGQcMDOSmyQoYi9p2ITFNy6zMnfCERvugTwb5O%2FZyAJ5lGvveYZlNK3N%2BRoNPqCThC%2Fwr2OQbPA3aFJeXZerPSF7bWmhHVGGunlw8HqV3dcjs67tLT7irrJLctXzonzWE%2B6Ukd9kdFTNWW5j7s2JEEAcW9Dp6x6WIdRemz6HC3BifjKQ%2BmwvryFaI%2BsLRi9T042hwKQqV7ikOLOsHOOCqlCKs0vcpFS5vUXzdGwSWdONWLHMEkuApe5B%2BUC7bULbJvnoqnT1jFFEE3vm5gSU%2BGKIbVqBCseLx42av7mxWCmJfB1mpDH3K6tJof0YKpQ%3D%3D;DV=arPk%2BRhtodeAHMzW%2FqoqfkfCFpUR1CYM5oW%2FK7onqCf46Xqk2OR0LjLK%2BQL7jCS5yrcZA2r2hYulBxnpVa%2B8tO%2BJImuPOM9B8JkIbEAMHp%2BvNq8vcSj78wA%2FoW0Wgx8Sw9lSMno4CgPoNgF1mrkm9m9cd7U6wQS7WGKR6Wufxuvjlyt6zf5xtU2gq9WtsxOglu%2BXOYApwXiTIEO853sEnzlVNopwMbYkBm5Mu2LSEycyBm4A9nWKVCr9r0xisHCGzde3sBO4hY7WyykPK6vsU3Ds36FVNH3Kv7jx1Kf6tCVe9ukypCd8j%2FXJWAgPwv%2BsWcyA6ky9skKq1GDuoMJQ5A%3D%3D;ANID=modcr%2B3xO4FT10Fb3jE3afiK3eFqJCs1ylPBjge%2F6lgEM3Li5i5UZ%2BviQCBS1cuiaiQ%2F9Cj62z%2BapXfRMVWSFEeZTv9rkmPKmp5FZHUq5VLHNyhrBtjScNXwDZVakrx9ZYt1uzzh2X93c6Z6YQsyNWlkfdmlZS1FCGOf0aaVZfIRiUW%2FXX6zNVph%2FBpYTicXqZ1qaiPAWb5FNF%2BfJylCjmVDOFCZHJ4E6M0Pph%2BvvgjuCO9bRHWjI2Ouz%2B8ETyMBoQOkSDGzzInMeapRKmXYNDhdcEogwNmRkJqoRJjBhHzvbIYgCXGNJFWVnxywcZSaHfQwGonWClY3vT3PSlEnHg%3D%3D;"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x4d40d020>",
                    "type": "UnknownWord",
                    "value": "2bvnq8vcsj78wa"
                },
                "references": {
                    "sentences": [
                        "Cookie: CGIC=YKK%2BIFrld%2FC5FqKj%2Fq1F9a06T0WgC4cOvCqqo3cfsyww1EwAb2TNFWqy8wBcDtObrgkjKtmIBSnsD%2Bmn2eR6MzQeUvHqOBJqA%2FqYS3KEkUQoKUgpOfuW%2BTtuz2OjhVeOJ1oMWnellOIJ4IuNBO5aVtzV8AI3CD4H8Z9tgjhG7i6cXrsAh5EUwKjHqbeEBszHmUhSsCNx0vypRWWd6MkM1HBeENiww7W8GjhoXvX8AwZ5VDTRSX3QSr9jpUuWYXHmJDhOtdG%2FW9UAWEHYkv6IpRsGPKWtAdR%2FzHNzWmZRC3HsMP4LyIOXCs5O8lvUZH2Bv2gtZ1SGZOD0Kd7Oi4nFwA%3D%3D;HSID=gbN30kmxz%2BKKygRK6DJjGJ%2FzGQcMDOSmyQoYi9p2ITFNy6zMnfCERvugTwb5O%2FZyAJ5lGvveYZlNK3N%2BRoNPqCThC%2Fwr2OQbPA3aFJeXZerPSF7bWmhHVGGunlw8HqV3dcjs67tLT7irrJLctXzonzWE%2B6Ukd9kdFTNWW5j7s2JEEAcW9Dp6x6WIdRemz6HC3BifjKQ%2BmwvryFaI%2BsLRi9T042hwKQqV7ikOLOsHOOCqlCKs0vcpFS5vUXzdGwSWdONWLHMEkuApe5B%2BUC7bULbJvnoqnT1jFFEE3vm5gSU%2BGKIbVqBCseLx42av7mxWCmJfB1mpDH3K6tJof0YKpQ%3D%3D;DV=arPk%2BRhtodeAHMzW%2FqoqfkfCFpUR1CYM5oW%2FK7onqCf46Xqk2OR0LjLK%2BQL7jCS5yrcZA2r2hYulBxnpVa%2B8tO%2BJImuPOM9B8JkIbEAMHp%2BvNq8vcSj78wA%2FoW0Wgx8Sw9lSMno4CgPoNgF1mrkm9m9cd7U6wQS7WGKR6Wufxuvjlyt6zf5xtU2gq9WtsxOglu%2BXOYApwXiTIEO853sEnzlVNopwMbYkBm5Mu2LSEycyBm4A9nWKVCr9r0xisHCGzde3sBO4hY7WyykPK6vsU3Ds36FVNH3Kv7jx1Kf6tCVe9ukypCd8j%2FXJWAgPwv%2BsWcyA6ky9skKq1GDuoMJQ5A%3D%3D;ANID=modcr%2B3xO4FT10Fb3jE3afiK3eFqJCs1ylPBjge%2F6lgEM3Li5i5UZ%2BviQCBS1cuiaiQ%2F9Cj62z%2BapXfRMVWSFEeZTv9rkmPKmp5FZHUq5VLHNyhrBtjScNXwDZVakrx9ZYt1uzzh2X93c6Z6YQsyNWlkfdmlZS1FCGOf0aaVZfIRiUW%2FXX6zNVph%2FBpYTicXqZ1qaiPAWb5FNF%2BfJylCjmVDOFCZHJ4E6M0Pph%2BvvgjuCO9bRHWjI2Ouz%2B8ETyMBoQOkSDGzzInMeapRKmXYNDhdcEogwNmRkJqoRJjBhHzvbIYgCXGNJFWVnxywcZSaHfQwGonWClY3vT3PSlEnHg%3D%3D;"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xfcaedcb0>",
                    "type": "UnknownWord",
                    "value": "2fow0wgx8sw9lsmno4cgpongf1mrkm9m9cd7u6wqs7wgkr6wufxuvjlyt6zf5xtu2gq9wtsxoglu"
                },
                "references": {
                    "sentences": [
                        "Cookie: CGIC=YKK%2BIFrld%2FC5FqKj%2Fq1F9a06T0WgC4cOvCqqo3cfsyww1EwAb2TNFWqy8wBcDtObrgkjKtmIBSnsD%2Bmn2eR6MzQeUvHqOBJqA%2FqYS3KEkUQoKUgpOfuW%2BTtuz2OjhVeOJ1oMWnellOIJ4IuNBO5aVtzV8AI3CD4H8Z9tgjhG7i6cXrsAh5EUwKjHqbeEBszHmUhSsCNx0vypRWWd6MkM1HBeENiww7W8GjhoXvX8AwZ5VDTRSX3QSr9jpUuWYXHmJDhOtdG%2FW9UAWEHYkv6IpRsGPKWtAdR%2FzHNzWmZRC3HsMP4LyIOXCs5O8lvUZH2Bv2gtZ1SGZOD0Kd7Oi4nFwA%3D%3D;HSID=gbN30kmxz%2BKKygRK6DJjGJ%2FzGQcMDOSmyQoYi9p2ITFNy6zMnfCERvugTwb5O%2FZyAJ5lGvveYZlNK3N%2BRoNPqCThC%2Fwr2OQbPA3aFJeXZerPSF7bWmhHVGGunlw8HqV3dcjs67tLT7irrJLctXzonzWE%2B6Ukd9kdFTNWW5j7s2JEEAcW9Dp6x6WIdRemz6HC3BifjKQ%2BmwvryFaI%2BsLRi9T042hwKQqV7ikOLOsHOOCqlCKs0vcpFS5vUXzdGwSWdONWLHMEkuApe5B%2BUC7bULbJvnoqnT1jFFEE3vm5gSU%2BGKIbVqBCseLx42av7mxWCmJfB1mpDH3K6tJof0YKpQ%3D%3D;DV=arPk%2BRhtodeAHMzW%2FqoqfkfCFpUR1CYM5oW%2FK7onqCf46Xqk2OR0LjLK%2BQL7jCS5yrcZA2r2hYulBxnpVa%2B8tO%2BJImuPOM9B8JkIbEAMHp%2BvNq8vcSj78wA%2FoW0Wgx8Sw9lSMno4CgPoNgF1mrkm9m9cd7U6wQS7WGKR6Wufxuvjlyt6zf5xtU2gq9WtsxOglu%2BXOYApwXiTIEO853sEnzlVNopwMbYkBm5Mu2LSEycyBm4A9nWKVCr9r0xisHCGzde3sBO4hY7WyykPK6vsU3Ds36FVNH3Kv7jx1Kf6tCVe9ukypCd8j%2FXJWAgPwv%2BsWcyA6ky9skKq1GDuoMJQ5A%3D%3D;ANID=modcr%2B3xO4FT10Fb3jE3afiK3eFqJCs1ylPBjge%2F6lgEM3Li5i5UZ%2BviQCBS1cuiaiQ%2F9Cj62z%2BapXfRMVWSFEeZTv9rkmPKmp5FZHUq5VLHNyhrBtjScNXwDZVakrx9ZYt1uzzh2X93c6Z6YQsyNWlkfdmlZS1FCGOf0aaVZfIRiUW%2FXX6zNVph%2FBpYTicXqZ1qaiPAWb5FNF%2BfJylCjmVDOFCZHJ4E6M0Pph%2BvvgjuCO9bRHWjI2Ouz%2B8ETyMBoQOkSDGzzInMeapRKmXYNDhdcEogwNmRkJqoRJjBhHzvbIYgCXGNJFWVnxywcZSaHfQwGonWClY3vT3PSlEnHg%3D%3D;"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xa13ed1eb>",
                    "type": "UnknownWord",
                    "value": "2bxoyapwxitieo853senzlvnopwmbykbm5mu2lseycybm4a9nwkvcr9r0xishcgzde3sbo4hy7wyykpk6vsu3ds36fvnh3kv7jx1kf6tcve9ukypcd8j"
                },
                "references": {
                    "sentences": [
                        "Cookie: CGIC=YKK%2BIFrld%2FC5FqKj%2Fq1F9a06T0WgC4cOvCqqo3cfsyww1EwAb2TNFWqy8wBcDtObrgkjKtmIBSnsD%2Bmn2eR6MzQeUvHqOBJqA%2FqYS3KEkUQoKUgpOfuW%2BTtuz2OjhVeOJ1oMWnellOIJ4IuNBO5aVtzV8AI3CD4H8Z9tgjhG7i6cXrsAh5EUwKjHqbeEBszHmUhSsCNx0vypRWWd6MkM1HBeENiww7W8GjhoXvX8AwZ5VDTRSX3QSr9jpUuWYXHmJDhOtdG%2FW9UAWEHYkv6IpRsGPKWtAdR%2FzHNzWmZRC3HsMP4LyIOXCs5O8lvUZH2Bv2gtZ1SGZOD0Kd7Oi4nFwA%3D%3D;HSID=gbN30kmxz%2BKKygRK6DJjGJ%2FzGQcMDOSmyQoYi9p2ITFNy6zMnfCERvugTwb5O%2FZyAJ5lGvveYZlNK3N%2BRoNPqCThC%2Fwr2OQbPA3aFJeXZerPSF7bWmhHVGGunlw8HqV3dcjs67tLT7irrJLctXzonzWE%2B6Ukd9kdFTNWW5j7s2JEEAcW9Dp6x6WIdRemz6HC3BifjKQ%2BmwvryFaI%2BsLRi9T042hwKQqV7ikOLOsHOOCqlCKs0vcpFS5vUXzdGwSWdONWLHMEkuApe5B%2BUC7bULbJvnoqnT1jFFEE3vm5gSU%2BGKIbVqBCseLx42av7mxWCmJfB1mpDH3K6tJof0YKpQ%3D%3D;DV=arPk%2BRhtodeAHMzW%2FqoqfkfCFpUR1CYM5oW%2FK7onqCf46Xqk2OR0LjLK%2BQL7jCS5yrcZA2r2hYulBxnpVa%2B8tO%2BJImuPOM9B8JkIbEAMHp%2BvNq8vcSj78wA%2FoW0Wgx8Sw9lSMno4CgPoNgF1mrkm9m9cd7U6wQS7WGKR6Wufxuvjlyt6zf5xtU2gq9WtsxOglu%2BXOYApwXiTIEO853sEnzlVNopwMbYkBm5Mu2LSEycyBm4A9nWKVCr9r0xisHCGzde3sBO4hY7WyykPK6vsU3Ds36FVNH3Kv7jx1Kf6tCVe9ukypCd8j%2FXJWAgPwv%2BsWcyA6ky9skKq1GDuoMJQ5A%3D%3D;ANID=modcr%2B3xO4FT10Fb3jE3afiK3eFqJCs1ylPBjge%2F6lgEM3Li5i5UZ%2BviQCBS1cuiaiQ%2F9Cj62z%2BapXfRMVWSFEeZTv9rkmPKmp5FZHUq5VLHNyhrBtjScNXwDZVakrx9ZYt1uzzh2X93c6Z6YQsyNWlkfdmlZS1FCGOf0aaVZfIRiUW%2FXX6zNVph%2FBpYTicXqZ1qaiPAWb5FNF%2BfJylCjmVDOFCZHJ4E6M0Pph%2BvvgjuCO9bRHWjI2Ouz%2B8ETyMBoQOkSDGzzInMeapRKmXYNDhdcEogwNmRkJqoRJjBhHzvbIYgCXGNJFWVnxywcZSaHfQwGonWClY3vT3PSlEnHg%3D%3D;"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x8e9406ba>",
                    "type": "UnknownWord",
                    "value": "2fxjwagpwv"
                },
                "references": {
                    "sentences": [
                        "Cookie: CGIC=YKK%2BIFrld%2FC5FqKj%2Fq1F9a06T0WgC4cOvCqqo3cfsyww1EwAb2TNFWqy8wBcDtObrgkjKtmIBSnsD%2Bmn2eR6MzQeUvHqOBJqA%2FqYS3KEkUQoKUgpOfuW%2BTtuz2OjhVeOJ1oMWnellOIJ4IuNBO5aVtzV8AI3CD4H8Z9tgjhG7i6cXrsAh5EUwKjHqbeEBszHmUhSsCNx0vypRWWd6MkM1HBeENiww7W8GjhoXvX8AwZ5VDTRSX3QSr9jpUuWYXHmJDhOtdG%2FW9UAWEHYkv6IpRsGPKWtAdR%2FzHNzWmZRC3HsMP4LyIOXCs5O8lvUZH2Bv2gtZ1SGZOD0Kd7Oi4nFwA%3D%3D;HSID=gbN30kmxz%2BKKygRK6DJjGJ%2FzGQcMDOSmyQoYi9p2ITFNy6zMnfCERvugTwb5O%2FZyAJ5lGvveYZlNK3N%2BRoNPqCThC%2Fwr2OQbPA3aFJeXZerPSF7bWmhHVGGunlw8HqV3dcjs67tLT7irrJLctXzonzWE%2B6Ukd9kdFTNWW5j7s2JEEAcW9Dp6x6WIdRemz6HC3BifjKQ%2BmwvryFaI%2BsLRi9T042hwKQqV7ikOLOsHOOCqlCKs0vcpFS5vUXzdGwSWdONWLHMEkuApe5B%2BUC7bULbJvnoqnT1jFFEE3vm5gSU%2BGKIbVqBCseLx42av7mxWCmJfB1mpDH3K6tJof0YKpQ%3D%3D;DV=arPk%2BRhtodeAHMzW%2FqoqfkfCFpUR1CYM5oW%2FK7onqCf46Xqk2OR0LjLK%2BQL7jCS5yrcZA2r2hYulBxnpVa%2B8tO%2BJImuPOM9B8JkIbEAMHp%2BvNq8vcSj78wA%2FoW0Wgx8Sw9lSMno4CgPoNgF1mrkm9m9cd7U6wQS7WGKR6Wufxuvjlyt6zf5xtU2gq9WtsxOglu%2BXOYApwXiTIEO853sEnzlVNopwMbYkBm5Mu2LSEycyBm4A9nWKVCr9r0xisHCGzde3sBO4hY7WyykPK6vsU3Ds36FVNH3Kv7jx1Kf6tCVe9ukypCd8j%2FXJWAgPwv%2BsWcyA6ky9skKq1GDuoMJQ5A%3D%3D;ANID=modcr%2B3xO4FT10Fb3jE3afiK3eFqJCs1ylPBjge%2F6lgEM3Li5i5UZ%2BviQCBS1cuiaiQ%2F9Cj62z%2BapXfRMVWSFEeZTv9rkmPKmp5FZHUq5VLHNyhrBtjScNXwDZVakrx9ZYt1uzzh2X93c6Z6YQsyNWlkfdmlZS1FCGOf0aaVZfIRiUW%2FXX6zNVph%2FBpYTicXqZ1qaiPAWb5FNF%2BfJylCjmVDOFCZHJ4E6M0Pph%2BvvgjuCO9bRHWjI2Ouz%2B8ETyMBoQOkSDGzzInMeapRKmXYNDhdcEogwNmRkJqoRJjBhHzvbIYgCXGNJFWVnxywcZSaHfQwGonWClY3vT3PSlEnHg%3D%3D;"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x9adc019f>",
                    "type": "UnknownWord",
                    "value": "2bswcya6ky9skkq1gduomjq5a"
                },
                "references": {
                    "sentences": [
                        "Cookie: CGIC=YKK%2BIFrld%2FC5FqKj%2Fq1F9a06T0WgC4cOvCqqo3cfsyww1EwAb2TNFWqy8wBcDtObrgkjKtmIBSnsD%2Bmn2eR6MzQeUvHqOBJqA%2FqYS3KEkUQoKUgpOfuW%2BTtuz2OjhVeOJ1oMWnellOIJ4IuNBO5aVtzV8AI3CD4H8Z9tgjhG7i6cXrsAh5EUwKjHqbeEBszHmUhSsCNx0vypRWWd6MkM1HBeENiww7W8GjhoXvX8AwZ5VDTRSX3QSr9jpUuWYXHmJDhOtdG%2FW9UAWEHYkv6IpRsGPKWtAdR%2FzHNzWmZRC3HsMP4LyIOXCs5O8lvUZH2Bv2gtZ1SGZOD0Kd7Oi4nFwA%3D%3D;HSID=gbN30kmxz%2BKKygRK6DJjGJ%2FzGQcMDOSmyQoYi9p2ITFNy6zMnfCERvugTwb5O%2FZyAJ5lGvveYZlNK3N%2BRoNPqCThC%2Fwr2OQbPA3aFJeXZerPSF7bWmhHVGGunlw8HqV3dcjs67tLT7irrJLctXzonzWE%2B6Ukd9kdFTNWW5j7s2JEEAcW9Dp6x6WIdRemz6HC3BifjKQ%2BmwvryFaI%2BsLRi9T042hwKQqV7ikOLOsHOOCqlCKs0vcpFS5vUXzdGwSWdONWLHMEkuApe5B%2BUC7bULbJvnoqnT1jFFEE3vm5gSU%2BGKIbVqBCseLx42av7mxWCmJfB1mpDH3K6tJof0YKpQ%3D%3D;DV=arPk%2BRhtodeAHMzW%2FqoqfkfCFpUR1CYM5oW%2FK7onqCf46Xqk2OR0LjLK%2BQL7jCS5yrcZA2r2hYulBxnpVa%2B8tO%2BJImuPOM9B8JkIbEAMHp%2BvNq8vcSj78wA%2FoW0Wgx8Sw9lSMno4CgPoNgF1mrkm9m9cd7U6wQS7WGKR6Wufxuvjlyt6zf5xtU2gq9WtsxOglu%2BXOYApwXiTIEO853sEnzlVNopwMbYkBm5Mu2LSEycyBm4A9nWKVCr9r0xisHCGzde3sBO4hY7WyykPK6vsU3Ds36FVNH3Kv7jx1Kf6tCVe9ukypCd8j%2FXJWAgPwv%2BsWcyA6ky9skKq1GDuoMJQ5A%3D%3D;ANID=modcr%2B3xO4FT10Fb3jE3afiK3eFqJCs1ylPBjge%2F6lgEM3Li5i5UZ%2BviQCBS1cuiaiQ%2F9Cj62z%2BapXfRMVWSFEeZTv9rkmPKmp5FZHUq5VLHNyhrBtjScNXwDZVakrx9ZYt1uzzh2X93c6Z6YQsyNWlkfdmlZS1FCGOf0aaVZfIRiUW%2FXX6zNVph%2FBpYTicXqZ1qaiPAWb5FNF%2BfJylCjmVDOFCZHJ4E6M0Pph%2BvvgjuCO9bRHWjI2Ouz%2B8ETyMBoQOkSDGzzInMeapRKmXYNDhdcEogwNmRkJqoRJjBhHzvbIYgCXGNJFWVnxywcZSaHfQwGonWClY3vT3PSlEnHg%3D%3D;"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xa2fcc4a1>",
                    "type": "UnknownWord",
                    "value": "anid"
                },
                "references": {
                    "sentences": [
                        "Cookie: CGIC=YKK%2BIFrld%2FC5FqKj%2Fq1F9a06T0WgC4cOvCqqo3cfsyww1EwAb2TNFWqy8wBcDtObrgkjKtmIBSnsD%2Bmn2eR6MzQeUvHqOBJqA%2FqYS3KEkUQoKUgpOfuW%2BTtuz2OjhVeOJ1oMWnellOIJ4IuNBO5aVtzV8AI3CD4H8Z9tgjhG7i6cXrsAh5EUwKjHqbeEBszHmUhSsCNx0vypRWWd6MkM1HBeENiww7W8GjhoXvX8AwZ5VDTRSX3QSr9jpUuWYXHmJDhOtdG%2FW9UAWEHYkv6IpRsGPKWtAdR%2FzHNzWmZRC3HsMP4LyIOXCs5O8lvUZH2Bv2gtZ1SGZOD0Kd7Oi4nFwA%3D%3D;HSID=gbN30kmxz%2BKKygRK6DJjGJ%2FzGQcMDOSmyQoYi9p2ITFNy6zMnfCERvugTwb5O%2FZyAJ5lGvveYZlNK3N%2BRoNPqCThC%2Fwr2OQbPA3aFJeXZerPSF7bWmhHVGGunlw8HqV3dcjs67tLT7irrJLctXzonzWE%2B6Ukd9kdFTNWW5j7s2JEEAcW9Dp6x6WIdRemz6HC3BifjKQ%2BmwvryFaI%2BsLRi9T042hwKQqV7ikOLOsHOOCqlCKs0vcpFS5vUXzdGwSWdONWLHMEkuApe5B%2BUC7bULbJvnoqnT1jFFEE3vm5gSU%2BGKIbVqBCseLx42av7mxWCmJfB1mpDH3K6tJof0YKpQ%3D%3D;DV=arPk%2BRhtodeAHMzW%2FqoqfkfCFpUR1CYM5oW%2FK7onqCf46Xqk2OR0LjLK%2BQL7jCS5yrcZA2r2hYulBxnpVa%2B8tO%2BJImuPOM9B8JkIbEAMHp%2BvNq8vcSj78wA%2FoW0Wgx8Sw9lSMno4CgPoNgF1mrkm9m9cd7U6wQS7WGKR6Wufxuvjlyt6zf5xtU2gq9WtsxOglu%2BXOYApwXiTIEO853sEnzlVNopwMbYkBm5Mu2LSEycyBm4A9nWKVCr9r0xisHCGzde3sBO4hY7WyykPK6vsU3Ds36FVNH3Kv7jx1Kf6tCVe9ukypCd8j%2FXJWAgPwv%2BsWcyA6ky9skKq1GDuoMJQ5A%3D%3D;ANID=modcr%2B3xO4FT10Fb3jE3afiK3eFqJCs1ylPBjge%2F6lgEM3Li5i5UZ%2BviQCBS1cuiaiQ%2F9Cj62z%2BapXfRMVWSFEeZTv9rkmPKmp5FZHUq5VLHNyhrBtjScNXwDZVakrx9ZYt1uzzh2X93c6Z6YQsyNWlkfdmlZS1FCGOf0aaVZfIRiUW%2FXX6zNVph%2FBpYTicXqZ1qaiPAWb5FNF%2BfJylCjmVDOFCZHJ4E6M0Pph%2BvvgjuCO9bRHWjI2Ouz%2B8ETyMBoQOkSDGzzInMeapRKmXYNDhdcEogwNmRkJqoRJjBhHzvbIYgCXGNJFWVnxywcZSaHfQwGonWClY3vT3PSlEnHg%3D%3D;"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xe0237703>",
                    "type": "UnknownWord",
                    "value": "modcr"
                },
                "references": {
                    "sentences": [
                        "Cookie: CGIC=YKK%2BIFrld%2FC5FqKj%2Fq1F9a06T0WgC4cOvCqqo3cfsyww1EwAb2TNFWqy8wBcDtObrgkjKtmIBSnsD%2Bmn2eR6MzQeUvHqOBJqA%2FqYS3KEkUQoKUgpOfuW%2BTtuz2OjhVeOJ1oMWnellOIJ4IuNBO5aVtzV8AI3CD4H8Z9tgjhG7i6cXrsAh5EUwKjHqbeEBszHmUhSsCNx0vypRWWd6MkM1HBeENiww7W8GjhoXvX8AwZ5VDTRSX3QSr9jpUuWYXHmJDhOtdG%2FW9UAWEHYkv6IpRsGPKWtAdR%2FzHNzWmZRC3HsMP4LyIOXCs5O8lvUZH2Bv2gtZ1SGZOD0Kd7Oi4nFwA%3D%3D;HSID=gbN30kmxz%2BKKygRK6DJjGJ%2FzGQcMDOSmyQoYi9p2ITFNy6zMnfCERvugTwb5O%2FZyAJ5lGvveYZlNK3N%2BRoNPqCThC%2Fwr2OQbPA3aFJeXZerPSF7bWmhHVGGunlw8HqV3dcjs67tLT7irrJLctXzonzWE%2B6Ukd9kdFTNWW5j7s2JEEAcW9Dp6x6WIdRemz6HC3BifjKQ%2BmwvryFaI%2BsLRi9T042hwKQqV7ikOLOsHOOCqlCKs0vcpFS5vUXzdGwSWdONWLHMEkuApe5B%2BUC7bULbJvnoqnT1jFFEE3vm5gSU%2BGKIbVqBCseLx42av7mxWCmJfB1mpDH3K6tJof0YKpQ%3D%3D;DV=arPk%2BRhtodeAHMzW%2FqoqfkfCFpUR1CYM5oW%2FK7onqCf46Xqk2OR0LjLK%2BQL7jCS5yrcZA2r2hYulBxnpVa%2B8tO%2BJImuPOM9B8JkIbEAMHp%2BvNq8vcSj78wA%2FoW0Wgx8Sw9lSMno4CgPoNgF1mrkm9m9cd7U6wQS7WGKR6Wufxuvjlyt6zf5xtU2gq9WtsxOglu%2BXOYApwXiTIEO853sEnzlVNopwMbYkBm5Mu2LSEycyBm4A9nWKVCr9r0xisHCGzde3sBO4hY7WyykPK6vsU3Ds36FVNH3Kv7jx1Kf6tCVe9ukypCd8j%2FXJWAgPwv%2BsWcyA6ky9skKq1GDuoMJQ5A%3D%3D;ANID=modcr%2B3xO4FT10Fb3jE3afiK3eFqJCs1ylPBjge%2F6lgEM3Li5i5UZ%2BviQCBS1cuiaiQ%2F9Cj62z%2BapXfRMVWSFEeZTv9rkmPKmp5FZHUq5VLHNyhrBtjScNXwDZVakrx9ZYt1uzzh2X93c6Z6YQsyNWlkfdmlZS1FCGOf0aaVZfIRiUW%2FXX6zNVph%2FBpYTicXqZ1qaiPAWb5FNF%2BfJylCjmVDOFCZHJ4E6M0Pph%2BvvgjuCO9bRHWjI2Ouz%2B8ETyMBoQOkSDGzzInMeapRKmXYNDhdcEogwNmRkJqoRJjBhHzvbIYgCXGNJFWVnxywcZSaHfQwGonWClY3vT3PSlEnHg%3D%3D;"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x25159234>",
                    "type": "UnknownWord",
                    "value": "2b3xo4ft10fb3je3afik3efqjcs1ylpbjge"
                },
                "references": {
                    "sentences": [
                        "Cookie: CGIC=YKK%2BIFrld%2FC5FqKj%2Fq1F9a06T0WgC4cOvCqqo3cfsyww1EwAb2TNFWqy8wBcDtObrgkjKtmIBSnsD%2Bmn2eR6MzQeUvHqOBJqA%2FqYS3KEkUQoKUgpOfuW%2BTtuz2OjhVeOJ1oMWnellOIJ4IuNBO5aVtzV8AI3CD4H8Z9tgjhG7i6cXrsAh5EUwKjHqbeEBszHmUhSsCNx0vypRWWd6MkM1HBeENiww7W8GjhoXvX8AwZ5VDTRSX3QSr9jpUuWYXHmJDhOtdG%2FW9UAWEHYkv6IpRsGPKWtAdR%2FzHNzWmZRC3HsMP4LyIOXCs5O8lvUZH2Bv2gtZ1SGZOD0Kd7Oi4nFwA%3D%3D;HSID=gbN30kmxz%2BKKygRK6DJjGJ%2FzGQcMDOSmyQoYi9p2ITFNy6zMnfCERvugTwb5O%2FZyAJ5lGvveYZlNK3N%2BRoNPqCThC%2Fwr2OQbPA3aFJeXZerPSF7bWmhHVGGunlw8HqV3dcjs67tLT7irrJLctXzonzWE%2B6Ukd9kdFTNWW5j7s2JEEAcW9Dp6x6WIdRemz6HC3BifjKQ%2BmwvryFaI%2BsLRi9T042hwKQqV7ikOLOsHOOCqlCKs0vcpFS5vUXzdGwSWdONWLHMEkuApe5B%2BUC7bULbJvnoqnT1jFFEE3vm5gSU%2BGKIbVqBCseLx42av7mxWCmJfB1mpDH3K6tJof0YKpQ%3D%3D;DV=arPk%2BRhtodeAHMzW%2FqoqfkfCFpUR1CYM5oW%2FK7onqCf46Xqk2OR0LjLK%2BQL7jCS5yrcZA2r2hYulBxnpVa%2B8tO%2BJImuPOM9B8JkIbEAMHp%2BvNq8vcSj78wA%2FoW0Wgx8Sw9lSMno4CgPoNgF1mrkm9m9cd7U6wQS7WGKR6Wufxuvjlyt6zf5xtU2gq9WtsxOglu%2BXOYApwXiTIEO853sEnzlVNopwMbYkBm5Mu2LSEycyBm4A9nWKVCr9r0xisHCGzde3sBO4hY7WyykPK6vsU3Ds36FVNH3Kv7jx1Kf6tCVe9ukypCd8j%2FXJWAgPwv%2BsWcyA6ky9skKq1GDuoMJQ5A%3D%3D;ANID=modcr%2B3xO4FT10Fb3jE3afiK3eFqJCs1ylPBjge%2F6lgEM3Li5i5UZ%2BviQCBS1cuiaiQ%2F9Cj62z%2BapXfRMVWSFEeZTv9rkmPKmp5FZHUq5VLHNyhrBtjScNXwDZVakrx9ZYt1uzzh2X93c6Z6YQsyNWlkfdmlZS1FCGOf0aaVZfIRiUW%2FXX6zNVph%2FBpYTicXqZ1qaiPAWb5FNF%2BfJylCjmVDOFCZHJ4E6M0Pph%2BvvgjuCO9bRHWjI2Ouz%2B8ETyMBoQOkSDGzzInMeapRKmXYNDhdcEogwNmRkJqoRJjBhHzvbIYgCXGNJFWVnxywcZSaHfQwGonWClY3vT3PSlEnHg%3D%3D;"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x92b562e1>",
                    "type": "UnknownWord",
                    "value": "2f6lgem3li5i5uz"
                },
                "references": {
                    "sentences": [
                        "Cookie: CGIC=YKK%2BIFrld%2FC5FqKj%2Fq1F9a06T0WgC4cOvCqqo3cfsyww1EwAb2TNFWqy8wBcDtObrgkjKtmIBSnsD%2Bmn2eR6MzQeUvHqOBJqA%2FqYS3KEkUQoKUgpOfuW%2BTtuz2OjhVeOJ1oMWnellOIJ4IuNBO5aVtzV8AI3CD4H8Z9tgjhG7i6cXrsAh5EUwKjHqbeEBszHmUhSsCNx0vypRWWd6MkM1HBeENiww7W8GjhoXvX8AwZ5VDTRSX3QSr9jpUuWYXHmJDhOtdG%2FW9UAWEHYkv6IpRsGPKWtAdR%2FzHNzWmZRC3HsMP4LyIOXCs5O8lvUZH2Bv2gtZ1SGZOD0Kd7Oi4nFwA%3D%3D;HSID=gbN30kmxz%2BKKygRK6DJjGJ%2FzGQcMDOSmyQoYi9p2ITFNy6zMnfCERvugTwb5O%2FZyAJ5lGvveYZlNK3N%2BRoNPqCThC%2Fwr2OQbPA3aFJeXZerPSF7bWmhHVGGunlw8HqV3dcjs67tLT7irrJLctXzonzWE%2B6Ukd9kdFTNWW5j7s2JEEAcW9Dp6x6WIdRemz6HC3BifjKQ%2BmwvryFaI%2BsLRi9T042hwKQqV7ikOLOsHOOCqlCKs0vcpFS5vUXzdGwSWdONWLHMEkuApe5B%2BUC7bULbJvnoqnT1jFFEE3vm5gSU%2BGKIbVqBCseLx42av7mxWCmJfB1mpDH3K6tJof0YKpQ%3D%3D;DV=arPk%2BRhtodeAHMzW%2FqoqfkfCFpUR1CYM5oW%2FK7onqCf46Xqk2OR0LjLK%2BQL7jCS5yrcZA2r2hYulBxnpVa%2B8tO%2BJImuPOM9B8JkIbEAMHp%2BvNq8vcSj78wA%2FoW0Wgx8Sw9lSMno4CgPoNgF1mrkm9m9cd7U6wQS7WGKR6Wufxuvjlyt6zf5xtU2gq9WtsxOglu%2BXOYApwXiTIEO853sEnzlVNopwMbYkBm5Mu2LSEycyBm4A9nWKVCr9r0xisHCGzde3sBO4hY7WyykPK6vsU3Ds36FVNH3Kv7jx1Kf6tCVe9ukypCd8j%2FXJWAgPwv%2BsWcyA6ky9skKq1GDuoMJQ5A%3D%3D;ANID=modcr%2B3xO4FT10Fb3jE3afiK3eFqJCs1ylPBjge%2F6lgEM3Li5i5UZ%2BviQCBS1cuiaiQ%2F9Cj62z%2BapXfRMVWSFEeZTv9rkmPKmp5FZHUq5VLHNyhrBtjScNXwDZVakrx9ZYt1uzzh2X93c6Z6YQsyNWlkfdmlZS1FCGOf0aaVZfIRiUW%2FXX6zNVph%2FBpYTicXqZ1qaiPAWb5FNF%2BfJylCjmVDOFCZHJ4E6M0Pph%2BvvgjuCO9bRHWjI2Ouz%2B8ETyMBoQOkSDGzzInMeapRKmXYNDhdcEogwNmRkJqoRJjBhHzvbIYgCXGNJFWVnxywcZSaHfQwGonWClY3vT3PSlEnHg%3D%3D;"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x261e83e7>",
                    "type": "UnknownWord",
                    "value": "2bviqcbs1cuiaiq"
                },
                "references": {
                    "sentences": [
                        "Cookie: CGIC=YKK%2BIFrld%2FC5FqKj%2Fq1F9a06T0WgC4cOvCqqo3cfsyww1EwAb2TNFWqy8wBcDtObrgkjKtmIBSnsD%2Bmn2eR6MzQeUvHqOBJqA%2FqYS3KEkUQoKUgpOfuW%2BTtuz2OjhVeOJ1oMWnellOIJ4IuNBO5aVtzV8AI3CD4H8Z9tgjhG7i6cXrsAh5EUwKjHqbeEBszHmUhSsCNx0vypRWWd6MkM1HBeENiww7W8GjhoXvX8AwZ5VDTRSX3QSr9jpUuWYXHmJDhOtdG%2FW9UAWEHYkv6IpRsGPKWtAdR%2FzHNzWmZRC3HsMP4LyIOXCs5O8lvUZH2Bv2gtZ1SGZOD0Kd7Oi4nFwA%3D%3D;HSID=gbN30kmxz%2BKKygRK6DJjGJ%2FzGQcMDOSmyQoYi9p2ITFNy6zMnfCERvugTwb5O%2FZyAJ5lGvveYZlNK3N%2BRoNPqCThC%2Fwr2OQbPA3aFJeXZerPSF7bWmhHVGGunlw8HqV3dcjs67tLT7irrJLctXzonzWE%2B6Ukd9kdFTNWW5j7s2JEEAcW9Dp6x6WIdRemz6HC3BifjKQ%2BmwvryFaI%2BsLRi9T042hwKQqV7ikOLOsHOOCqlCKs0vcpFS5vUXzdGwSWdONWLHMEkuApe5B%2BUC7bULbJvnoqnT1jFFEE3vm5gSU%2BGKIbVqBCseLx42av7mxWCmJfB1mpDH3K6tJof0YKpQ%3D%3D;DV=arPk%2BRhtodeAHMzW%2FqoqfkfCFpUR1CYM5oW%2FK7onqCf46Xqk2OR0LjLK%2BQL7jCS5yrcZA2r2hYulBxnpVa%2B8tO%2BJImuPOM9B8JkIbEAMHp%2BvNq8vcSj78wA%2FoW0Wgx8Sw9lSMno4CgPoNgF1mrkm9m9cd7U6wQS7WGKR6Wufxuvjlyt6zf5xtU2gq9WtsxOglu%2BXOYApwXiTIEO853sEnzlVNopwMbYkBm5Mu2LSEycyBm4A9nWKVCr9r0xisHCGzde3sBO4hY7WyykPK6vsU3Ds36FVNH3Kv7jx1Kf6tCVe9ukypCd8j%2FXJWAgPwv%2BsWcyA6ky9skKq1GDuoMJQ5A%3D%3D;ANID=modcr%2B3xO4FT10Fb3jE3afiK3eFqJCs1ylPBjge%2F6lgEM3Li5i5UZ%2BviQCBS1cuiaiQ%2F9Cj62z%2BapXfRMVWSFEeZTv9rkmPKmp5FZHUq5VLHNyhrBtjScNXwDZVakrx9ZYt1uzzh2X93c6Z6YQsyNWlkfdmlZS1FCGOf0aaVZfIRiUW%2FXX6zNVph%2FBpYTicXqZ1qaiPAWb5FNF%2BfJylCjmVDOFCZHJ4E6M0Pph%2BvvgjuCO9bRHWjI2Ouz%2B8ETyMBoQOkSDGzzInMeapRKmXYNDhdcEogwNmRkJqoRJjBhHzvbIYgCXGNJFWVnxywcZSaHfQwGonWClY3vT3PSlEnHg%3D%3D;"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xec33b523>",
                    "type": "UnknownWord",
                    "value": "2f9cj62z"
                },
                "references": {
                    "sentences": [
                        "Cookie: CGIC=YKK%2BIFrld%2FC5FqKj%2Fq1F9a06T0WgC4cOvCqqo3cfsyww1EwAb2TNFWqy8wBcDtObrgkjKtmIBSnsD%2Bmn2eR6MzQeUvHqOBJqA%2FqYS3KEkUQoKUgpOfuW%2BTtuz2OjhVeOJ1oMWnellOIJ4IuNBO5aVtzV8AI3CD4H8Z9tgjhG7i6cXrsAh5EUwKjHqbeEBszHmUhSsCNx0vypRWWd6MkM1HBeENiww7W8GjhoXvX8AwZ5VDTRSX3QSr9jpUuWYXHmJDhOtdG%2FW9UAWEHYkv6IpRsGPKWtAdR%2FzHNzWmZRC3HsMP4LyIOXCs5O8lvUZH2Bv2gtZ1SGZOD0Kd7Oi4nFwA%3D%3D;HSID=gbN30kmxz%2BKKygRK6DJjGJ%2FzGQcMDOSmyQoYi9p2ITFNy6zMnfCERvugTwb5O%2FZyAJ5lGvveYZlNK3N%2BRoNPqCThC%2Fwr2OQbPA3aFJeXZerPSF7bWmhHVGGunlw8HqV3dcjs67tLT7irrJLctXzonzWE%2B6Ukd9kdFTNWW5j7s2JEEAcW9Dp6x6WIdRemz6HC3BifjKQ%2BmwvryFaI%2BsLRi9T042hwKQqV7ikOLOsHOOCqlCKs0vcpFS5vUXzdGwSWdONWLHMEkuApe5B%2BUC7bULbJvnoqnT1jFFEE3vm5gSU%2BGKIbVqBCseLx42av7mxWCmJfB1mpDH3K6tJof0YKpQ%3D%3D;DV=arPk%2BRhtodeAHMzW%2FqoqfkfCFpUR1CYM5oW%2FK7onqCf46Xqk2OR0LjLK%2BQL7jCS5yrcZA2r2hYulBxnpVa%2B8tO%2BJImuPOM9B8JkIbEAMHp%2BvNq8vcSj78wA%2FoW0Wgx8Sw9lSMno4CgPoNgF1mrkm9m9cd7U6wQS7WGKR6Wufxuvjlyt6zf5xtU2gq9WtsxOglu%2BXOYApwXiTIEO853sEnzlVNopwMbYkBm5Mu2LSEycyBm4A9nWKVCr9r0xisHCGzde3sBO4hY7WyykPK6vsU3Ds36FVNH3Kv7jx1Kf6tCVe9ukypCd8j%2FXJWAgPwv%2BsWcyA6ky9skKq1GDuoMJQ5A%3D%3D;ANID=modcr%2B3xO4FT10Fb3jE3afiK3eFqJCs1ylPBjge%2F6lgEM3Li5i5UZ%2BviQCBS1cuiaiQ%2F9Cj62z%2BapXfRMVWSFEeZTv9rkmPKmp5FZHUq5VLHNyhrBtjScNXwDZVakrx9ZYt1uzzh2X93c6Z6YQsyNWlkfdmlZS1FCGOf0aaVZfIRiUW%2FXX6zNVph%2FBpYTicXqZ1qaiPAWb5FNF%2BfJylCjmVDOFCZHJ4E6M0Pph%2BvvgjuCO9bRHWjI2Ouz%2B8ETyMBoQOkSDGzzInMeapRKmXYNDhdcEogwNmRkJqoRJjBhHzvbIYgCXGNJFWVnxywcZSaHfQwGonWClY3vT3PSlEnHg%3D%3D;"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xc48e34c1>",
                    "type": "UnknownWord",
                    "value": "2bapxfrmvwsfeeztv9rkmpkmp5fzhuq5vlhnyhrbtjscnxwdzvakrx9zyt1uzzh2x93c6z6yqsynwlkfdmlzs1fcgof0aavzfiriuw"
                },
                "references": {
                    "sentences": [
                        "Cookie: CGIC=YKK%2BIFrld%2FC5FqKj%2Fq1F9a06T0WgC4cOvCqqo3cfsyww1EwAb2TNFWqy8wBcDtObrgkjKtmIBSnsD%2Bmn2eR6MzQeUvHqOBJqA%2FqYS3KEkUQoKUgpOfuW%2BTtuz2OjhVeOJ1oMWnellOIJ4IuNBO5aVtzV8AI3CD4H8Z9tgjhG7i6cXrsAh5EUwKjHqbeEBszHmUhSsCNx0vypRWWd6MkM1HBeENiww7W8GjhoXvX8AwZ5VDTRSX3QSr9jpUuWYXHmJDhOtdG%2FW9UAWEHYkv6IpRsGPKWtAdR%2FzHNzWmZRC3HsMP4LyIOXCs5O8lvUZH2Bv2gtZ1SGZOD0Kd7Oi4nFwA%3D%3D;HSID=gbN30kmxz%2BKKygRK6DJjGJ%2FzGQcMDOSmyQoYi9p2ITFNy6zMnfCERvugTwb5O%2FZyAJ5lGvveYZlNK3N%2BRoNPqCThC%2Fwr2OQbPA3aFJeXZerPSF7bWmhHVGGunlw8HqV3dcjs67tLT7irrJLctXzonzWE%2B6Ukd9kdFTNWW5j7s2JEEAcW9Dp6x6WIdRemz6HC3BifjKQ%2BmwvryFaI%2BsLRi9T042hwKQqV7ikOLOsHOOCqlCKs0vcpFS5vUXzdGwSWdONWLHMEkuApe5B%2BUC7bULbJvnoqnT1jFFEE3vm5gSU%2BGKIbVqBCseLx42av7mxWCmJfB1mpDH3K6tJof0YKpQ%3D%3D;DV=arPk%2BRhtodeAHMzW%2FqoqfkfCFpUR1CYM5oW%2FK7onqCf46Xqk2OR0LjLK%2BQL7jCS5yrcZA2r2hYulBxnpVa%2B8tO%2BJImuPOM9B8JkIbEAMHp%2BvNq8vcSj78wA%2FoW0Wgx8Sw9lSMno4CgPoNgF1mrkm9m9cd7U6wQS7WGKR6Wufxuvjlyt6zf5xtU2gq9WtsxOglu%2BXOYApwXiTIEO853sEnzlVNopwMbYkBm5Mu2LSEycyBm4A9nWKVCr9r0xisHCGzde3sBO4hY7WyykPK6vsU3Ds36FVNH3Kv7jx1Kf6tCVe9ukypCd8j%2FXJWAgPwv%2BsWcyA6ky9skKq1GDuoMJQ5A%3D%3D;ANID=modcr%2B3xO4FT10Fb3jE3afiK3eFqJCs1ylPBjge%2F6lgEM3Li5i5UZ%2BviQCBS1cuiaiQ%2F9Cj62z%2BapXfRMVWSFEeZTv9rkmPKmp5FZHUq5VLHNyhrBtjScNXwDZVakrx9ZYt1uzzh2X93c6Z6YQsyNWlkfdmlZS1FCGOf0aaVZfIRiUW%2FXX6zNVph%2FBpYTicXqZ1qaiPAWb5FNF%2BfJylCjmVDOFCZHJ4E6M0Pph%2BvvgjuCO9bRHWjI2Ouz%2B8ETyMBoQOkSDGzzInMeapRKmXYNDhdcEogwNmRkJqoRJjBhHzvbIYgCXGNJFWVnxywcZSaHfQwGonWClY3vT3PSlEnHg%3D%3D;"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x3570ba32>",
                    "type": "UnknownWord",
                    "value": "2fxx6znvph"
                },
                "references": {
                    "sentences": [
                        "Cookie: CGIC=YKK%2BIFrld%2FC5FqKj%2Fq1F9a06T0WgC4cOvCqqo3cfsyww1EwAb2TNFWqy8wBcDtObrgkjKtmIBSnsD%2Bmn2eR6MzQeUvHqOBJqA%2FqYS3KEkUQoKUgpOfuW%2BTtuz2OjhVeOJ1oMWnellOIJ4IuNBO5aVtzV8AI3CD4H8Z9tgjhG7i6cXrsAh5EUwKjHqbeEBszHmUhSsCNx0vypRWWd6MkM1HBeENiww7W8GjhoXvX8AwZ5VDTRSX3QSr9jpUuWYXHmJDhOtdG%2FW9UAWEHYkv6IpRsGPKWtAdR%2FzHNzWmZRC3HsMP4LyIOXCs5O8lvUZH2Bv2gtZ1SGZOD0Kd7Oi4nFwA%3D%3D;HSID=gbN30kmxz%2BKKygRK6DJjGJ%2FzGQcMDOSmyQoYi9p2ITFNy6zMnfCERvugTwb5O%2FZyAJ5lGvveYZlNK3N%2BRoNPqCThC%2Fwr2OQbPA3aFJeXZerPSF7bWmhHVGGunlw8HqV3dcjs67tLT7irrJLctXzonzWE%2B6Ukd9kdFTNWW5j7s2JEEAcW9Dp6x6WIdRemz6HC3BifjKQ%2BmwvryFaI%2BsLRi9T042hwKQqV7ikOLOsHOOCqlCKs0vcpFS5vUXzdGwSWdONWLHMEkuApe5B%2BUC7bULbJvnoqnT1jFFEE3vm5gSU%2BGKIbVqBCseLx42av7mxWCmJfB1mpDH3K6tJof0YKpQ%3D%3D;DV=arPk%2BRhtodeAHMzW%2FqoqfkfCFpUR1CYM5oW%2FK7onqCf46Xqk2OR0LjLK%2BQL7jCS5yrcZA2r2hYulBxnpVa%2B8tO%2BJImuPOM9B8JkIbEAMHp%2BvNq8vcSj78wA%2FoW0Wgx8Sw9lSMno4CgPoNgF1mrkm9m9cd7U6wQS7WGKR6Wufxuvjlyt6zf5xtU2gq9WtsxOglu%2BXOYApwXiTIEO853sEnzlVNopwMbYkBm5Mu2LSEycyBm4A9nWKVCr9r0xisHCGzde3sBO4hY7WyykPK6vsU3Ds36FVNH3Kv7jx1Kf6tCVe9ukypCd8j%2FXJWAgPwv%2BsWcyA6ky9skKq1GDuoMJQ5A%3D%3D;ANID=modcr%2B3xO4FT10Fb3jE3afiK3eFqJCs1ylPBjge%2F6lgEM3Li5i5UZ%2BviQCBS1cuiaiQ%2F9Cj62z%2BapXfRMVWSFEeZTv9rkmPKmp5FZHUq5VLHNyhrBtjScNXwDZVakrx9ZYt1uzzh2X93c6Z6YQsyNWlkfdmlZS1FCGOf0aaVZfIRiUW%2FXX6zNVph%2FBpYTicXqZ1qaiPAWb5FNF%2BfJylCjmVDOFCZHJ4E6M0Pph%2BvvgjuCO9bRHWjI2Ouz%2B8ETyMBoQOkSDGzzInMeapRKmXYNDhdcEogwNmRkJqoRJjBhHzvbIYgCXGNJFWVnxywcZSaHfQwGonWClY3vT3PSlEnHg%3D%3D;"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xd27d209b>",
                    "type": "UnknownWord",
                    "value": "2fbpyticxqz1qaipawb5fnf"
                },
                "references": {
                    "sentences": [
                        "Cookie: CGIC=YKK%2BIFrld%2FC5FqKj%2Fq1F9a06T0WgC4cOvCqqo3cfsyww1EwAb2TNFWqy8wBcDtObrgkjKtmIBSnsD%2Bmn2eR6MzQeUvHqOBJqA%2FqYS3KEkUQoKUgpOfuW%2BTtuz2OjhVeOJ1oMWnellOIJ4IuNBO5aVtzV8AI3CD4H8Z9tgjhG7i6cXrsAh5EUwKjHqbeEBszHmUhSsCNx0vypRWWd6MkM1HBeENiww7W8GjhoXvX8AwZ5VDTRSX3QSr9jpUuWYXHmJDhOtdG%2FW9UAWEHYkv6IpRsGPKWtAdR%2FzHNzWmZRC3HsMP4LyIOXCs5O8lvUZH2Bv2gtZ1SGZOD0Kd7Oi4nFwA%3D%3D;HSID=gbN30kmxz%2BKKygRK6DJjGJ%2FzGQcMDOSmyQoYi9p2ITFNy6zMnfCERvugTwb5O%2FZyAJ5lGvveYZlNK3N%2BRoNPqCThC%2Fwr2OQbPA3aFJeXZerPSF7bWmhHVGGunlw8HqV3dcjs67tLT7irrJLctXzonzWE%2B6Ukd9kdFTNWW5j7s2JEEAcW9Dp6x6WIdRemz6HC3BifjKQ%2BmwvryFaI%2BsLRi9T042hwKQqV7ikOLOsHOOCqlCKs0vcpFS5vUXzdGwSWdONWLHMEkuApe5B%2BUC7bULbJvnoqnT1jFFEE3vm5gSU%2BGKIbVqBCseLx42av7mxWCmJfB1mpDH3K6tJof0YKpQ%3D%3D;DV=arPk%2BRhtodeAHMzW%2FqoqfkfCFpUR1CYM5oW%2FK7onqCf46Xqk2OR0LjLK%2BQL7jCS5yrcZA2r2hYulBxnpVa%2B8tO%2BJImuPOM9B8JkIbEAMHp%2BvNq8vcSj78wA%2FoW0Wgx8Sw9lSMno4CgPoNgF1mrkm9m9cd7U6wQS7WGKR6Wufxuvjlyt6zf5xtU2gq9WtsxOglu%2BXOYApwXiTIEO853sEnzlVNopwMbYkBm5Mu2LSEycyBm4A9nWKVCr9r0xisHCGzde3sBO4hY7WyykPK6vsU3Ds36FVNH3Kv7jx1Kf6tCVe9ukypCd8j%2FXJWAgPwv%2BsWcyA6ky9skKq1GDuoMJQ5A%3D%3D;ANID=modcr%2B3xO4FT10Fb3jE3afiK3eFqJCs1ylPBjge%2F6lgEM3Li5i5UZ%2BviQCBS1cuiaiQ%2F9Cj62z%2BapXfRMVWSFEeZTv9rkmPKmp5FZHUq5VLHNyhrBtjScNXwDZVakrx9ZYt1uzzh2X93c6Z6YQsyNWlkfdmlZS1FCGOf0aaVZfIRiUW%2FXX6zNVph%2FBpYTicXqZ1qaiPAWb5FNF%2BfJylCjmVDOFCZHJ4E6M0Pph%2BvvgjuCO9bRHWjI2Ouz%2B8ETyMBoQOkSDGzzInMeapRKmXYNDhdcEogwNmRkJqoRJjBhHzvbIYgCXGNJFWVnxywcZSaHfQwGonWClY3vT3PSlEnHg%3D%3D;"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xb30247ce>",
                    "type": "UnknownWord",
                    "value": "2bfjylcjmvdofczhj4e6m0pph"
                },
                "references": {
                    "sentences": [
                        "Cookie: CGIC=YKK%2BIFrld%2FC5FqKj%2Fq1F9a06T0WgC4cOvCqqo3cfsyww1EwAb2TNFWqy8wBcDtObrgkjKtmIBSnsD%2Bmn2eR6MzQeUvHqOBJqA%2FqYS3KEkUQoKUgpOfuW%2BTtuz2OjhVeOJ1oMWnellOIJ4IuNBO5aVtzV8AI3CD4H8Z9tgjhG7i6cXrsAh5EUwKjHqbeEBszHmUhSsCNx0vypRWWd6MkM1HBeENiww7W8GjhoXvX8AwZ5VDTRSX3QSr9jpUuWYXHmJDhOtdG%2FW9UAWEHYkv6IpRsGPKWtAdR%2FzHNzWmZRC3HsMP4LyIOXCs5O8lvUZH2Bv2gtZ1SGZOD0Kd7Oi4nFwA%3D%3D;HSID=gbN30kmxz%2BKKygRK6DJjGJ%2FzGQcMDOSmyQoYi9p2ITFNy6zMnfCERvugTwb5O%2FZyAJ5lGvveYZlNK3N%2BRoNPqCThC%2Fwr2OQbPA3aFJeXZerPSF7bWmhHVGGunlw8HqV3dcjs67tLT7irrJLctXzonzWE%2B6Ukd9kdFTNWW5j7s2JEEAcW9Dp6x6WIdRemz6HC3BifjKQ%2BmwvryFaI%2BsLRi9T042hwKQqV7ikOLOsHOOCqlCKs0vcpFS5vUXzdGwSWdONWLHMEkuApe5B%2BUC7bULbJvnoqnT1jFFEE3vm5gSU%2BGKIbVqBCseLx42av7mxWCmJfB1mpDH3K6tJof0YKpQ%3D%3D;DV=arPk%2BRhtodeAHMzW%2FqoqfkfCFpUR1CYM5oW%2FK7onqCf46Xqk2OR0LjLK%2BQL7jCS5yrcZA2r2hYulBxnpVa%2B8tO%2BJImuPOM9B8JkIbEAMHp%2BvNq8vcSj78wA%2FoW0Wgx8Sw9lSMno4CgPoNgF1mrkm9m9cd7U6wQS7WGKR6Wufxuvjlyt6zf5xtU2gq9WtsxOglu%2BXOYApwXiTIEO853sEnzlVNopwMbYkBm5Mu2LSEycyBm4A9nWKVCr9r0xisHCGzde3sBO4hY7WyykPK6vsU3Ds36FVNH3Kv7jx1Kf6tCVe9ukypCd8j%2FXJWAgPwv%2BsWcyA6ky9skKq1GDuoMJQ5A%3D%3D;ANID=modcr%2B3xO4FT10Fb3jE3afiK3eFqJCs1ylPBjge%2F6lgEM3Li5i5UZ%2BviQCBS1cuiaiQ%2F9Cj62z%2BapXfRMVWSFEeZTv9rkmPKmp5FZHUq5VLHNyhrBtjScNXwDZVakrx9ZYt1uzzh2X93c6Z6YQsyNWlkfdmlZS1FCGOf0aaVZfIRiUW%2FXX6zNVph%2FBpYTicXqZ1qaiPAWb5FNF%2BfJylCjmVDOFCZHJ4E6M0Pph%2BvvgjuCO9bRHWjI2Ouz%2B8ETyMBoQOkSDGzzInMeapRKmXYNDhdcEogwNmRkJqoRJjBhHzvbIYgCXGNJFWVnxywcZSaHfQwGonWClY3vT3PSlEnHg%3D%3D;"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xb202741f>",
                    "type": "UnknownWord",
                    "value": "2bvvgjuco9brhwji2ouz"
                },
                "references": {
                    "sentences": [
                        "Cookie: CGIC=YKK%2BIFrld%2FC5FqKj%2Fq1F9a06T0WgC4cOvCqqo3cfsyww1EwAb2TNFWqy8wBcDtObrgkjKtmIBSnsD%2Bmn2eR6MzQeUvHqOBJqA%2FqYS3KEkUQoKUgpOfuW%2BTtuz2OjhVeOJ1oMWnellOIJ4IuNBO5aVtzV8AI3CD4H8Z9tgjhG7i6cXrsAh5EUwKjHqbeEBszHmUhSsCNx0vypRWWd6MkM1HBeENiww7W8GjhoXvX8AwZ5VDTRSX3QSr9jpUuWYXHmJDhOtdG%2FW9UAWEHYkv6IpRsGPKWtAdR%2FzHNzWmZRC3HsMP4LyIOXCs5O8lvUZH2Bv2gtZ1SGZOD0Kd7Oi4nFwA%3D%3D;HSID=gbN30kmxz%2BKKygRK6DJjGJ%2FzGQcMDOSmyQoYi9p2ITFNy6zMnfCERvugTwb5O%2FZyAJ5lGvveYZlNK3N%2BRoNPqCThC%2Fwr2OQbPA3aFJeXZerPSF7bWmhHVGGunlw8HqV3dcjs67tLT7irrJLctXzonzWE%2B6Ukd9kdFTNWW5j7s2JEEAcW9Dp6x6WIdRemz6HC3BifjKQ%2BmwvryFaI%2BsLRi9T042hwKQqV7ikOLOsHOOCqlCKs0vcpFS5vUXzdGwSWdONWLHMEkuApe5B%2BUC7bULbJvnoqnT1jFFEE3vm5gSU%2BGKIbVqBCseLx42av7mxWCmJfB1mpDH3K6tJof0YKpQ%3D%3D;DV=arPk%2BRhtodeAHMzW%2FqoqfkfCFpUR1CYM5oW%2FK7onqCf46Xqk2OR0LjLK%2BQL7jCS5yrcZA2r2hYulBxnpVa%2B8tO%2BJImuPOM9B8JkIbEAMHp%2BvNq8vcSj78wA%2FoW0Wgx8Sw9lSMno4CgPoNgF1mrkm9m9cd7U6wQS7WGKR6Wufxuvjlyt6zf5xtU2gq9WtsxOglu%2BXOYApwXiTIEO853sEnzlVNopwMbYkBm5Mu2LSEycyBm4A9nWKVCr9r0xisHCGzde3sBO4hY7WyykPK6vsU3Ds36FVNH3Kv7jx1Kf6tCVe9ukypCd8j%2FXJWAgPwv%2BsWcyA6ky9skKq1GDuoMJQ5A%3D%3D;ANID=modcr%2B3xO4FT10Fb3jE3afiK3eFqJCs1ylPBjge%2F6lgEM3Li5i5UZ%2BviQCBS1cuiaiQ%2F9Cj62z%2BapXfRMVWSFEeZTv9rkmPKmp5FZHUq5VLHNyhrBtjScNXwDZVakrx9ZYt1uzzh2X93c6Z6YQsyNWlkfdmlZS1FCGOf0aaVZfIRiUW%2FXX6zNVph%2FBpYTicXqZ1qaiPAWb5FNF%2BfJylCjmVDOFCZHJ4E6M0Pph%2BvvgjuCO9bRHWjI2Ouz%2B8ETyMBoQOkSDGzzInMeapRKmXYNDhdcEogwNmRkJqoRJjBhHzvbIYgCXGNJFWVnxywcZSaHfQwGonWClY3vT3PSlEnHg%3D%3D;"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x5622b5c>",
                    "type": "UnknownWord",
                    "value": "2b8etymboqoksdgzzinmeaprkmxyndhdceogwnmrkjqorjjbhhzvbiygcxgnjfwvnxywczsahfqwgonwcly3vt3pslenhg"
                },
                "references": {
                    "sentences": [
                        "Cookie: CGIC=YKK%2BIFrld%2FC5FqKj%2Fq1F9a06T0WgC4cOvCqqo3cfsyww1EwAb2TNFWqy8wBcDtObrgkjKtmIBSnsD%2Bmn2eR6MzQeUvHqOBJqA%2FqYS3KEkUQoKUgpOfuW%2BTtuz2OjhVeOJ1oMWnellOIJ4IuNBO5aVtzV8AI3CD4H8Z9tgjhG7i6cXrsAh5EUwKjHqbeEBszHmUhSsCNx0vypRWWd6MkM1HBeENiww7W8GjhoXvX8AwZ5VDTRSX3QSr9jpUuWYXHmJDhOtdG%2FW9UAWEHYkv6IpRsGPKWtAdR%2FzHNzWmZRC3HsMP4LyIOXCs5O8lvUZH2Bv2gtZ1SGZOD0Kd7Oi4nFwA%3D%3D;HSID=gbN30kmxz%2BKKygRK6DJjGJ%2FzGQcMDOSmyQoYi9p2ITFNy6zMnfCERvugTwb5O%2FZyAJ5lGvveYZlNK3N%2BRoNPqCThC%2Fwr2OQbPA3aFJeXZerPSF7bWmhHVGGunlw8HqV3dcjs67tLT7irrJLctXzonzWE%2B6Ukd9kdFTNWW5j7s2JEEAcW9Dp6x6WIdRemz6HC3BifjKQ%2BmwvryFaI%2BsLRi9T042hwKQqV7ikOLOsHOOCqlCKs0vcpFS5vUXzdGwSWdONWLHMEkuApe5B%2BUC7bULbJvnoqnT1jFFEE3vm5gSU%2BGKIbVqBCseLx42av7mxWCmJfB1mpDH3K6tJof0YKpQ%3D%3D;DV=arPk%2BRhtodeAHMzW%2FqoqfkfCFpUR1CYM5oW%2FK7onqCf46Xqk2OR0LjLK%2BQL7jCS5yrcZA2r2hYulBxnpVa%2B8tO%2BJImuPOM9B8JkIbEAMHp%2BvNq8vcSj78wA%2FoW0Wgx8Sw9lSMno4CgPoNgF1mrkm9m9cd7U6wQS7WGKR6Wufxuvjlyt6zf5xtU2gq9WtsxOglu%2BXOYApwXiTIEO853sEnzlVNopwMbYkBm5Mu2LSEycyBm4A9nWKVCr9r0xisHCGzde3sBO4hY7WyykPK6vsU3Ds36FVNH3Kv7jx1Kf6tCVe9ukypCd8j%2FXJWAgPwv%2BsWcyA6ky9skKq1GDuoMJQ5A%3D%3D;ANID=modcr%2B3xO4FT10Fb3jE3afiK3eFqJCs1ylPBjge%2F6lgEM3Li5i5UZ%2BviQCBS1cuiaiQ%2F9Cj62z%2BapXfRMVWSFEeZTv9rkmPKmp5FZHUq5VLHNyhrBtjScNXwDZVakrx9ZYt1uzzh2X93c6Z6YQsyNWlkfdmlZS1FCGOf0aaVZfIRiUW%2FXX6zNVph%2FBpYTicXqZ1qaiPAWb5FNF%2BfJylCjmVDOFCZHJ4E6M0Pph%2BvvgjuCO9bRHWjI2Ouz%2B8ETyMBoQOkSDGzzInMeapRKmXYNDhdcEogwNmRkJqoRJjBhHzvbIYgCXGNJFWVnxywcZSaHfQwGonWClY3vT3PSlEnHg%3D%3D;"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x377d883a>",
                    "type": "UnknownWord",
                    "value": "x-tag"
                },
                "references": {
                    "sentences": [
                        "X-Tag: f1DOF2QJkbCTJAUqiSLclK%2BsRkiAFHGmQusq2an%2FAud1WpfWVK%2F6gpLmtEQ38e65ILH8bHOzUd51lMpkh2xmHI5WpDJHgCtz5Q%2F%2BCL5usiShe35weofsQr9dQk%2BLsCl%2FulJlRg4cToY4ffie2MvfrtF4FCCZpbMy66UZUNqShGcbuIlRELkGKCTimwpB2wi4J6r%2FaIWAzINIP413ERqcQJ42Q1eQvvMkrEsWZDGEi4PHVtESHkcKKRVlZ9s3%2BPaQgq6TOR9YJxQOJaQ4NgaNuJAyHJnzkvtlQHNAy%2B%2FuLVa%2FpCuXxLvnw6dCIpmMwNHdzA09SL4T%2Bc5I3S6%2BFcu3mA%3D%3D"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x170a4a21>",
                    "type": "UnknownWord",
                    "value": "f1dof2qjkbctjauqislclk"
                },
                "references": {
                    "sentences": [
                        "X-Tag: f1DOF2QJkbCTJAUqiSLclK%2BsRkiAFHGmQusq2an%2FAud1WpfWVK%2F6gpLmtEQ38e65ILH8bHOzUd51lMpkh2xmHI5WpDJHgCtz5Q%2F%2BCL5usiShe35weofsQr9dQk%2BLsCl%2FulJlRg4cToY4ffie2MvfrtF4FCCZpbMy66UZUNqShGcbuIlRELkGKCTimwpB2wi4J6r%2FaIWAzINIP413ERqcQJ42Q1eQvvMkrEsWZDGEi4PHVtESHkcKKRVlZ9s3%2BPaQgq6TOR9YJxQOJaQ4NgaNuJAyHJnzkvtlQHNAy%2B%2FuLVa%2FpCuXxLvnw6dCIpmMwNHdzA09SL4T%2Bc5I3S6%2BFcu3mA%3D%3D"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x1f3e167e>",
                    "type": "UnknownWord",
                    "value": "2bsrkiafhgmqusq2an"
                },
                "references": {
                    "sentences": [
                        "X-Tag: f1DOF2QJkbCTJAUqiSLclK%2BsRkiAFHGmQusq2an%2FAud1WpfWVK%2F6gpLmtEQ38e65ILH8bHOzUd51lMpkh2xmHI5WpDJHgCtz5Q%2F%2BCL5usiShe35weofsQr9dQk%2BLsCl%2FulJlRg4cToY4ffie2MvfrtF4FCCZpbMy66UZUNqShGcbuIlRELkGKCTimwpB2wi4J6r%2FaIWAzINIP413ERqcQJ42Q1eQvvMkrEsWZDGEi4PHVtESHkcKKRVlZ9s3%2BPaQgq6TOR9YJxQOJaQ4NgaNuJAyHJnzkvtlQHNAy%2B%2FuLVa%2FpCuXxLvnw6dCIpmMwNHdzA09SL4T%2Bc5I3S6%2BFcu3mA%3D%3D"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x56e02ccc>",
                    "type": "UnknownWord",
                    "value": "2faud1wpfwvk"
                },
                "references": {
                    "sentences": [
                        "X-Tag: f1DOF2QJkbCTJAUqiSLclK%2BsRkiAFHGmQusq2an%2FAud1WpfWVK%2F6gpLmtEQ38e65ILH8bHOzUd51lMpkh2xmHI5WpDJHgCtz5Q%2F%2BCL5usiShe35weofsQr9dQk%2BLsCl%2FulJlRg4cToY4ffie2MvfrtF4FCCZpbMy66UZUNqShGcbuIlRELkGKCTimwpB2wi4J6r%2FaIWAzINIP413ERqcQJ42Q1eQvvMkrEsWZDGEi4PHVtESHkcKKRVlZ9s3%2BPaQgq6TOR9YJxQOJaQ4NgaNuJAyHJnzkvtlQHNAy%2B%2FuLVa%2FpCuXxLvnw6dCIpmMwNHdzA09SL4T%2Bc5I3S6%2BFcu3mA%3D%3D"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x7be1a1a4>",
                    "type": "UnknownWord",
                    "value": "2f6gplmteq38e65ilh8bhozud51lmpkh2xmhi5wpdjhgctz5q"
                },
                "references": {
                    "sentences": [
                        "X-Tag: f1DOF2QJkbCTJAUqiSLclK%2BsRkiAFHGmQusq2an%2FAud1WpfWVK%2F6gpLmtEQ38e65ILH8bHOzUd51lMpkh2xmHI5WpDJHgCtz5Q%2F%2BCL5usiShe35weofsQr9dQk%2BLsCl%2FulJlRg4cToY4ffie2MvfrtF4FCCZpbMy66UZUNqShGcbuIlRELkGKCTimwpB2wi4J6r%2FaIWAzINIP413ERqcQJ42Q1eQvvMkrEsWZDGEi4PHVtESHkcKKRVlZ9s3%2BPaQgq6TOR9YJxQOJaQ4NgaNuJAyHJnzkvtlQHNAy%2B%2FuLVa%2FpCuXxLvnw6dCIpmMwNHdzA09SL4T%2Bc5I3S6%2BFcu3mA%3D%3D"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x4d6c080d>",
                    "type": "UnknownWord",
                    "value": "2bcl5usishe35weofsqr9dqk"
                },
                "references": {
                    "sentences": [
                        "X-Tag: f1DOF2QJkbCTJAUqiSLclK%2BsRkiAFHGmQusq2an%2FAud1WpfWVK%2F6gpLmtEQ38e65ILH8bHOzUd51lMpkh2xmHI5WpDJHgCtz5Q%2F%2BCL5usiShe35weofsQr9dQk%2BLsCl%2FulJlRg4cToY4ffie2MvfrtF4FCCZpbMy66UZUNqShGcbuIlRELkGKCTimwpB2wi4J6r%2FaIWAzINIP413ERqcQJ42Q1eQvvMkrEsWZDGEi4PHVtESHkcKKRVlZ9s3%2BPaQgq6TOR9YJxQOJaQ4NgaNuJAyHJnzkvtlQHNAy%2B%2FuLVa%2FpCuXxLvnw6dCIpmMwNHdzA09SL4T%2Bc5I3S6%2BFcu3mA%3D%3D"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x324db818>",
                    "type": "UnknownWord",
                    "value": "2blscl"
                },
                "references": {
                    "sentences": [
                        "X-Tag: f1DOF2QJkbCTJAUqiSLclK%2BsRkiAFHGmQusq2an%2FAud1WpfWVK%2F6gpLmtEQ38e65ILH8bHOzUd51lMpkh2xmHI5WpDJHgCtz5Q%2F%2BCL5usiShe35weofsQr9dQk%2BLsCl%2FulJlRg4cToY4ffie2MvfrtF4FCCZpbMy66UZUNqShGcbuIlRELkGKCTimwpB2wi4J6r%2FaIWAzINIP413ERqcQJ42Q1eQvvMkrEsWZDGEi4PHVtESHkcKKRVlZ9s3%2BPaQgq6TOR9YJxQOJaQ4NgaNuJAyHJnzkvtlQHNAy%2B%2FuLVa%2FpCuXxLvnw6dCIpmMwNHdzA09SL4T%2Bc5I3S6%2BFcu3mA%3D%3D"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x438aaf31>",
                    "type": "UnknownWord",
                    "value": "2fuljlrg4ctoy4ffie2mvfrtf4fcczpbmy66uzunqshgcbuilrelkgkctimwpb2wi4j6r"
                },
                "references": {
                    "sentences": [
                        "X-Tag: f1DOF2QJkbCTJAUqiSLclK%2BsRkiAFHGmQusq2an%2FAud1WpfWVK%2F6gpLmtEQ38e65ILH8bHOzUd51lMpkh2xmHI5WpDJHgCtz5Q%2F%2BCL5usiShe35weofsQr9dQk%2BLsCl%2FulJlRg4cToY4ffie2MvfrtF4FCCZpbMy66UZUNqShGcbuIlRELkGKCTimwpB2wi4J6r%2FaIWAzINIP413ERqcQJ42Q1eQvvMkrEsWZDGEi4PHVtESHkcKKRVlZ9s3%2BPaQgq6TOR9YJxQOJaQ4NgaNuJAyHJnzkvtlQHNAy%2B%2FuLVa%2FpCuXxLvnw6dCIpmMwNHdzA09SL4T%2Bc5I3S6%2BFcu3mA%3D%3D"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xa31c6e94>",
                    "type": "UnknownWord",
                    "value": "2faiwazinip413erqcqj42q1eqvvmkreswzdgei4phvteshkckkrvlz9s3"
                },
                "references": {
                    "sentences": [
                        "X-Tag: f1DOF2QJkbCTJAUqiSLclK%2BsRkiAFHGmQusq2an%2FAud1WpfWVK%2F6gpLmtEQ38e65ILH8bHOzUd51lMpkh2xmHI5WpDJHgCtz5Q%2F%2BCL5usiShe35weofsQr9dQk%2BLsCl%2FulJlRg4cToY4ffie2MvfrtF4FCCZpbMy66UZUNqShGcbuIlRELkGKCTimwpB2wi4J6r%2FaIWAzINIP413ERqcQJ42Q1eQvvMkrEsWZDGEi4PHVtESHkcKKRVlZ9s3%2BPaQgq6TOR9YJxQOJaQ4NgaNuJAyHJnzkvtlQHNAy%2B%2FuLVa%2FpCuXxLvnw6dCIpmMwNHdzA09SL4T%2Bc5I3S6%2BFcu3mA%3D%3D"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x32521b5e>",
                    "type": "UnknownWord",
                    "value": "2bpaqgq6tor9yjxqojaq4nganujayhjnzkvtlqhnay"
                },
                "references": {
                    "sentences": [
                        "X-Tag: f1DOF2QJkbCTJAUqiSLclK%2BsRkiAFHGmQusq2an%2FAud1WpfWVK%2F6gpLmtEQ38e65ILH8bHOzUd51lMpkh2xmHI5WpDJHgCtz5Q%2F%2BCL5usiShe35weofsQr9dQk%2BLsCl%2FulJlRg4cToY4ffie2MvfrtF4FCCZpbMy66UZUNqShGcbuIlRELkGKCTimwpB2wi4J6r%2FaIWAzINIP413ERqcQJ42Q1eQvvMkrEsWZDGEi4PHVtESHkcKKRVlZ9s3%2BPaQgq6TOR9YJxQOJaQ4NgaNuJAyHJnzkvtlQHNAy%2B%2FuLVa%2FpCuXxLvnw6dCIpmMwNHdzA09SL4T%2Bc5I3S6%2BFcu3mA%3D%3D"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x22cdf007>",
                    "type": "UnknownWord",
                    "value": "2fulva"
                },
                "references": {
                    "sentences": [
                        "X-Tag: f1DOF2QJkbCTJAUqiSLclK%2BsRkiAFHGmQusq2an%2FAud1WpfWVK%2F6gpLmtEQ38e65ILH8bHOzUd51lMpkh2xmHI5WpDJHgCtz5Q%2F%2BCL5usiShe35weofsQr9dQk%2BLsCl%2FulJlRg4cToY4ffie2MvfrtF4FCCZpbMy66UZUNqShGcbuIlRELkGKCTimwpB2wi4J6r%2FaIWAzINIP413ERqcQJ42Q1eQvvMkrEsWZDGEi4PHVtESHkcKKRVlZ9s3%2BPaQgq6TOR9YJxQOJaQ4NgaNuJAyHJnzkvtlQHNAy%2B%2FuLVa%2FpCuXxLvnw6dCIpmMwNHdzA09SL4T%2Bc5I3S6%2BFcu3mA%3D%3D"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x59a61bef>",
                    "type": "UnknownWord",
                    "value": "2fpcuxxlvnw6dcipmmwnhdza09sl4t"
                },
                "references": {
                    "sentences": [
                        "X-Tag: f1DOF2QJkbCTJAUqiSLclK%2BsRkiAFHGmQusq2an%2FAud1WpfWVK%2F6gpLmtEQ38e65ILH8bHOzUd51lMpkh2xmHI5WpDJHgCtz5Q%2F%2BCL5usiShe35weofsQr9dQk%2BLsCl%2FulJlRg4cToY4ffie2MvfrtF4FCCZpbMy66UZUNqShGcbuIlRELkGKCTimwpB2wi4J6r%2FaIWAzINIP413ERqcQJ42Q1eQvvMkrEsWZDGEi4PHVtESHkcKKRVlZ9s3%2BPaQgq6TOR9YJxQOJaQ4NgaNuJAyHJnzkvtlQHNAy%2B%2FuLVa%2FpCuXxLvnw6dCIpmMwNHdzA09SL4T%2Bc5I3S6%2BFcu3mA%3D%3D"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x8bf453d7>",
                    "type": "UnknownWord",
                    "value": "2bc5i3s6"
                },
                "references": {
                    "sentences": [
                        "X-Tag: f1DOF2QJkbCTJAUqiSLclK%2BsRkiAFHGmQusq2an%2FAud1WpfWVK%2F6gpLmtEQ38e65ILH8bHOzUd51lMpkh2xmHI5WpDJHgCtz5Q%2F%2BCL5usiShe35weofsQr9dQk%2BLsCl%2FulJlRg4cToY4ffie2MvfrtF4FCCZpbMy66UZUNqShGcbuIlRELkGKCTimwpB2wi4J6r%2FaIWAzINIP413ERqcQJ42Q1eQvvMkrEsWZDGEi4PHVtESHkcKKRVlZ9s3%2BPaQgq6TOR9YJxQOJaQ4NgaNuJAyHJnzkvtlQHNAy%2B%2FuLVa%2FpCuXxLvnw6dCIpmMwNHdzA09SL4T%2Bc5I3S6%2BFcu3mA%3D%3D"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x26da8306>",
                    "type": "UnknownWord",
                    "value": "2bfcu3ma"
                },
                "references": {
                    "sentences": [
                        "X-Tag: f1DOF2QJkbCTJAUqiSLclK%2BsRkiAFHGmQusq2an%2FAud1WpfWVK%2F6gpLmtEQ38e65ILH8bHOzUd51lMpkh2xmHI5WpDJHgCtz5Q%2F%2BCL5usiShe35weofsQr9dQk%2BLsCl%2FulJlRg4cToY4ffie2MvfrtF4FCCZpbMy66UZUNqShGcbuIlRELkGKCTimwpB2wi4J6r%2FaIWAzINIP413ERqcQJ42Q1eQvvMkrEsWZDGEi4PHVtESHkcKKRVlZ9s3%2BPaQgq6TOR9YJxQOJaQ4NgaNuJAyHJnzkvtlQHNAy%2B%2FuLVa%2FpCuXxLvnw6dCIpmMwNHdzA09SL4T%2Bc5I3S6%2BFcu3mA%3D%3D"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x8db3de33>",
                    "type": "UnknownWord",
                    "value": "x564mss"
                },
                "references": {
                    "sentences": [
                        "Vary: x564msS%2Bd%2BIrc97apj6SftcyuZTeoDUdyeLRN7n%2BkEJYVoJYAeuxpHT1XhTQ%2FywsKB7tZuNCJpid2qbr5DtOphE9Yvu2MfVTPH7nuK3yrk2nl93yuTpwiB%2F2kcFx57oLxtgqXkDlPENI3p31zdp%2B7quVz9C3ZKwA0Pi8%2FjH%2Fj%2BMKFZHpAWxlAWtxWe0xvwPKj3aroG6ujoEB9Fw%2Fq3IvIBsjoCXwIWPCSX7PCIk97ccsOyzqE6jGkgvVhfw%2BcvPL78g7gfvfx6eSDoOQj5M6xcH0aTPEld8rckxqFQmB9Gy%2B%2BNZ0YACTuCn7Aw9ziB9OmeKAy%2B5I%2F1J2ij7aSH3YgA%3D%3D"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xf8f2fd29>",
                    "type": "UnknownWord",
                    "value": "2bd"
                },
                "references": {
                    "sentences": [
                        "Vary: x564msS%2Bd%2BIrc97apj6SftcyuZTeoDUdyeLRN7n%2BkEJYVoJYAeuxpHT1XhTQ%2FywsKB7tZuNCJpid2qbr5DtOphE9Yvu2MfVTPH7nuK3yrk2nl93yuTpwiB%2F2kcFx57oLxtgqXkDlPENI3p31zdp%2B7quVz9C3ZKwA0Pi8%2FjH%2Fj%2BMKFZHpAWxlAWtxWe0xvwPKj3aroG6ujoEB9Fw%2Fq3IvIBsjoCXwIWPCSX7PCIk97ccsOyzqE6jGkgvVhfw%2BcvPL78g7gfvfx6eSDoOQj5M6xcH0aTPEld8rckxqFQmB9Gy%2B%2BNZ0YACTuCn7Aw9ziB9OmeKAy%2B5I%2F1J2ij7aSH3YgA%3D%3D"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x4fd3c762>",
                    "type": "UnknownWord",
                    "value": "2birc97apj6sftcyuzteodudyelrn7n"
                },
                "references": {
                    "sentences": [
                        "Vary: x564msS%2Bd%2BIrc97apj6SftcyuZTeoDUdyeLRN7n%2BkEJYVoJYAeuxpHT1XhTQ%2FywsKB7tZuNCJpid2qbr5DtOphE9Yvu2MfVTPH7nuK3yrk2nl93yuTpwiB%2F2kcFx57oLxtgqXkDlPENI3p31zdp%2B7quVz9C3ZKwA0Pi8%2FjH%2Fj%2BMKFZHpAWxlAWtxWe0xvwPKj3aroG6ujoEB9Fw%2Fq3IvIBsjoCXwIWPCSX7PCIk97ccsOyzqE6jGkgvVhfw%2BcvPL78g7gfvfx6eSDoOQj5M6xcH0aTPEld8rckxqFQmB9Gy%2B%2BNZ0YACTuCn7Aw9ziB9OmeKAy%2B5I%2F1J2ij7aSH3YgA%3D%3D"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x915875c4>",
                    "type": "UnknownWord",
                    "value": "2bkejyvojyaeuxpht1xhtq"
                },
                "references": {
                    "sentences": [
                        "Vary: x564msS%2Bd%2BIrc97apj6SftcyuZTeoDUdyeLRN7n%2BkEJYVoJYAeuxpHT1XhTQ%2FywsKB7tZuNCJpid2qbr5DtOphE9Yvu2MfVTPH7nuK3yrk2nl93yuTpwiB%2F2kcFx57oLxtgqXkDlPENI3p31zdp%2B7quVz9C3ZKwA0Pi8%2FjH%2Fj%2BMKFZHpAWxlAWtxWe0xvwPKj3aroG6ujoEB9Fw%2Fq3IvIBsjoCXwIWPCSX7PCIk97ccsOyzqE6jGkgvVhfw%2BcvPL78g7gfvfx6eSDoOQj5M6xcH0aTPEld8rckxqFQmB9Gy%2B%2BNZ0YACTuCn7Aw9ziB9OmeKAy%2B5I%2F1J2ij7aSH3YgA%3D%3D"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x4c86816c>",
                    "type": "UnknownWord",
                    "value": "2fywskb7tzuncjpid2qbr5dtophe9yvu2mfvtph7nuk3yrk2nl93yutpwib"
                },
                "references": {
                    "sentences": [
                        "Vary: x564msS%2Bd%2BIrc97apj6SftcyuZTeoDUdyeLRN7n%2BkEJYVoJYAeuxpHT1XhTQ%2FywsKB7tZuNCJpid2qbr5DtOphE9Yvu2MfVTPH7nuK3yrk2nl93yuTpwiB%2F2kcFx57oLxtgqXkDlPENI3p31zdp%2B7quVz9C3ZKwA0Pi8%2FjH%2Fj%2BMKFZHpAWxlAWtxWe0xvwPKj3aroG6ujoEB9Fw%2Fq3IvIBsjoCXwIWPCSX7PCIk97ccsOyzqE6jGkgvVhfw%2BcvPL78g7gfvfx6eSDoOQj5M6xcH0aTPEld8rckxqFQmB9Gy%2B%2BNZ0YACTuCn7Aw9ziB9OmeKAy%2B5I%2F1J2ij7aSH3YgA%3D%3D"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xf3582d7e>",
                    "type": "UnknownWord",
                    "value": "2f2kcfx57olxtgqxkdlpeni3p31zdp"
                },
                "references": {
                    "sentences": [
                        "Vary: x564msS%2Bd%2BIrc97apj6SftcyuZTeoDUdyeLRN7n%2BkEJYVoJYAeuxpHT1XhTQ%2FywsKB7tZuNCJpid2qbr5DtOphE9Yvu2MfVTPH7nuK3yrk2nl93yuTpwiB%2F2kcFx57oLxtgqXkDlPENI3p31zdp%2B7quVz9C3ZKwA0Pi8%2FjH%2Fj%2BMKFZHpAWxlAWtxWe0xvwPKj3aroG6ujoEB9Fw%2Fq3IvIBsjoCXwIWPCSX7PCIk97ccsOyzqE6jGkgvVhfw%2BcvPL78g7gfvfx6eSDoOQj5M6xcH0aTPEld8rckxqFQmB9Gy%2B%2BNZ0YACTuCn7Aw9ziB9OmeKAy%2B5I%2F1J2ij7aSH3YgA%3D%3D"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x15ce5e13>",
                    "type": "UnknownWord",
                    "value": "2b7quvz9c3zkwa0pi8"
                },
                "references": {
                    "sentences": [
                        "Vary: x564msS%2Bd%2BIrc97apj6SftcyuZTeoDUdyeLRN7n%2BkEJYVoJYAeuxpHT1XhTQ%2FywsKB7tZuNCJpid2qbr5DtOphE9Yvu2MfVTPH7nuK3yrk2nl93yuTpwiB%2F2kcFx57oLxtgqXkDlPENI3p31zdp%2B7quVz9C3ZKwA0Pi8%2FjH%2Fj%2BMKFZHpAWxlAWtxWe0xvwPKj3aroG6ujoEB9Fw%2Fq3IvIBsjoCXwIWPCSX7PCIk97ccsOyzqE6jGkgvVhfw%2BcvPL78g7gfvfx6eSDoOQj5M6xcH0aTPEld8rckxqFQmB9Gy%2B%2BNZ0YACTuCn7Aw9ziB9OmeKAy%2B5I%2F1J2ij7aSH3YgA%3D%3D"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xd16329ab>",
                    "type": "UnknownWord",
                    "value": "2fjh"
                },
                "references": {
                    "sentences": [
                        "Vary: x564msS%2Bd%2BIrc97apj6SftcyuZTeoDUdyeLRN7n%2BkEJYVoJYAeuxpHT1XhTQ%2FywsKB7tZuNCJpid2qbr5DtOphE9Yvu2MfVTPH7nuK3yrk2nl93yuTpwiB%2F2kcFx57oLxtgqXkDlPENI3p31zdp%2B7quVz9C3ZKwA0Pi8%2FjH%2Fj%2BMKFZHpAWxlAWtxWe0xvwPKj3aroG6ujoEB9Fw%2Fq3IvIBsjoCXwIWPCSX7PCIk97ccsOyzqE6jGkgvVhfw%2BcvPL78g7gfvfx6eSDoOQj5M6xcH0aTPEld8rckxqFQmB9Gy%2B%2BNZ0YACTuCn7Aw9ziB9OmeKAy%2B5I%2F1J2ij7aSH3YgA%3D%3D"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x59911e6d>",
                    "type": "UnknownWord",
                    "value": "2fj"
                },
                "references": {
                    "sentences": [
                        "Vary: x564msS%2Bd%2BIrc97apj6SftcyuZTeoDUdyeLRN7n%2BkEJYVoJYAeuxpHT1XhTQ%2FywsKB7tZuNCJpid2qbr5DtOphE9Yvu2MfVTPH7nuK3yrk2nl93yuTpwiB%2F2kcFx57oLxtgqXkDlPENI3p31zdp%2B7quVz9C3ZKwA0Pi8%2FjH%2Fj%2BMKFZHpAWxlAWtxWe0xvwPKj3aroG6ujoEB9Fw%2Fq3IvIBsjoCXwIWPCSX7PCIk97ccsOyzqE6jGkgvVhfw%2BcvPL78g7gfvfx6eSDoOQj5M6xcH0aTPEld8rckxqFQmB9Gy%2B%2BNZ0YACTuCn7Aw9ziB9OmeKAy%2B5I%2F1J2ij7aSH3YgA%3D%3D"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x2e5083f7>",
                    "type": "UnknownWord",
                    "value": "2bmkfzhpawxlawtxwe0xvwpkj3arog6ujoeb9fw"
                },
                "references": {
                    "sentences": [
                        "Vary: x564msS%2Bd%2BIrc97apj6SftcyuZTeoDUdyeLRN7n%2BkEJYVoJYAeuxpHT1XhTQ%2FywsKB7tZuNCJpid2qbr5DtOphE9Yvu2MfVTPH7nuK3yrk2nl93yuTpwiB%2F2kcFx57oLxtgqXkDlPENI3p31zdp%2B7quVz9C3ZKwA0Pi8%2FjH%2Fj%2BMKFZHpAWxlAWtxWe0xvwPKj3aroG6ujoEB9Fw%2Fq3IvIBsjoCXwIWPCSX7PCIk97ccsOyzqE6jGkgvVhfw%2BcvPL78g7gfvfx6eSDoOQj5M6xcH0aTPEld8rckxqFQmB9Gy%2B%2BNZ0YACTuCn7Aw9ziB9OmeKAy%2B5I%2F1J2ij7aSH3YgA%3D%3D"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x1a8adf5f>",
                    "type": "UnknownWord",
                    "value": "2fq3ivibsjocxwiwpcsx7pcik97ccsoyzqe6jgkgvvhfw"
                },
                "references": {
                    "sentences": [
                        "Vary: x564msS%2Bd%2BIrc97apj6SftcyuZTeoDUdyeLRN7n%2BkEJYVoJYAeuxpHT1XhTQ%2FywsKB7tZuNCJpid2qbr5DtOphE9Yvu2MfVTPH7nuK3yrk2nl93yuTpwiB%2F2kcFx57oLxtgqXkDlPENI3p31zdp%2B7quVz9C3ZKwA0Pi8%2FjH%2Fj%2BMKFZHpAWxlAWtxWe0xvwPKj3aroG6ujoEB9Fw%2Fq3IvIBsjoCXwIWPCSX7PCIk97ccsOyzqE6jGkgvVhfw%2BcvPL78g7gfvfx6eSDoOQj5M6xcH0aTPEld8rckxqFQmB9Gy%2B%2BNZ0YACTuCn7Aw9ziB9OmeKAy%2B5I%2F1J2ij7aSH3YgA%3D%3D"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xedb89097>",
                    "type": "UnknownWord",
                    "value": "2bcvpl78g7gfvfx6esdooqj5m6xch0atpeld8rckxqfqmb9gy"
                },
                "references": {
                    "sentences": [
                        "Vary: x564msS%2Bd%2BIrc97apj6SftcyuZTeoDUdyeLRN7n%2BkEJYVoJYAeuxpHT1XhTQ%2FywsKB7tZuNCJpid2qbr5DtOphE9Yvu2MfVTPH7nuK3yrk2nl93yuTpwiB%2F2kcFx57oLxtgqXkDlPENI3p31zdp%2B7quVz9C3ZKwA0Pi8%2FjH%2Fj%2BMKFZHpAWxlAWtxWe0xvwPKj3aroG6ujoEB9Fw%2Fq3IvIBsjoCXwIWPCSX7PCIk97ccsOyzqE6jGkgvVhfw%2BcvPL78g7gfvfx6eSDoOQj5M6xcH0aTPEld8rckxqFQmB9Gy%2B%2BNZ0YACTuCn7Aw9ziB9OmeKAy%2B5I%2F1J2ij7aSH3YgA%3D%3D"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x7d444d4>",
                    "type": "UnknownWord",
                    "value": "2bnz0yactucn7aw9zib9omekay"
                },
                "references": {
                    "sentences": [
                        "Vary: x564msS%2Bd%2BIrc97apj6SftcyuZTeoDUdyeLRN7n%2BkEJYVoJYAeuxpHT1XhTQ%2FywsKB7tZuNCJpid2qbr5DtOphE9Yvu2MfVTPH7nuK3yrk2nl93yuTpwiB%2F2kcFx57oLxtgqXkDlPENI3p31zdp%2B7quVz9C3ZKwA0Pi8%2FjH%2Fj%2BMKFZHpAWxlAWtxWe0xvwPKj3aroG6ujoEB9Fw%2Fq3IvIBsjoCXwIWPCSX7PCIk97ccsOyzqE6jGkgvVhfw%2BcvPL78g7gfvfx6eSDoOQj5M6xcH0aTPEld8rckxqFQmB9Gy%2B%2BNZ0YACTuCn7Aw9ziB9OmeKAy%2B5I%2F1J2ij7aSH3YgA%3D%3D"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xcef98437>",
                    "type": "UnknownWord",
                    "value": "2b5i"
                },
                "references": {
                    "sentences": [
                        "Vary: x564msS%2Bd%2BIrc97apj6SftcyuZTeoDUdyeLRN7n%2BkEJYVoJYAeuxpHT1XhTQ%2FywsKB7tZuNCJpid2qbr5DtOphE9Yvu2MfVTPH7nuK3yrk2nl93yuTpwiB%2F2kcFx57oLxtgqXkDlPENI3p31zdp%2B7quVz9C3ZKwA0Pi8%2FjH%2Fj%2BMKFZHpAWxlAWtxWe0xvwPKj3aroG6ujoEB9Fw%2Fq3IvIBsjoCXwIWPCSX7PCIk97ccsOyzqE6jGkgvVhfw%2BcvPL78g7gfvfx6eSDoOQj5M6xcH0aTPEld8rckxqFQmB9Gy%2B%2BNZ0YACTuCn7Aw9ziB9OmeKAy%2B5I%2F1J2ij7aSH3YgA%3D%3D"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x5d06e8de>",
                    "type": "UnknownWord",
                    "value": "2f1j2ij7ash3yga"
                },
                "references": {
                    "sentences": [
                        "Vary: x564msS%2Bd%2BIrc97apj6SftcyuZTeoDUdyeLRN7n%2BkEJYVoJYAeuxpHT1XhTQ%2FywsKB7tZuNCJpid2qbr5DtOphE9Yvu2MfVTPH7nuK3yrk2nl93yuTpwiB%2F2kcFx57oLxtgqXkDlPENI3p31zdp%2B7quVz9C3ZKwA0Pi8%2FjH%2Fj%2BMKFZHpAWxlAWtxWe0xvwPKj3aroG6ujoEB9Fw%2Fq3IvIBsjoCXwIWPCSX7PCIk97ccsOyzqE6jGkgvVhfw%2BcvPL78g7gfvfx6eSDoOQj5M6xcH0aTPEld8rckxqFQmB9Gy%2B%2BNZ0YACTuCn7Aw9ziB9OmeKAy%2B5I%2F1J2ij7aSH3YgA%3D%3D"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xc9740a34>",
                    "type": "UnknownWord",
                    "value": "var"
                },
                "references": {
                    "sentences": [
                        "Var: wG852ANm2aHtGTrbsFHawff1eBZc9MnnPFOLEWeX3o7Ulc0fSj1qhaw%2BFlqpKs6ABhhs4opIe%2Bs%2BKqhT5G3jw9xRH%2FxeEYysL5AYbHsguuOivvXTofbFPPOLM%2ByoYIbq9Navi9C0VsaghxYUgsZ3wt4aHJAWXqvYacWoAowqCaZ7pg3FY0iKgLG403wZRS25%2BOrJL6gdo98qXYntX%2B4ZlPAUa49MiLJVQvI1xFCKLo5WbCb3b3aHQ2hpwvcYoh5P6F2su6Br3YL5DxtmpjdQY9IwLubcax%2BSZ4uZrDhX6MfnqQRa8vwA61OYhQUJM7OMeqPZ9lo%2BqkzrlPux1XxOyw%3D%3D"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xef53fcc7>",
                    "type": "UnknownWord",
                    "value": "wg852anm2ahtgtrbsfhawff1ebzc9mnnpfolewex3o7ulc0fsj1qhaw"
                },
                "references": {
                    "sentences": [
                        "Var: wG852ANm2aHtGTrbsFHawff1eBZc9MnnPFOLEWeX3o7Ulc0fSj1qhaw%2BFlqpKs6ABhhs4opIe%2Bs%2BKqhT5G3jw9xRH%2FxeEYysL5AYbHsguuOivvXTofbFPPOLM%2ByoYIbq9Navi9C0VsaghxYUgsZ3wt4aHJAWXqvYacWoAowqCaZ7pg3FY0iKgLG403wZRS25%2BOrJL6gdo98qXYntX%2B4ZlPAUa49MiLJVQvI1xFCKLo5WbCb3b3aHQ2hpwvcYoh5P6F2su6Br3YL5DxtmpjdQY9IwLubcax%2BSZ4uZrDhX6MfnqQRa8vwA61OYhQUJM7OMeqPZ9lo%2BqkzrlPux1XxOyw%3D%3D"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x5352da52>",
                    "type": "UnknownWord",
                    "value": "2bflqpks6abhhs4opie"
                },
                "references": {
                    "sentences": [
                        "Var: wG852ANm2aHtGTrbsFHawff1eBZc9MnnPFOLEWeX3o7Ulc0fSj1qhaw%2BFlqpKs6ABhhs4opIe%2Bs%2BKqhT5G3jw9xRH%2FxeEYysL5AYbHsguuOivvXTofbFPPOLM%2ByoYIbq9Navi9C0VsaghxYUgsZ3wt4aHJAWXqvYacWoAowqCaZ7pg3FY0iKgLG403wZRS25%2BOrJL6gdo98qXYntX%2B4ZlPAUa49MiLJVQvI1xFCKLo5WbCb3b3aHQ2hpwvcYoh5P6F2su6Br3YL5DxtmpjdQY9IwLubcax%2BSZ4uZrDhX6MfnqQRa8vwA61OYhQUJM7OMeqPZ9lo%2BqkzrlPux1XxOyw%3D%3D"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xa472a941>",
                    "type": "UnknownWord",
                    "value": "2bs"
                },
                "references": {
                    "sentences": [
                        "Var: wG852ANm2aHtGTrbsFHawff1eBZc9MnnPFOLEWeX3o7Ulc0fSj1qhaw%2BFlqpKs6ABhhs4opIe%2Bs%2BKqhT5G3jw9xRH%2FxeEYysL5AYbHsguuOivvXTofbFPPOLM%2ByoYIbq9Navi9C0VsaghxYUgsZ3wt4aHJAWXqvYacWoAowqCaZ7pg3FY0iKgLG403wZRS25%2BOrJL6gdo98qXYntX%2B4ZlPAUa49MiLJVQvI1xFCKLo5WbCb3b3aHQ2hpwvcYoh5P6F2su6Br3YL5DxtmpjdQY9IwLubcax%2BSZ4uZrDhX6MfnqQRa8vwA61OYhQUJM7OMeqPZ9lo%2BqkzrlPux1XxOyw%3D%3D"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x425b2d28>",
                    "type": "UnknownWord",
                    "value": "2bkqht5g3jw9xrh"
                },
                "references": {
                    "sentences": [
                        "Var: wG852ANm2aHtGTrbsFHawff1eBZc9MnnPFOLEWeX3o7Ulc0fSj1qhaw%2BFlqpKs6ABhhs4opIe%2Bs%2BKqhT5G3jw9xRH%2FxeEYysL5AYbHsguuOivvXTofbFPPOLM%2ByoYIbq9Navi9C0VsaghxYUgsZ3wt4aHJAWXqvYacWoAowqCaZ7pg3FY0iKgLG403wZRS25%2BOrJL6gdo98qXYntX%2B4ZlPAUa49MiLJVQvI1xFCKLo5WbCb3b3aHQ2hpwvcYoh5P6F2su6Br3YL5DxtmpjdQY9IwLubcax%2BSZ4uZrDhX6MfnqQRa8vwA61OYhQUJM7OMeqPZ9lo%2BqkzrlPux1XxOyw%3D%3D"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x467ac1cf>",
                    "type": "UnknownWord",
                    "value": "2fxeeyysl5aybhsguuoivvxtofbfppolm"
                },
                "references": {
                    "sentences": [
                        "Var: wG852ANm2aHtGTrbsFHawff1eBZc9MnnPFOLEWeX3o7Ulc0fSj1qhaw%2BFlqpKs6ABhhs4opIe%2Bs%2BKqhT5G3jw9xRH%2FxeEYysL5AYbHsguuOivvXTofbFPPOLM%2ByoYIbq9Navi9C0VsaghxYUgsZ3wt4aHJAWXqvYacWoAowqCaZ7pg3FY0iKgLG403wZRS25%2BOrJL6gdo98qXYntX%2B4ZlPAUa49MiLJVQvI1xFCKLo5WbCb3b3aHQ2hpwvcYoh5P6F2su6Br3YL5DxtmpjdQY9IwLubcax%2BSZ4uZrDhX6MfnqQRa8vwA61OYhQUJM7OMeqPZ9lo%2BqkzrlPux1XxOyw%3D%3D"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xaa9b2d3>",
                    "type": "UnknownWord",
                    "value": "2byoyibq9navi9c0vsaghxyugsz3wt4ahjawxqvyacwoaowqcaz7pg3fy0ikglg403wzrs25"
                },
                "references": {
                    "sentences": [
                        "Var: wG852ANm2aHtGTrbsFHawff1eBZc9MnnPFOLEWeX3o7Ulc0fSj1qhaw%2BFlqpKs6ABhhs4opIe%2Bs%2BKqhT5G3jw9xRH%2FxeEYysL5AYbHsguuOivvXTofbFPPOLM%2ByoYIbq9Navi9C0VsaghxYUgsZ3wt4aHJAWXqvYacWoAowqCaZ7pg3FY0iKgLG403wZRS25%2BOrJL6gdo98qXYntX%2B4ZlPAUa49MiLJVQvI1xFCKLo5WbCb3b3aHQ2hpwvcYoh5P6F2su6Br3YL5DxtmpjdQY9IwLubcax%2BSZ4uZrDhX6MfnqQRa8vwA61OYhQUJM7OMeqPZ9lo%2BqkzrlPux1XxOyw%3D%3D"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x5dd82c79>",
                    "type": "UnknownWord",
                    "value": "2borjl6gdo98qxyntx"
                },
                "references": {
                    "sentences": [
                        "Var: wG852ANm2aHtGTrbsFHawff1eBZc9MnnPFOLEWeX3o7Ulc0fSj1qhaw%2BFlqpKs6ABhhs4opIe%2Bs%2BKqhT5G3jw9xRH%2FxeEYysL5AYbHsguuOivvXTofbFPPOLM%2ByoYIbq9Navi9C0VsaghxYUgsZ3wt4aHJAWXqvYacWoAowqCaZ7pg3FY0iKgLG403wZRS25%2BOrJL6gdo98qXYntX%2B4ZlPAUa49MiLJVQvI1xFCKLo5WbCb3b3aHQ2hpwvcYoh5P6F2su6Br3YL5DxtmpjdQY9IwLubcax%2BSZ4uZrDhX6MfnqQRa8vwA61OYhQUJM7OMeqPZ9lo%2BqkzrlPux1XxOyw%3D%3D"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x632ee530>",
                    "type": "UnknownWord",
                    "value": "2b4zlpaua49miljvqvi1xfcklo5wbcb3b3ahq2hpwvcyoh5p6f2su6br3yl5dxtmpjdqy9iwlubcax"
                },
                "references": {
                    "sentences": [
                        "Var: wG852ANm2aHtGTrbsFHawff1eBZc9MnnPFOLEWeX3o7Ulc0fSj1qhaw%2BFlqpKs6ABhhs4opIe%2Bs%2BKqhT5G3jw9xRH%2FxeEYysL5AYbHsguuOivvXTofbFPPOLM%2ByoYIbq9Navi9C0VsaghxYUgsZ3wt4aHJAWXqvYacWoAowqCaZ7pg3FY0iKgLG403wZRS25%2BOrJL6gdo98qXYntX%2B4ZlPAUa49MiLJVQvI1xFCKLo5WbCb3b3aHQ2hpwvcYoh5P6F2su6Br3YL5DxtmpjdQY9IwLubcax%2BSZ4uZrDhX6MfnqQRa8vwA61OYhQUJM7OMeqPZ9lo%2BqkzrlPux1XxOyw%3D%3D"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x71e257e5>",
                    "type": "UnknownWord",
                    "value": "2bsz4uzrdhx6mfnqqra8vwa61oyhqujm7omeqpz9lo"
                },
                "references": {
                    "sentences": [
                        "Var: wG852ANm2aHtGTrbsFHawff1eBZc9MnnPFOLEWeX3o7Ulc0fSj1qhaw%2BFlqpKs6ABhhs4opIe%2Bs%2BKqhT5G3jw9xRH%2FxeEYysL5AYbHsguuOivvXTofbFPPOLM%2ByoYIbq9Navi9C0VsaghxYUgsZ3wt4aHJAWXqvYacWoAowqCaZ7pg3FY0iKgLG403wZRS25%2BOrJL6gdo98qXYntX%2B4ZlPAUa49MiLJVQvI1xFCKLo5WbCb3b3aHQ2hpwvcYoh5P6F2su6Br3YL5DxtmpjdQY9IwLubcax%2BSZ4uZrDhX6MfnqQRa8vwA61OYhQUJM7OMeqPZ9lo%2BqkzrlPux1XxOyw%3D%3D"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x50e234e7>",
                    "type": "UnknownWord",
                    "value": "2bqkzrlpux1xxoyw"
                },
                "references": {
                    "sentences": [
                        "Var: wG852ANm2aHtGTrbsFHawff1eBZc9MnnPFOLEWeX3o7Ulc0fSj1qhaw%2BFlqpKs6ABhhs4opIe%2Bs%2BKqhT5G3jw9xRH%2FxeEYysL5AYbHsguuOivvXTofbFPPOLM%2ByoYIbq9Navi9C0VsaghxYUgsZ3wt4aHJAWXqvYacWoAowqCaZ7pg3FY0iKgLG403wZRS25%2BOrJL6gdo98qXYntX%2B4ZlPAUa49MiLJVQvI1xFCKLo5WbCb3b3aHQ2hpwvcYoh5P6F2su6Br3YL5DxtmpjdQY9IwLubcax%2BSZ4uZrDhX6MfnqQRa8vwA61OYhQUJM7OMeqPZ9lo%2BqkzrlPux1XxOyw%3D%3D"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x8a440e0b>",
                    "type": "UnknownWord",
                    "value": "http_status_ok"
                },
                "references": {
                    "sentences": [
                        "If the status code is HTTP_STATUS_OK, BAZARLOADER calls InternetQueryDataAvailable to determine the size of data to read, allocates the memory buffer according to the size, and calls InternetReadFile to read the next-stage payload until everything is written into memory.",
                        "If the status code is not HTTP_STATUS_OK, the malware moves on to another C2 address."
                    ],
                    "titles": []
                },
                "links": [
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x472f07b5>",
                            "type": "FunctionName",
                            "value": "InternetReadFile"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0x8a440e0b>",
                            "type": "UnknownWord",
                            "value": "http_status_ok"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0xaaeb9b14>",
                            "type": "FunctionName",
                            "value": "InternetQueryDataAvailable"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0x8a440e0b>",
                            "type": "UnknownWord",
                            "value": "http_status_ok"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x9a669b68>",
                    "type": "UnknownWord",
                    "value": "next-stage"
                },
                "references": {
                    "sentences": [
                        "If the status code is HTTP_STATUS_OK, BAZARLOADER calls InternetQueryDataAvailable to determine the size of data to read, allocates the memory buffer according to the size, and calls InternetReadFile to read the next-stage payload until everything is written into memory.",
                        "Finally, the malware decodes the following custom C2 domains, attempts to resolve them using the DNS servers, and downloads the next-stage executable."
                    ],
                    "titles": []
                },
                "links": [
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0xaaeb9b14>",
                            "type": "FunctionName",
                            "value": "InternetQueryDataAvailable"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0x9a669b68>",
                            "type": "UnknownWord",
                            "value": "next-stage"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x472f07b5>",
                            "type": "FunctionName",
                            "value": "InternetReadFile"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0x9a669b68>",
                            "type": "UnknownWord",
                            "value": "next-stage"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x47495188>",
                    "type": "UnknownWord",
                    "value": "user-owned"
                },
                "references": {
                    "sentences": [
                        "If BAZARLOADER fails to download the next stage executable from the IP addresses listed above, it attempts to resolve custom C2 domains using OpenNIC, a user-owned DNS community service."
                    ],
                    "titles": []
                },
                "links": [
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x87765c4d>",
                            "type": "FunctionName",
                            "value": "OpenNIC"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0x47495188>",
                            "type": "UnknownWord",
                            "value": "user-owned"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xd04412ad>",
                    "type": "UnknownWord",
                    "value": "querying"
                },
                "references": {
                    "sentences": [
                        "To begin querying OpenNICs API, the malware first resolves the URL api.opennicproject.org and calls InternetConnectA to establish a connection to the site."
                    ],
                    "titles": []
                },
                "links": [
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x356d1a8f>",
                            "type": "FunctionName",
                            "value": "OpenNICs"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0xd04412ad>",
                            "type": "UnknownWord",
                            "value": "querying"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x45343c4f>",
                            "type": "FunctionName",
                            "value": "InternetConnectA"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0xd04412ad>",
                            "type": "UnknownWord",
                            "value": "querying"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x294be5e1>",
                    "type": "UnknownWord",
                    "value": "bare"
                },
                "references": {
                    "sentences": [
                        "Next, it calls HttpOpenRequestA to create a GET request handle with the object name /geoip/?bare&ipv=4&wl=all&res=8 and send the request using HttpSendRequestA.",
                        "By examining OpenNICs APIs, we can break down this object name to see what BAZARLOADER is requesting. The bare parameter requests to only list the DNS server IP address, the ipv parameter requests to only list IPv4 servers, the wl parameter requests to only list whitelisted servers, and the res parameter requests to list 8 servers only."
                    ],
                    "titles": []
                },
                "links": [
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0xc7d50cdc>",
                            "type": "FunctionName",
                            "value": "HttpOpenRequestA"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0x294be5e1>",
                            "type": "UnknownWord",
                            "value": "bare"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x69f89450>",
                            "type": "FunctionName",
                            "value": "HttpSendRequestA"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0x294be5e1>",
                            "type": "UnknownWord",
                            "value": "bare"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x384cf21f>",
                    "type": "UnknownWord",
                    "value": "ipv"
                },
                "references": {
                    "sentences": [
                        "Next, it calls HttpOpenRequestA to create a GET request handle with the object name /geoip/?bare&ipv=4&wl=all&res=8 and send the request using HttpSendRequestA.",
                        "By examining OpenNICs APIs, we can break down this object name to see what BAZARLOADER is requesting. The bare parameter requests to only list the DNS server IP address, the ipv parameter requests to only list IPv4 servers, the wl parameter requests to only list whitelisted servers, and the res parameter requests to list 8 servers only."
                    ],
                    "titles": []
                },
                "links": [
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0xc7d50cdc>",
                            "type": "FunctionName",
                            "value": "HttpOpenRequestA"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0x384cf21f>",
                            "type": "UnknownWord",
                            "value": "ipv"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x69f89450>",
                            "type": "FunctionName",
                            "value": "HttpSendRequestA"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0x384cf21f>",
                            "type": "UnknownWord",
                            "value": "ipv"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xb4d51f5d>",
                    "type": "UnknownWord",
                    "value": "res"
                },
                "references": {
                    "sentences": [
                        "Next, it calls HttpOpenRequestA to create a GET request handle with the object name /geoip/?bare&ipv=4&wl=all&res=8 and send the request using HttpSendRequestA.",
                        "By examining OpenNICs APIs, we can break down this object name to see what BAZARLOADER is requesting. The bare parameter requests to only list the DNS server IP address, the ipv parameter requests to only list IPv4 servers, the wl parameter requests to only list whitelisted servers, and the res parameter requests to list 8 servers only."
                    ],
                    "titles": []
                },
                "links": [
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x69f89450>",
                            "type": "FunctionName",
                            "value": "HttpSendRequestA"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0xb4d51f5d>",
                            "type": "UnknownWord",
                            "value": "res"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0xc7d50cdc>",
                            "type": "FunctionName",
                            "value": "HttpOpenRequestA"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0xb4d51f5d>",
                            "type": "UnknownWord",
                            "value": "res"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xe94653f9>",
                    "type": "UnknownWord",
                    "value": "whitelisted"
                },
                "references": {
                    "sentences": [
                        "By examining OpenNICs APIs, we can break down this object name to see what BAZARLOADER is requesting. The bare parameter requests to only list the DNS server IP address, the ipv parameter requests to only list IPv4 servers, the wl parameter requests to only list whitelisted servers, and the res parameter requests to list 8 servers only."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x46cd2e0e>",
                    "type": "UnknownWord",
                    "value": "opennic_server_struct"
                },
                "references": {
                    "sentences": [
                        "For each DNS server IP address, BAZARLOADER parses it from string to int and populates the opennic_server_struct field in the main structure. Below is the structure used to store OpenNIC IP addresses."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xfb04dd1e>",
                    "type": "UnknownWord",
                    "value": "full_exec_command"
                },
                "references": {
                    "sentences": [
                        "To populate the full_exec_command and thread_curr_directory fields which contain the processs command line and full path, BAZARLOADER first extracts the process parameters from the Process Environment Block (PEB)."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xf491e19e>",
                    "type": "UnknownWord",
                    "value": "thread_curr_directory"
                },
                "references": {
                    "sentences": [
                        "To populate the full_exec_command and thread_curr_directory fields which contain the processs command line and full path, BAZARLOADER first extracts the process parameters from the Process Environment Block (PEB)."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xf9ccb8cf>",
                    "type": "UnknownWord",
                    "value": "peb"
                },
                "references": {
                    "sentences": [
                        "To access the PEB, the malware calls NtQueryInformationProcess to retrieve the PEBs adress and calls ReadProcessMemory to read the PEB into memory.",
                        "To populate the full_exec_command and thread_curr_directory fields which contain the processs command line and full path, BAZARLOADER first extracts the process parameters from the Process Environment Block (PEB)."
                    ],
                    "titles": []
                },
                "links": [
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x96ed5f10>",
                            "type": "FunctionName",
                            "value": "ReadProcessMemory"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0xf9ccb8cf>",
                            "type": "UnknownWord",
                            "value": "peb"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0xe4c6c241>",
                            "type": "FunctionName",
                            "value": "NtQueryInformationProcess"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0xf9ccb8cf>",
                            "type": "UnknownWord",
                            "value": "peb"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x662195eb>",
                    "type": "UnknownWord",
                    "value": "pebs"
                },
                "references": {
                    "sentences": [
                        "To access the PEB, the malware calls NtQueryInformationProcess to retrieve the PEBs adress and calls ReadProcessMemory to read the PEB into memory."
                    ],
                    "titles": []
                },
                "links": [
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x96ed5f10>",
                            "type": "FunctionName",
                            "value": "ReadProcessMemory"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0x662195eb>",
                            "type": "UnknownWord",
                            "value": "pebs"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0xe4c6c241>",
                            "type": "FunctionName",
                            "value": "NtQueryInformationProcess"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0x662195eb>",
                            "type": "UnknownWord",
                            "value": "pebs"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x42baf8c0>",
                    "type": "UnknownWord",
                    "value": "adress"
                },
                "references": {
                    "sentences": [
                        "To access the PEB, the malware calls NtQueryInformationProcess to retrieve the PEBs adress and calls ReadProcessMemory to read the PEB into memory."
                    ],
                    "titles": []
                },
                "links": [
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x96ed5f10>",
                            "type": "FunctionName",
                            "value": "ReadProcessMemory"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0x42baf8c0>",
                            "type": "UnknownWord",
                            "value": "adress"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0xe4c6c241>",
                            "type": "FunctionName",
                            "value": "NtQueryInformationProcess"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0x42baf8c0>",
                            "type": "UnknownWord",
                            "value": "adress"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x761bef1c>",
                    "type": "UnknownWord",
                    "value": "rtl_user_process_parameters"
                },
                "references": {
                    "sentences": [
                        "With the process parameter RTL_USER_PROCESS_PARAMETERS structure, BAZARLOADER reads the processs command line and full path to populate the injection structure."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x160b77de>",
                    "type": "UnknownWord",
                    "value": "struct"
                },
                "references": {
                    "sentences": [
                        "Next, using the injection struct, the malware calls CreateProcessA to create the target process in the suspended state to perform process hollowing."
                    ],
                    "titles": []
                },
                "links": [
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0xa28f3aae>",
                            "type": "FunctionName",
                            "value": "CreateProcessA"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0x160b77de>",
                            "type": "UnknownWord",
                            "value": "struct"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xf85b8877>",
                    "type": "UnknownWord",
                    "value": "spot"
                },
                "references": {
                    "sentences": [
                        "We can quickly spot that process hollowing is taking place through the Windows APIs being called. NtUnmapViewOfSection is called to unmap and carve out the parents memory. VirtualAllocEx and WriteProcessMemory are then called to allocate virtual memory in the parents process and write the malicious payload into it."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x317739a5>",
                    "type": "UnknownWord",
                    "value": "ntunmapviewofsection"
                },
                "references": {
                    "sentences": [
                        "We can quickly spot that process hollowing is taking place through the Windows APIs being called. NtUnmapViewOfSection is called to unmap and carve out the parents memory. VirtualAllocEx and WriteProcessMemory are then called to allocate virtual memory in the parents process and write the malicious payload into it."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xf15535b9>",
                    "type": "UnknownWord",
                    "value": "unmap"
                },
                "references": {
                    "sentences": [
                        "We can quickly spot that process hollowing is taking place through the Windows APIs being called. NtUnmapViewOfSection is called to unmap and carve out the parents memory. VirtualAllocEx and WriteProcessMemory are then called to allocate virtual memory in the parents process and write the malicious payload into it."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xf162b430>",
                    "type": "UnknownWord",
                    "value": "carve"
                },
                "references": {
                    "sentences": [
                        "We can quickly spot that process hollowing is taking place through the Windows APIs being called. NtUnmapViewOfSection is called to unmap and carve out the parents memory. VirtualAllocEx and WriteProcessMemory are then called to allocate virtual memory in the parents process and write the malicious payload into it."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x87f5f8df>",
                    "type": "UnknownWord",
                    "value": "virtualallocex"
                },
                "references": {
                    "sentences": [
                        "We can quickly spot that process hollowing is taking place through the Windows APIs being called. NtUnmapViewOfSection is called to unmap and carve out the parents memory. VirtualAllocEx and WriteProcessMemory are then called to allocate virtual memory in the parents process and write the malicious payload into it."
                    ],
                    "titles": []
                },
                "links": [
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x6ff17045>",
                            "type": "FunctionName",
                            "value": "WriteProcessMemory"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0x87f5f8df>",
                            "type": "UnknownWord",
                            "value": "virtualallocex"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xf4c4facc>",
                    "type": "UnknownWord",
                    "value": "relocation"
                },
                "references": {
                    "sentences": [
                        "We can also see that the malware iterates through the parents section header to find the .reloc section and performs relocation on the injected image in memory."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x46858288>",
                    "type": "UnknownWord",
                    "value": "chuong dong"
                },
                "references": {
                    "sentences": [
                        "Chuong Dong<crlf>27th May 2022<crlf>No Comments"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xc5da214d>",
                    "type": "UnknownWord",
                    "value": "27th"
                },
                "references": {
                    "sentences": [
                        "Chuong Dong<crlf>27th May 2022<crlf>No Comments"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x907bca0>",
                    "type": "UnknownWord",
                    "value": "interested"
                },
                "references": {
                    "sentences": [
                        "This post is a follow up on the last one on BAZARLOADER. If youre interested in how to unpack the initial stages of this malware, you can check it out here."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xc832e23c>",
                    "type": "UnknownWord",
                    "value": "unpack"
                },
                "references": {
                    "sentences": [
                        "This post is a follow up on the last one on BAZARLOADER. If youre interested in how to unpack the initial stages of this malware, you can check it out here."
                    ],
                    "titles": []
                }
            }
        ]
    },
    "other_links": [],
    "info": {
        "potential_threats": {
            "<UNKNOWNWORD_0x8f09160f>": {
                "token": {
                    "id": "<UNKNOWNWORD_0x8f09160f>",
                    "type": "UnknownWord",
                    "value": "security_mandatory_system_rid"
                },
                "references": {
                    "sentences": [
                        "If the SIDs subauthority is not SECURITY_MANDATORY_SYSTEM_RID or SECURITY_MANDATORY_PROTECTED_PROCESS_RID, BAZARLOADER still uses these two mutex names but adds the string Global\\ in front of them. This checks for the mutexes in the global namespace instead of the per-session namespace, which allows the malware to check if it has instances running in other users sessions.",
                        "If the SIDs subauthority is SECURITY_MANDATORY_SYSTEM_RID or SECURITY_MANDATORY_PROTECTED_PROCESS_RID, BAZARLOADER checks if the mutex {b837ef4f-10ee-4821-ac76-2331eb32a23f} is currently owned by any other process by calling CreateMutexA."
                    ],
                    "titles": []
                },
                "links": [
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x32fd35e9>",
                            "type": "FunctionName",
                            "value": "CreateMutexA"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0x8f09160f>",
                            "type": "UnknownWord",
                            "value": "security_mandatory_system_rid"
                        }
                    }
                ]
            },
            "<UNKNOWNWORD_0x975f0e4f>": {
                "token": {
                    "id": "<UNKNOWNWORD_0x975f0e4f>",
                    "type": "UnknownWord",
                    "value": "security_mandatory_protected_process_rid"
                },
                "references": {
                    "sentences": [
                        "If the SIDs subauthority is SECURITY_MANDATORY_SYSTEM_RID or SECURITY_MANDATORY_PROTECTED_PROCESS_RID, BAZARLOADER checks if the mutex {b837ef4f-10ee-4821-ac76-2331eb32a23f} is currently owned by any other process by calling CreateMutexA.",
                        "If the SIDs subauthority is not SECURITY_MANDATORY_SYSTEM_RID or SECURITY_MANDATORY_PROTECTED_PROCESS_RID, BAZARLOADER still uses these two mutex names but adds the string Global\\ in front of them. This checks for the mutexes in the global namespace instead of the per-session namespace, which allows the malware to check if it has instances running in other users sessions."
                    ],
                    "titles": []
                },
                "links": [
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x32fd35e9>",
                            "type": "FunctionName",
                            "value": "CreateMutexA"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0x975f0e4f>",
                            "type": "UnknownWord",
                            "value": "security_mandatory_protected_process_rid"
                        }
                    }
                ]
            },
            "<UNKNOWNWORD_0x95a76c53>": {
                "token": {
                    "id": "<UNKNOWNWORD_0x95a76c53>",
                    "type": "UnknownWord",
                    "value": "wininet"
                },
                "references": {
                    "sentences": [
                        "To generate Internet activities to hide its communication with C2 servers, BAZARLOADER first calls InternetOpenA to initialize the use of WinINet functions with the following string as the HTTP user agent."
                    ],
                    "titles": []
                },
                "links": [
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x70f6527d>",
                            "type": "FunctionName",
                            "value": "InternetOpenA"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0x95a76c53>",
                            "type": "UnknownWord",
                            "value": "wininet"
                        }
                    }
                ]
            },
            "<UNKNOWNWORD_0xe8138151>": {
                "token": {
                    "id": "<UNKNOWNWORD_0xe8138151>",
                    "type": "UnknownWord",
                    "value": "bcryptgenrandom"
                },
                "references": {
                    "sentences": [
                        "Next, the thread enters an infinite loop to start generating the traffic noises. For random number generation, BAZARLOADER uses different functions that call the Windows API BCryptGenRandom to generate a set number of random bytes."
                    ],
                    "titles": []
                }
            },
            "<UNKNOWNWORD_0x8387fba9>": {
                "token": {
                    "id": "<UNKNOWNWORD_0x8387fba9>",
                    "type": "UnknownWord",
                    "value": "http_query_content_length"
                },
                "references": {
                    "sentences": [
                        "Finally, the malware calls InternetOpenURLA to establish a connection with the generated URL. It calls HTTPQueryInfoA with the HTTP_QUERY_CONTENT_LENGTH flag to retrieve the contents length, allocates a buffer with that size, and calls InternetReadFile to read data from that URL."
                    ],
                    "titles": []
                },
                "links": [
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x472f07b5>",
                            "type": "FunctionName",
                            "value": "InternetReadFile"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0x8387fba9>",
                            "type": "UnknownWord",
                            "value": "http_query_content_length"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0xcf09f42e>",
                            "type": "FunctionName",
                            "value": "HTTPQueryInfoA"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0x8387fba9>",
                            "type": "UnknownWord",
                            "value": "http_query_content_length"
                        }
                    }
                ]
            },
            "<UNKNOWNWORD_0xf6e507cb>": {
                "token": {
                    "id": "<UNKNOWNWORD_0xf6e507cb>",
                    "type": "UnknownWord",
                    "value": "sha384"
                },
                "references": {
                    "sentences": [
                        "Finally, it calls BCryptGetProperty to retrieve the length of the RSA public and private cipher blocks. With this structure fully populated, BAZARLOADER can now perform RSA encryption/decryption as well as SHA384 hashing.",
                        "The malware resolves the strings RSA and SHA384 and calls BCryptOpenAlgorithmProvider to retrieve handles for these two algorithms. The handles are stored in the corresponding fields in the crypto_struct structure.",
                        "It also generates the SHA384 hash of the datetime string to populate the structures datetime_string_hash and datetime_string_hash_len fields."
                    ],
                    "titles": []
                },
                "links": [
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0xca3b22b9>",
                            "type": "FunctionName",
                            "value": "BCryptOpenAlgorithmProvider"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0xf6e507cb>",
                            "type": "UnknownWord",
                            "value": "sha384"
                        }
                    }
                ]
            },
            "<UNKNOWNWORD_0xa38fe6f>": {
                "token": {
                    "id": "<UNKNOWNWORD_0xa38fe6f>",
                    "type": "UnknownWord",
                    "value": "rsafullprivateblob"
                },
                "references": {
                    "sentences": [
                        "For each blob, the malware resolves one of the strings RSAFULLPRIVATEBLOB or RSAPUBLICBLOB and uses it to specify the blobs type when calling BCryptImportKeyPair to import the corresponding key handle."
                    ],
                    "titles": []
                },
                "links": [
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0xb4d7e32e>",
                            "type": "FunctionName",
                            "value": "BCryptImportKeyPair"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0xa38fe6f>",
                            "type": "UnknownWord",
                            "value": "rsafullprivateblob"
                        }
                    }
                ]
            },
            "<UNKNOWNWORD_0xbb71aefe>": {
                "token": {
                    "id": "<UNKNOWNWORD_0xbb71aefe>",
                    "type": "UnknownWord",
                    "value": "rsapublicblob"
                },
                "references": {
                    "sentences": [
                        "For each blob, the malware resolves one of the strings RSAFULLPRIVATEBLOB or RSAPUBLICBLOB and uses it to specify the blobs type when calling BCryptImportKeyPair to import the corresponding key handle."
                    ],
                    "titles": []
                },
                "links": [
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0xb4d7e32e>",
                            "type": "FunctionName",
                            "value": "BCryptImportKeyPair"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0xbb71aefe>",
                            "type": "UnknownWord",
                            "value": "rsapublicblob"
                        }
                    }
                ]
            },
            "<UNKNOWNWORD_0x8a440e0b>": {
                "token": {
                    "id": "<UNKNOWNWORD_0x8a440e0b>",
                    "type": "UnknownWord",
                    "value": "http_status_ok"
                },
                "references": {
                    "sentences": [
                        "If the status code is HTTP_STATUS_OK, BAZARLOADER calls InternetQueryDataAvailable to determine the size of data to read, allocates the memory buffer according to the size, and calls InternetReadFile to read the next-stage payload until everything is written into memory.",
                        "If the status code is not HTTP_STATUS_OK, the malware moves on to another C2 address."
                    ],
                    "titles": []
                },
                "links": [
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0x472f07b5>",
                            "type": "FunctionName",
                            "value": "InternetReadFile"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0x8a440e0b>",
                            "type": "UnknownWord",
                            "value": "http_status_ok"
                        }
                    },
                    {
                        "src": {
                            "id": "<FUNCTIONNAME_0xaaeb9b14>",
                            "type": "FunctionName",
                            "value": "InternetQueryDataAvailable"
                        },
                        "relation": "related",
                        "dst": {
                            "id": "<UNKNOWNWORD_0x8a440e0b>",
                            "type": "UnknownWord",
                            "value": "http_status_ok"
                        }
                    }
                ]
            },
            "<UNKNOWNWORD_0x761bef1c>": {
                "token": {
                    "id": "<UNKNOWNWORD_0x761bef1c>",
                    "type": "UnknownWord",
                    "value": "rtl_user_process_parameters"
                },
                "references": {
                    "sentences": [
                        "With the process parameter RTL_USER_PROCESS_PARAMETERS structure, BAZARLOADER reads the processs command line and full path to populate the injection structure."
                    ],
                    "titles": []
                }
            }
        },
        "sigma": false,
        "yara": false
    },
    "keywords": {
        "classified": [],
        "dubbed": [],
        "associated": [],
        "targets": [],
        "attributed": []
    },
    "resources": {
        "links": {
            "github": [
                "https://github.com/m0n0ph1/Process-Hollowing"
            ],
            "pastebin": [],
            "text_files": [],
            "other": [
                "https://www.opennic.org/",
                "https://wiki.opennic.org/api/geoip",
                "https://twitter.com/cPeterr",
                "https://www.0ffset.net/author/chuong-dong/",
                "https://www.0ffset.net/reverse-engineering/bazarloader-iso-file-infection/",
                "https://www.malware-traffic-analysis.net/2022/02/07/index.html"
            ]
        },
        "images": [
            "https://www.0ffset.net/wp-content/uploads/2022/05/main_bazar01-1024x566.png",
            "https://www.0ffset.net/wp-content/uploads/2022/05/main_bazar02.png",
            "https://www.0ffset.net/wp-content/uploads/2022/05/main_bazar03-1024x313.png",
            "https://www.0ffset.net/wp-content/uploads/2022/05/main_bazar04.png",
            "https://www.0ffset.net/wp-content/uploads/2022/05/main_bazar05.png",
            "https://www.0ffset.net/wp-content/uploads/2022/05/main_bazar06-1024x85.png",
            "https://www.0ffset.net/wp-content/uploads/2022/05/main_bazar07-1024x418.png",
            "https://www.0ffset.net/wp-content/uploads/2022/05/main_bazar07a-1024x304.png",
            "https://www.0ffset.net/wp-content/uploads/2022/05/main_bazar08.png",
            "https://www.0ffset.net/wp-content/uploads/2022/05/main_bazar09-1024x494.png",
            "https://www.0ffset.net/wp-content/uploads/2022/05/main_bazar10.png",
            "https://www.0ffset.net/wp-content/uploads/2022/05/main_bazar11-1024x516.png",
            "https://www.0ffset.net/wp-content/uploads/2022/05/main_bazar12-1024x551.png",
            "https://www.0ffset.net/wp-content/uploads/2022/05/main_bazar13.png",
            "https://www.0ffset.net/wp-content/uploads/2022/05/main_bazar14.png",
            "https://www.0ffset.net/wp-content/uploads/2022/05/main_bazar15.png",
            "https://www.0ffset.net/wp-content/uploads/2022/05/main_bazar17.png",
            "https://www.0ffset.net/wp-content/uploads/2022/05/main_bazar18.png",
            "https://www.0ffset.net/wp-content/uploads/2022/05/main_bazar19-1024x415.png",
            "https://www.0ffset.net/wp-content/uploads/2022/05/main_bazar20.png",
            "https://www.0ffset.net/wp-content/uploads/2022/05/main_bazar21-1024x595.png",
            "https://www.0ffset.net/wp-content/uploads/2022/05/main_bazar22.png",
            "https://www.0ffset.net/wp-content/uploads/2022/05/main_bazar23.png",
            "https://www.0ffset.net/wp-content/uploads/2022/05/main_bazar24.png",
            "https://www.0ffset.net/wp-content/uploads/2022/05/main_bazar25.png",
            "https://www.0ffset.net/wp-content/uploads/2022/05/main_bazar26.png",
            "https://www.0ffset.net/wp-content/uploads/2022/05/main_bazar27-1024x421.png",
            "https://www.0ffset.net/wp-content/uploads/2022/05/main_bazar28-1.png",
            "https://www.0ffset.net/wp-content/uploads/2022/05/main_bazar29-2.png",
            "https://www.0ffset.net/wp-content/uploads/2022/05/main_bazar30.png",
            "https://www.0ffset.net/wp-content/uploads/2022/05/main_bazar31.png",
            "https://www.0ffset.net/wp-content/uploads/2022/05/main_bazar32.png",
            "https://www.0ffset.net/wp-content/uploads/2022/05/main_bazar33.png",
            "https://www.0ffset.net/wp-content/uploads/2022/05/main_bazar34-1024x460.png",
            "https://www.0ffset.net/wp-content/uploads/2022/05/main_bazar35.png",
            "https://www.0ffset.net/wp-content/uploads/2022/05/main_bazar36.png",
            "https://www.0ffset.net/wp-content/uploads/2022/05/main_bazar37-1024x226.png",
            "https://www.0ffset.net/wp-content/uploads/2022/05/main_bazar38.png",
            "https://www.0ffset.net/wp-content/uploads/2022/05/main_bazar39-1024x477.png",
            "https://www.0ffset.net/wp-content/uploads/2022/05/main_bazar40.png",
            "https://www.0ffset.net/wp-content/uploads/2022/05/main_bazar41-1024x491.png",
            "https://www.0ffset.net/wp-content/uploads/2022/05/main_bazar42-1024x503.png",
            "https://www.0ffset.net/wp-content/uploads/2022/05/main_bazar43-1024x462.png",
            "https://www.0ffset.net/wp-content/uploads/2022/05/main_bazar44-1.png",
            "https://www.0ffset.net/wp-content/uploads/2022/05/main_bazar43.png"
        ]
    }
}