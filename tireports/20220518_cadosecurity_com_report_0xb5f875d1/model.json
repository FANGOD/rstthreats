{
    "id": "<report_0xb5f875d1>",
    "url": "https://www.cadosecurity.com/linux-attack-techniques-dynamic-linker-hijacking-with-ld-preload",
    "title": "Linux Attack Techniques: Dynamic Linker Hijacking with LD Preload",
    "meta": [
        {
            "id": "<chapter_0x30714ff8>",
            "title": "Linux Attack Techniques: Dynamic Linker Hijacking with LD Preload",
            "title_level": 1,
            "sentences": [
                {
                    "id": "<sentence_0xe77cb5d>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "About Cado Security",
                    "html": "<p class=\"av-special-heading-tag\">About Cado Security</p>"
                },
                {
                    "id": "<sentence_0xe717b11f>",
                    "is_empty": true,
                    "have_tags": true,
                    "tags": {
                        "<a_0x2a1aeab>": "https://www.cadosecurity.com"
                    },
                    "text": "",
                    "html": "<a class=\"logo-main\" href=\"https://www.cadosecurity.com\">\n</a>"
                },
                {
                    "id": "<sentence_0xdc0d05ad>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "Cado Security provides the cloud investigation platform that empowers security teams to respond to threats at cloud speed. By automating data capture and processing across cloud and container environments, Cado Response effortlessly delivers forensic-level detail and unprecedented context to simplify cloud investigation and response.",
                    "html": "<p>Cado Security provides the cloud investigation platform that empowers security teams to respond to threats at cloud speed. By automating data capture and processing across cloud and container environments, Cado Response effortlessly delivers forensic-level detail and unprecedented context to simplify cloud investigation and response.</p>"
                },
                {
                    "id": "<sentence_0x478211bd>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<a_0xf8b5e51a>": "https://www.cadosecurity.com/free-investigation/"
                    },
                    "text": "Free Trial",
                    "html": "<a class=\"avia-button avia-icon_select-no avia-color-primary avia-size-medium\" href=\"https://www.cadosecurity.com/free-investigation/\">Free Trial</a>"
                },
                {
                    "id": "<sentence_0x4d131ed1>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<a_0x1cd0a8c0>": "https://www.cadosecurity.com/demo/"
                    },
                    "text": "Demo",
                    "html": "<a class=\"avia-button avia-icon_select-no avia-color-secondary avia-size-medium\" href=\"https://www.cadosecurity.com/demo/\">Demo</a>"
                },
                {
                    "id": "<sentence_0x2beebcb5>",
                    "is_empty": true,
                    "have_tags": false,
                    "tags": {},
                    "text": "",
                    "html": "<ul class=\"menu\" id=\"menu-footer-menu-platform\">\n</ul>"
                },
                {
                    "id": "<sentence_0xc9b12b5d>",
                    "is_empty": true,
                    "have_tags": false,
                    "tags": {},
                    "text": "",
                    "html": "<ul class=\"menu\" id=\"menu-footer-menu-company\">\n</ul>"
                },
                {
                    "id": "<sentence_0x4f3acc8>",
                    "is_empty": true,
                    "have_tags": false,
                    "tags": {},
                    "text": "",
                    "html": "<ul class=\"menu\" id=\"menu-footer-menu-resources\">\n</ul>"
                },
                {
                    "id": "<sentence_0x814b1719>",
                    "is_empty": true,
                    "have_tags": false,
                    "tags": {},
                    "text": "",
                    "html": "<ul class=\"menu\" id=\"menu-footer-community\">\n</ul>"
                },
                {
                    "id": "<sentence_0x7602805>",
                    "is_empty": true,
                    "have_tags": false,
                    "tags": {},
                    "text": "",
                    "html": "<ul class=\"menu\" id=\"menu-footer-contact\">\n</ul>"
                },
                {
                    "id": "<sentence_0xdce68e13>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<a_0xfd2bf90>": "https://twitter.com/CadoSecurity",
                        "<a_0xacc9d849>": "https://www.linkedin.com/company/cado-security/",
                        "<a_0xd5a1625b>": "https://aws.amazon.com/marketplace/seller-profile?id=38874fd2-b585-412f-992a-cf111bbca38a"
                    },
                    "text": "Twitter<crlf>Linkedin<crlf>Amazon",
                    "html": "<ul class=\"noLightbox ep-social-bookmarks ep-align-left icon_count_3\"><li class=\"ep-social-bookmarks ep-align-left_twitter av-social-link-twitter social_icon_1\"><a href=\"https://twitter.com/CadoSecurity\" rel=\"noopener\" target=\"_blank\" title=\"Twitter\">Twitter</a></li><li class=\"ep-social-bookmarks ep-align-left_linkedin av-social-link-linkedin social_icon_2\"><a href=\"https://www.linkedin.com/company/cado-security/\" rel=\"noopener\" target=\"_blank\" title=\"Linkedin\">Linkedin</a></li><li class=\"ep-social-bookmarks ep-align-left_amazon av-social-link-amazon social_icon_3\"><a href=\"https://aws.amazon.com/marketplace/seller-profile?id=38874fd2-b585-412f-992a-cf111bbca38a\" rel=\"noopener\" target=\"_blank\" title=\"Amazon\">Amazon</a></li></ul>"
                },
                {
                    "id": "<sentence_0xdcacae31>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "Copyright 2022 Cado Security",
                    "html": "<p>\u00a9 Copyright 2022 Cado Security</p>"
                },
                {
                    "id": "<sentence_0xf9094c48>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<a_0x9586f568>": "https://cadosecurity.com/sitemap/",
                        "<a_0xe011440>": "https://cadosecurity.com/privacy-policy/"
                    },
                    "text": "Sitemap | Privacy Policy",
                    "html": "<p><a href=\"https://cadosecurity.com/sitemap/\">Sitemap</a> | <a href=\"https://cadosecurity.com/privacy-policy/\">Privacy Policy</a></p>"
                }
            ]
        }
    ],
    "chapters": [
        {
            "id": "<chapter_0x483d46be>",
            "title": "Linux Attack Techniques: Dynamic Linker Hijacking with LD Preload",
            "title_level": 1,
            "sentences": [
                {
                    "id": "<sentence_0xc7cdfcc5>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "Introduction",
                    "html": "<p>Introduction</p>"
                },
                {
                    "id": "<sentence_0x30607807>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "Linux has long dominated the server computing landscape, and the rapid adoption of cloud technologies by organisations around the world has only contributed to this. As a result, many recent high-profile malware campaigns have targeted Linux servers (often in cloud environments) and used them to illicitly mine cryptocurrency, conduct denial of service (DoS) attacks, steal sensitive data and carry out other nefarious activities.",
                    "html": "<p>Linux has long dominated the server computing landscape, and the rapid adoption of cloud technologies by organisations around the world has only contributed to this. As a result, many recent high-profile malware campaigns have targeted Linux servers (often in cloud environments) and used them to illicitly mine cryptocurrency, conduct denial of service (DoS) attacks, steal sensitive data and carry out other nefarious activities.</p>"
                },
                {
                    "id": "<sentence_0x98e0736f>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "At Cado Labs, we regularly analyse malware campaigns targeting Linux and have decided to document some common and not-so-common attack techniques observed in these campaigns. We hope this will help defenders identify and mitigate these techniques in their Linux environments. In this blog were going to analyse a common method of execution flow hijacking on Linux: dynamic linker hijacking.",
                    "html": "<p>At Cado Labs, we regularly analyse malware campaigns targeting Linux and have decided to document some common and not-so-common attack techniques observed in these campaigns. We hope this will help defenders identify and mitigate these techniques in their Linux environments. In this blog we\u2019re going to analyse a common method of execution flow hijacking on Linux: dynamic linker hijacking.</p>"
                },
                {
                    "id": "<sentence_0x62281732>",
                    "is_empty": true,
                    "have_tags": false,
                    "tags": {},
                    "text": "",
                    "html": "<p></p>"
                },
                {
                    "id": "<sentence_0xf4423d5f>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "Background on Dynamic Linker Hijacking",
                    "html": "<p>Background on Dynamic Linker Hijacking</p>"
                },
                {
                    "id": "<sentence_0x428fbb8a>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "Dynamic linking, a feature present in virtually all modern operating systems, allows certain commonly-used libraries (referred to as shared objects in Linux, dylibs in macOS, and Dynamic Linked Libraries/DLLs in Windows) to be loaded by an application at runtime. When a developer compiles an executable, they specify which libraries should be loaded and the operating systems linker retrieves these and loads them when the application is launched. This allows the code contained within the libraries to be shared across applications and saves the developer writing this code and shipping it themselves.",
                    "html": "<p>Dynamic linking, a feature present in virtually all modern operating systems, allows certain commonly-used libraries (referred to as shared objects in Linux, dylibs in macOS, and Dynamic Linked Libraries/DLLs in Windows) to be loaded by an application at runtime. When a developer compiles an executable, they specify which libraries should be loaded and the operating system\u2019s linker retrieves these and loads them when the application is launched. This allows the code contained within the libraries to be shared across applications and saves the developer writing this code and shipping it themselves. </p>"
                },
                {
                    "id": "<sentence_0x9044bd03>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<img_0xba881c3a>": "https://www.cadosecurity.com/wp-content/uploads/image3-8.png"
                    },
                    "text": "Example of shared libraries loaded by the ls command",
                    "html": "<figure class=\"wp-block-image size-full\"><img alt=\"\" class=\"wp-image-5203\" height=\"716\" src=\"https://www.cadosecurity.com/wp-content/uploads/image3-8.png\" width=\"1684\"/><figcaption>Example of shared libraries loaded by the ls command \n</figcaption></figure>"
                },
                {
                    "id": "<sentence_0xda96c1c0>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "Typical examples of shared libraries include things like compression and cryptographic libraries, features which are commonly used by applications but are difficult and time-consuming to implement after all, why reinvent the wheel?",
                    "html": "<p>Typical examples of shared libraries include things like compression and cryptographic libraries, features which are commonly used by applications but are difficult and time-consuming to implement \u2013 after all, why reinvent the wheel? </p>"
                },
                {
                    "id": "<sentence_0x332da697>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "However, if we think like an attacker, shared libraries present an opportunity to hijack the execution flow of an application and run malicious code in the context of a legitimate process. Generally, dynamic linker hijacking involves tricking the dynamic linker into loading a malicious library implanted by the attacker.",
                    "html": "<p>However, if we think like an attacker, shared libraries present an opportunity to hijack the execution flow of an application and run malicious code in the context of a legitimate process. Generally, dynamic linker hijacking involves tricking the dynamic linker into loading a malicious library implanted by the attacker. </p>"
                },
                {
                    "id": "<sentence_0xeb1e21b2>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "This can be used to supplement existing payloads by implementing features like process hiding, as well discuss later. It also brings stealth benefits to a malware campaign and although many modern operating systems are hardened to prevent arbitrary libraries from being loaded, this is still a highly-effective technique and one which is often seen in the wild.",
                    "html": "<p>This can be used to supplement existing payloads by implementing features like process hiding, as we\u2019ll discuss later. It also brings stealth benefits to a malware campaign and although many modern operating systems are hardened to prevent arbitrary libraries from being loaded, this is still a highly-effective technique and one which is often seen in the wild.</p>"
                },
                {
                    "id": "<sentence_0xa4c43759>",
                    "is_empty": true,
                    "have_tags": false,
                    "tags": {},
                    "text": "",
                    "html": "<p></p>"
                },
                {
                    "id": "<sentence_0x9f18d0b3>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "Using Linuxs LD Preload Feature for Dynamic Linker Hijacking",
                    "html": "<p>Using Linux\u2019s LD Preload Feature for Dynamic Linker Hijacking</p>"
                },
                {
                    "id": "<sentence_0xf8c20d7b>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<a_0x9c3b1f49>": "https://man7.org/linux/man-pages/man8/ld.so.8.html"
                    },
                    "text": "In Linux, the dynamic linkers are referred to as ld.so and ld-linux.so. The latter is commonly used in contemporary Linux distributions as it handles dynamic linking for executables in the ELF binary format the current default format on Linux.<crlf>A number of environment variables (envars) can be used during the execution of the dynamic linker, the most important of which (for our purposes) is LD_PRELOAD. From the ld.so man page:",
                    "html": "<p>In Linux, the dynamic linkers are referred to as ld.so and ld-linux.so. The latter is commonly used in contemporary Linux distributions as it handles dynamic linking for executables in the ELF binary format \u2013 the current default format on Linux. \nA number of environment variables (envars) can be used during the execution of the dynamic linker, the most important of which (for our purposes) is LD_PRELOAD. From the ld.so <a href=\"https://man7.org/linux/man-pages/man8/ld.so.8.html\">man page</a>:</p>"
                },
                {
                    "id": "<sentence_0xe3182176>",
                    "is_empty": true,
                    "have_tags": false,
                    "tags": {},
                    "text": "",
                    "html": "<p></p>"
                },
                {
                    "id": "<sentence_0x5ed944a1>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "[LD_PRELOAD is] A list of additional, user-specified, ELF shared objects",
                    "html": "<p class=\"has-text-align-center\">[LD_PRELOAD is\u2026] A list of additional, user-specified, ELF shared objects</p>"
                },
                {
                    "id": "<sentence_0xe8d68313>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "to be loaded before all others. This feature can be used to selectively override",
                    "html": "<p class=\"has-text-align-center\"> to be loaded before all others. This feature can be used to selectively override </p>"
                },
                {
                    "id": "<sentence_0x19dfa445>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "functions in other shared objects.",
                    "html": "<p class=\"has-text-align-center\">functions in other shared objects.</p>"
                },
                {
                    "id": "<sentence_0xeebfb8d6>",
                    "is_empty": true,
                    "have_tags": false,
                    "tags": {},
                    "text": "",
                    "html": "<p></p>"
                },
                {
                    "id": "<sentence_0x65b8e375>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "Essentially, this means that shortly after invocation, the dynamic linker will read the contents of $LD_PRELOAD and load any shared objects located at paths defined in the envar before any other (potentially benign) shared objects are loaded. Since its easy for a malicious shell script or other executable to set the value of LD_PRELOAD, you can see how this could be leveraged by malware to run additional payloads.",
                    "html": "<p>Essentially, this means that shortly after invocation, the dynamic linker will read the contents of $LD_PRELOAD and load any shared objects located at paths defined in the envar before any other (potentially benign) shared objects are loaded. Since it\u2019s easy for a malicious shell script or other executable to set the value of LD_PRELOAD, you can see how this could be leveraged by malware to run additional payloads.</p>"
                },
                {
                    "id": "<sentence_0x372fc1f7>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "The LD_PRELOAD envar is not the only place where users can specify shared objects to be loaded first. The dynamic linker also consults the file /etc/ld.so.preload which can also contain user-specified paths to shared objects. In the case that paths are defined both in the envar and in this file, the envar takes precedence. Additionally, the ld.so.preload file causes a system-wide configuration change, resulting in shared objects being preloaded by any binary on the system.",
                    "html": "<p>\nThe LD_PRELOAD envar is not the only place where users can specify shared objects to be loaded first. The dynamic linker also consults the file /etc/ld.so.preload which can also contain user-specified paths to shared objects. In the case that paths are defined both in the envar and in this file, the envar takes precedence. Additionally, the ld.so.preload file causes a system-wide configuration change, resulting in shared objects being preloaded by any binary on the system.</p>"
                },
                {
                    "id": "<sentence_0x5b0ed822>",
                    "is_empty": true,
                    "have_tags": false,
                    "tags": {},
                    "text": "",
                    "html": "<p></p>"
                },
                {
                    "id": "<sentence_0x2f92b6c6>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "Linux Dynamic Linker Hijacking in Action",
                    "html": "<p>Linux Dynamic Linker Hijacking in Action</p>"
                },
                {
                    "id": "<sentence_0xabb2905f>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<a_0xc23a0c4b>": "https://github.com/gianlucaborello/libprocesshider",
                        "<a_0x3dacc8e6>": "https://sysdig.com/blog/hiding-linux-processes-for-fun-and-profit/"
                    },
                    "text": "Dynamic linker hijacking is often utilised by Linux malware to install rootkits on the target system. One popular open source rootkit is libprocesshider.so. As the name suggests, libprocesshider is used to hide processes from Linux performance monitoring tools, such as top, ps, lsof and so on. It achieves this by hooking syscalls used for enumerating the /proc/<PID> directories and preventing them from doing so (more info here). Naturally, this is desirable for virtually all categories of malware, as malicious processes may be able to execute unimpeded if they are undetectable by the bundled monitoring tools.",
                    "html": "<p>Dynamic linker hijacking is often utilised by Linux malware to install rootkits on the target system. One popular open source rootkit is <a href=\"https://github.com/gianlucaborello/libprocesshider\">libprocesshider.so</a>. As the name suggests, libprocesshider is used to hide processes from Linux performance monitoring tools, such as top, ps, lsof and so on. It achieves this by hooking syscalls used for enumerating the /proc/&lt;PID&gt; directories and preventing them from doing so (more info <a href=\"https://sysdig.com/blog/hiding-linux-processes-for-fun-and-profit/\">here</a>). Naturally, this is desirable for virtually all categories of malware, as malicious processes may be able to execute unimpeded if they are undetectable by the bundled monitoring tools. </p>"
                },
                {
                    "id": "<sentence_0x6506df4e>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "In order to hook the appropriate syscall, the library needs to be loaded first In steps the dynamic linkers LD Preload feature!",
                    "html": "<p>In order to hook the appropriate syscall, the library needs to be loaded first\u2026 In steps the dynamic linker\u2019s LD Preload feature! </p>"
                },
                {
                    "id": "<sentence_0x1fb6ad05>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<a_0x5f4a435d>": "https://www.virustotal.com/gui/file/53047c6f255ceee5ec989d73a36fa97ac6035325ea1a81e959b585220188fd11"
                    },
                    "text": "To demonstrate this in action, we examined a recent sample of cryptomining malware:",
                    "html": "<p>To demonstrate this in action, we examined a recent <a href=\"https://www.virustotal.com/gui/file/53047c6f255ceee5ec989d73a36fa97ac6035325ea1a81e959b585220188fd11\">sample</a> of cryptomining malware:</p>"
                },
                {
                    "id": "<sentence_0xe86afc53>",
                    "is_empty": true,
                    "have_tags": true,
                    "tags": {
                        "<img_0x3b8ea546>": "https://www.cadosecurity.com/wp-content/uploads/image2-8.png"
                    },
                    "text": "",
                    "html": "<figure class=\"wp-block-image size-full\"><img alt=\"\" class=\"wp-image-5204\" height=\"1138\" src=\"https://www.cadosecurity.com/wp-content/uploads/image2-8.png\" width=\"1999\"/></figure>"
                },
                {
                    "id": "<sentence_0x1d079f28>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "As can be seen on lines 18 20, a function named hide first uses sed to remove any lines containing libprocesshider from the /etc/ld.so.preload file. A path containing the compiled libprocesshider shared object (library) is then added back into the ld.so.preload file to ensure that its loaded correctly.",
                    "html": "<p>As can be seen on lines 18 \u2013 20, a function named hide first uses sed to remove any lines containing \u2018libprocesshider\u2019 from the /etc/ld.so.preload file. A path containing the compiled libprocesshider shared object (library) is then added back into the ld.so.preload file to ensure that it\u2019s loaded correctly. </p>"
                },
                {
                    "id": "<sentence_0xc16cb49f>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "According to the libprocesshider documentation, once the path to libprocesshider is added to LD_PRELOAD or the ld.so.preload file, the specified executable will first load libprocesshider and details of the process will be hidden from process monitoring tools.",
                    "html": "<p>According to the libprocesshider documentation, once the path to libprocesshider is added to LD_PRELOAD or the ld.so.preload file, the specified executable will first load libprocesshider and details of the process will be hidden from process monitoring tools. </p>"
                },
                {
                    "id": "<sentence_0x98e7ab35>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "Further down the script, we can see the hide function being invoked:",
                    "html": "<p>Further down the script, we can see the hide function being invoked:</p>"
                },
                {
                    "id": "<sentence_0x1f789cee>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<img_0x8d9bbc2c>": "https://www.cadosecurity.com/wp-content/uploads/image1-11.png"
                    },
                    "text": "Line 214: invocation of the hide() function",
                    "html": "<figure class=\"wp-block-image size-full\"><img alt=\"\" class=\"wp-image-5205\" height=\"971\" src=\"https://www.cadosecurity.com/wp-content/uploads/image1-11.png\" width=\"1999\"/><figcaption>Line 214: invocation of the hide() function\n</figcaption></figure>"
                },
                {
                    "id": "<sentence_0x72ca739>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "If you examine lines 211 to 214 in the screenshot above, youll see a file at the path /var/tmp/java_c/java_c is executed prior to the hide function being invoked. Despite the name, this is the binary for the XMRig Monero mining software, commonly seen in cryptojacking campaigns.",
                    "html": "<p>If you examine lines 211 to 214 in the screenshot above, you\u2019ll see a file at the path /var/tmp/java_c/java_c is executed prior to the hide function being invoked. Despite the name, this is the binary for the XMRig Monero mining software, commonly seen in cryptojacking campaigns. </p>"
                },
                {
                    "id": "<sentence_0xbbc0fef2>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "Once the hide function is invoked, the miner process is hidden as the process name is hardcoded in the version of libprocesshider.so that the script downloads. This means that although the miner is likely executing with high utilisation of system resources (something that would typically draw attention) this would be near-impossible for an administrator to identify using system monitoring tools alone.",
                    "html": "<p>Once the hide function is invoked, the miner process is hidden \u2013 as the process name is hardcoded in the version of libprocesshider.so that the script downloads. This means that although the miner is likely executing with high utilisation of system resources (something that would typically draw attention) this would be near-impossible for an administrator to identify using system monitoring tools alone. </p>"
                },
                {
                    "id": "<sentence_0xfefdfb1a>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "As a result, the miner executes uninterrupted and successfully generates profits for the malware developer.",
                    "html": "<p>As a result, the miner executes uninterrupted and successfully generates profits for the malware developer.</p>"
                },
                {
                    "id": "<sentence_0xc5b91109>",
                    "is_empty": true,
                    "have_tags": false,
                    "tags": {},
                    "text": "",
                    "html": "<p></p>"
                },
                {
                    "id": "<sentence_0x6178799d>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "How to Detect Dynamic Linker Hijacking in your Environment",
                    "html": "<p>How to Detect Dynamic Linker Hijacking in your Environment</p>"
                },
                {
                    "id": "<sentence_0xad1e679e>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "Although effective, fortunately this technique is relatively easy to detect on Linux. To check the contents of the LD_PRELOAD envar, the export command can be used. If you suspect your system has been compromised and this envar is set then its likely that a malicious library has been used. The unset command can be used to delete the value of the envar and reveal the malware if a process hiding library was used.",
                    "html": "<p>Although effective, fortunately this technique is relatively easy to detect on Linux. To check the contents of the LD_PRELOAD envar, the export command can be used. If you suspect your system has been compromised and this envar is set then it\u2019s likely that a malicious library has been used. The unset command can be used to delete the value of the envar and reveal the malware if a process hiding library was used. </p>"
                },
                {
                    "id": "<sentence_0x4ac6df50>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "Similarly, the /etc/ld.so.preload file shouldnt exist in a vanilla installation of Linux. If this file exists and it contains paths to arbitrary executables, this is again indicative of malicious libraries being used. Simply delete the file to prevent the libraries being loaded in future and remove the libraries themselves.",
                    "html": "<p>Similarly, the /etc/ld.so.preload file shouldn\u2019t exist in a vanilla installation of Linux. If this file exists and it contains paths to arbitrary executables, this is again indicative of malicious libraries being used. Simply delete the file to prevent the libraries being loaded in future and remove the libraries themselves. </p>"
                },
                {
                    "id": "<sentence_0x687602f1>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<img_0xd734cc14>": "https://www.cadosecurity.com/wp-content/uploads/image4-8.png"
                    },
                    "text": "Cado Response Screenshot demonstrating dynamic linker hijacking attempt",
                    "html": "<figure class=\"wp-block-image size-full\"><img alt=\"\" class=\"wp-image-5206\" height=\"699\" src=\"https://www.cadosecurity.com/wp-content/uploads/image4-8.png\" width=\"1690\"/><figcaption>Cado Response Screenshot demonstrating dynamic linker hijacking attempt\n</figcaption></figure>"
                },
                {
                    "id": "<sentence_0x90f3604b>",
                    "is_empty": true,
                    "have_tags": true,
                    "tags": {
                        "<img_0xc4d06a04>": "https://www.cadosecurity.com/wp-content/uploads/Screen-Shot-2022-05-17-at-3.08.55-PM.png"
                    },
                    "text": "",
                    "html": "<figure class=\"wp-block-image size-full\"><img alt=\"\" class=\"wp-image-5207\" height=\"774\" src=\"https://www.cadosecurity.com/wp-content/uploads/Screen-Shot-2022-05-17-at-3.08.55-PM.png\" width=\"1200\"/></figure>"
                },
                {
                    "id": "<sentence_0xcfcd2b1f>",
                    "is_empty": true,
                    "have_tags": false,
                    "tags": {},
                    "text": "",
                    "html": "<p></p>"
                },
                {
                    "id": "<sentence_0xa4250b84>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "Indicators of Compromise",
                    "html": "<p>Indicators of Compromise</p>"
                },
                {
                    "id": "<sentence_0xa13b6c2f>",
                    "is_empty": true,
                    "have_tags": true,
                    "tags": {
                        "<table_0x76d3e4f1>": {
                            "0": {
                                "0": "Filename",
                                "1": "p.sh (shell script used in example)",
                                "2": "libprocesshider.so (hash is specific to example)"
                            },
                            "1": {
                                "0": "SHA256",
                                "1": "53047c6f255ceee5ec989d73a36fa97ac6035325ea1a81e959b585220188fd11",
                                "2": "0e6d37099dd89c7eed44063420bd05a2d7b0865a0f690e12457fbec68f9b67a8"
                            }
                        }
                    },
                    "text": "",
                    "html": "<figure class=\"wp-block-table\"><table><tbody><tr><td>Filename</td><td>SHA256</td></tr><tr><td>p.sh (shell script used in example)</td><td>53047c6f255ceee5ec989d73a36fa97ac6035325ea1a81e959b585220188fd11</td></tr><tr><td>libprocesshider.so (hash is specific to example)</td><td>0e6d37099dd89c7eed44063420bd05a2d7b0865a0f690e12457fbec68f9b67a8</td></tr></tbody></table></figure>"
                },
                {
                    "id": "<sentence_0xb0c37817>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "About The Author",
                    "html": "\nAbout The Author\n"
                },
                {
                    "id": "<sentence_0xc6a64d99>",
                    "is_empty": true,
                    "have_tags": true,
                    "tags": {
                        "<img_0xf34ba8f0>": "https://www.cadosecurity.com/wp-content/uploads/Screen-Shot-2022-01-07-at-11.27.32-AM.png"
                    },
                    "text": "",
                    "html": "<img alt=\"\" class=\"avia-img-lazy-loading-4401 attachment-full size-full\" height=\"218\" src=\"https://www.cadosecurity.com/wp-content/uploads/Screen-Shot-2022-01-07-at-11.27.32-AM.png\" width=\"214\"/>"
                },
                {
                    "id": "<sentence_0xca50d253>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "Matt Muir<crlf>Matt is a security researcher with a passion for UNIX and UNIX-like operating systems. He previously worked as a macOS malware analyst and his background includes experience in the areas of digital forensics, DevOps, and operational cyber security. Matt enjoys technical writing and has published research including pieces on TOR browser forensics, an emerging cloud-focused botnet, and the exploitation of the Log4Shell vulnerability.",
                    "html": " \n\t\t\t\t\t\t\t\t\t\tMatt Muir\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tMatt is a security researcher with a passion for UNIX and UNIX-like operating systems. He previously worked as a macOS malware analyst and his background includes experience in the areas of digital forensics, DevOps, and operational cyber security. Matt enjoys technical writing and has published research including pieces on TOR browser forensics, an emerging cloud-focused botnet, and the exploitation of the Log4Shell vulnerability.\t\t\t\t\t\t\t\t\t\n"
                }
            ]
        },
        {
            "id": "<chapter_0x5a68f6ac>",
            "title": "About Cado Security",
            "title_level": 4,
            "sentences": [
                {
                    "id": "<sentence_0x8929a5f0>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<a_0x5a393c72>": "https://www.cadosecurity.com/",
                        "<a_0xfd2bf90>": "https://twitter.com/CadoSecurity"
                    },
                    "text": "Cado Security provides the cloud investigation platform that empowers security teams to respond to threats at cloud speed. By automating data capture and processing across cloud and container environments, Cado Response effortlessly delivers forensic-level detail and unprecedented context to simplify cloud investigation and response. Backed by Blossom Capital and Ten Eleven Ventures, Cado Security has offices in the United States and United Kingdom. For more information, please visit or follow us on Twitter @cadosecurity.",
                    "html": "<p>Cado Security provides the cloud investigation platform that empowers security teams to respond to threats at cloud speed. By automating data capture and processing across cloud and container environments, Cado Response effortlessly delivers forensic-level detail and unprecedented context to simplify cloud investigation and response. Backed by Blossom Capital and Ten Eleven Ventures, Cado Security has offices in the United States and United Kingdom. For more information, please visit <a href=\"https://www.cadosecurity.com/\">https://www.cadosecurity.com/</a> or follow us on Twitter <a href=\"https://twitter.com/CadoSecurity\" rel=\"noopener noreferrer\" target=\"_blank\">@cadosecurity.</a></p>"
                },
                {
                    "id": "<sentence_0xf6d3c1a3>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<a_0xd8fcc2a6>": "https://www.cadosecurity.com/cado-security-selected-as-top-10-finalist-for-rsa-conference-2022-innovation-sandbox-contest/"
                    },
                    "text": "Prev Post",
                    "html": "<a class=\"prev-button\" href=\"https://www.cadosecurity.com/cado-security-selected-as-top-10-finalist-for-rsa-conference-2022-innovation-sandbox-contest/\">Prev Post</a>"
                }
            ]
        }
    ]
}