{
    "title": "Defeating BazarLoader Anti-Analysis Techniques",
    "url": "https://unit42.paloaltonetworks.com/bazarloader-anti-analysis-techniques",
    "threats": {
        "Threat": [
            {
                "token": {
                    "id": "<THREAT_0xf4f1f185>",
                    "type": "Threat",
                    "value": "bazarbackdoor"
                },
                "references": {
                    "sentences": [
                        "The scripts that we are going to show here can be applied to BazarLoader, as well as other malware families that utilize similar anti-analysis techniques. As an illustration, we will show the IDAPython scripts we created during a recent analysis of BazarLoader with the reverse engineering tool IDA Pro to defeat these anti-analysis techniques. BazarLoader is a Windows backdoor that is used by various ransomware groups.",
                        "Figure 1. Missing IAT in BazarLoader as seen with CFF Explorer.",
                        "Tags: anti-analysis, BazarLoader",
                        "Malware authors often include anti-analysis techniques with the hope that they will increase the time and resources taken for malware analysts. With the above script snippets showing how to defeat these techniques for BazarLoader, you can reduce the time needed to analyze malware samples of other families that use similar techniques.",
                        "In fact, BazarLoader resolves every API function to be called individually at run time. After we figured out that the functions are resolved during execution, the following function caught our attention as it was referenced more than 300 times:",
                        "After all the API function calls are renamed, we can now easily locate other interesting functions in the malware. For example, sub_1800155E0 is the procedure in BazarLoader that carries out code injection.",
                        "With the help of our IDAPython scripts, we are now able to faster assess which functionality this BazarLoader sample contains.",
                        "Figure 11. sub_18000F640 function in BazarLoader with unexecuted code blocks colored in red.",
                        "While most pieces of malware rely on publicly known hashing algorithms to resolve the functions addresses, the one used by BazarLoader is unique. The API function resolution procedure (sub_18000B9B0, labelled as FN_API_Decoder) requires three parameters and returns the address of the requested function.",
                        "To demonstrate, we focused on a BazarLoader sample we recently detected. After peeling away the packer layer of our BazarLoader sample, we saw that it doesnt have an IAT (see Figure 1). Also, there is no IAT constructed during execution, a technique sometimes seen in other malware. BazarLoader obfuscates its function calls to make analysis more difficult and to evade detection techniques that rely on reading the IAT.",
                        "Opaque Predicate (OP) is used in BazarLoader to protect it from reverse engineering tools. OP is an expression that evaluates to either true or false at runtime. Malware authors make use of multiple OPs together with unexecuted code blocks to add complexities that static analysis tools have to deal with.",
                        "BazarLoader Sample ce5ee2fd8aa4acda24baf6221b5de66220172da0eb312705936adc5b164cc052",
                        "Figure 10. One example of OP in BazarLoader.",
                        "The following disassembled code shows one of the OPs in Bazarloader:"
                    ],
                    "titles": [
                        "Reusing Malware Code to Defeat Obfuscated API Calls",
                        "Executive Summary",
                        "Defeating BazarLoader Anti-Analysis Techniques",
                        "Automating Opaque Predicate Removal",
                        "Malware Analysts vs Malware Authors",
                        "Indicators of Compromise"
                    ]
                },
                "links": [
                    {
                        "src": {
                            "id": "<CATEGORY_0xa179f90c>",
                            "type": "Category",
                            "value": "ransomware"
                        },
                        "relation": "has_category",
                        "dst": {
                            "id": "<THREAT_0xf4f1f185>",
                            "type": "Threat",
                            "value": "bazarbackdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<CATEGORY_0xf1a480bb>",
                            "type": "Category",
                            "value": "malware"
                        },
                        "relation": "has_category",
                        "dst": {
                            "id": "<THREAT_0xf4f1f185>",
                            "type": "Threat",
                            "value": "bazarbackdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<CATEGORY_0x96121f83>",
                            "type": "Category",
                            "value": "backdoor"
                        },
                        "relation": "has_category",
                        "dst": {
                            "id": "<THREAT_0xf4f1f185>",
                            "type": "Threat",
                            "value": "bazarbackdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<SHA256_0x755b1afe>",
                            "type": "Hash",
                            "hash_type": "SHA256",
                            "value": "ce5ee2fd8aa4acda24baf6221b5de66220172da0eb312705936adc5b164cc052"
                        },
                        "relation": "use_threat",
                        "dst": {
                            "id": "<THREAT_0xf4f1f185>",
                            "type": "Threat",
                            "value": "bazarbackdoor"
                        }
                    },
                    {
                        "src": {
                            "id": "<THREAT_0xf4f1f185>",
                            "type": "Threat",
                            "value": "bazarbackdoor"
                        },
                        "relation": "has_category",
                        "dst": {
                            "id": "<CATEGORY_0xf1a480bb>",
                            "type": "Category",
                            "value": "malware"
                        }
                    }
                ]
            }
        ]
    },
    "ttps": {},
    "meanings": {
        "Category": [
            {
                "token": {
                    "id": "<CATEGORY_0xf1a480bb>",
                    "type": "Category",
                    "value": "malware"
                },
                "references": {
                    "sentences": [
                        "The scripts that we are going to show here can be applied to BazarLoader, as well as other malware families that utilize similar anti-analysis techniques. As an illustration, we will show the IDAPython scripts we created during a recent analysis of BazarLoader with the reverse engineering tool IDA Pro to defeat these anti-analysis techniques. BazarLoader is a Windows backdoor that is used by various ransomware groups.",
                        "Category: Malware",
                        "Not only do we need to locate the OPs, we also have to know the exact point when the malware sample decides to avoid the unexecuted code blocks.",
                        "Palo Alto Networks customers are further protected from malware families using similar anti-analysis techniques with Cortex XDR or the Next-Generation Firewall with the WildFire and Threat Prevention cloud-delivered security subscriptions.",
                        "First, we have to locate all the OPs. The most common way to do this is to make use of the binary search mechanism in IDA Pro to find all the byte sequences of the OPs. This turns out not to be possible, as the OPs were likely generated by a compiler during the build process of the malware sample. There are just too many variants of the OPs that could be covered using the byte sequence.",
                        "Now, we could reverse engineer the algorithm used in FN_API_Decoder and reimplement it in Python to get all functions resolved. However, this would take a lot of time and we would have to repeat the whole process for every piece of malware that uses a different hashing algorithm.",
                        "Malware authors often include anti-analysis techniques with the hope that they will increase the time and resources taken for malware analysts. With the above script snippets showing how to defeat these techniques for BazarLoader, you can reduce the time needed to analyze malware samples of other families that use similar techniques.",
                        "We can demonstrate the extent of the challenge OPs pose to malware analysts. The following CFG shows the unexecuted code blocks (Figure 11, red code blocks) in one of the smaller functions (sub_18000F640) in the sample.",
                        "Using the following code, we can run FN_API_Decoder to resolve Windows API function addresses while debugging the malware process.",
                        "Reusing Malware Code to Defeat Obfuscated API Calls<crlf>Automating Opaque Predicate Removal<crlf>Malware Analysts vs Malware Authors<crlf>Indicators of Compromise<crlf>Additional Resources",
                        "After all the API function calls are renamed, we can now easily locate other interesting functions in the malware. For example, sub_1800155E0 is the procedure in BazarLoader that carries out code injection.",
                        "While most pieces of malware rely on publicly known hashing algorithms to resolve the functions addresses, the one used by BazarLoader is unique. The API function resolution procedure (sub_18000B9B0, labelled as FN_API_Decoder) requires three parameters and returns the address of the requested function.",
                        "To demonstrate, we focused on a BazarLoader sample we recently detected. After peeling away the packer layer of our BazarLoader sample, we saw that it doesnt have an IAT (see Figure 1). Also, there is no IAT constructed during execution, a technique sometimes seen in other malware. BazarLoader obfuscates its function calls to make analysis more difficult and to evade detection techniques that rely on reading the IAT.",
                        "Instead, the approach we used is independent from the hashing algorithm as it makes use of the hashing function itself. For this, we used the Appcall feature with IDAPython in IDA Pro to call FN_API_Decoder and pass it the required parameters. The result from Appcall would be the resolved address of the Windows API function. The Appcall feature used while debugging the malware allows us to execute any function from the sample as if it were a built-in function.",
                        "Opaque Predicate (OP) is used in BazarLoader to protect it from reverse engineering tools. OP is an expression that evaluates to either true or false at runtime. Malware authors make use of multiple OPs together with unexecuted code blocks to add complexities that static analysis tools have to deal with.",
                        "Malware authors embed multiple anti-analysis techniques in their code to retard the analysis processes of human analysts and sandboxes. However, there are ways defenders can defeat these techniques in turn. This blog post describes two methods for faster analysis of malware that employs two distinctive anti-analysis techniques. The first technique is API function hashing, a known trick to obfuscate which functions are called. The second is opaque predicate, a technique used for control flow obfuscation.",
                        "Malware compiled as native files has to call Windows API functions to carry out malicious behaviors. The information on which functions are used is usually stored in the Import Address Table (IAT) in the file. Therefore, this table is often a good place to start the analysis process to get an idea of what the malware is trying to do.",
                        "Palo Alto Networks customers are protected from malware families using similar anti-analysis techniques with Cortex XDR or the Next-Generation Firewall with the WildFire and Threat Prevention security subscriptions."
                    ],
                    "titles": [
                        "Reusing Malware Code to Defeat Obfuscated API Calls",
                        "Executive Summary",
                        "Defeating BazarLoader Anti-Analysis Techniques",
                        "Automating Opaque Predicate Removal",
                        "Table of Contents",
                        "Malware Analysts vs Malware Authors"
                    ]
                },
                "links": [
                    {
                        "src": {
                            "id": "<THREAT_0xf4f1f185>",
                            "type": "Threat",
                            "value": "bazarbackdoor"
                        },
                        "relation": "has_category",
                        "dst": {
                            "id": "<CATEGORY_0xf1a480bb>",
                            "type": "Category",
                            "value": "malware"
                        }
                    },
                    {
                        "src": {
                            "id": "<CATEGORY_0xf1a480bb>",
                            "type": "Category",
                            "value": "malware"
                        },
                        "relation": "has_category",
                        "dst": {
                            "id": "<THREAT_0xf4f1f185>",
                            "type": "Threat",
                            "value": "bazarbackdoor"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<CATEGORY_0x96121f83>",
                    "type": "Category",
                    "value": "backdoor"
                },
                "references": {
                    "sentences": [
                        "The scripts that we are going to show here can be applied to BazarLoader, as well as other malware families that utilize similar anti-analysis techniques. As an illustration, we will show the IDAPython scripts we created during a recent analysis of BazarLoader with the reverse engineering tool IDA Pro to defeat these anti-analysis techniques. BazarLoader is a Windows backdoor that is used by various ransomware groups."
                    ],
                    "titles": [
                        "Executive Summary"
                    ]
                },
                "links": [
                    {
                        "src": {
                            "id": "<CATEGORY_0x96121f83>",
                            "type": "Category",
                            "value": "backdoor"
                        },
                        "relation": "has_category",
                        "dst": {
                            "id": "<THREAT_0xf4f1f185>",
                            "type": "Threat",
                            "value": "bazarbackdoor"
                        }
                    }
                ]
            },
            {
                "token": {
                    "id": "<CATEGORY_0xa179f90c>",
                    "type": "Category",
                    "value": "ransomware"
                },
                "references": {
                    "sentences": [
                        "The scripts that we are going to show here can be applied to BazarLoader, as well as other malware families that utilize similar anti-analysis techniques. As an illustration, we will show the IDAPython scripts we created during a recent analysis of BazarLoader with the reverse engineering tool IDA Pro to defeat these anti-analysis techniques. BazarLoader is a Windows backdoor that is used by various ransomware groups."
                    ],
                    "titles": [
                        "Executive Summary"
                    ]
                },
                "links": [
                    {
                        "src": {
                            "id": "<CATEGORY_0xa179f90c>",
                            "type": "Category",
                            "value": "ransomware"
                        },
                        "relation": "has_category",
                        "dst": {
                            "id": "<THREAT_0xf4f1f185>",
                            "type": "Threat",
                            "value": "bazarbackdoor"
                        }
                    }
                ]
            }
        ]
    },
    "iocs": {
        "Hash": [
            {
                "token": {
                    "id": "<SHA256_0x755b1afe>",
                    "type": "Hash",
                    "hash_type": "SHA256",
                    "value": "ce5ee2fd8aa4acda24baf6221b5de66220172da0eb312705936adc5b164cc052"
                },
                "references": {
                    "sentences": [
                        "BazarLoader Sample ce5ee2fd8aa4acda24baf6221b5de66220172da0eb312705936adc5b164cc052"
                    ],
                    "titles": [
                        "Indicators of Compromise"
                    ]
                },
                "links": [
                    {
                        "src": {
                            "id": "<SHA256_0x755b1afe>",
                            "type": "Hash",
                            "hash_type": "SHA256",
                            "value": "ce5ee2fd8aa4acda24baf6221b5de66220172da0eb312705936adc5b164cc052"
                        },
                        "relation": "use_threat",
                        "dst": {
                            "id": "<THREAT_0xf4f1f185>",
                            "type": "Threat",
                            "value": "bazarbackdoor"
                        }
                    }
                ]
            }
        ]
    },
    "unknownwords": {
        "UnknownWord": [
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xc55ad1e8>",
                    "type": "UnknownWord",
                    "value": "defeating"
                },
                "references": {
                    "sentences": [],
                    "titles": [
                        "Defeating BazarLoader Anti-Analysis Techniques"
                    ]
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xf3eddc5a>",
                    "type": "UnknownWord",
                    "value": "reacted"
                },
                "references": {
                    "sentences": [
                        "1,558 people reacted<crlf>4<crlf>7 min. read"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xe5b2fe07>",
                    "type": "UnknownWord",
                    "value": "mark lim"
                },
                "references": {
                    "sentences": [
                        "By Mark Lim"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xcff94315>",
                    "type": "UnknownWord",
                    "value": "retard"
                },
                "references": {
                    "sentences": [
                        "Malware authors embed multiple anti-analysis techniques in their code to retard the analysis processes of human analysts and sandboxes. However, there are ways defenders can defeat these techniques in turn. This blog post describes two methods for faster analysis of malware that employs two distinctive anti-analysis techniques. The first technique is API function hashing, a known trick to obfuscate which functions are called. The second is opaque predicate, a technique used for control flow obfuscation."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xdd062677>",
                    "type": "UnknownWord",
                    "value": "sandboxes"
                },
                "references": {
                    "sentences": [
                        "Malware authors embed multiple anti-analysis techniques in their code to retard the analysis processes of human analysts and sandboxes. However, there are ways defenders can defeat these techniques in turn. This blog post describes two methods for faster analysis of malware that employs two distinctive anti-analysis techniques. The first technique is API function hashing, a known trick to obfuscate which functions are called. The second is opaque predicate, a technique used for control flow obfuscation."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xbf9b7e21>",
                    "type": "UnknownWord",
                    "value": "defeat"
                },
                "references": {
                    "sentences": [
                        "Malware authors embed multiple anti-analysis techniques in their code to retard the analysis processes of human analysts and sandboxes. However, there are ways defenders can defeat these techniques in turn. This blog post describes two methods for faster analysis of malware that employs two distinctive anti-analysis techniques. The first technique is API function hashing, a known trick to obfuscate which functions are called. The second is opaque predicate, a technique used for control flow obfuscation.",
                        "The scripts that we are going to show here can be applied to BazarLoader, as well as other malware families that utilize similar anti-analysis techniques. As an illustration, we will show the IDAPython scripts we created during a recent analysis of BazarLoader with the reverse engineering tool IDA Pro to defeat these anti-analysis techniques. BazarLoader is a Windows backdoor that is used by various ransomware groups.",
                        "Malware authors often include anti-analysis techniques with the hope that they will increase the time and resources taken for malware analysts. With the above script snippets showing how to defeat these techniques for BazarLoader, you can reduce the time needed to analyze malware samples of other families that use similar techniques.",
                        "Reusing Malware Code to Defeat Obfuscated API Calls<crlf>Automating Opaque Predicate Removal<crlf>Malware Analysts vs Malware Authors<crlf>Indicators of Compromise<crlf>Additional Resources"
                    ],
                    "titles": [
                        "Reusing Malware Code to Defeat Obfuscated API Calls"
                    ]
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xb4b826ba>",
                    "type": "UnknownWord",
                    "value": "faster"
                },
                "references": {
                    "sentences": [
                        "Malware authors embed multiple anti-analysis techniques in their code to retard the analysis processes of human analysts and sandboxes. However, there are ways defenders can defeat these techniques in turn. This blog post describes two methods for faster analysis of malware that employs two distinctive anti-analysis techniques. The first technique is API function hashing, a known trick to obfuscate which functions are called. The second is opaque predicate, a technique used for control flow obfuscation.",
                        "With the help of our IDAPython scripts, we are now able to faster assess which functionality this BazarLoader sample contains."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x9e97847e>",
                    "type": "UnknownWord",
                    "value": "illustration"
                },
                "references": {
                    "sentences": [
                        "The scripts that we are going to show here can be applied to BazarLoader, as well as other malware families that utilize similar anti-analysis techniques. As an illustration, we will show the IDAPython scripts we created during a recent analysis of BazarLoader with the reverse engineering tool IDA Pro to defeat these anti-analysis techniques. BazarLoader is a Windows backdoor that is used by various ransomware groups."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xbd360262>",
                    "type": "UnknownWord",
                    "value": "idapython"
                },
                "references": {
                    "sentences": [
                        "The scripts that we are going to show here can be applied to BazarLoader, as well as other malware families that utilize similar anti-analysis techniques. As an illustration, we will show the IDAPython scripts we created during a recent analysis of BazarLoader with the reverse engineering tool IDA Pro to defeat these anti-analysis techniques. BazarLoader is a Windows backdoor that is used by various ransomware groups.",
                        "Figure 4. IDAPython code to search and extract the three parameters.",
                        "Complete IDAPython script to search and patch Opaque Predicates in a function is available on GitHub.",
                        "Complete IDAPython script to rename or resolve obfuscation API calls is available on GitHub.",
                        "Figure 3. Using Appcall with IDAPython.",
                        "Figure 5. IDAPython code to locate dynamic calls.",
                        "Figure 12. IDAPython code to locate the OPs in a function.",
                        "With the help of our IDAPython scripts, we are now able to faster assess which functionality this BazarLoader sample contains.",
                        "Figure 13. IDAPython code to patch the OPs.",
                        "Instead, the approach we used is independent from the hashing algorithm as it makes use of the hashing function itself. For this, we used the Appcall feature with IDAPython in IDA Pro to call FN_API_Decoder and pass it the required parameters. The result from Appcall would be the resolved address of the Windows API function. The Appcall feature used while debugging the malware allows us to execute any function from the sample as if it were a built-in function.",
                        "Figure 6. Before executing the above IDAPython scripts."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xbfa11c9d>",
                    "type": "UnknownWord",
                    "value": "ida"
                },
                "references": {
                    "sentences": [
                        "The scripts that we are going to show here can be applied to BazarLoader, as well as other malware families that utilize similar anti-analysis techniques. As an illustration, we will show the IDAPython scripts we created during a recent analysis of BazarLoader with the reverse engineering tool IDA Pro to defeat these anti-analysis techniques. BazarLoader is a Windows backdoor that is used by various ransomware groups.",
                        "Instead, the approach we used is independent from the hashing algorithm as it makes use of the hashing function itself. For this, we used the Appcall feature with IDAPython in IDA Pro to call FN_API_Decoder and pass it the required parameters. The result from Appcall would be the resolved address of the Windows API function. The Appcall feature used while debugging the malware allows us to execute any function from the sample as if it were a built-in function.",
                        "First, we have to locate all the OPs. The most common way to do this is to make use of the binary search mechanism in IDA Pro to find all the byte sequences of the OPs. This turns out not to be possible, as the OPs were likely generated by a compiler during the build process of the malware sample. There are just too many variants of the OPs that could be covered using the byte sequence."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x2984b699>",
                    "type": "UnknownWord",
                    "value": "wildfire"
                },
                "references": {
                    "sentences": [
                        "Palo Alto Networks customers are protected from malware families using similar anti-analysis techniques with Cortex XDR or the Next-Generation Firewall with the WildFire and Threat Prevention security subscriptions.",
                        "Palo Alto Networks customers are further protected from malware families using similar anti-analysis techniques with Cortex XDR or the Next-Generation Firewall with the WildFire and Threat Prevention cloud-delivered security subscriptions."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x6955f4c8>",
                    "type": "UnknownWord",
                    "value": "reusing"
                },
                "references": {
                    "sentences": [
                        "Reusing Malware Code to Defeat Obfuscated API Calls<crlf>Automating Opaque Predicate Removal<crlf>Malware Analysts vs Malware Authors<crlf>Indicators of Compromise<crlf>Additional Resources"
                    ],
                    "titles": [
                        "Reusing Malware Code to Defeat Obfuscated API Calls"
                    ]
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x9402d58b>",
                    "type": "UnknownWord",
                    "value": "iat"
                },
                "references": {
                    "sentences": [
                        "Malware compiled as native files has to call Windows API functions to carry out malicious behaviors. The information on which functions are used is usually stored in the Import Address Table (IAT) in the file. Therefore, this table is often a good place to start the analysis process to get an idea of what the malware is trying to do.",
                        "To demonstrate, we focused on a BazarLoader sample we recently detected. After peeling away the packer layer of our BazarLoader sample, we saw that it doesnt have an IAT (see Figure 1). Also, there is no IAT constructed during execution, a technique sometimes seen in other malware. BazarLoader obfuscates its function calls to make analysis more difficult and to evade detection techniques that rely on reading the IAT.",
                        "Figure 1. Missing IAT in BazarLoader as seen with CFF Explorer."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xecc00055>",
                    "type": "UnknownWord",
                    "value": "peeling"
                },
                "references": {
                    "sentences": [
                        "To demonstrate, we focused on a BazarLoader sample we recently detected. After peeling away the packer layer of our BazarLoader sample, we saw that it doesnt have an IAT (see Figure 1). Also, there is no IAT constructed during execution, a technique sometimes seen in other malware. BazarLoader obfuscates its function calls to make analysis more difficult and to evade detection techniques that rely on reading the IAT."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x2671a467>",
                    "type": "UnknownWord",
                    "value": "constructed"
                },
                "references": {
                    "sentences": [
                        "To demonstrate, we focused on a BazarLoader sample we recently detected. After peeling away the packer layer of our BazarLoader sample, we saw that it doesnt have an IAT (see Figure 1). Also, there is no IAT constructed during execution, a technique sometimes seen in other malware. BazarLoader obfuscates its function calls to make analysis more difficult and to evade detection techniques that rely on reading the IAT."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x5ddfddb8>",
                    "type": "UnknownWord",
                    "value": "cff"
                },
                "references": {
                    "sentences": [
                        "Figure 1. Missing IAT in BazarLoader as seen with CFF Explorer."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x24634d0c>",
                    "type": "UnknownWord",
                    "value": "individually"
                },
                "references": {
                    "sentences": [
                        "In fact, BazarLoader resolves every API function to be called individually at run time. After we figured out that the functions are resolved during execution, the following function caught our attention as it was referenced more than 300 times:"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x52609c40>",
                    "type": "UnknownWord",
                    "value": "figured"
                },
                "references": {
                    "sentences": [
                        "In fact, BazarLoader resolves every API function to be called individually at run time. After we figured out that the functions are resolved during execution, the following function caught our attention as it was referenced more than 300 times:"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x9879afd7>",
                    "type": "UnknownWord",
                    "value": "resolved"
                },
                "references": {
                    "sentences": [
                        "Now, we could reverse engineer the algorithm used in FN_API_Decoder and reimplement it in Python to get all functions resolved. However, this would take a lot of time and we would have to repeat the whole process for every piece of malware that uses a different hashing algorithm.",
                        "Instead, the approach we used is independent from the hashing algorithm as it makes use of the hashing function itself. For this, we used the Appcall feature with IDAPython in IDA Pro to call FN_API_Decoder and pass it the required parameters. The result from Appcall would be the resolved address of the Windows API function. The Appcall feature used while debugging the malware allows us to execute any function from the sample as if it were a built-in function.",
                        "In fact, BazarLoader resolves every API function to be called individually at run time. After we figured out that the functions are resolved during execution, the following function caught our attention as it was referenced more than 300 times:"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x5c9f9e46>",
                    "type": "UnknownWord",
                    "value": "resolving"
                },
                "references": {
                    "sentences": [
                        "Figure 2. Function for resolving the obfuscated Windows API functions (marked in yellow).",
                        "Next, we gathered all the required parameters by looking up all the cross references to FN_API_Decoder. The following code will search and extract the required parameters for resolving the API function calls."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x4bf9aeed>",
                    "type": "UnknownWord",
                    "value": "yellow"
                },
                "references": {
                    "sentences": [
                        "Figure 2. Function for resolving the obfuscated Windows API functions (marked in yellow)."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xb13ffcad>",
                    "type": "UnknownWord",
                    "value": "sub_18000b9b0"
                },
                "references": {
                    "sentences": [
                        "While most pieces of malware rely on publicly known hashing algorithms to resolve the functions addresses, the one used by BazarLoader is unique. The API function resolution procedure (sub_18000B9B0, labelled as FN_API_Decoder) requires three parameters and returns the address of the requested function."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xf63b290f>",
                    "type": "UnknownWord",
                    "value": "fn_api_decoder"
                },
                "references": {
                    "sentences": [
                        "Now, we could reverse engineer the algorithm used in FN_API_Decoder and reimplement it in Python to get all functions resolved. However, this would take a lot of time and we would have to repeat the whole process for every piece of malware that uses a different hashing algorithm.",
                        "Using the following code, we can run FN_API_Decoder to resolve Windows API function addresses while debugging the malware process.",
                        "While most pieces of malware rely on publicly known hashing algorithms to resolve the functions addresses, the one used by BazarLoader is unique. The API function resolution procedure (sub_18000B9B0, labelled as FN_API_Decoder) requires three parameters and returns the address of the requested function.",
                        "Next, we gathered all the required parameters by looking up all the cross references to FN_API_Decoder. The following code will search and extract the required parameters for resolving the API function calls.",
                        "Instead, the approach we used is independent from the hashing algorithm as it makes use of the hashing function itself. For this, we used the Appcall feature with IDAPython in IDA Pro to call FN_API_Decoder and pass it the required parameters. The result from Appcall would be the resolved address of the Windows API function. The Appcall feature used while debugging the malware allows us to execute any function from the sample as if it were a built-in function."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x448d0256>",
                    "type": "UnknownWord",
                    "value": "repeat"
                },
                "references": {
                    "sentences": [
                        "Now, we could reverse engineer the algorithm used in FN_API_Decoder and reimplement it in Python to get all functions resolved. However, this would take a lot of time and we would have to repeat the whole process for every piece of malware that uses a different hashing algorithm."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xfe3093ab>",
                    "type": "UnknownWord",
                    "value": "appcall"
                },
                "references": {
                    "sentences": [
                        "Instead, the approach we used is independent from the hashing algorithm as it makes use of the hashing function itself. For this, we used the Appcall feature with IDAPython in IDA Pro to call FN_API_Decoder and pass it the required parameters. The result from Appcall would be the resolved address of the Windows API function. The Appcall feature used while debugging the malware allows us to execute any function from the sample as if it were a built-in function.",
                        "Finally, by using the returned value from Appcall we are able to rename all the dynamic calls to the APIs to their corresponding names and apply comments:",
                        "Figure 3. Using Appcall with IDAPython."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xa5337478>",
                    "type": "UnknownWord",
                    "value": "cross"
                },
                "references": {
                    "sentences": [
                        "Next, we gathered all the required parameters by looking up all the cross references to FN_API_Decoder. The following code will search and extract the required parameters for resolving the API function calls."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x59f7a4f9>",
                    "type": "UnknownWord",
                    "value": "sub_1800155e0"
                },
                "references": {
                    "sentences": [
                        "After all the API function calls are renamed, we can now easily locate other interesting functions in the malware. For example, sub_1800155E0 is the procedure in BazarLoader that carries out code injection."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xcaaac1f6>",
                    "type": "UnknownWord",
                    "value": "renaming"
                },
                "references": {
                    "sentences": [
                        "Figure 8. Before renaming API calls.",
                        "After patching all the OPs and renaming the obfuscated API calls, we could then tell that the function (sub_18000F640) is just a wrapper function for GetModuleFileNameW()."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xb8ae7ff7>",
                    "type": "UnknownWord",
                    "value": "labeled"
                },
                "references": {
                    "sentences": [
                        "Figure 9. Obfuscated API calls labeled with APIs related to code injection."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xa96b8cef>",
                    "type": "UnknownWord",
                    "value": "ops"
                },
                "references": {
                    "sentences": [
                        "Using the following code, we locate the OPs in a function:",
                        "Figure 12. IDAPython code to locate the OPs in a function.",
                        "First, we have to locate all the OPs. The most common way to do this is to make use of the binary search mechanism in IDA Pro to find all the byte sequences of the OPs. This turns out not to be possible, as the OPs were likely generated by a compiler during the build process of the malware sample. There are just too many variants of the OPs that could be covered using the byte sequence.",
                        "Using the following code, we patch the OPs in a function:",
                        "We can demonstrate the extent of the challenge OPs pose to malware analysts. The following CFG shows the unexecuted code blocks (Figure 11, red code blocks) in one of the smaller functions (sub_18000F640) in the sample.",
                        "Figure 13. IDAPython code to patch the OPs.",
                        "After patching all the OPs and renaming the obfuscated API calls, we could then tell that the function (sub_18000F640) is just a wrapper function for GetModuleFileNameW().",
                        "Figure 15. Decompiled sub_18000F640 function after removing the OPs.",
                        "Next, we have to patch the instructions in OPs to force the code flow away from the unexecuted code blocks.",
                        "Not only do we need to locate the OPs, we also have to know the exact point when the malware sample decides to avoid the unexecuted code blocks.",
                        "Opaque Predicate (OP) is used in BazarLoader to protect it from reverse engineering tools. OP is an expression that evaluates to either true or false at runtime. Malware authors make use of multiple OPs together with unexecuted code blocks to add complexities that static analysis tools have to deal with.",
                        "The OPs also messed with the output of the HexRays decompiler. This is how the function (sub_18000F640) looks before the OPs are patched:",
                        "The following disassembled code shows one of the OPs in Bazarloader:"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x8b0fa743>",
                    "type": "UnknownWord",
                    "value": "unexecuted"
                },
                "references": {
                    "sentences": [
                        "We can demonstrate the extent of the challenge OPs pose to malware analysts. The following CFG shows the unexecuted code blocks (Figure 11, red code blocks) in one of the smaller functions (sub_18000F640) in the sample.",
                        "Figure 11. sub_18000F640 function in BazarLoader with unexecuted code blocks colored in red.",
                        "Next, we have to patch the instructions in OPs to force the code flow away from the unexecuted code blocks.",
                        "Not only do we need to locate the OPs, we also have to know the exact point when the malware sample decides to avoid the unexecuted code blocks.",
                        "Opaque Predicate (OP) is used in BazarLoader to protect it from reverse engineering tools. OP is an expression that evaluates to either true or false at runtime. Malware authors make use of multiple OPs together with unexecuted code blocks to add complexities that static analysis tools have to deal with."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x312ae822>",
                    "type": "UnknownWord",
                    "value": "complexities"
                },
                "references": {
                    "sentences": [
                        "Opaque Predicate (OP) is used in BazarLoader to protect it from reverse engineering tools. OP is an expression that evaluates to either true or false at runtime. Malware authors make use of multiple OPs together with unexecuted code blocks to add complexities that static analysis tools have to deal with."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x9342b4cf>",
                    "type": "UnknownWord",
                    "value": "deal"
                },
                "references": {
                    "sentences": [
                        "Opaque Predicate (OP) is used in BazarLoader to protect it from reverse engineering tools. OP is an expression that evaluates to either true or false at runtime. Malware authors make use of multiple OPs together with unexecuted code blocks to add complexities that static analysis tools have to deal with."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x98920f36>",
                    "type": "UnknownWord",
                    "value": "disassembled"
                },
                "references": {
                    "sentences": [
                        "The following disassembled code shows one of the OPs in Bazarloader:"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x6e295d51>",
                    "type": "UnknownWord",
                    "value": "cfg"
                },
                "references": {
                    "sentences": [
                        "From the above control flow graph (CFG), the code flow wont end up in infinite loops (Figure 10, red code blocks). Therefore, the above OP will be evaluated to avoid the infinite loop.",
                        "We can demonstrate the extent of the challenge OPs pose to malware analysts. The following CFG shows the unexecuted code blocks (Figure 11, red code blocks) in one of the smaller functions (sub_18000F640) in the sample."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x7968da93>",
                    "type": "UnknownWord",
                    "value": "evaluated"
                },
                "references": {
                    "sentences": [
                        "From the above control flow graph (CFG), the code flow wont end up in infinite loops (Figure 10, red code blocks). Therefore, the above OP will be evaluated to avoid the infinite loop."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x3887a346>",
                    "type": "UnknownWord",
                    "value": "sub_18000f640"
                },
                "references": {
                    "sentences": [
                        "We can demonstrate the extent of the challenge OPs pose to malware analysts. The following CFG shows the unexecuted code blocks (Figure 11, red code blocks) in one of the smaller functions (sub_18000F640) in the sample.",
                        "Figure 11. sub_18000F640 function in BazarLoader with unexecuted code blocks colored in red.",
                        "After patching all the OPs and renaming the obfuscated API calls, we could then tell that the function (sub_18000F640) is just a wrapper function for GetModuleFileNameW().",
                        "Figure 15. Decompiled sub_18000F640 function after removing the OPs.",
                        "Figure 14. Decompiled sub_18000F640 function.",
                        "The OPs also messed with the output of the HexRays decompiler. This is how the function (sub_18000F640) looks before the OPs are patched:"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x1c2aa14e>",
                    "type": "UnknownWord",
                    "value": "colored"
                },
                "references": {
                    "sentences": [
                        "Figure 11. sub_18000F640 function in BazarLoader with unexecuted code blocks colored in red."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x9b8a6287>",
                    "type": "UnknownWord",
                    "value": "manually"
                },
                "references": {
                    "sentences": [
                        "We could manually patch away the code blocks that are not executed as we analyze each function in the sample, but this is not very practical and takes a lot of time. Instead, we will choose a smarter way by doing it automatically."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xbbd624b2>",
                    "type": "UnknownWord",
                    "value": "choose"
                },
                "references": {
                    "sentences": [
                        "We could manually patch away the code blocks that are not executed as we analyze each function in the sample, but this is not very practical and takes a lot of time. Instead, we will choose a smarter way by doing it automatically."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x62810ecf>",
                    "type": "UnknownWord",
                    "value": "smarter"
                },
                "references": {
                    "sentences": [
                        "We could manually patch away the code blocks that are not executed as we analyze each function in the sample, but this is not very practical and takes a lot of time. Instead, we will choose a smarter way by doing it automatically."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xe1c25700>",
                    "type": "UnknownWord",
                    "value": "decides"
                },
                "references": {
                    "sentences": [
                        "Not only do we need to locate the OPs, we also have to know the exact point when the malware sample decides to avoid the unexecuted code blocks."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x417b753b>",
                    "type": "UnknownWord",
                    "value": "messed"
                },
                "references": {
                    "sentences": [
                        "The OPs also messed with the output of the HexRays decompiler. This is how the function (sub_18000F640) looks before the OPs are patched:"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xeb72eabb>",
                    "type": "UnknownWord",
                    "value": "hexrays"
                },
                "references": {
                    "sentences": [
                        "The OPs also messed with the output of the HexRays decompiler. This is how the function (sub_18000F640) looks before the OPs are patched:"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x30251f7d>",
                    "type": "UnknownWord",
                    "value": "decompiler"
                },
                "references": {
                    "sentences": [
                        "The OPs also messed with the output of the HexRays decompiler. This is how the function (sub_18000F640) looks before the OPs are patched:"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x65d58bf5>",
                    "type": "UnknownWord",
                    "value": "decompiled"
                },
                "references": {
                    "sentences": [
                        "Figure 14. Decompiled sub_18000F640 function.",
                        "After applying the two techniques above, we have decompiled pseudocode that is much easier to read and understand.",
                        "Figure 15. Decompiled sub_18000F640 function after removing the OPs."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xcc77564>",
                    "type": "UnknownWord",
                    "value": "pseudocode"
                },
                "references": {
                    "sentences": [
                        "After applying the two techniques above, we have decompiled pseudocode that is much easier to read and understand."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x8d24d1d>",
                    "type": "UnknownWord",
                    "value": "tell"
                },
                "references": {
                    "sentences": [
                        "After patching all the OPs and renaming the obfuscated API calls, we could then tell that the function (sub_18000F640) is just a wrapper function for GetModuleFileNameW()."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x3eb3aef9>",
                    "type": "UnknownWord",
                    "value": "wrapper"
                },
                "references": {
                    "sentences": [
                        "After patching all the OPs and renaming the obfuscated API calls, we could then tell that the function (sub_18000F640) is just a wrapper function for GetModuleFileNameW()."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xb2fc908b>",
                    "type": "UnknownWord",
                    "value": "getmodulefilenamew"
                },
                "references": {
                    "sentences": [
                        "After patching all the OPs and renaming the obfuscated API calls, we could then tell that the function (sub_18000F640) is just a wrapper function for GetModuleFileNameW()."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x8bd87ea0>",
                    "type": "UnknownWord",
                    "value": "removing"
                },
                "references": {
                    "sentences": [
                        "Figure 15. Decompiled sub_18000F640 function after removing the OPs."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0xdbf9d535>",
                    "type": "UnknownWord",
                    "value": "hope"
                },
                "references": {
                    "sentences": [
                        "Malware authors often include anti-analysis techniques with the hope that they will increase the time and resources taken for malware analysts. With the above script snippets showing how to defeat these techniques for BazarLoader, you can reduce the time needed to analyze malware samples of other families that use similar techniques."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x5c2f38df>",
                    "type": "UnknownWord",
                    "value": "cloud-delivered"
                },
                "references": {
                    "sentences": [
                        "Palo Alto Networks customers are further protected from malware families using similar anti-analysis techniques with Cortex XDR or the Next-Generation Firewall with the WildFire and Threat Prevention cloud-delivered security subscriptions."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x374c9b1c>",
                    "type": "UnknownWord",
                    "value": "mark"
                },
                "references": {
                    "sentences": [
                        "Please mark, I'm not a robot!"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x7f74f4a3>",
                    "type": "UnknownWord",
                    "value": "robot"
                },
                "references": {
                    "sentences": [
                        "Please mark, I'm not a robot!"
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x9dd7f069>",
                    "type": "UnknownWord",
                    "value": "agree"
                },
                "references": {
                    "sentences": [
                        "By submitting this form, you agree to our Terms of Use and acknowledge our Privacy Statement."
                    ],
                    "titles": []
                }
            },
            {
                "token": {
                    "id": "<UNKNOWNWORD_0x83ab1027>",
                    "type": "UnknownWord",
                    "value": "acknowledge"
                },
                "references": {
                    "sentences": [
                        "By submitting this form, you agree to our Terms of Use and acknowledge our Privacy Statement."
                    ],
                    "titles": []
                }
            }
        ]
    },
    "other_links": [],
    "info": {
        "potential_threats": {
            "<UNKNOWNWORD_0xbd360262>": {
                "token": {
                    "id": "<UNKNOWNWORD_0xbd360262>",
                    "type": "UnknownWord",
                    "value": "idapython"
                },
                "references": {
                    "sentences": [
                        "The scripts that we are going to show here can be applied to BazarLoader, as well as other malware families that utilize similar anti-analysis techniques. As an illustration, we will show the IDAPython scripts we created during a recent analysis of BazarLoader with the reverse engineering tool IDA Pro to defeat these anti-analysis techniques. BazarLoader is a Windows backdoor that is used by various ransomware groups.",
                        "Figure 4. IDAPython code to search and extract the three parameters.",
                        "Complete IDAPython script to search and patch Opaque Predicates in a function is available on GitHub.",
                        "Complete IDAPython script to rename or resolve obfuscation API calls is available on GitHub.",
                        "Figure 3. Using Appcall with IDAPython.",
                        "Figure 5. IDAPython code to locate dynamic calls.",
                        "Figure 12. IDAPython code to locate the OPs in a function.",
                        "With the help of our IDAPython scripts, we are now able to faster assess which functionality this BazarLoader sample contains.",
                        "Figure 13. IDAPython code to patch the OPs.",
                        "Instead, the approach we used is independent from the hashing algorithm as it makes use of the hashing function itself. For this, we used the Appcall feature with IDAPython in IDA Pro to call FN_API_Decoder and pass it the required parameters. The result from Appcall would be the resolved address of the Windows API function. The Appcall feature used while debugging the malware allows us to execute any function from the sample as if it were a built-in function.",
                        "Figure 6. Before executing the above IDAPython scripts."
                    ],
                    "titles": []
                }
            },
            "<UNKNOWNWORD_0x2984b699>": {
                "token": {
                    "id": "<UNKNOWNWORD_0x2984b699>",
                    "type": "UnknownWord",
                    "value": "wildfire"
                },
                "references": {
                    "sentences": [
                        "Palo Alto Networks customers are protected from malware families using similar anti-analysis techniques with Cortex XDR or the Next-Generation Firewall with the WildFire and Threat Prevention security subscriptions.",
                        "Palo Alto Networks customers are further protected from malware families using similar anti-analysis techniques with Cortex XDR or the Next-Generation Firewall with the WildFire and Threat Prevention cloud-delivered security subscriptions."
                    ],
                    "titles": []
                }
            },
            "<UNKNOWNWORD_0xb13ffcad>": {
                "token": {
                    "id": "<UNKNOWNWORD_0xb13ffcad>",
                    "type": "UnknownWord",
                    "value": "sub_18000b9b0"
                },
                "references": {
                    "sentences": [
                        "While most pieces of malware rely on publicly known hashing algorithms to resolve the functions addresses, the one used by BazarLoader is unique. The API function resolution procedure (sub_18000B9B0, labelled as FN_API_Decoder) requires three parameters and returns the address of the requested function."
                    ],
                    "titles": []
                }
            },
            "<UNKNOWNWORD_0xf63b290f>": {
                "token": {
                    "id": "<UNKNOWNWORD_0xf63b290f>",
                    "type": "UnknownWord",
                    "value": "fn_api_decoder"
                },
                "references": {
                    "sentences": [
                        "Now, we could reverse engineer the algorithm used in FN_API_Decoder and reimplement it in Python to get all functions resolved. However, this would take a lot of time and we would have to repeat the whole process for every piece of malware that uses a different hashing algorithm.",
                        "Using the following code, we can run FN_API_Decoder to resolve Windows API function addresses while debugging the malware process.",
                        "While most pieces of malware rely on publicly known hashing algorithms to resolve the functions addresses, the one used by BazarLoader is unique. The API function resolution procedure (sub_18000B9B0, labelled as FN_API_Decoder) requires three parameters and returns the address of the requested function.",
                        "Next, we gathered all the required parameters by looking up all the cross references to FN_API_Decoder. The following code will search and extract the required parameters for resolving the API function calls.",
                        "Instead, the approach we used is independent from the hashing algorithm as it makes use of the hashing function itself. For this, we used the Appcall feature with IDAPython in IDA Pro to call FN_API_Decoder and pass it the required parameters. The result from Appcall would be the resolved address of the Windows API function. The Appcall feature used while debugging the malware allows us to execute any function from the sample as if it were a built-in function."
                    ],
                    "titles": []
                }
            },
            "<UNKNOWNWORD_0xfe3093ab>": {
                "token": {
                    "id": "<UNKNOWNWORD_0xfe3093ab>",
                    "type": "UnknownWord",
                    "value": "appcall"
                },
                "references": {
                    "sentences": [
                        "Instead, the approach we used is independent from the hashing algorithm as it makes use of the hashing function itself. For this, we used the Appcall feature with IDAPython in IDA Pro to call FN_API_Decoder and pass it the required parameters. The result from Appcall would be the resolved address of the Windows API function. The Appcall feature used while debugging the malware allows us to execute any function from the sample as if it were a built-in function.",
                        "Finally, by using the returned value from Appcall we are able to rename all the dynamic calls to the APIs to their corresponding names and apply comments:",
                        "Figure 3. Using Appcall with IDAPython."
                    ],
                    "titles": []
                }
            },
            "<UNKNOWNWORD_0x59f7a4f9>": {
                "token": {
                    "id": "<UNKNOWNWORD_0x59f7a4f9>",
                    "type": "UnknownWord",
                    "value": "sub_1800155e0"
                },
                "references": {
                    "sentences": [
                        "After all the API function calls are renamed, we can now easily locate other interesting functions in the malware. For example, sub_1800155E0 is the procedure in BazarLoader that carries out code injection."
                    ],
                    "titles": []
                }
            },
            "<UNKNOWNWORD_0x3887a346>": {
                "token": {
                    "id": "<UNKNOWNWORD_0x3887a346>",
                    "type": "UnknownWord",
                    "value": "sub_18000f640"
                },
                "references": {
                    "sentences": [
                        "We can demonstrate the extent of the challenge OPs pose to malware analysts. The following CFG shows the unexecuted code blocks (Figure 11, red code blocks) in one of the smaller functions (sub_18000F640) in the sample.",
                        "Figure 11. sub_18000F640 function in BazarLoader with unexecuted code blocks colored in red.",
                        "After patching all the OPs and renaming the obfuscated API calls, we could then tell that the function (sub_18000F640) is just a wrapper function for GetModuleFileNameW().",
                        "Figure 15. Decompiled sub_18000F640 function after removing the OPs.",
                        "Figure 14. Decompiled sub_18000F640 function.",
                        "The OPs also messed with the output of the HexRays decompiler. This is how the function (sub_18000F640) looks before the OPs are patched:"
                    ],
                    "titles": []
                }
            },
            "<UNKNOWNWORD_0xeb72eabb>": {
                "token": {
                    "id": "<UNKNOWNWORD_0xeb72eabb>",
                    "type": "UnknownWord",
                    "value": "hexrays"
                },
                "references": {
                    "sentences": [
                        "The OPs also messed with the output of the HexRays decompiler. This is how the function (sub_18000F640) looks before the OPs are patched:"
                    ],
                    "titles": []
                }
            },
            "<UNKNOWNWORD_0xb2fc908b>": {
                "token": {
                    "id": "<UNKNOWNWORD_0xb2fc908b>",
                    "type": "UnknownWord",
                    "value": "getmodulefilenamew"
                },
                "references": {
                    "sentences": [
                        "After patching all the OPs and renaming the obfuscated API calls, we could then tell that the function (sub_18000F640) is just a wrapper function for GetModuleFileNameW()."
                    ],
                    "titles": []
                }
            }
        },
        "sigma": false,
        "yara": false
    },
    "keywords": {
        "classified": [],
        "dubbed": [],
        "associated": [],
        "targets": [],
        "attributed": []
    },
    "resources": {
        "links": {
            "github": [
                "https://github.com/idapython",
                "https://github.com/pan-unit42/iocs/blob/master/Appcall_rename_api",
                "https://github.com/pan-unit42/iocs/blob/master/DeObfuscate_Opaque"
            ],
            "pastebin": [],
            "text_files": [],
            "other": [
                "https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Funit42.paloaltonetworks.com%2Fbazarloader-anti-analysis-techniques%2F",
                "https://twitter.com/home?status=https%3A%2F%2Funit42.paloaltonetworks.com%2Fbazarloader-anti-analysis-techniques%2F+-+Defeating+BazarLoader+Anti-Analysis+Techniques",
                "https://www.linkedin.com/shareArticle?mini=true&url=https%3A%2F%2Funit42.paloaltonetworks.com%2Fbazarloader-anti-analysis-techniques%2F&title=Defeating+BazarLoader+Anti-Analysis+Techniques&summary=&source=",
                "https://unit42.paloaltonetworks.com//www.reddit.com/submit?url=https://unit42.paloaltonetworks.com/bazarloader-anti-analysis-techniques/",
                "https://unit42.paloaltonetworks.com/author/mark-lim/",
                "https://unit42.paloaltonetworks.com/category/malware-2/",
                "https://unit42.paloaltonetworks.com/tag/anti-analysis/",
                "https://unit42.paloaltonetworks.com/tag/bazarloader/",
                "https://malpedia.caad.fkie.fraunhofer.de/details/win.bazarbackdoor",
                "https://www.paloaltonetworks.com/cortex/cortex-xdr",
                "https://www.paloaltonetworks.com/products/secure-the-network/wildfire",
                "http://paloaltonetworks.com/products/secure-the-network/subscriptions/threat-prevention",
                "https://unit42.paloaltonetworks.com/tag/bazarloader/",
                "https://unit42.paloaltonetworks.com/category/malware-2/",
                "https://unit42.paloaltonetworks.com/tag/anti-analysis/",
                "https://hex-rays.com/blog/introducing-the-appcall-feature-in-ida-pro-5-6/",
                "https://www.paloaltonetworks.com/legal-notices/terms-of-use",
                "https://www.paloaltonetworks.com/legal-notices/privacy"
            ]
        },
        "images": [
            "https://unit42.paloaltonetworks.com/wp-content/uploads/2022/04/Malware-r3d1.png",
            "https://unit42.paloaltonetworks.com/wp-content/uploads/2022/04/word-image-33.png",
            "https://unit42.paloaltonetworks.com/wp-content/uploads/2022/04/word-image-34.png",
            "https://unit42.paloaltonetworks.com/wp-content/uploads/2022/04/word-image-35.png",
            "https://unit42.paloaltonetworks.com/wp-content/uploads/2022/04/word-image-36.png",
            "https://unit42.paloaltonetworks.com/wp-content/uploads/2022/04/word-image-37.png",
            "https://unit42.paloaltonetworks.com/wp-content/uploads/2022/04/word-image-38.png",
            "https://unit42.paloaltonetworks.com/wp-content/uploads/2022/04/word-image-39.png",
            "https://unit42.paloaltonetworks.com/wp-content/uploads/2022/04/word-image-40.png",
            "https://unit42.paloaltonetworks.com/wp-content/uploads/2022/04/word-image-41.png",
            "https://unit42.paloaltonetworks.com/wp-content/uploads/2022/04/word-image-42.png",
            "https://unit42.paloaltonetworks.com/wp-content/uploads/2022/04/word-image-43.png",
            "https://unit42.paloaltonetworks.com/wp-content/uploads/2022/04/word-image-44.png",
            "https://unit42.paloaltonetworks.com/wp-content/uploads/2022/04/word-image-45.png",
            "https://unit42.paloaltonetworks.com/wp-content/uploads/2022/04/word-image-46.png",
            "https://unit42.paloaltonetworks.com/wp-content/uploads/2022/04/word-image-47.png"
        ]
    }
}