{"id": "sentence_0x37eab624", "report_id": "report_0xc25e3863", "report_date": "2022-04-25T00:00:00Z", "report_title": "Defeating BazarLoader Anti-Analysis Techniques", "report_url": "https://unit42.paloaltonetworks.com/bazarloader-anti-analysis-techniques", "chapter_id": "chapter_0x3454a816", "chapter_title": "Defeating BazarLoader Anti-Analysis Techniques", "text": "1,558 people reacted 4 7 min. read"}
{"id": "sentence_0xb811a4a3", "report_id": "report_0xc25e3863", "report_date": "2022-04-25T00:00:00Z", "report_title": "Defeating BazarLoader Anti-Analysis Techniques", "report_url": "https://unit42.paloaltonetworks.com/bazarloader-anti-analysis-techniques", "chapter_id": "chapter_0x3454a816", "chapter_title": "Defeating BazarLoader Anti-Analysis Techniques", "text": "By Mark Lim"}
{"id": "sentence_0xe2d64cd4", "report_id": "report_0xc25e3863", "report_date": "2022-04-25T00:00:00Z", "report_title": "Defeating BazarLoader Anti-Analysis Techniques", "report_url": "https://unit42.paloaltonetworks.com/bazarloader-anti-analysis-techniques", "chapter_id": "chapter_0x3454a816", "chapter_title": "Defeating BazarLoader Anti-Analysis Techniques", "text": "April 25, 2022 at 6:00 AM"}
{"id": "sentence_0x1a3eda51", "report_id": "report_0xc25e3863", "report_date": "2022-04-25T00:00:00Z", "report_title": "Defeating BazarLoader Anti-Analysis Techniques", "report_url": "https://unit42.paloaltonetworks.com/bazarloader-anti-analysis-techniques", "chapter_id": "chapter_0x3454a816", "chapter_title": "Defeating BazarLoader Anti-Analysis Techniques", "text": "Category: Malware"}
{"id": "sentence_0xfde81024", "report_id": "report_0xc25e3863", "report_date": "2022-04-25T00:00:00Z", "report_title": "Defeating BazarLoader Anti-Analysis Techniques", "report_url": "https://unit42.paloaltonetworks.com/bazarloader-anti-analysis-techniques", "chapter_id": "chapter_0x3454a816", "chapter_title": "Defeating BazarLoader Anti-Analysis Techniques", "text": "Tags: anti-analysis, BazarLoader"}
{"id": "sentence_0x36bc2505", "report_id": "report_0xc25e3863", "report_date": "2022-04-25T00:00:00Z", "report_title": "Defeating BazarLoader Anti-Analysis Techniques", "report_url": "https://unit42.paloaltonetworks.com/bazarloader-anti-analysis-techniques", "chapter_id": "chapter_0x48667d9b", "chapter_title": "Executive Summary", "text": "Malware authors embed multiple anti-analysis techniques in their code to retard the analysis processes of human analysts and sandboxes. However, there are ways defenders can defeat these techniques in turn. This blog post describes two methods for faster analysis of malware that employs two distinctive anti-analysis techniques. The first technique is API function hashing, a known trick to obfuscate which functions are called. The second is opaque predicate, a technique used for control flow obfuscation."}
{"id": "sentence_0xffa5bd7f", "report_id": "report_0xc25e3863", "report_date": "2022-04-25T00:00:00Z", "report_title": "Defeating BazarLoader Anti-Analysis Techniques", "report_url": "https://unit42.paloaltonetworks.com/bazarloader-anti-analysis-techniques", "chapter_id": "chapter_0x48667d9b", "chapter_title": "Executive Summary", "text": "The scripts that we are going to show here can be applied to BazarLoader, as well as other malware families that utilize similar anti-analysis techniques. As an illustration, we will show the IDAPython scripts we created during a recent analysis of BazarLoader with the reverse engineering tool IDA Pro to defeat these anti-analysis techniques. BazarLoader is a Windows backdoor that is used by various ransomware groups."}
{"id": "sentence_0xcdb62e82", "report_id": "report_0xc25e3863", "report_date": "2022-04-25T00:00:00Z", "report_title": "Defeating BazarLoader Anti-Analysis Techniques", "report_url": "https://unit42.paloaltonetworks.com/bazarloader-anti-analysis-techniques", "chapter_id": "chapter_0x48667d9b", "chapter_title": "Executive Summary", "text": "Palo Alto Networks customers are protected from malware families using similar anti-analysis techniques with Cortex XDR or the Next-Generation Firewall with the WildFire and Threat Prevention security subscriptions."}
{"id": "sentence_0x477b7076", "report_id": "report_0xc25e3863", "report_date": "2022-04-25T00:00:00Z", "report_title": "Defeating BazarLoader Anti-Analysis Techniques", "report_url": "https://unit42.paloaltonetworks.com/bazarloader-anti-analysis-techniques", "chapter_id": "chapter_0xd9e0b590", "chapter_title": "Table of Contents", "text": "Reusing Malware Code to Defeat Obfuscated API Calls Automating Opaque Predicate Removal Malware Analysts vs Malware Authors Indicators of Compromise Additional Resources"}
{"id": "sentence_0x76e4a006", "report_id": "report_0xc25e3863", "report_date": "2022-04-25T00:00:00Z", "report_title": "Defeating BazarLoader Anti-Analysis Techniques", "report_url": "https://unit42.paloaltonetworks.com/bazarloader-anti-analysis-techniques", "chapter_id": "chapter_0xf2ca5974", "chapter_title": "Reusing Malware Code to Defeat Obfuscated API Calls", "text": "Malware compiled as native files has to call Windows API functions to carry out malicious behaviors. The information on which functions are used is usually stored in the Import Address Table (IAT) in the file. Therefore, this table is often a good place to start the analysis process to get an idea of what the malware is trying to do."}
{"id": "sentence_0x9c61d85", "report_id": "report_0xc25e3863", "report_date": "2022-04-25T00:00:00Z", "report_title": "Defeating BazarLoader Anti-Analysis Techniques", "report_url": "https://unit42.paloaltonetworks.com/bazarloader-anti-analysis-techniques", "chapter_id": "chapter_0xf2ca5974", "chapter_title": "Reusing Malware Code to Defeat Obfuscated API Calls", "text": "To demonstrate, we focused on a BazarLoader sample we recently detected. After peeling away the packer layer of our BazarLoader sample, we saw that it doesnt have an IAT (see Figure 1). Also, there is no IAT constructed during execution, a technique sometimes seen in other malware. BazarLoader obfuscates its function calls to make analysis more difficult and to evade detection techniques that rely on reading the IAT."}
{"id": "sentence_0xbf42f370", "report_id": "report_0xc25e3863", "report_date": "2022-04-25T00:00:00Z", "report_title": "Defeating BazarLoader Anti-Analysis Techniques", "report_url": "https://unit42.paloaltonetworks.com/bazarloader-anti-analysis-techniques", "chapter_id": "chapter_0xf2ca5974", "chapter_title": "Reusing Malware Code to Defeat Obfuscated API Calls", "text": "Figure 1. Missing IAT in BazarLoader as seen with CFF Explorer."}
{"id": "sentence_0x9c4d4624", "report_id": "report_0xc25e3863", "report_date": "2022-04-25T00:00:00Z", "report_title": "Defeating BazarLoader Anti-Analysis Techniques", "report_url": "https://unit42.paloaltonetworks.com/bazarloader-anti-analysis-techniques", "chapter_id": "chapter_0xf2ca5974", "chapter_title": "Reusing Malware Code to Defeat Obfuscated API Calls", "text": "In fact, BazarLoader resolves every API function to be called individually at run time. After we figured out that the functions are resolved during execution, the following function caught our attention as it was referenced more than 300 times:"}
{"id": "sentence_0xa9b2c178", "report_id": "report_0xc25e3863", "report_date": "2022-04-25T00:00:00Z", "report_title": "Defeating BazarLoader Anti-Analysis Techniques", "report_url": "https://unit42.paloaltonetworks.com/bazarloader-anti-analysis-techniques", "chapter_id": "chapter_0xf2ca5974", "chapter_title": "Reusing Malware Code to Defeat Obfuscated API Calls", "text": "Figure 2. Function for resolving the obfuscated Windows API functions (marked in yellow)."}
{"id": "sentence_0xbf4788f5", "report_id": "report_0xc25e3863", "report_date": "2022-04-25T00:00:00Z", "report_title": "Defeating BazarLoader Anti-Analysis Techniques", "report_url": "https://unit42.paloaltonetworks.com/bazarloader-anti-analysis-techniques", "chapter_id": "chapter_0xf2ca5974", "chapter_title": "Reusing Malware Code to Defeat Obfuscated API Calls", "text": "While most pieces of malware rely on publicly known hashing algorithms to resolve the functions addresses, the one used by BazarLoader is unique. The API function resolution procedure (sub_18000B9B0, labelled as FN_API_Decoder) requires three parameters and returns the address of the requested function."}
{"id": "sentence_0xf7566ef4", "report_id": "report_0xc25e3863", "report_date": "2022-04-25T00:00:00Z", "report_title": "Defeating BazarLoader Anti-Analysis Techniques", "report_url": "https://unit42.paloaltonetworks.com/bazarloader-anti-analysis-techniques", "chapter_id": "chapter_0xf2ca5974", "chapter_title": "Reusing Malware Code to Defeat Obfuscated API Calls", "text": "Now, we could reverse engineer the algorithm used in FN_API_Decoder and reimplement it in Python to get all functions resolved. However, this would take a lot of time and we would have to repeat the whole process for every piece of malware that uses a different hashing algorithm."}
{"id": "sentence_0xae73df19", "report_id": "report_0xc25e3863", "report_date": "2022-04-25T00:00:00Z", "report_title": "Defeating BazarLoader Anti-Analysis Techniques", "report_url": "https://unit42.paloaltonetworks.com/bazarloader-anti-analysis-techniques", "chapter_id": "chapter_0xf2ca5974", "chapter_title": "Reusing Malware Code to Defeat Obfuscated API Calls", "text": "Instead, the approach we used is independent from the hashing algorithm as it makes use of the hashing function itself. For this, we used the Appcall feature with IDAPython in IDA Pro to call FN_API_Decoder and pass it the required parameters. The result from Appcall would be the resolved address of the Windows API function. The Appcall feature used while debugging the malware allows us to execute any function from the sample as if it were a built-in function."}
{"id": "sentence_0x58082006", "report_id": "report_0xc25e3863", "report_date": "2022-04-25T00:00:00Z", "report_title": "Defeating BazarLoader Anti-Analysis Techniques", "report_url": "https://unit42.paloaltonetworks.com/bazarloader-anti-analysis-techniques", "chapter_id": "chapter_0xf2ca5974", "chapter_title": "Reusing Malware Code to Defeat Obfuscated API Calls", "text": "Using the following code, we can run FN_API_Decoder to resolve Windows API function addresses while debugging the malware process."}
{"id": "sentence_0x46993680", "report_id": "report_0xc25e3863", "report_date": "2022-04-25T00:00:00Z", "report_title": "Defeating BazarLoader Anti-Analysis Techniques", "report_url": "https://unit42.paloaltonetworks.com/bazarloader-anti-analysis-techniques", "chapter_id": "chapter_0xf2ca5974", "chapter_title": "Reusing Malware Code to Defeat Obfuscated API Calls", "text": "Figure 3. Using Appcall with IDAPython."}
{"id": "sentence_0x2e8b4e1b", "report_id": "report_0xc25e3863", "report_date": "2022-04-25T00:00:00Z", "report_title": "Defeating BazarLoader Anti-Analysis Techniques", "report_url": "https://unit42.paloaltonetworks.com/bazarloader-anti-analysis-techniques", "chapter_id": "chapter_0xf2ca5974", "chapter_title": "Reusing Malware Code to Defeat Obfuscated API Calls", "text": "Next, we gathered all the required parameters by looking up all the cross references to FN_API_Decoder. The following code will search and extract the required parameters for resolving the API function calls."}
{"id": "sentence_0x41339775", "report_id": "report_0xc25e3863", "report_date": "2022-04-25T00:00:00Z", "report_title": "Defeating BazarLoader Anti-Analysis Techniques", "report_url": "https://unit42.paloaltonetworks.com/bazarloader-anti-analysis-techniques", "chapter_id": "chapter_0xf2ca5974", "chapter_title": "Reusing Malware Code to Defeat Obfuscated API Calls", "text": "Figure 4. IDAPython code to search and extract the three parameters."}
{"id": "sentence_0xfc94110d", "report_id": "report_0xc25e3863", "report_date": "2022-04-25T00:00:00Z", "report_title": "Defeating BazarLoader Anti-Analysis Techniques", "report_url": "https://unit42.paloaltonetworks.com/bazarloader-anti-analysis-techniques", "chapter_id": "chapter_0xf2ca5974", "chapter_title": "Reusing Malware Code to Defeat Obfuscated API Calls", "text": "Finally, by using the returned value from Appcall we are able to rename all the dynamic calls to the APIs to their corresponding names and apply comments:"}
{"id": "sentence_0x47de8644", "report_id": "report_0xc25e3863", "report_date": "2022-04-25T00:00:00Z", "report_title": "Defeating BazarLoader Anti-Analysis Techniques", "report_url": "https://unit42.paloaltonetworks.com/bazarloader-anti-analysis-techniques", "chapter_id": "chapter_0xf2ca5974", "chapter_title": "Reusing Malware Code to Defeat Obfuscated API Calls", "text": "Figure 5. IDAPython code to locate dynamic calls."}
{"id": "sentence_0x33778b3f", "report_id": "report_0xc25e3863", "report_date": "2022-04-25T00:00:00Z", "report_title": "Defeating BazarLoader Anti-Analysis Techniques", "report_url": "https://unit42.paloaltonetworks.com/bazarloader-anti-analysis-techniques", "chapter_id": "chapter_0xf2ca5974", "chapter_title": "Reusing Malware Code to Defeat Obfuscated API Calls", "text": "Putting the above steps together, we deobfuscated the API function calls:"}
{"id": "sentence_0x939662b3", "report_id": "report_0xc25e3863", "report_date": "2022-04-25T00:00:00Z", "report_title": "Defeating BazarLoader Anti-Analysis Techniques", "report_url": "https://unit42.paloaltonetworks.com/bazarloader-anti-analysis-techniques", "chapter_id": "chapter_0xf2ca5974", "chapter_title": "Reusing Malware Code to Defeat Obfuscated API Calls", "text": "Figure 6. Before executing the above IDAPython scripts."}
{"id": "sentence_0x608f7d65", "report_id": "report_0xc25e3863", "report_date": "2022-04-25T00:00:00Z", "report_title": "Defeating BazarLoader Anti-Analysis Techniques", "report_url": "https://unit42.paloaltonetworks.com/bazarloader-anti-analysis-techniques", "chapter_id": "chapter_0xf2ca5974", "chapter_title": "Reusing Malware Code to Defeat Obfuscated API Calls", "text": "Figure 7. Renamed API function call with added comment."}
{"id": "sentence_0x164dd7dc", "report_id": "report_0xc25e3863", "report_date": "2022-04-25T00:00:00Z", "report_title": "Defeating BazarLoader Anti-Analysis Techniques", "report_url": "https://unit42.paloaltonetworks.com/bazarloader-anti-analysis-techniques", "chapter_id": "chapter_0xf2ca5974", "chapter_title": "Reusing Malware Code to Defeat Obfuscated API Calls", "text": "After all the API function calls are renamed, we can now easily locate other interesting functions in the malware. For example, sub_1800155E0 is the procedure in BazarLoader that carries out code injection."}
{"id": "sentence_0xcc7bbdd9", "report_id": "report_0xc25e3863", "report_date": "2022-04-25T00:00:00Z", "report_title": "Defeating BazarLoader Anti-Analysis Techniques", "report_url": "https://unit42.paloaltonetworks.com/bazarloader-anti-analysis-techniques", "chapter_id": "chapter_0xf2ca5974", "chapter_title": "Reusing Malware Code to Defeat Obfuscated API Calls", "text": "Figure 8. Before renaming API calls."}
{"id": "sentence_0x6ed7dd59", "report_id": "report_0xc25e3863", "report_date": "2022-04-25T00:00:00Z", "report_title": "Defeating BazarLoader Anti-Analysis Techniques", "report_url": "https://unit42.paloaltonetworks.com/bazarloader-anti-analysis-techniques", "chapter_id": "chapter_0xf2ca5974", "chapter_title": "Reusing Malware Code to Defeat Obfuscated API Calls", "text": "Figure 9. Obfuscated API calls labeled with APIs related to code injection."}
{"id": "sentence_0x9d664ac2", "report_id": "report_0xc25e3863", "report_date": "2022-04-25T00:00:00Z", "report_title": "Defeating BazarLoader Anti-Analysis Techniques", "report_url": "https://unit42.paloaltonetworks.com/bazarloader-anti-analysis-techniques", "chapter_id": "chapter_0xf2ca5974", "chapter_title": "Reusing Malware Code to Defeat Obfuscated API Calls", "text": "With the help of our IDAPython scripts, we are now able to faster assess which functionality this BazarLoader sample contains."}
{"id": "sentence_0x68f13fc5", "report_id": "report_0xc25e3863", "report_date": "2022-04-25T00:00:00Z", "report_title": "Defeating BazarLoader Anti-Analysis Techniques", "report_url": "https://unit42.paloaltonetworks.com/bazarloader-anti-analysis-techniques", "chapter_id": "chapter_0xf325c093", "chapter_title": "Automating Opaque Predicate Removal", "text": "Opaque Predicate (OP) is used in BazarLoader to protect it from reverse engineering tools. OP is an expression that evaluates to either true or false at runtime. Malware authors make use of multiple OPs together with unexecuted code blocks to add complexities that static analysis tools have to deal with."}
{"id": "sentence_0xf118abb6", "report_id": "report_0xc25e3863", "report_date": "2022-04-25T00:00:00Z", "report_title": "Defeating BazarLoader Anti-Analysis Techniques", "report_url": "https://unit42.paloaltonetworks.com/bazarloader-anti-analysis-techniques", "chapter_id": "chapter_0xf325c093", "chapter_title": "Automating Opaque Predicate Removal", "text": "The following disassembled code shows one of the OPs in Bazarloader:"}
{"id": "sentence_0x8679e31f", "report_id": "report_0xc25e3863", "report_date": "2022-04-25T00:00:00Z", "report_title": "Defeating BazarLoader Anti-Analysis Techniques", "report_url": "https://unit42.paloaltonetworks.com/bazarloader-anti-analysis-techniques", "chapter_id": "chapter_0xf325c093", "chapter_title": "Automating Opaque Predicate Removal", "text": "Figure 10. One example of OP in BazarLoader."}
{"id": "sentence_0x3f70d9f6", "report_id": "report_0xc25e3863", "report_date": "2022-04-25T00:00:00Z", "report_title": "Defeating BazarLoader Anti-Analysis Techniques", "report_url": "https://unit42.paloaltonetworks.com/bazarloader-anti-analysis-techniques", "chapter_id": "chapter_0xf325c093", "chapter_title": "Automating Opaque Predicate Removal", "text": "From the above control flow graph (CFG), the code flow wont end up in infinite loops (Figure 10, red code blocks). Therefore, the above OP will be evaluated to avoid the infinite loop."}
{"id": "sentence_0xc8709b52", "report_id": "report_0xc25e3863", "report_date": "2022-04-25T00:00:00Z", "report_title": "Defeating BazarLoader Anti-Analysis Techniques", "report_url": "https://unit42.paloaltonetworks.com/bazarloader-anti-analysis-techniques", "chapter_id": "chapter_0xf325c093", "chapter_title": "Automating Opaque Predicate Removal", "text": "We can demonstrate the extent of the challenge OPs pose to malware analysts. The following CFG shows the unexecuted code blocks (Figure 11, red code blocks) in one of the smaller functions (sub_18000F640) in the sample."}
{"id": "sentence_0x955d711d", "report_id": "report_0xc25e3863", "report_date": "2022-04-25T00:00:00Z", "report_title": "Defeating BazarLoader Anti-Analysis Techniques", "report_url": "https://unit42.paloaltonetworks.com/bazarloader-anti-analysis-techniques", "chapter_id": "chapter_0xf325c093", "chapter_title": "Automating Opaque Predicate Removal", "text": "Figure 11. sub_18000F640 function in BazarLoader with unexecuted code blocks colored in red."}
{"id": "sentence_0x1f6e7b1e", "report_id": "report_0xc25e3863", "report_date": "2022-04-25T00:00:00Z", "report_title": "Defeating BazarLoader Anti-Analysis Techniques", "report_url": "https://unit42.paloaltonetworks.com/bazarloader-anti-analysis-techniques", "chapter_id": "chapter_0xf325c093", "chapter_title": "Automating Opaque Predicate Removal", "text": "We could manually patch away the code blocks that are not executed as we analyze each function in the sample, but this is not very practical and takes a lot of time. Instead, we will choose a smarter way by doing it automatically."}
{"id": "sentence_0xbd718ed7", "report_id": "report_0xc25e3863", "report_date": "2022-04-25T00:00:00Z", "report_title": "Defeating BazarLoader Anti-Analysis Techniques", "report_url": "https://unit42.paloaltonetworks.com/bazarloader-anti-analysis-techniques", "chapter_id": "chapter_0xf325c093", "chapter_title": "Automating Opaque Predicate Removal", "text": "First, we have to locate all the OPs. The most common way to do this is to make use of the binary search mechanism in IDA Pro to find all the byte sequences of the OPs. This turns out not to be possible, as the OPs were likely generated by a compiler during the build process of the malware sample. There are just too many variants of the OPs that could be covered using the byte sequence."}
{"id": "sentence_0xb6738775", "report_id": "report_0xc25e3863", "report_date": "2022-04-25T00:00:00Z", "report_title": "Defeating BazarLoader Anti-Analysis Techniques", "report_url": "https://unit42.paloaltonetworks.com/bazarloader-anti-analysis-techniques", "chapter_id": "chapter_0xf325c093", "chapter_title": "Automating Opaque Predicate Removal", "text": "Not only do we need to locate the OPs, we also have to know the exact point when the malware sample decides to avoid the unexecuted code blocks."}
{"id": "sentence_0x73a980fc", "report_id": "report_0xc25e3863", "report_date": "2022-04-25T00:00:00Z", "report_title": "Defeating BazarLoader Anti-Analysis Techniques", "report_url": "https://unit42.paloaltonetworks.com/bazarloader-anti-analysis-techniques", "chapter_id": "chapter_0xf325c093", "chapter_title": "Automating Opaque Predicate Removal", "text": "Using the following code, we locate the OPs in a function:"}
{"id": "sentence_0xf8e3d6e3", "report_id": "report_0xc25e3863", "report_date": "2022-04-25T00:00:00Z", "report_title": "Defeating BazarLoader Anti-Analysis Techniques", "report_url": "https://unit42.paloaltonetworks.com/bazarloader-anti-analysis-techniques", "chapter_id": "chapter_0xf325c093", "chapter_title": "Automating Opaque Predicate Removal", "text": "Figure 12. IDAPython code to locate the OPs in a function."}
{"id": "sentence_0x2fd852d5", "report_id": "report_0xc25e3863", "report_date": "2022-04-25T00:00:00Z", "report_title": "Defeating BazarLoader Anti-Analysis Techniques", "report_url": "https://unit42.paloaltonetworks.com/bazarloader-anti-analysis-techniques", "chapter_id": "chapter_0xf325c093", "chapter_title": "Automating Opaque Predicate Removal", "text": "Next, we have to patch the instructions in OPs to force the code flow away from the unexecuted code blocks."}
{"id": "sentence_0x1215bf6d", "report_id": "report_0xc25e3863", "report_date": "2022-04-25T00:00:00Z", "report_title": "Defeating BazarLoader Anti-Analysis Techniques", "report_url": "https://unit42.paloaltonetworks.com/bazarloader-anti-analysis-techniques", "chapter_id": "chapter_0xf325c093", "chapter_title": "Automating Opaque Predicate Removal", "text": "Using the following code, we patch the OPs in a function:"}
{"id": "sentence_0xf9b6bc1e", "report_id": "report_0xc25e3863", "report_date": "2022-04-25T00:00:00Z", "report_title": "Defeating BazarLoader Anti-Analysis Techniques", "report_url": "https://unit42.paloaltonetworks.com/bazarloader-anti-analysis-techniques", "chapter_id": "chapter_0xf325c093", "chapter_title": "Automating Opaque Predicate Removal", "text": "Figure 13. IDAPython code to patch the OPs."}
{"id": "sentence_0x15ac3ac3", "report_id": "report_0xc25e3863", "report_date": "2022-04-25T00:00:00Z", "report_title": "Defeating BazarLoader Anti-Analysis Techniques", "report_url": "https://unit42.paloaltonetworks.com/bazarloader-anti-analysis-techniques", "chapter_id": "chapter_0xf325c093", "chapter_title": "Automating Opaque Predicate Removal", "text": "The OPs also messed with the output of the HexRays decompiler. This is how the function (sub_18000F640) looks before the OPs are patched:"}
{"id": "sentence_0xeeca8991", "report_id": "report_0xc25e3863", "report_date": "2022-04-25T00:00:00Z", "report_title": "Defeating BazarLoader Anti-Analysis Techniques", "report_url": "https://unit42.paloaltonetworks.com/bazarloader-anti-analysis-techniques", "chapter_id": "chapter_0xf325c093", "chapter_title": "Automating Opaque Predicate Removal", "text": "Figure 14. Decompiled sub_18000F640 function."}
{"id": "sentence_0xdfad4819", "report_id": "report_0xc25e3863", "report_date": "2022-04-25T00:00:00Z", "report_title": "Defeating BazarLoader Anti-Analysis Techniques", "report_url": "https://unit42.paloaltonetworks.com/bazarloader-anti-analysis-techniques", "chapter_id": "chapter_0xf325c093", "chapter_title": "Automating Opaque Predicate Removal", "text": "After applying the two techniques above, we have decompiled pseudocode that is much easier to read and understand."}
{"id": "sentence_0x95537a63", "report_id": "report_0xc25e3863", "report_date": "2022-04-25T00:00:00Z", "report_title": "Defeating BazarLoader Anti-Analysis Techniques", "report_url": "https://unit42.paloaltonetworks.com/bazarloader-anti-analysis-techniques", "chapter_id": "chapter_0xf325c093", "chapter_title": "Automating Opaque Predicate Removal", "text": "After patching all the OPs and renaming the obfuscated API calls, we could then tell that the function (sub_18000F640) is just a wrapper function for GetModuleFileNameW()."}
{"id": "sentence_0x9386482f", "report_id": "report_0xc25e3863", "report_date": "2022-04-25T00:00:00Z", "report_title": "Defeating BazarLoader Anti-Analysis Techniques", "report_url": "https://unit42.paloaltonetworks.com/bazarloader-anti-analysis-techniques", "chapter_id": "chapter_0xf325c093", "chapter_title": "Automating Opaque Predicate Removal", "text": "Figure 15. Decompiled sub_18000F640 function after removing the OPs."}
{"id": "sentence_0xf3bd30ea", "report_id": "report_0xc25e3863", "report_date": "2022-04-25T00:00:00Z", "report_title": "Defeating BazarLoader Anti-Analysis Techniques", "report_url": "https://unit42.paloaltonetworks.com/bazarloader-anti-analysis-techniques", "chapter_id": "chapter_0xd9ac0f28", "chapter_title": "Malware Analysts vs Malware Authors", "text": "Malware authors often include anti-analysis techniques with the hope that they will increase the time and resources taken for malware analysts. With the above script snippets showing how to defeat these techniques for BazarLoader, you can reduce the time needed to analyze malware samples of other families that use similar techniques."}
{"id": "sentence_0xef69325e", "report_id": "report_0xc25e3863", "report_date": "2022-04-25T00:00:00Z", "report_title": "Defeating BazarLoader Anti-Analysis Techniques", "report_url": "https://unit42.paloaltonetworks.com/bazarloader-anti-analysis-techniques", "chapter_id": "chapter_0xd9ac0f28", "chapter_title": "Malware Analysts vs Malware Authors", "text": "Palo Alto Networks customers are further protected from malware families using similar anti-analysis techniques with Cortex XDR or the Next-Generation Firewall with the WildFire and Threat Prevention cloud-delivered security subscriptions."}
{"id": "sentence_0x4136cc65", "report_id": "report_0xc25e3863", "report_date": "2022-04-25T00:00:00Z", "report_title": "Defeating BazarLoader Anti-Analysis Techniques", "report_url": "https://unit42.paloaltonetworks.com/bazarloader-anti-analysis-techniques", "chapter_id": "chapter_0xcf62c66b", "chapter_title": "Indicators of Compromise", "text": "BazarLoader Sample ce5ee2fd8aa4acda24baf6221b5de66220172da0eb312705936adc5b164cc052"}
{"id": "sentence_0x4c253932", "report_id": "report_0xc25e3863", "report_date": "2022-04-25T00:00:00Z", "report_title": "Defeating BazarLoader Anti-Analysis Techniques", "report_url": "https://unit42.paloaltonetworks.com/bazarloader-anti-analysis-techniques", "chapter_id": "chapter_0x8dbc1cb1", "chapter_title": "Additional Resources", "text": "Complete IDAPython script to rename or resolve obfuscation API calls is available on GitHub."}
{"id": "sentence_0xe0460db9", "report_id": "report_0xc25e3863", "report_date": "2022-04-25T00:00:00Z", "report_title": "Defeating BazarLoader Anti-Analysis Techniques", "report_url": "https://unit42.paloaltonetworks.com/bazarloader-anti-analysis-techniques", "chapter_id": "chapter_0x8dbc1cb1", "chapter_title": "Additional Resources", "text": "Complete IDAPython script to search and patch Opaque Predicates in a function is available on GitHub."}
{"id": "sentence_0x731eb551", "report_id": "report_0xc25e3863", "report_date": "2022-04-25T00:00:00Z", "report_title": "Defeating BazarLoader Anti-Analysis Techniques", "report_url": "https://unit42.paloaltonetworks.com/bazarloader-anti-analysis-techniques", "chapter_id": "chapter_0x5fdde555", "chapter_title": "Get updates from Palo Alto Networks!", "text": "Sign up to receive the latest news, cyber threat intelligence and research from us"}
{"id": "sentence_0x8467c4db", "report_id": "report_0xc25e3863", "report_date": "2022-04-25T00:00:00Z", "report_title": "Defeating BazarLoader Anti-Analysis Techniques", "report_url": "https://unit42.paloaltonetworks.com/bazarloader-anti-analysis-techniques", "chapter_id": "chapter_0x5fdde555", "chapter_title": "Get updates from Palo Alto Networks!", "text": "Please enter your email address!"}
{"id": "sentence_0xbfb3c8a9", "report_id": "report_0xc25e3863", "report_date": "2022-04-25T00:00:00Z", "report_title": "Defeating BazarLoader Anti-Analysis Techniques", "report_url": "https://unit42.paloaltonetworks.com/bazarloader-anti-analysis-techniques", "chapter_id": "chapter_0x5fdde555", "chapter_title": "Get updates from Palo Alto Networks!", "text": "Please mark, I'm not a robot!"}
{"id": "sentence_0xe8c8489", "report_id": "report_0xc25e3863", "report_date": "2022-04-25T00:00:00Z", "report_title": "Defeating BazarLoader Anti-Analysis Techniques", "report_url": "https://unit42.paloaltonetworks.com/bazarloader-anti-analysis-techniques", "chapter_id": "chapter_0x5fdde555", "chapter_title": "Get updates from Palo Alto Networks!", "text": "By submitting this form, you agree to our Terms of Use and acknowledge our Privacy Statement."}
