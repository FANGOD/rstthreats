{
    "id": "<report_0xc25e3863>",
    "url": "https://unit42.paloaltonetworks.com/bazarloader-anti-analysis-techniques",
    "title": "Defeating BazarLoader Anti-Analysis Techniques",
    "meta": [],
    "chapters": [
        {
            "id": "<chapter_0x3454a816>",
            "title": "Defeating BazarLoader Anti-Analysis Techniques",
            "title_level": 1,
            "sentences": [
                {
                    "id": "<sentence_0x37eab624>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "1,558 people reacted<crlf>4<crlf>7 min. read",
                    "html": "<ul class=\"article__entry-meta d-flex flex-wrap align-items-center text-black\">\n<li class=\"mr-10 mb-10 px-20 rounded-pill d-flex bg-gray-200\">\n1,558\n people reacted</li>\n<li class=\"d-sm-none col-12 p-0\">\n</li><li class=\"mr-10 mb-10 px-20 rounded-pill bg-gray-200\">4</li>\n<li class=\"mb-10 px-20 rounded-pill bg-gray-200\"> 7 min. read</li>\n</ul>"
                },
                {
                    "id": "<sentence_0x3b594d92>",
                    "is_empty": true,
                    "have_tags": true,
                    "tags": {
                        "<a_0xdc40e5b6>": "https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Funit42.paloaltonetworks.com%2Fbazarloader-anti-analysis-techniques%2F"
                    },
                    "text": "",
                    "html": "<a href=\"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Funit42.paloaltonetworks.com%2Fbazarloader-anti-analysis-techniques%2F\" target=\"_blank\"></a>"
                },
                {
                    "id": "<sentence_0xa2e13c96>",
                    "is_empty": true,
                    "have_tags": true,
                    "tags": {
                        "<a_0x1c4c1c93>": "https://twitter.com/home?status=https%3A%2F%2Funit42.paloaltonetworks.com%2Fbazarloader-anti-analysis-techniques%2F+-+Defeating+BazarLoader+Anti-Analysis+Techniques"
                    },
                    "text": "",
                    "html": "<a href=\"https://twitter.com/home?status=https%3A%2F%2Funit42.paloaltonetworks.com%2Fbazarloader-anti-analysis-techniques%2F+-+Defeating+BazarLoader+Anti-Analysis+Techniques\" target=\"_blank\"></a>"
                },
                {
                    "id": "<sentence_0x224cb687>",
                    "is_empty": true,
                    "have_tags": true,
                    "tags": {
                        "<a_0x6fb7becf>": "https://www.linkedin.com/shareArticle?mini=true&url=https%3A%2F%2Funit42.paloaltonetworks.com%2Fbazarloader-anti-analysis-techniques%2F&title=Defeating+BazarLoader+Anti-Analysis+Techniques&summary=&source="
                    },
                    "text": "",
                    "html": "<a href=\"https://www.linkedin.com/shareArticle?mini=true&amp;url=https%3A%2F%2Funit42.paloaltonetworks.com%2Fbazarloader-anti-analysis-techniques%2F&amp;title=Defeating+BazarLoader+Anti-Analysis+Techniques&amp;summary=&amp;source=\" target=\"_blank\"></a>"
                },
                {
                    "id": "<sentence_0x9699b172>",
                    "is_empty": true,
                    "have_tags": true,
                    "tags": {
                        "<a_0xe6013410>": "https://unit42.paloaltonetworks.com//www.reddit.com/submit?url=https://unit42.paloaltonetworks.com/bazarloader-anti-analysis-techniques/"
                    },
                    "text": "",
                    "html": "<a href=\"//www.reddit.com/submit?url=https://unit42.paloaltonetworks.com/bazarloader-anti-analysis-techniques/\" target=\"_blank\"></a>"
                },
                {
                    "id": "<sentence_0xb811a4a3>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<a_0x4f86f994>": "https://unit42.paloaltonetworks.com/author/mark-lim/"
                    },
                    "text": "By Mark Lim",
                    "html": "<p>\n By <a class=\"author url fn\" href=\"https://unit42.paloaltonetworks.com/author/mark-lim/\" rel=\"author\" title=\"Posts by Mark Lim\">Mark Lim</a> </p>"
                },
                {
                    "id": "<sentence_0xe2d64cd4>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "April 25, 2022 at 6:00 AM",
                    "html": "<p>April 25, 2022 at 6:00 AM</p>"
                },
                {
                    "id": "<sentence_0x1a3eda51>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<a_0xf8c2bc54>": "https://unit42.paloaltonetworks.com/category/malware-2/"
                    },
                    "text": "Category: Malware",
                    "html": "<p>Category: <a href=\"https://unit42.paloaltonetworks.com/category/malware-2/\" rel=\"category tag\">Malware</a></p>"
                },
                {
                    "id": "<sentence_0xfde81024>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<a_0x48a8ee87>": "https://unit42.paloaltonetworks.com/tag/anti-analysis/",
                        "<a_0x4d64a3da>": "https://unit42.paloaltonetworks.com/tag/bazarloader/"
                    },
                    "text": "Tags: anti-analysis, BazarLoader",
                    "html": "<p>Tags: <a href=\"https://unit42.paloaltonetworks.com/tag/anti-analysis/\" rel=\"tag\">anti-analysis</a>, <a href=\"https://unit42.paloaltonetworks.com/tag/bazarloader/\" rel=\"tag\">BazarLoader</a></p>"
                }
            ]
        },
        {
            "id": "<chapter_0xb15102cc>",
            "title": "Defeating BazarLoader Anti-Analysis Techniques",
            "title_level": 1,
            "sentences": []
        },
        {
            "id": "<chapter_0x48667d9b>",
            "title": "Executive Summary",
            "title_level": 2,
            "sentences": [
                {
                    "id": "<sentence_0x36bc2505>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "Malware authors embed multiple anti-analysis techniques in their code to retard the analysis processes of human analysts and sandboxes. However, there are ways defenders can defeat these techniques in turn. This blog post describes two methods for faster analysis of malware that employs two distinctive anti-analysis techniques. The first technique is API function hashing, a known trick to obfuscate which functions are called. The second is opaque predicate, a technique used for control flow obfuscation.",
                    "html": "<p>Malware authors embed multiple anti-analysis techniques in their code to retard the analysis processes of human analysts and sandboxes. However, there are ways defenders can defeat these techniques in turn. This blog post describes two methods for faster analysis of malware that employs two distinctive anti-analysis techniques. The first technique is API function hashing, a known trick to obfuscate which functions are called. The second is opaque predicate, a technique used for control flow obfuscation.</p>"
                },
                {
                    "id": "<sentence_0xffa5bd7f>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<a_0x67e3e80f>": "https://github.com/idapython",
                        "<a_0xbe01f7ca>": "https://malpedia.caad.fkie.fraunhofer.de/details/win.bazarbackdoor"
                    },
                    "text": "The scripts that we are going to show here can be applied to BazarLoader, as well as other malware families that utilize similar anti-analysis techniques. As an illustration, we will show the IDAPython scripts we created during a recent analysis of BazarLoader with the reverse engineering tool IDA Pro to defeat these anti-analysis techniques. BazarLoader is a Windows backdoor that is used by various ransomware groups.",
                    "html": "<p>The scripts that we are going to show here can be applied to BazarLoader, as well as other malware families that utilize similar anti-analysis techniques. As an illustration, we will show the <a href=\"https://github.com/idapython\">IDAPython</a> scripts we created during a recent analysis of BazarLoader with the reverse engineering tool IDA Pro to defeat these anti-analysis techniques. BazarLoader is a Windows backdoor that is used by various <a href=\"https://malpedia.caad.fkie.fraunhofer.de/details/win.bazarbackdoor\">ransomware groups</a>.</p>"
                },
                {
                    "id": "<sentence_0xcdb62e82>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<a_0x9d395788>": "https://www.paloaltonetworks.com/cortex/cortex-xdr",
                        "<a_0x77fe859f>": "https://www.paloaltonetworks.com/products/secure-the-network/wildfire",
                        "<a_0x53274da6>": "http://paloaltonetworks.com/products/secure-the-network/subscriptions/threat-prevention"
                    },
                    "text": "Palo Alto Networks customers are protected from malware families using similar anti-analysis techniques with Cortex XDR or the Next-Generation Firewall with the WildFire and Threat Prevention security subscriptions.",
                    "html": "<p>Palo Alto Networks customers are protected from malware families using similar anti-analysis techniques with <a href=\"https://www.paloaltonetworks.com/cortex/cortex-xdr\">Cortex XDR </a>or the Next-Generation Firewall with the <a href=\"https://www.paloaltonetworks.com/products/secure-the-network/wildfire\">WildFire</a> and <a href=\"http://paloaltonetworks.com/products/secure-the-network/subscriptions/threat-prevention\">Threat Prevention</a> security subscriptions.</p>"
                },
                {
                    "id": "<sentence_0x115ca50f>",
                    "is_empty": true,
                    "have_tags": true,
                    "tags": {
                        "<img_0xf6df7d99>": "https://unit42.paloaltonetworks.com/wp-content/uploads/2022/04/Malware-r3d1.png"
                    },
                    "text": "",
                    "html": "<figure class=\"mb-30 text-center\">\n<img alt=\"A conceptual image representing malware, such as BazarLoader, often known for anti-analysis techniques\" class=\"attachment-single size-single\" height=\"450\" src=\"https://unit42.paloaltonetworks.com/wp-content/uploads/2022/04/Malware-r3d1.png\" width=\"900\"/> </figure>"
                },
                {
                    "id": "<sentence_0xd39e63d7>",
                    "is_empty": true,
                    "have_tags": true,
                    "tags": {
                        "<a_0x4d64a3da>": "https://unit42.paloaltonetworks.com/tag/bazarloader/",
                        "<a_0xf8c2bc54>": "https://unit42.paloaltonetworks.com/category/malware-2/",
                        "<a_0x48a8ee87>": "https://unit42.paloaltonetworks.com/tag/anti-analysis/",
                        "<table_0x14060c05>": {
                            "0": {
                                "0": "Primary Malware Discussed",
                                "1": "Related Unit 42 Topics"
                            },
                            "1": {
                                "0": "BazarLoader",
                                "1": "Malware  ,  anti-analysis techniques"
                            }
                        }
                    },
                    "text": "",
                    "html": "<table>\n<tbody>\n<tr>\n<td>Primary Malware Discussed</td>\n<td><a href=\"https://unit42.paloaltonetworks.com/tag/bazarloader/\">BazarLoader</a></td>\n</tr>\n<tr>\n<td>Related Unit 42 Topics</td>\n<td><a href=\"https://unit42.paloaltonetworks.com/category/malware-2/\">Malware</a>, <a href=\"https://unit42.paloaltonetworks.com/tag/anti-analysis/\">anti-analysis techniques</a></td>\n</tr>\n</tbody>\n</table>"
                }
            ]
        },
        {
            "id": "<chapter_0xd9e0b590>",
            "title": "Table of Contents",
            "title_level": 2,
            "sentences": [
                {
                    "id": "<sentence_0x477b7076>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "Reusing Malware Code to Defeat Obfuscated API Calls<crlf>Automating Opaque Predicate Removal<crlf>Malware Analysts vs Malware Authors<crlf>Indicators of Compromise<crlf>Additional Resources",
                    "html": "<p><a href=\"#Reusing-Malware-Code-to-Defeat-Obfuscated-API-Calls\">Reusing Malware Code to Defeat Obfuscated API Calls</a>\n<a href=\"#Automating-Opaque-Predicate-Removal\">Automating Opaque Predicate Removal</a>\n<a href=\"#Malware-Analysts-vs-Malware-Authors\">Malware Analysts vs Malware Authors</a>\n<a href=\"#Indicators-of-Compromise\">Indicators of Compromise</a>\n<a href=\"#Additional-Resources\">Additional Resources</a></p>"
                }
            ]
        },
        {
            "id": "<chapter_0xf2ca5974>",
            "title": "Reusing Malware Code to Defeat Obfuscated API Calls",
            "title_level": 2,
            "sentences": [
                {
                    "id": "<sentence_0x76e4a006>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "Malware compiled as native files has to call Windows API functions to carry out malicious behaviors. The information on which functions are used is usually stored in the Import Address Table (IAT) in the file. Therefore, this table is often a good place to start the analysis process to get an idea of what the malware is trying to do.",
                    "html": "<p>Malware compiled as native files has to call Windows API functions to carry out malicious behaviors. The information on which functions are used is usually stored in the Import Address Table (IAT) in the file. Therefore, this table is often a good place to start the analysis process to get an idea of what the malware is trying to do.</p>"
                },
                {
                    "id": "<sentence_0x9c61d85>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "To demonstrate, we focused on a BazarLoader sample we recently detected. After peeling away the packer layer of our BazarLoader sample, we saw that it doesnt have an IAT (see Figure 1). Also, there is no IAT constructed during execution, a technique sometimes seen in other malware. BazarLoader obfuscates its function calls to make analysis more difficult and to evade detection techniques that rely on reading the IAT.",
                    "html": "<p>To demonstrate, we focused on a BazarLoader sample we recently detected. After peeling away the packer layer of our BazarLoader sample, we saw that it doesn\u2019t have an IAT (see Figure 1). Also, there is no IAT constructed during execution, a technique sometimes seen in other malware. BazarLoader obfuscates its function calls to make analysis more difficult and to evade detection techniques that rely on reading the IAT.</p>"
                },
                {
                    "id": "<sentence_0xbf42f370>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<img_0x950960f>": "https://unit42.paloaltonetworks.com/wp-content/uploads/2022/04/word-image-33.png"
                    },
                    "text": "Figure 1. Missing IAT in BazarLoader as seen with CFF Explorer.",
                    "html": "<figure class=\"wp-caption aligncenter\" id=\"attachment_122754\"><img alt=\"BazarLoader obfuscates its function calls to make analysis more difficult and to evade detection techniques that rely on reading the IAT.\" class=\"wp-image-122754\" height=\"321\" src=\"https://unit42.paloaltonetworks.com/wp-content/uploads/2022/04/word-image-33.png\" width=\"662\"/><figcaption class=\"wp-caption-text\" id=\"caption-attachment-122754\">Figure 1. Missing IAT in BazarLoader as seen with CFF Explorer.</figcaption></figure>"
                },
                {
                    "id": "<sentence_0x9c4d4624>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "In fact, BazarLoader resolves every API function to be called individually at run time. After we figured out that the functions are resolved during execution, the following function caught our attention as it was referenced more than 300 times:",
                    "html": "<p>In fact, BazarLoader resolves every API function to be called individually at run time. After we figured out that the functions are resolved during execution, the following function caught our attention as it was referenced more than 300 times:</p>"
                },
                {
                    "id": "<sentence_0xa9b2c178>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<img_0x408b2f81>": "https://unit42.paloaltonetworks.com/wp-content/uploads/2022/04/word-image-34.png"
                    },
                    "text": "Figure 2. Function for resolving the obfuscated Windows API functions (marked in yellow).",
                    "html": "<figure class=\"wp-caption aligncenter\" id=\"attachment_122756\"><img alt=\"BazarLoader resolves every API function to be called individually at run time, as shown here. \" class=\"wp-image-122756\" height=\"443\" src=\"https://unit42.paloaltonetworks.com/wp-content/uploads/2022/04/word-image-34.png\" width=\"855\"/><figcaption class=\"wp-caption-text\" id=\"caption-attachment-122756\">Figure 2. Function for resolving the obfuscated Windows API functions (marked in yellow).</figcaption></figure>"
                },
                {
                    "id": "<sentence_0xbf4788f5>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "While most pieces of malware rely on publicly known hashing algorithms to resolve the functions addresses, the one used by BazarLoader is unique. The API function resolution procedure (sub_18000B9B0, labelled as FN_API_Decoder) requires three parameters and returns the address of the requested function.",
                    "html": "<p>While most pieces of malware rely on publicly known hashing algorithms to resolve the functions\u2019 addresses, the one used by BazarLoader is unique. The API function resolution procedure (sub_18000B9B0, labelled as FN_API_Decoder) requires three parameters and returns the address of the requested function.</p>"
                },
                {
                    "id": "<sentence_0xf7566ef4>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "Now, we could reverse engineer the algorithm used in FN_API_Decoder and reimplement it in Python to get all functions resolved. However, this would take a lot of time and we would have to repeat the whole process for every piece of malware that uses a different hashing algorithm.",
                    "html": "<p>Now, we could reverse engineer the algorithm used in FN_API_Decoder and reimplement it in Python to get all functions resolved. However, this would take a lot of time and we would have to repeat the whole process for every piece of malware that uses a different hashing algorithm.</p>"
                },
                {
                    "id": "<sentence_0xae73df19>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<a_0x8e010de5>": "https://hex-rays.com/blog/introducing-the-appcall-feature-in-ida-pro-5-6/"
                    },
                    "text": "Instead, the approach we used is independent from the hashing algorithm as it makes use of the hashing function itself. For this, we used the Appcall feature with IDAPython in IDA Pro to call FN_API_Decoder and pass it the required parameters. The result from Appcall would be the resolved address of the Windows API function. The Appcall feature used while debugging the malware allows us to execute any function from the sample as if it were a built-in function.",
                    "html": "<p>Instead, the approach we used is independent from the hashing algorithm as it makes use of the hashing function itself. For this, we used the <a href=\"https://hex-rays.com/blog/introducing-the-appcall-feature-in-ida-pro-5-6/\">Appcall</a> feature with IDAPython in IDA Pro to call FN_API_Decoder and pass it the required parameters. The result from Appcall would be the resolved address of the Windows API function. The Appcall feature used while debugging the malware allows us to execute any function from the sample as if it were a built-in function.</p>"
                },
                {
                    "id": "<sentence_0x58082006>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "Using the following code, we can run FN_API_Decoder to resolve Windows API function addresses while debugging the malware process.",
                    "html": "<p>Using the following code, we can run FN_API_Decoder to resolve Windows API function addresses while debugging the malware process.</p>"
                },
                {
                    "id": "<sentence_0x46993680>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<img_0xb48203b7>": "https://unit42.paloaltonetworks.com/wp-content/uploads/2022/04/word-image-35.png"
                    },
                    "text": "Figure 3. Using Appcall with IDAPython.",
                    "html": "<figure class=\"wp-caption aligncenter\" id=\"attachment_122758\"><img alt=\"Using the code shown here, we can run FN_API_Decoder to resolve Windows API function addresses while debugging the malware process.\" class=\"wp-image-122758\" height=\"342\" src=\"https://unit42.paloaltonetworks.com/wp-content/uploads/2022/04/word-image-35.png\" width=\"894\"/><figcaption class=\"wp-caption-text\" id=\"caption-attachment-122758\">Figure 3. Using Appcall with IDAPython.</figcaption></figure>"
                },
                {
                    "id": "<sentence_0x2e8b4e1b>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "Next, we gathered all the required parameters by looking up all the cross references to FN_API_Decoder. The following code will search and extract the required parameters for resolving the API function calls.",
                    "html": "<p>Next, we gathered all the required parameters by looking up all the cross references to FN_API_Decoder. The following code will search and extract the required parameters for resolving the API function calls.</p>"
                },
                {
                    "id": "<sentence_0x41339775>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<img_0x90f8b792>": "https://unit42.paloaltonetworks.com/wp-content/uploads/2022/04/word-image-36.png"
                    },
                    "text": "Figure 4. IDAPython code to search and extract the three parameters.",
                    "html": "<figure class=\"wp-caption aligncenter\" id=\"attachment_122760\"><img alt=\"The code shown here will search and extract the required parameters for resolving the API function calls.\" class=\"wp-image-122760\" height=\"860\" src=\"https://unit42.paloaltonetworks.com/wp-content/uploads/2022/04/word-image-36.png\" width=\"771\"/><figcaption class=\"wp-caption-text\" id=\"caption-attachment-122760\">Figure 4. IDAPython code to search and extract the three parameters.</figcaption></figure>"
                },
                {
                    "id": "<sentence_0xfc94110d>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "Finally, by using the returned value from Appcall we are able to rename all the dynamic calls to the APIs to their corresponding names and apply comments:",
                    "html": "<p>Finally, by using the returned value from Appcall we are able to rename all the dynamic calls to the APIs to their corresponding names and apply comments:</p>"
                },
                {
                    "id": "<sentence_0x47de8644>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<img_0x6af743ff>": "https://unit42.paloaltonetworks.com/wp-content/uploads/2022/04/word-image-37.png"
                    },
                    "text": "Figure 5. IDAPython code to locate dynamic calls.",
                    "html": "<figure class=\"wp-caption aligncenter\" id=\"attachment_122762\"><img alt=\"By using the returned value from Appcall we are able to rename all the dynamic calls to the APIs to their corresponding names and apply comments.\" class=\"wp-image-122762\" height=\"281\" src=\"https://unit42.paloaltonetworks.com/wp-content/uploads/2022/04/word-image-37.png\" width=\"796\"/><figcaption class=\"wp-caption-text\" id=\"caption-attachment-122762\">Figure 5. IDAPython code to locate dynamic calls.</figcaption></figure>"
                },
                {
                    "id": "<sentence_0x33778b3f>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "Putting the above steps together, we deobfuscated the API function calls:",
                    "html": "<p>Putting the above steps together, we deobfuscated the API function calls:</p>"
                },
                {
                    "id": "<sentence_0x939662b3>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<img_0x9ba53ff>": "https://unit42.paloaltonetworks.com/wp-content/uploads/2022/04/word-image-38.png"
                    },
                    "text": "Figure 6. Before executing the above IDAPython scripts.",
                    "html": "<figure class=\"wp-caption aligncenter\" id=\"attachment_122764\"><img alt=\"We address anti-analysis techniques by deobfuscating the API function calls, as shown here. \" class=\"wp-image-122764\" height=\"176\" src=\"https://unit42.paloaltonetworks.com/wp-content/uploads/2022/04/word-image-38.png\" width=\"900\"/><figcaption class=\"wp-caption-text\" id=\"caption-attachment-122764\">Figure 6. Before executing the above IDAPython scripts.</figcaption></figure>"
                },
                {
                    "id": "<sentence_0x608f7d65>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<img_0x5b92d922>": "https://unit42.paloaltonetworks.com/wp-content/uploads/2022/04/word-image-39.png"
                    },
                    "text": "Figure 7. Renamed API function call with added comment.",
                    "html": "<figure class=\"wp-caption aligncenter\" id=\"attachment_122766\"><img alt=\"A second step in deobfuscating API function calls (renaming with added comment)\" class=\"wp-image-122766\" height=\"198\" src=\"https://unit42.paloaltonetworks.com/wp-content/uploads/2022/04/word-image-39.png\" width=\"900\"/><figcaption class=\"wp-caption-text\" id=\"caption-attachment-122766\">Figure 7. Renamed API function call with added comment.</figcaption></figure>"
                },
                {
                    "id": "<sentence_0x164dd7dc>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "After all the API function calls are renamed, we can now easily locate other interesting functions in the malware. For example, sub_1800155E0 is the procedure in BazarLoader that carries out code injection.",
                    "html": "<p>After all the API function calls are renamed, we can now easily locate other interesting functions in the malware. For example, sub_1800155E0 is the procedure in BazarLoader that carries out code injection.</p>"
                },
                {
                    "id": "<sentence_0xcc7bbdd9>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<img_0x391c5926>": "https://unit42.paloaltonetworks.com/wp-content/uploads/2022/04/word-image-40.png"
                    },
                    "text": "Figure 8. Before renaming API calls.",
                    "html": "<figure class=\"wp-caption aligncenter\" id=\"attachment_122768\"><img alt=\"After all the API function calls are renamed, we can now easily locate other interesting functions in the malware. For example, sub_1800155E0 is the procedure in BazarLoader that carries out code injection.\" class=\"wp-image-122768\" height=\"497\" src=\"https://unit42.paloaltonetworks.com/wp-content/uploads/2022/04/word-image-40.png\" width=\"697\"/><figcaption class=\"wp-caption-text\" id=\"caption-attachment-122768\">Figure 8. Before renaming API calls.</figcaption></figure>"
                },
                {
                    "id": "<sentence_0x6ed7dd59>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<img_0xfbf87bbe>": "https://unit42.paloaltonetworks.com/wp-content/uploads/2022/04/word-image-41.png"
                    },
                    "text": "Figure 9. Obfuscated API calls labeled with APIs related to code injection.",
                    "html": "<figure class=\"wp-caption aligncenter\" id=\"attachment_122770\"><img alt=\"Anti-analysis techniques can include obfuscated API calls, as shown here - these are labeled with APIs related to code injection.\" class=\"wp-image-122770\" height=\"510\" src=\"https://unit42.paloaltonetworks.com/wp-content/uploads/2022/04/word-image-41.png\" width=\"739\"/><figcaption class=\"wp-caption-text\" id=\"caption-attachment-122770\">Figure 9. Obfuscated API calls labeled with APIs related to code injection.</figcaption></figure>"
                },
                {
                    "id": "<sentence_0x9d664ac2>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "With the help of our IDAPython scripts, we are now able to faster assess which functionality this BazarLoader sample contains.",
                    "html": "<p>With the help of our IDAPython scripts, we are now able to faster assess which functionality this BazarLoader sample contains.</p>"
                }
            ]
        },
        {
            "id": "<chapter_0xf325c093>",
            "title": "Automating Opaque Predicate Removal",
            "title_level": 2,
            "sentences": [
                {
                    "id": "<sentence_0x68f13fc5>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "Opaque Predicate (OP) is used in BazarLoader to protect it from reverse engineering tools. OP is an expression that evaluates to either true or false at runtime. Malware authors make use of multiple OPs together with unexecuted code blocks to add complexities that static analysis tools have to deal with.",
                    "html": "<p>Opaque Predicate (OP) is used in BazarLoader to protect it from reverse engineering tools. OP is an expression that evaluates to either true or false at runtime. Malware authors make use of multiple OPs together with unexecuted code blocks to add complexities that static analysis tools have to deal with.</p>"
                },
                {
                    "id": "<sentence_0xf118abb6>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "The following disassembled code shows one of the OPs in Bazarloader:",
                    "html": "<p>The following disassembled code shows one of the OPs in Bazarloader:</p>"
                },
                {
                    "id": "<sentence_0x8679e31f>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<img_0x2c096b59>": "https://unit42.paloaltonetworks.com/wp-content/uploads/2022/04/word-image-42.png"
                    },
                    "text": "Figure 10. One example of OP in BazarLoader.",
                    "html": "<figure class=\"wp-caption aligncenter\" id=\"attachment_122772\"><img alt=\"The disassembled code shown here showns one of the opaque predicates used in BazarLoader to protect it from reverse engineering tools - one of the common anti-analysis techniques covered here. \" class=\"wp-image-122772\" height=\"526\" src=\"https://unit42.paloaltonetworks.com/wp-content/uploads/2022/04/word-image-42.png\" width=\"900\"/><figcaption class=\"wp-caption-text\" id=\"caption-attachment-122772\">Figure 10. One example of OP in BazarLoader.</figcaption></figure>"
                },
                {
                    "id": "<sentence_0x3f70d9f6>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "From the above control flow graph (CFG), the code flow wont end up in infinite loops (Figure 10, red code blocks). Therefore, the above OP will be evaluated to avoid the infinite loop.",
                    "html": "<p>From the above control flow graph (CFG), the code flow won\u2019t end up in infinite loops (Figure 10, red code blocks). Therefore, the above OP will be evaluated to avoid the infinite loop.</p>"
                },
                {
                    "id": "<sentence_0xc8709b52>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "We can demonstrate the extent of the challenge OPs pose to malware analysts. The following CFG shows the unexecuted code blocks (Figure 11, red code blocks) in one of the smaller functions (sub_18000F640) in the sample.",
                    "html": "<p>We can demonstrate the extent of the challenge OPs pose to malware analysts. The following CFG shows the unexecuted code blocks (Figure 11, red code blocks) in one of the smaller functions (sub_18000F640) in the sample.</p>"
                },
                {
                    "id": "<sentence_0x955d711d>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<img_0xd690f883>": "https://unit42.paloaltonetworks.com/wp-content/uploads/2022/04/word-image-43.png"
                    },
                    "text": "Figure 11. sub_18000F640 function in BazarLoader with unexecuted code blocks colored in red.",
                    "html": "<figure class=\"wp-caption aligncenter\" id=\"attachment_122774\"><img alt=\"Red blocks in the control flow graph shown here represent unexpected code blocks in one of the smaller functions in the BazarLoader sample. \" class=\"wp-image-122774\" height=\"1089\" src=\"https://unit42.paloaltonetworks.com/wp-content/uploads/2022/04/word-image-43.png\" width=\"900\"/><figcaption class=\"wp-caption-text\" id=\"caption-attachment-122774\">Figure 11. sub_18000F640 function in BazarLoader with unexecuted code blocks colored in red.</figcaption></figure>"
                },
                {
                    "id": "<sentence_0x1f6e7b1e>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "We could manually patch away the code blocks that are not executed as we analyze each function in the sample, but this is not very practical and takes a lot of time. Instead, we will choose a smarter way by doing it automatically.",
                    "html": "<p>We could manually patch away the code blocks that are not executed as we analyze each function in the sample, but this is not very practical and takes a lot of time. Instead, we will choose a smarter way by doing it automatically.</p>"
                },
                {
                    "id": "<sentence_0xbd718ed7>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "First, we have to locate all the OPs. The most common way to do this is to make use of the binary search mechanism in IDA Pro to find all the byte sequences of the OPs. This turns out not to be possible, as the OPs were likely generated by a compiler during the build process of the malware sample. There are just too many variants of the OPs that could be covered using the byte sequence.",
                    "html": "<p>First, we have to locate all the OPs. The most common way to do this is to make use of the binary search mechanism in IDA Pro to find all the byte sequences of the OPs. This turns out not to be possible, as the OPs were likely generated by a compiler during the build process of the malware sample. There are just too many variants of the OPs that could be covered using the byte sequence.</p>"
                },
                {
                    "id": "<sentence_0xb6738775>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "Not only do we need to locate the OPs, we also have to know the exact point when the malware sample decides to avoid the unexecuted code blocks.",
                    "html": "<p>Not only do we need to locate the OPs, we also have to know the exact point when the malware sample decides to avoid the unexecuted code blocks.</p>"
                },
                {
                    "id": "<sentence_0x73a980fc>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "Using the following code, we locate the OPs in a function:",
                    "html": "<p>Using the following code, we locate the OPs in a function:</p>"
                },
                {
                    "id": "<sentence_0xf8e3d6e3>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<img_0x92b203f9>": "https://unit42.paloaltonetworks.com/wp-content/uploads/2022/04/word-image-44.png"
                    },
                    "text": "Figure 12. IDAPython code to locate the OPs in a function.",
                    "html": "<figure class=\"wp-caption aligncenter\" id=\"attachment_122776\"><img alt=\"We need to located the OPs, as well as the exact point when the malware sample decides to avoid the unexecuted code blocks. The code shown here allows us to locate the OPs in a function. \" class=\"wp-image-122776\" height=\"461\" src=\"https://unit42.paloaltonetworks.com/wp-content/uploads/2022/04/word-image-44.png\" width=\"774\"/><figcaption class=\"wp-caption-text\" id=\"caption-attachment-122776\">Figure 12. IDAPython code to locate the OPs in a function.</figcaption></figure>"
                },
                {
                    "id": "<sentence_0x2fd852d5>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "Next, we have to patch the instructions in OPs to force the code flow away from the unexecuted code blocks.",
                    "html": "<p>Next, we have to patch the instructions in OPs to force the code flow away from the unexecuted code blocks.</p>"
                },
                {
                    "id": "<sentence_0x1215bf6d>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "Using the following code, we patch the OPs in a function:",
                    "html": "<p>Using the following code, we patch the OPs in a function:</p>"
                },
                {
                    "id": "<sentence_0xf9b6bc1e>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<img_0x92e90ea9>": "https://unit42.paloaltonetworks.com/wp-content/uploads/2022/04/word-image-45.png"
                    },
                    "text": "Figure 13. IDAPython code to patch the OPs.",
                    "html": "<figure class=\"wp-caption aligncenter\" id=\"attachment_122778\"><img alt=\"The code shown here patches the instructions in OPs to force the code flow away from the unexecuted code blocks. \" class=\"wp-image-122778\" height=\"626\" src=\"https://unit42.paloaltonetworks.com/wp-content/uploads/2022/04/word-image-45.png\" width=\"900\"/><figcaption class=\"wp-caption-text\" id=\"caption-attachment-122778\">Figure 13. IDAPython code to patch the OPs.</figcaption></figure>"
                },
                {
                    "id": "<sentence_0x15ac3ac3>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "The OPs also messed with the output of the HexRays decompiler. This is how the function (sub_18000F640) looks before the OPs are patched:",
                    "html": "<p>The OPs also messed with the output of the HexRays decompiler. This is how the function (sub_18000F640) looks before the OPs are patched:</p>"
                },
                {
                    "id": "<sentence_0xeeca8991>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<img_0x6337ce54>": "https://unit42.paloaltonetworks.com/wp-content/uploads/2022/04/word-image-46.png"
                    },
                    "text": "Figure 14. Decompiled sub_18000F640 function.",
                    "html": "<figure class=\"wp-caption aligncenter\" id=\"attachment_122780\"><img alt=\"This shows how the function (sub_18000F640) looks before the OPs are patched. \" class=\"wp-image-122780\" height=\"709\" src=\"https://unit42.paloaltonetworks.com/wp-content/uploads/2022/04/word-image-46.png\" width=\"900\"/><figcaption class=\"wp-caption-text\" id=\"caption-attachment-122780\">Figure 14. Decompiled sub_18000F640 function.</figcaption></figure>"
                },
                {
                    "id": "<sentence_0xdfad4819>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "After applying the two techniques above, we have decompiled pseudocode that is much easier to read and understand.",
                    "html": "<p>After applying the two techniques above, we have decompiled pseudocode that is much easier to read and understand.</p>"
                },
                {
                    "id": "<sentence_0x95537a63>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "After patching all the OPs and renaming the obfuscated API calls, we could then tell that the function (sub_18000F640) is just a wrapper function for GetModuleFileNameW().",
                    "html": "<p>After patching all the OPs and renaming the obfuscated API calls, we could then tell that the function (sub_18000F640) is just a wrapper function for GetModuleFileNameW().</p>"
                },
                {
                    "id": "<sentence_0x9386482f>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<img_0x1b429e67>": "https://unit42.paloaltonetworks.com/wp-content/uploads/2022/04/word-image-47.png"
                    },
                    "text": "Figure 15. Decompiled sub_18000F640 function after removing the OPs.",
                    "html": "<figure class=\"wp-caption aligncenter\" id=\"attachment_122782\"><img alt=\"After applying the two techniques described in the text to defeat anti-analysis techniques, we have decompiled pseudocode that is much easier to read and understand, as shown. \" class=\"wp-image-122782\" height=\"249\" src=\"https://unit42.paloaltonetworks.com/wp-content/uploads/2022/04/word-image-47.png\" width=\"900\"/><figcaption class=\"wp-caption-text\" id=\"caption-attachment-122782\">Figure 15. Decompiled sub_18000F640 function after removing the OPs.</figcaption></figure>"
                }
            ]
        },
        {
            "id": "<chapter_0xd9ac0f28>",
            "title": "Malware Analysts vs Malware Authors",
            "title_level": 2,
            "sentences": [
                {
                    "id": "<sentence_0xf3bd30ea>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "Malware authors often include anti-analysis techniques with the hope that they will increase the time and resources taken for malware analysts. With the above script snippets showing how to defeat these techniques for BazarLoader, you can reduce the time needed to analyze malware samples of other families that use similar techniques.",
                    "html": "<p>Malware authors often include anti-analysis techniques with the hope that they will increase the time and resources taken for malware analysts. With the above script snippets showing how to defeat these techniques for BazarLoader, you can reduce the time needed to analyze malware samples of other families that use similar techniques.</p>"
                },
                {
                    "id": "<sentence_0xef69325e>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "Palo Alto Networks customers are further protected from malware families using similar anti-analysis techniques with Cortex XDR or the Next-Generation Firewall with the WildFire and Threat Prevention cloud-delivered security subscriptions.",
                    "html": "<p>Palo Alto Networks customers are further protected from malware families using similar anti-analysis techniques with Cortex XDR or the Next-Generation Firewall with the WildFire and Threat Prevention cloud-delivered security subscriptions.</p>"
                }
            ]
        },
        {
            "id": "<chapter_0xcf62c66b>",
            "title": "Indicators of Compromise",
            "title_level": 2,
            "sentences": [
                {
                    "id": "<sentence_0x4136cc65>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "BazarLoader Sample ce5ee2fd8aa4acda24baf6221b5de66220172da0eb312705936adc5b164cc052",
                    "html": "<p>BazarLoader Sample ce5ee2fd8aa4acda24baf6221b5de66220172da0eb312705936adc5b164cc052</p>"
                }
            ]
        },
        {
            "id": "<chapter_0x8dbc1cb1>",
            "title": "Additional Resources",
            "title_level": 2,
            "sentences": [
                {
                    "id": "<sentence_0x4c253932>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<a_0xd3487fc3>": "https://github.com/pan-unit42/iocs/blob/master/Appcall_rename_api"
                    },
                    "text": "Complete IDAPython script to rename or resolve obfuscation API calls is available on GitHub.",
                    "html": "<p>Complete IDAPython script to <a href=\"https://github.com/pan-unit42/iocs/blob/master/Appcall_rename_api\">rename or resolve obfuscation API calls</a> is available on GitHub.</p>"
                },
                {
                    "id": "<sentence_0xe0460db9>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<a_0x7f5c657a>": "https://github.com/pan-unit42/iocs/blob/master/DeObfuscate_Opaque"
                    },
                    "text": "Complete IDAPython script to search and patch Opaque Predicates in a function is available on GitHub.",
                    "html": "<p>Complete IDAPython script to <a href=\"https://github.com/pan-unit42/iocs/blob/master/DeObfuscate_Opaque\">search and patch Opaque Predicates</a> in a function is available on GitHub.</p>"
                }
            ]
        },
        {
            "id": "<chapter_0x5fdde555>",
            "title": "Get updates from Palo Alto Networks!",
            "title_level": 4,
            "sentences": [
                {
                    "id": "<sentence_0x731eb551>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "Sign up to receive the latest news, cyber threat intelligence and research from us",
                    "html": "<p>Sign up to receive the latest news, cyber threat intelligence and research from us</p>"
                },
                {
                    "id": "<sentence_0x8467c4db>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "Please enter your email address!",
                    "html": "<p class=\"error-mail d-none mt-15 text-danger\">Please enter your email address!</p>"
                },
                {
                    "id": "<sentence_0xbfb3c8a9>",
                    "is_empty": false,
                    "have_tags": false,
                    "tags": {},
                    "text": "Please mark, I'm not a robot!",
                    "html": "<p class=\"error-recaptcha d-none mt-15 text-danger\">Please mark, I'm not a robot!</p>"
                },
                {
                    "id": "<sentence_0xe8c8489>",
                    "is_empty": false,
                    "have_tags": true,
                    "tags": {
                        "<a_0x5926c5a9>": "https://www.paloaltonetworks.com/legal-notices/terms-of-use",
                        "<a_0x2d0d04d3>": "https://www.paloaltonetworks.com/legal-notices/privacy"
                    },
                    "text": "By submitting this form, you agree to our Terms of Use and acknowledge our Privacy Statement.",
                    "html": "<p>By submitting this form, you agree to our <a href=\"https://www.paloaltonetworks.com/legal-notices/terms-of-use\">Terms of Use</a> and acknowledge our <a href=\"https://www.paloaltonetworks.com/legal-notices/privacy\">Privacy Statement</a>.</p>"
                }
            ]
        }
    ]
}